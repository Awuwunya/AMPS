00000000                            	include	"ErrorDebugger/Debugger.asm"
00000000                            
00000000                            ; ===============================================================
00000000                            ; ---------------------------------------------------------------
00000000                            ; Error handling and debugging modules
00000000                            ; 2016-2017, Vladikcomper
00000000                            ; ---------------------------------------------------------------
00000000                            ; Debugging macros definitions file
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000 =00000001                  isAMPS =		1		; Set to 1
00000000                            
00000000                            ; ===============================================================
00000000                            ; ---------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ----------------------------
00000000                            ; Arguments formatting flags
00000000                            ; ----------------------------
00000000                            
00000000                            ; General arguments format flags
00000000 =00000080                  hex		equ		$80				; flag to display as hexadecimal number
00000000 =00000090                  decm		equ		$90				; flag to display as decimal number
00000000 =000000A0                  bin		equ		$A0				; flag to display as binary number
00000000 =000000B0                  sym		equ		$B0				; flag to display as symbol (treat as offset, decode into symbol +displacement, if present)
00000000 =000000C0                  symdisp	equ		$C0				; flag to display as symbol's displacement alone (DO NOT USE, unless complex formatting is required, see notes below)
00000000 =000000D0                  str		equ		$D0				; flag to display as string (treat as offset, insert string from that offset)
00000000                            
00000000                            ; NOTES:
00000000                            ;	* By default, the "sym" flag displays both symbol and displacement (e.g.: "Map_Sonic+$2E")
00000000                            ;		In case, you need a different formatting for the displacement part (different text color and such),
00000000                            ;		use "sym|split", so the displacement won't be displayed until symdisp is met
00000000                            ;	* The "symdisp" can only be used after the "sym|split" instance, which decodes offset, otherwise, it'll
00000000                            ;		display a garbage offset.
00000000                            ;	* No other argument format flags (hex, dec, bin, str) are allowed between "sym|split" and "symdisp",
00000000                            ;		otherwise, the "symdisp" results are undefined.
00000000                            ;	* When using "str" flag, the argument should point to string offset that will be inserted.
00000000                            ;		Arguments format flags CAN NOT be used in the string (as no arguments are meant to be here),
00000000                            ;		only console control flags (see below).
00000000                            
00000000                            
00000000                            ; Additional flags ...
00000000                            ; ... for number formatters (hex, dec, bin)
00000000 =00000008                  signed	equ		8				; treat number as signed (display + or - before the number depending on sign)
00000000                            
00000000                            ; ... for symbol formatter (sym)
00000000 =00000008                  split	equ		8				; DO NOT write displacement (if present), skip and wait for "symdisp" flag to write it later (optional)
00000000 =00000004                  forced	equ		4				; display "<unknown>" if symbol was not found, otherwise, plain offset is displayed by the displacement formatter
00000000                            
00000000                            ; ... for symbol displacement formatter (symdisp)
00000000 =00000008                  weak	equ		8				; DO NOT write plain offset if symbol is displayed as "<unknown>"
00000000                            
00000000                            ; Argument type flags:
00000000                            ; - DO NOT USE in formatted strings processed by macros, as these are included automatically
00000000                            ; - ONLY USE when writting down strings manually with DC.B
00000000 =00000000                  byte	equ		0
00000000 =00000001                  word	equ		1
00000000 =00000003                  long	equ		3
00000000                            
00000000                            ; -----------------------
00000000                            ; Console control flags
00000000                            ; -----------------------
00000000                            
00000000                            ; Plain control flags: no arguments following
00000000 =000000E0                  endl	equ		$E0				; "End of line": flag for line break
00000000 =000000E6                  cr		equ		$E6				; "Carriage return": jump to the beginning of the line
00000000 =000000E8                  pal0	equ		$E8				; use palette line #0
00000000 =000000EA                  pal1	equ		$EA				; use palette line #1
00000000 =000000EC                  pal2	equ		$EC				; use palette line #2
00000000 =000000EE                  pal3	equ		$EE				; use palette line #3
00000000                            
00000000                            ; Parametrized control flags: followed by 1-byte argument
00000000 =000000F0                  setw	equ		$F0				; set line width: number of characters before automatic line break
00000000 =000000F4                  setoff	equ		$F4				; set tile offset: lower byte of base pattern, which points to tile index of ASCII character 00
00000000 =000000F8                  setpat	equ		$F8				; set tile pattern: high byte of base pattern, which determines palette flags and $100-tile section id
00000000 =000000FA                  setx	equ		$FA				; set x-position
00000000                            
00000000                            
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Macros
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            RaiseError &
00000000                            
00000000                            	pea		*(pc)
00000000                            	RaiseError2 \_
00000000                            	endm
00000000                            
00000000                            RaiseError2 &
00000000                            	move.w	sr, -(sp)
00000000                            	__FSTRING_GenerateArgumentsCode \string
00000000                            	jsr		ErrorHandler
00000000                            	__FSTRING_GenerateDecodedString \string
00000000                            	if strlen("\console_program")			; if console program offset is specified ...
00000000                            		dc.b	\opts+_eh_enter_console|(((*&1)^1)*_eh_align_offset)	; add flag "_eh_align_offset" if the next byte is at odd offset ...
00000000                            		even															; ... to tell Error handler to skip this byte, so it'll jump to ...
00000000                            		jmp		\console_program										; ... an aligned "jmp" instruction that calls console program itself
00000000                            	else
00000000                            		dc.b	\opts+0						; otherwise, just specify \opts for error handler, +0 will generate dc.b 0 ...
00000000                            		even								; ... in case \opts argument is empty or skipped
00000000                            	endc
00000000                            	even
00000000                            
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            Console &
00000000                            
00000000                            	if strcmp("\0","write")|strcmp("\0","writeline")
00000000                            		move.w	sr, -(sp)
00000000                            		__FSTRING_GenerateArgumentsCode \1
00000000                            		movem.l	a0-a2/d7, -(sp)
00000000                            		if (__sp>0)
00000000                            			lea		4*4(sp), a2
00000000                            		endc
00000000                            		lea		.str\@(pc), a1
00000000                            		jsr		ErrorHandler.__global__console_\0\_formatted
00000000                            		movem.l	(sp)+, a0-a2/d7
00000000                            		if (__sp>8)
00000000                            			lea		__sp(sp), sp
00000000                            		elseif (__sp>0)
00000000                            			addq.w	#__sp, sp
00000000                            		endc
00000000                            		move.w	(sp)+, sr
00000000                            		bra.w	.instr_end\@
00000000                            	.str\@:
00000000                            		__FSTRING_GenerateDecodedString \1
00000000                            		even
00000000                            	.instr_end\@:
00000000                            
00000000                            	elseif strcmp("\0","run")
00000000                            		jsr		ErrorHandler.__extern__console_only
00000000                            		jsr		\1
00000000                            		if narg<=1		; HACK
00000000                            			bra.s	*
00000000                            		endif
00000000                            
00000000                            	elseif strcmp("\0","setxy")
00000000                            		move.w	sr, -(sp)
00000000                            		movem.l	d0-d1, -(sp)
00000000                            		move.w	\2, -(sp)
00000000                            		move.w	\1, -(sp)
00000000                            		jsr		ErrorHandler.__global__console_setposasxy_stack
00000000                            		addq.w	#4, sp
00000000                            		movem.l	(sp)+, d0-d1
00000000                            		move.w	(sp)+, sr
00000000                            
00000000                            	elseif strcmp("\0","breakline")
00000000                            		move.w	sr, -(sp)
00000000                            		jsr		ErrorHandler.__global__console_startnewline
00000000                            		move.w	(sp)+, sr
00000000                            
00000000                            	else
00000000                            		inform	2,"""\0"" isn't a member of ""Console"""
00000000                            
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __ErrorMessage &
00000000                            		__FSTRING_GenerateArgumentsCode \string
00000000                            		jsr		ErrorHandler
00000000                            		__FSTRING_GenerateDecodedString \string
00000000                            		dc.b	\opts+0
00000000                            		even
00000000                            
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __FSTRING_GenerateArgumentsCode &
00000000                            
00000000                            	__pos:	set 	instr(\string,'%<')		; token position
00000000                            	__stack:set		0						; size of actual stack
00000000                            	__sp:	set		0						; stack displacement
00000000                            
00000000                            	; Parse string itself
00000000                            	while (__pos)
00000000                            
00000000                            		; Retrive expression in brackets following % char
00000000                                	__endpos:	set		instr(__pos+1,\string,'>')
00000000                                	__midpos:	set		instr(__pos+5,\string,' ')
00000000                                	if (__midpos<1)|(__midpos>__endpos)
00000000                            			__midpos: = __endpos
00000000                                	endc
00000000                            		__substr:	substr	__pos+1+1,__endpos-1,\string			; .type ea param
00000000                            		__type:		substr	__pos+1+1,__pos+1+1+1,\string			; .type
00000000                            
00000000                            		; Expression is an effective address (e.g. %(.w d0 hex) )
00000000                            		if "\__type">>8="."
00000000                            			__operand:	substr	__pos+1+1,__midpos-1,\string			; .type ea
00000000                            			__param:	substr	__midpos+1,__endpos-1,\string			; param
00000000                            
00000000                            			if "\__type"=".b"
00000000                            				pushp	"move\__operand\,1(sp)"
00000000                            				pushp	"subq.w	#2, sp"
00000000                            				__stack: = __stack+2
00000000                            				__sp: = __sp+2
00000000                            
00000000                            			elseif "\__type"=".w"
00000000                            				pushp	"move\__operand\,-(sp)"
00000000                            				__stack: = __stack+1
00000000                            				__sp: = __sp+2
00000000                            
00000000                            			elseif "\__type"=".l"
00000000                            				pushp	"move\__operand\,-(sp)"
00000000                            				__stack: = __stack+1
00000000                            				__sp: = __sp+4
00000000                            
00000000                            			else
00000000                            				fatal 'Unrecognized type in string operand: %<\__substr>'
00000000                            			endc
00000000                            		endc
00000000                            
00000000                            		__pos:	set		instr(__pos+1,\string,'%<')
00000000                            	endw
00000000                            
00000000                            	; Generate stack code
00000000                            	rept __stack
00000000                            		popp	__command
00000000                            		\__command
00000000                            	endr
00000000                            
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __FSTRING_GenerateDecodedString &
00000000                            
00000000                            	__lpos:	set		1						; start position
00000000                            	__pos:	set 	instr(\string,'%<')		; token position
00000000                            
00000000                            	while (__pos)
00000000                            
00000000                            		; Write part of string before % token
00000000                            		__substr:	substr	__lpos,__pos-1,\string
00000000                            		dc.b	"\__substr"
00000000                            
00000000                            		; Retrive expression in brakets following % char
00000000                                	__endpos:	set		instr(__pos+1,\string,'>')
00000000                                	__midpos:	set		instr(__pos+5,\string,' ')
00000000                                	if (__midpos<1)|(__midpos>__endpos)
00000000                            			__midpos: = __endpos
00000000                                	endc
00000000                            		__type:		substr	__pos+1+1,__pos+1+1+1,\string			; .type
00000000                            
00000000                            		; Expression is an effective address (e.g. %<.w d0 hex> )
00000000                            		if "\__type">>8="."
00000000                            			__param:	substr	__midpos+1,__endpos-1,\string			; param
00000000                            			if strlen("\__param")<1
00000000                            				__param: substr ,,"hex"			; if param is ommited, set it to "hex"
00000000                            			endc
00000000                            			if "\__type"=".b"
00000000                            				dc.b	\__param
00000000                            			elseif "\__type"=".w"
00000000                            				dc.b	\__param|1
00000000                            			else
00000000                            				dc.b	\__param|3
00000000                            			endc
00000000                            
00000000                            		; Expression is an inline constant (e.g. %<endl> )
00000000                            		else
00000000                            			__substr:	substr	__pos+1+1,__endpos-1,\string
00000000                            			dc.b	\__substr
00000000                            		endc
00000000                            
00000000                            		__lpos:	set		__endpos+1
00000000                            		__pos:	set		instr(__pos+1,\string,'%<')
00000000                            	endw
00000000                            
00000000                            	; Write part of string before the end
00000000                            	__substr:	substr	__lpos,,\string
00000000                            	dc.b	"\__substr"
00000000                            	dc.b	0
00000000                            
00000000                            	endm
00000000                            	include "code/macro.asm"
00000000                            	opt ae+		; automatic even's
00000000                            	opt l+		; . is local lable symbol
00000000                            	opt w-		; don't print warnings
00000000                            	opt oz+		; optimize zero displacements
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	if narg>=2
00000000                            		cnop \2,\1
00000000                            	else
00000000                            		cnop 0,\1
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; ===========================================================================
00000000                            vdpComm		macro ins,addr,type,rwd,end,end2
00000000                            	if narg=5
00000000                            		\ins #(((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14), \end
00000000                            
00000000                            	elseif narg=6
00000000                            		\ins #(((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))\end, \end2
00000000                            
00000000                            	else
00000000                            		\ins (((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14)
00000000                            	endif
00000000                                endm
00000000                            
00000000                            vdpCoord	macro x,y,rwd
00000000                            	vdpComm move.l,($C000+(\x*2)+(\y*$80)),VRAM,\rwd,(a6)
00000000                                endm
00000000                            
00000000                            ; ===========================================================================
00000000                            ; values for the type argument
00000000 =00000021                  VRAM =  %100001
00000000 =0000002B                  CRAM =  %101011
00000000 =00000025                  VSRAM = %100101
00000000                            
00000000                            ; values for the rwd argument
00000000 =0000000C                  READ =  %001100
00000000 =00000007                  WRITE = %000111
00000000 =00000027                  DMA =   %100111
00000000                            
00000000                            ; ===========================================================================
00000000                            ; tells the VDP to copy a region of 68k memory to VRAM or CRAM or VSRAM
00000000                            dma68kToVDP macro source,dest,length,type
00000000                            		move.l	#(($9400|((((length)>>1)&$FF00)>>8))<<16)|($9300|(((length)>>1)&$FF)),(a6)
00000000                            		move.l	#(($9600|((((source)>>1)&$FF00)>>8))<<16)|($9500|(((source)>>1)&$FF)),(a6)
00000000                            		move.w	#$9700|(((((source)>>1)&$FF0000)>>16)&$7F),(a6)
00000000                            	vdpComm	move.l,\dest,\type,DMA,(a6)
00000000                                endm
00000000                            
00000000                            ; ===========================================================================
00000000                            ; tells the VDP to fill a region of VRAM with a certain byte
00000000                            dmaFillVRAM macro byte,addr,length,wait
00000000                            	move.w	#$8F01,(a6) ; VRAM pointer increment: $0001
00000000                            	move.l	#(($9400|((((length)-1)&$FF00)>>8))<<16)|($9300|(((length)-1)&$FF)),(a6) ; DMA length ...
00000000                            	move.w	#$9780,(a6) ; VRAM fill
00000000                            	move.l	#$40000080|(((addr)&$3FFF)<<16)|(((addr)&$C000)>>14),(a6) ; Start at ...
00000000                            	move.w	#(byte)<<8,(a5) ; Fill with byte
00000000                            
00000000                            	if narg<4
00000000                            .loop\@		move.w	(a5),d1
00000000                            		btst	#1,d1
00000000                            		bne.s	.loop\@	; busy loop until the VDP is finished filling...
00000000                            		move.w	#$8F02,(a5) ; VRAM pointer increment: $0002
00000000                            	endif
00000000                                endm
00000000                            
00000000                            ; ===========================================================================
00000000                            ; allows you to declare string to be converted to character map or mappings
00000000                            asc2	macro	or, str
00000000                            	dc.W strlen(\str)-1
00000000                            	asc	\or, \str
00000000                                endm
00000000                            
00000000                            asc	macro	or, str
00000000                            .lc = 0
00000000                            	rept strlen(\str)
00000000                            .cc		substr .lc+1,.lc+1,\str
00000000                            
00000000                            		if '\.cc'=' '
00000000                            			dc.\0 0|or			; whitespace
00000000                            
00000000                            		elseif ('\.cc'>='0')&('\.cc'<='9')
00000000                            			dc.\0 ('\.cc'-'0'+1)|or		; 0-9
00000000                            
00000000                            		elseif ('\.cc'>='a')&('\.cc'<='z')
00000000                            			dc.\0 ('\.cc'-'a'+$2B)|or	; a-z
00000000                            
00000000                            		elseif ('\.cc'>='A')&('\.cc'<='Z')
00000000                            			dc.\0 ('\.cc'-'A'+$B)|or	; A-Z
00000000                            
00000000                            		elseif '\.cc'='!'
00000000                            			dc.\0 $25|or	; !
00000000                            
00000000                            		elseif '\.cc'='?'
00000000                            			dc.\0 $26|or	; ?
00000000                            
00000000                            		elseif '\.cc'='.'
00000000                            			dc.\0 $27|or	; .
00000000                            
00000000                            		elseif '\.cc'=','
00000000                            			dc.\0 $28|or	; ,
00000000                            
00000000                            		elseif '\.cc'=':'
00000000                            			dc.\0 $29|or	; :
00000000                            
00000000                            		elseif '\.cc'=';'
00000000                            			dc.\0 $2A|or	; ;
00000000                            
00000000                            		elseif '\.cc'='^'
00000000                            			dc.\0 $45|or	; ^
00000000                            
00000000                            		elseif '\.cc'='/'
00000000                            			dc.\0 $46|or	; /
00000000                            
00000000                            		elseif '\.cc'='\\'
00000000                            			dc.\0 $47|or	; \
00000000                            
00000000                            		elseif '\.cc'='*'
00000000                            			dc.\0 $48|or	; *
00000000                            
00000000                            		elseif '\.cc'='-'
00000000                            			dc.\0 $49|or	; -
00000000                            
00000000                            		elseif '\.cc'='|'
00000000                            			dc.\0 $4A|or	; _ (wider)
00000000                            
00000000                            		elseif '\.cc'='$'
00000000                            			dc.\0 $4B|or	; $
00000000                            
00000000                            		elseif '\.cc'='%'
00000000                            			dc.\0 $4C|or	; %
00000000                            
00000000                            		elseif '\.cc'='#'
00000000                            			dc.\0 $4D|or	; #
00000000                            
00000000                            		elseif '\.cc'='+'
00000000                            			dc.\0 $4E|or	; +
00000000                            
00000000                            		elseif '\.cc'='}'
00000000                            			dc.\0 $4F|or	; ->
00000000                            
00000000                            		elseif '\.cc'='{'
00000000                            			dc.\0 $50|or	; <-
00000000                            
00000000                            		elseif '\.cc'='@'
00000000                            			dc.\0 $51|or	; @
00000000                            
00000000                            		elseif '\.cc'='_'
00000000                            			dc.\0 $52|or	; _
00000000                            
00000000                            		elseif '\.cc'='('
00000000                            			dc.\0 $53|or	; (
00000000                            
00000000                            		elseif '\.cc'=')'
00000000                            			dc.\0 $54|or	; )
00000000                            
00000000                            		elseif '\.cc'='['
00000000                            			dc.\0 $55|or	; [
00000000                            
00000000                            		elseif '\.cc'=']'
00000000                            			dc.\0 $56|or	; ]
00000000                            
00000000                            		elseif '\.cc'='>'
00000000                            			dc.\0 $57|or	; >
00000000                            
00000000                            		elseif '\.cc'='<'
00000000                            			dc.\0 $58|or	; <
00000000                            
00000000                            		elseif '\.cc'='&'
00000000                            			dc.\0 $59|or	; &
00000000                            
00000000                            		elseif '\.cc'='~'
00000000                            			dc.\0 $5A|or	; ~
00000000                            
00000000                            		elseif '\.cc'="'"
00000000                            			dc.\0 $5B|or	; '
00000000                            
00000000                            		elseif '\.cc'='"'
00000000                            			dc.\0 $5C|or	; "
00000000                            
00000000                            		elseif '\.cc'='='
00000000                            			dc.\0 $5D|or	; =
00000000                            
00000000                            		elseif '\.cc'='`'
00000000                            			dc.\0 $5E|or	; `
00000000                            
00000000                            		else
00000000                            			inform 2,"ASCII value failure: \.cc %d", .cc
00000000                            		endif
00000000                            
00000000                            .lc =		.lc+1
00000000                            	endr
00000000                                endm
00000000                            
00000000                            ; ===========================================================================
00000000                            ; Z80 addresses
00000000 =00A00000                  Z80_RAM =			$A00000 ; start of Z80 RAM
00000000 =00A02000                  Z80_RAM_end =			$A02000 ; end of non-reserved Z80 RAM
00000000 =00A11100                  Z80_bus_request =		$A11100
00000000 =00A11200                  Z80_reset =			$A11200
00000000                            
00000000 =00A130F1                  SRAM_access =			$A130F1
00000000 =00A14000                  Security_addr =			$A14000
00000000                            ; ===========================================================================
00000000                            ; I/O Area
00000000 =00A10001                  HW_Version =			$A10001
00000000 =00A10003                  HW_Port_1_Data =		$A10003
00000000 =00A10005                  HW_Port_2_Data =		$A10005
00000000 =00A10007                  HW_Expansion_Data =		$A10007
00000000 =00A10009                  HW_Port_1_Control =		$A10009
00000000 =00A1000B                  HW_Port_2_Control =		$A1000B
00000000 =00A1000D                  HW_Expansion_Control =		$A1000D
00000000 =00A1000F                  HW_Port_1_TxData =		$A1000F
00000000 =00A10011                  HW_Port_1_RxData =		$A10011
00000000 =00A10013                  HW_Port_1_SCtrl =		$A10013
00000000 =00A10015                  HW_Port_2_TxData =		$A10015
00000000 =00A10017                  HW_Port_2_RxData =		$A10017
00000000 =00A10019                  HW_Port_2_SCtrl =		$A10019
00000000 =00A1001B                  HW_Expansion_TxData =		$A1001B
00000000 =00A1001D                  HW_Expansion_RxData =		$A1001D
00000000 =00A1001F                  HW_Expansion_SCtrl =		$A1001F
00000000                            
00000000                            ; ===========================================================================
00000000                            ; VDP addresses
00000000 =00C00000                  VDP_data_port =			$C00000
00000000 =00C00004                  VDP_control_port =		$C00004
00000000 =00C00011                  PSG_input =			$C00011
00000000                            
00000000                            ; ===========================================================================
00000000                            ; Mega-EverDrive
00000000 =00A130E2                  MED_USB_IO =	$A130E2
00000000 =00A130E4                  MED_USB_STAT =	$A130E4
00000000 =00A130F0                  MED_MAP_CTRL =	$A130F0
00000000                            
00000000                            ; ===========================================================================
00000000                            	rsset $FFFF0000
00000000 =FFFF0000                  Buffer		rs.b $8100	; general purpose buffers
00000000 =FFFF8100                  Drvmem		rs.b $700	; sound driver memroy
00000000                            		rs.b $100	; stack data
00000000 =FFFF8900                  Stack		rs.w 0		; stack start
00000000 =FFFF8900                  Palette		rs.w $40	; palette
00000000 =FFFF8980                  DMAlen		rs.w 1		; dma length
00000000 =FFFF8982                  Frame		rs.w 1		; current frame
00000000 =FFFF8984                  Ctrl1Hold	rs.b 1		; controller 1 held buttons
00000000 =FFFF8985                  Ctrl1Press	rs.b 1		; controller 1 pressed buttons
00000000 =FFFF8986                  Ctrl2Hold	rs.b 1		; controller 2 held buttons
00000000 =FFFF8987                  Ctrl2Press	rs.b 1		; controller 2 pressed buttons
00000000 =FFFF8988                  MusSel		rs.b 1		; selected music
00000000 =FFFF8989                  MusPlay		rs.b 1		; music currently playing
00000000 =FFFF898A                  Region		rs.b 1		; system region
00000000                            ; ===========================================================================
00000000                            	include "driver/code/smps2asm.asm"
00000000                            ; ===============================================
00000000                            ; Based on Flamewing's SMPS2ASM, and S1SMPS2ASM by Marc (AKA Cinossu)
00000000                            ; Reworked and improved by Natsumi
00000000                            ; ===============================================
00000000                            ; this macro is created to emulate enum in AS
00000000                            enum	macro	num, lable
00000000                            ; copy initial number for referencing later
00000000                            .num	= num
00000000                            	rept narg-1
00000000                            \lable		set .num
00000000                            .num =	.num+1
00000000                            	shift
00000000                            	endr
00000000                                endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000                            	enum $80+0, nRst
00000000 =00000080                M .num	=	num
00000000                          M 	rept	narg-1
00000000 =00000080                M nrst	set	.num
00000000 =00000081                M .num	=	.num+1
00000000                          M 	shift
00000000                            	enum nRst+1,nC0,nCs0,nD0,nEb0,nE0,nF0,nFs0,nG0,nAb0,nA0,nBb0,nB0
00000000 =00000081                M .num	=	num
00000000                          M 	rept	narg-1
00000000 =00000081                M nc0	set	.num
00000000 =00000082                M .num	=	.num+1
00000000                          M 	shift
00000000 =00000082                M ncs0	set	.num
00000000 =00000083                M .num	=	.num+1
00000000                          M 	shift
00000000 =00000083                M nd0	set	.num
00000000 =00000084                M .num	=	.num+1
00000000                          M 	shift
00000000 =00000084                M neb0	set	.num
00000000 =00000085                M .num	=	.num+1
00000000                          M 	shift
00000000 =00000085                M ne0	set	.num
00000000 =00000086                M .num	=	.num+1
00000000                          M 	shift
00000000 =00000086                M nf0	set	.num
00000000 =00000087                M .num	=	.num+1
00000000                          M 	shift
00000000 =00000087                M nfs0	set	.num
00000000 =00000088                M .num	=	.num+1
00000000                          M 	shift
00000000 =00000088                M ng0	set	.num
00000000 =00000089                M .num	=	.num+1
00000000                          M 	shift
00000000 =00000089                M nab0	set	.num
00000000 =0000008A                M .num	=	.num+1
00000000                          M 	shift
00000000 =0000008A                M na0	set	.num
00000000 =0000008B                M .num	=	.num+1
00000000                          M 	shift
00000000 =0000008B                M nbb0	set	.num
00000000 =0000008C                M .num	=	.num+1
00000000                          M 	shift
00000000 =0000008C                M nb0	set	.num
00000000 =0000008D                M .num	=	.num+1
00000000                          M 	shift
00000000                            	enum nB0+1, nC1,nCs1,nD1,nEb1,nE1,nF1,nFs1,nG1,nAb1,nA1,nBb1,nB1
00000000 =0000008D                M .num	=	num
00000000                          M 	rept	narg-1
00000000 =0000008D                M nc1	set	.num
00000000 =0000008E                M .num	=	.num+1
00000000                          M 	shift
00000000 =0000008E                M ncs1	set	.num
00000000 =0000008F                M .num	=	.num+1
00000000                          M 	shift
00000000 =0000008F                M nd1	set	.num
00000000 =00000090                M .num	=	.num+1
00000000                          M 	shift
00000000 =00000090                M neb1	set	.num
00000000 =00000091                M .num	=	.num+1
00000000                          M 	shift
00000000 =00000091                M ne1	set	.num
00000000 =00000092                M .num	=	.num+1
00000000                          M 	shift
00000000 =00000092                M nf1	set	.num
00000000 =00000093                M .num	=	.num+1
00000000                          M 	shift
00000000 =00000093                M nfs1	set	.num
00000000 =00000094                M .num	=	.num+1
00000000                          M 	shift
00000000 =00000094                M ng1	set	.num
00000000 =00000095                M .num	=	.num+1
00000000                          M 	shift
00000000 =00000095                M nab1	set	.num
00000000 =00000096                M .num	=	.num+1
00000000                          M 	shift
00000000 =00000096                M na1	set	.num
00000000 =00000097                M .num	=	.num+1
00000000                          M 	shift
00000000 =00000097                M nbb1	set	.num
00000000 =00000098                M .num	=	.num+1
00000000                          M 	shift
00000000 =00000098                M nb1	set	.num
00000000 =00000099                M .num	=	.num+1
00000000                          M 	shift
00000000                            	enum nB1+1, nC2,nCs2,nD2,nEb2,nE2,nF2,nFs2,nG2,nAb2,nA2,nBb2,nB2
00000000 =00000099                M .num	=	num
00000000                          M 	rept	narg-1
00000000 =00000099                M nc2	set	.num
00000000 =0000009A                M .num	=	.num+1
00000000                          M 	shift
00000000 =0000009A                M ncs2	set	.num
00000000 =0000009B                M .num	=	.num+1
00000000                          M 	shift
00000000 =0000009B                M nd2	set	.num
00000000 =0000009C                M .num	=	.num+1
00000000                          M 	shift
00000000 =0000009C                M neb2	set	.num
00000000 =0000009D                M .num	=	.num+1
00000000                          M 	shift
00000000 =0000009D                M ne2	set	.num
00000000 =0000009E                M .num	=	.num+1
00000000                          M 	shift
00000000 =0000009E                M nf2	set	.num
00000000 =0000009F                M .num	=	.num+1
00000000                          M 	shift
00000000 =0000009F                M nfs2	set	.num
00000000 =000000A0                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000A0                M ng2	set	.num
00000000 =000000A1                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000A1                M nab2	set	.num
00000000 =000000A2                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000A2                M na2	set	.num
00000000 =000000A3                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000A3                M nbb2	set	.num
00000000 =000000A4                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000A4                M nb2	set	.num
00000000 =000000A5                M .num	=	.num+1
00000000                          M 	shift
00000000                            	enum nB2+1, nC3,nCs3,nD3,nEb3,nE3,nF3,nFs3,nG3,nAb3,nA3,nBb3,nB3
00000000 =000000A5                M .num	=	num
00000000                          M 	rept	narg-1
00000000 =000000A5                M nc3	set	.num
00000000 =000000A6                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000A6                M ncs3	set	.num
00000000 =000000A7                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000A7                M nd3	set	.num
00000000 =000000A8                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000A8                M neb3	set	.num
00000000 =000000A9                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000A9                M ne3	set	.num
00000000 =000000AA                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000AA                M nf3	set	.num
00000000 =000000AB                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000AB                M nfs3	set	.num
00000000 =000000AC                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000AC                M ng3	set	.num
00000000 =000000AD                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000AD                M nab3	set	.num
00000000 =000000AE                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000AE                M na3	set	.num
00000000 =000000AF                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000AF                M nbb3	set	.num
00000000 =000000B0                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000B0                M nb3	set	.num
00000000 =000000B1                M .num	=	.num+1
00000000                          M 	shift
00000000                            	enum nB3+1, nC4,nCs4,nD4,nEb4,nE4,nF4,nFs4,nG4,nAb4,nA4,nBb4,nB4
00000000 =000000B1                M .num	=	num
00000000                          M 	rept	narg-1
00000000 =000000B1                M nc4	set	.num
00000000 =000000B2                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000B2                M ncs4	set	.num
00000000 =000000B3                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000B3                M nd4	set	.num
00000000 =000000B4                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000B4                M neb4	set	.num
00000000 =000000B5                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000B5                M ne4	set	.num
00000000 =000000B6                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000B6                M nf4	set	.num
00000000 =000000B7                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000B7                M nfs4	set	.num
00000000 =000000B8                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000B8                M ng4	set	.num
00000000 =000000B9                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000B9                M nab4	set	.num
00000000 =000000BA                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000BA                M na4	set	.num
00000000 =000000BB                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000BB                M nbb4	set	.num
00000000 =000000BC                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000BC                M nb4	set	.num
00000000 =000000BD                M .num	=	.num+1
00000000                          M 	shift
00000000                            	enum nB4+1, nC5,nCs5,nD5,nEb5,nE5,nF5,nFs5,nG5,nAb5,nA5,nBb5,nB5
00000000 =000000BD                M .num	=	num
00000000                          M 	rept	narg-1
00000000 =000000BD                M nc5	set	.num
00000000 =000000BE                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000BE                M ncs5	set	.num
00000000 =000000BF                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000BF                M nd5	set	.num
00000000 =000000C0                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000C0                M neb5	set	.num
00000000 =000000C1                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000C1                M ne5	set	.num
00000000 =000000C2                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000C2                M nf5	set	.num
00000000 =000000C3                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000C3                M nfs5	set	.num
00000000 =000000C4                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000C4                M ng5	set	.num
00000000 =000000C5                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000C5                M nab5	set	.num
00000000 =000000C6                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000C6                M na5	set	.num
00000000 =000000C7                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000C7                M nbb5	set	.num
00000000 =000000C8                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000C8                M nb5	set	.num
00000000 =000000C9                M .num	=	.num+1
00000000                          M 	shift
00000000                            	enum nB5+1, nC6,nCs6,nD6,nEb6,nE6,nF6,nFs6,nG6,nAb6,nA6,nBb6,nB6
00000000 =000000C9                M .num	=	num
00000000                          M 	rept	narg-1
00000000 =000000C9                M nc6	set	.num
00000000 =000000CA                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000CA                M ncs6	set	.num
00000000 =000000CB                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000CB                M nd6	set	.num
00000000 =000000CC                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000CC                M neb6	set	.num
00000000 =000000CD                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000CD                M ne6	set	.num
00000000 =000000CE                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000CE                M nf6	set	.num
00000000 =000000CF                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000CF                M nfs6	set	.num
00000000 =000000D0                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000D0                M ng6	set	.num
00000000 =000000D1                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000D1                M nab6	set	.num
00000000 =000000D2                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000D2                M na6	set	.num
00000000 =000000D3                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000D3                M nbb6	set	.num
00000000 =000000D4                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000D4                M nb6	set	.num
00000000 =000000D5                M .num	=	.num+1
00000000                          M 	shift
00000000                            	enum nB6+1, nC7,nCs7,nD7,nEb7,nE7,nF7,nFs7,nG7,nAb7,nA7,nBb7
00000000 =000000D5                M .num	=	num
00000000                          M 	rept	narg-1
00000000 =000000D5                M nc7	set	.num
00000000 =000000D6                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000D6                M ncs7	set	.num
00000000 =000000D7                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000D7                M nd7	set	.num
00000000 =000000D8                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000D8                M neb7	set	.num
00000000 =000000D9                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000D9                M ne7	set	.num
00000000 =000000DA                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000DA                M nf7	set	.num
00000000 =000000DB                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000DB                M nfs7	set	.num
00000000 =000000DC                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000DC                M ng7	set	.num
00000000 =000000DD                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000DD                M nab7	set	.num
00000000 =000000DE                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000DE                M na7	set	.num
00000000 =000000DF                M .num	=	.num+1
00000000                          M 	shift
00000000 =000000DF                M nbb7	set	.num
00000000 =000000E0                M .num	=	.num+1
00000000                          M 	shift
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG volume envelope equates
00000000 =00000000                  v00 =	$00
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000                            sHeaderInit	macro
00000000                            sPointZero =	*
00000000                            sPatNum =	0
00000000                                endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            sHeaderCh	macro fm,psg
00000000                            	dc.b \fm-1
00000000                            	if narg=2
00000000                            		if \fm>5
00000000                            			inform 2,"You sure there are \fm FM channels?"
00000000                            		endif
00000000                            		dc.b \psg-1
00000000                            		if \psg>3
00000000                            			inform 2,"You sure there are \psg PSG channels?"
00000000                            		endif
00000000                            	endif
00000000                                endm
00000000                            
00000000                            ; Header - Set up Tempo and Tick Multiplier
00000000                            sHeaderTempo	macro tmul,tempo
00000000                            	dc.b \tmul-1,\tempo
00000000                                endm
00000000                            
00000000                            ; Header - Set priority leve
00000000                            sHeaderPrio	macro prio
00000000                            	dc.b \prio
00000000                                endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            sHeaderDAC	macro loc,vol,samp
00000000                            	dc.w \loc-sPointZero
00000000                            	if narg>=2
00000000                            		dc.b \vol
00000000                            		if narg>=3
00000000                            			dc.b \samp
00000000                            		else
00000000                            			dc.b $00
00000000                            		endif
00000000                            	else
00000000                            		dc.w $00
00000000                            	endif
00000000                                endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            sHeaderFM	macro loc,pitch,vol
00000000                            	dc.w \loc-sPointZero
00000000                            	dc.b \pitch,\vol
00000000                                endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            sHeaderPSG	macro loc,pitch,vol,detune,volenv
00000000                            	dc.w \loc-sPointZero
00000000                            	dc.b \pitch,\vol,\detune,\volenv
00000000                                endm
00000000                            
00000000                            ; Header - Set up SFX Channel
00000000                            sHeaderSFX	macro flags,type,loc,pitch,vol
00000000                            	dc.b \flags,\type
00000000                            	dc.w \loc-sPointZero
00000000                            	dc.b \pitch,\vol
00000000                                endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Command Flag Macros and Equates. Based on the original s1smps2asm, and Flamewing's smps2asm
00000000 =00000000                  spNone set $00
00000000 =00000040                  spRight set $40
00000000 =00000080                  spLeft set $80
00000000 =000000C0                  spCentre set $C0
00000000 =000000C0                  spCenter set $C0
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Patches - Feedback
00000000                            
00000000                            ; Patches - Algorithm
00000000                            spAlgorithm macro val, name
00000000                            	if (sPatNum<>0)&(safe=0)
00000000                            		; align the patch
00000000                            		dc.b (*^(sPatNum*spTL4))&$FF
00000000                            		dc.b ((*>>8)+(spDe3*spDR3))&$FF
00000000                            		dc.b ((*>>16)-(spTL1*spRR3))&$FF
00000000                            	endif
00000000                            	if narg>1
00000000                            p\name =	sPatNum
00000000                            	endif
00000000                            sPatNum =	sPatNum+1
00000000                            spAl	= val
00000000                                endm
00000000                            
00000000                            spFeedback macro val
00000000                            spFe	= val
00000000                                endm
00000000                            
00000000                            ; Patches - Detune
00000000                            spDetune macro op1,op2,op3,op4
00000000                            spDe1	= op1
00000000                            spDe2	= op2
00000000                            spDe3	= op3
00000000                            spDe4	= op4
00000000                                endm
00000000                            
00000000                            ; Patches - Multiple
00000000                            spMultiple macro op1,op2,op3,op4
00000000                            spMu1	= op1
00000000                            spMu2	= op2
00000000                            spMu3	= op3
00000000                            spMu4	= op4
00000000                                endm
00000000                            
00000000                            ; Patches - Rate Scale
00000000                            spRateScale macro op1,op2,op3,op4
00000000                            spRS1	= op1
00000000                            spRS2	= op2
00000000                            spRS3	= op3
00000000                            spRS4	= op4
00000000                                endm
00000000                            
00000000                            ; Patches - Attack Rate
00000000                            spAttackRt macro op1,op2,op3,op4
00000000                            spAR1	= op1
00000000                            spAR2	= op2
00000000                            spAR3	= op3
00000000                            spAR4	= op4
00000000                                endm
00000000                            
00000000                            ; Patches - Amplitude Modulation
00000000                            spAmpMod macro op1,op2,op3,op4
00000000                            spAM1	= op1
00000000                            spAM2	= op2
00000000                            spAM3	= op3
00000000                            spAM4	= op4
00000000                                endm
00000000                            
00000000                            ; Patches - Sustain Rate
00000000                            spSustainRt macro op1,op2,op3,op4
00000000                            spSR1	= op1		; Also known as decay 1 rate
00000000                            spSR2	= op2
00000000                            spSR3	= op3
00000000                            spSR4	= op4
00000000                                endm
00000000                            
00000000                            ; Patches - Sustain Level
00000000                            spSustainLv macro op1,op2,op3,op4
00000000                            spSL1	= op1		; also known as decay 1 level
00000000                            spSL2	= op2
00000000                            spSL3	= op3
00000000                            spSL4	= op4
00000000                                endm
00000000                            
00000000                            ; Patches - Decay Rate
00000000                            spDecayRt macro op1,op2,op3,op4
00000000                            spDR1	= op1		; Also known as decay 2 rate
00000000                            spDR2	= op2
00000000                            spDR3	= op3
00000000                            spDR4	= op4
00000000                                endm
00000000                            
00000000                            ; Patches - Release Rate
00000000                            spReleaseRt macro op1,op2,op3,op4
00000000                            spRR1	= op1
00000000                            spRR2	= op2
00000000                            spRR3	= op3
00000000                            spRR4	= op4
00000000                                endm
00000000                            
00000000                            ; Patches - SSG-EG
00000000                            spSSGEG macro op1,op2,op3,op4
00000000                            spSS1	= op1
00000000                            spSS2	= op2
00000000                            spSS3	= op3
00000000                            spSS4	= op4
00000000                                endm
00000000                            
00000000                            ; Patches - Total Level
00000000                            spTotalLv macro op1,op2,op3,op4
00000000                            spTL1	= op1
00000000                            spTL2	= op2
00000000                            spTL3	= op3
00000000                            spTL4	= op4
00000000                            ; Construct the patch finally.
00000000                            	dc.b	(spFe<<3)+spAl
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            spTLMask4 set $80
00000000                            spTLMask2 set ((spAl>=5)<<7)
00000000                            spTLMask3 set ((spAl>=4)<<7)
00000000                            spTLMask1 set ((spAl=7)<<7)
00000000                            	dc.b (spDe1<<4)+spMu1, (spDe3<<4)+spMu3, (spDe2<<4)+spMu2, (spDe4<<4)+spMu4
00000000                            	dc.b (spRS1<<6)+spAR1, (spRS3<<6)+spAR3, (spRS2<<6)+spAR2, (spRS4<<6)+spAR4
00000000                            	dc.b (spAM1<<7)+spSR1, (spAM3<<7)+spsR3, (spAM2<<7)+spSR2, (spAM4<<7)+spSR4
00000000                            	dc.b spDR1,            spDR3,            spDR2,            spDR4
00000000                            	dc.b (spSL1<<4)+spRR1, (spSL3<<4)+spRR3, (spSL2<<4)+spRR2, (spSL4<<4)+spRR4
00000000                            	dc.b spSS1,            spSS3,            spSS2,            spSS4
00000000                            	dc.b spTL1|spTLMask1,  spTL3|spTLMask3,  spTL2|spTLMask2,  spTL4|spTLMask4
00000000                            	if safe=1
00000000                            		dc.b 'NAT'	; align the patch
00000000                            	endif
00000000                                endm
00000000                            
00000000                            ; Patches - Total Level (for broken total level masks)
00000000                            spTotalLv2 macro op1,op2,op3,op4
00000000                            spTL1	= op1
00000000                            spTL2	= op2
00000000                            spTL3	= op3
00000000                            spTL4	= op4
00000000                            	dc.b (spFe<<3)+spAl
00000000                            	dc.b (spDe1<<4)+spMu1, (spDe3<<4)+spMu3, (spDe2<<4)+spMu2, (spDe4<<4)+spMu4
00000000                            	dc.b (spRS1<<6)+spAR1, (spRS3<<6)+spAR3, (spRS2<<6)+spAR2, (spRS4<<6)+spAR4
00000000                            	dc.b (spAM1<<7)+spSR1, (spAM3<<7)+spsR3, (spAM2<<7)+spSR2, (spAM4<<7)+spSR4
00000000                            	dc.b spDR1,            spDR3,            spDR2,            spDR4
00000000                            	dc.b (spSL1<<4)+spRR1, (spSL3<<4)+spRR3, (spSL2<<4)+spRR2, (spSL4<<4)+spRR4
00000000                            	dc.b spSS1,            spSS3,            spSS2,            spSS4
00000000                            	dc.b spTL1,	       spTL3,		 spTL2,		   spTL4
00000000                            	if safe=1
00000000                            		dc.b 'NAT'	; align the patch
00000000                            	endif
00000000                                endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; SMPS commands
00000000                            
00000000                            ; E0xx - Panning, AMS, FMS (PANAFMS - PAFMS_PAN)
00000000                            sPan		macro pan, ams, fms
00000000                            	if narg=1
00000000                            		dc.b $E0, \pan
00000000                            	elseif narg=2
00000000                            		dc.b $E0, \pan|\ams
00000000                            	else
00000000                            		dc.b $E0, \pan|(\ams<<4)|\fms
00000000                            	endif
00000000                                endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx (DETUNE_SET)
00000000                            ssDetune	macro val
00000000                            	dc.b $E1, \val
00000000                                endm
00000000                            
00000000                            ; E2xx - Add xx to channel frequency displacement (DETUNE)
00000000                            saDetune	macro val
00000000                            	dc.b $E2, \val
00000000                                endm
00000000                            
00000000                            ; E3xx - Set channel pitch to xx (TRANSPOSE - TRNSP_SET)
00000000                            ssTranspose	macro val
00000000                            	dc.b $E3, \val
00000000                                endm
00000000                            
00000000                            ; E4xx - Add xx to channel pitch (TRANSPOSE - TRNSP_ADD)
00000000                            saTranspose	macro val
00000000                            	dc.b $E4, \val
00000000                                endm
00000000                            
00000000                            ; E5xx - Set channel tick multiplier to xx (TICK_MULT - TMULT_CUR)
00000000                            ssTickMulCh	macro val
00000000                            	dc.b $E5, \val-1
00000000                                endm
00000000                            
00000000                            ; E6xx - Set global tick multiplier to xx (TICK_MULT - TMULT_ALL)
00000000                            ssTickMul	macro val
00000000                            	dc.b $E6, \val-1
00000000                                endm
00000000                            
00000000                            ; E7 - Do not attack of next note (HOLD)
00000000 =000000E7                  sHold =		$E7
00000000                            
00000000                            ; E8xx - Set patch/voice/sample to xx (INSTRUMENT - INS_C_FM / INS_C_PSG / INS_C_DAC)
00000000                            sVoice		macro val
00000000                            	dc.b $E8, \val
00000000                                endm
00000000                            
00000000                            ; E9xx - Set music speed shoes tempo to xx (TEMPO - TEMPO_SET_SPEED)
00000000                            ssTempoShoes	macro val
00000000                            	dc.b $E9, \val
00000000                                endm
00000000                            
00000000                            ; EAxx - Set music tempo to xx (TEMPO - TEMPO_SET)
00000000                            ssTempo		macro val
00000000                            	dc.b $EA, \val
00000000                                endm
00000000                            
00000000                            ; EB - Turn on Modulation (MOD_SET - MODS_ON)
00000000                            sModOn		macro
00000000                            	dc.b $EB
00000000                                endm
00000000                            
00000000                            ; EC - Turn off Modulation (MOD_SET - MODS_OFF)
00000000                            sModOff		macro
00000000                            	dc.b $EC
00000000                                endm
00000000                            
00000000                            ; EDxx - Add xx to channel volume (VOLUME - VOL_CN_FM / VOL_CN_PSG / VOL_CN_DAC)
00000000                            saVol		macro vol
00000000                            	dc.b $ED, \vol
00000000                                endm
00000000                            
00000000                            ; EExx - Set channel volume to xx (VOLUME - VOL_CN_ABS)
00000000                            ssVol		macro vol
00000000                            	dc.b $EE, \vol
00000000                                endm
00000000                            
00000000                            ; EFxxyy - Enable/Disable LFO (SET_LFO - LFO_AMSEN)
00000000                            ssLFO		macro reg, ams, fms, pan
00000000                            	if narg=2
00000000                            		dc.b $EF, \reg,\ams
00000000                            	elseif narg=3
00000000                            		dc.b $EF, \reg,(\ams<<4)|\fms
00000000                            	else
00000000                            		dc.b $EF, \reg,(\ams<<4)|\fms|\pan
00000000                            	endif
00000000                                endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation
00000000                            ;  ww: wait time
00000000                            ;  xx: modulation speed
00000000                            ;  yy: change per step
00000000                            ;  zz: number of steps
00000000                            ; (MOD_SETUP)
00000000                            ssMod68k	macro wait, speed, step, count
00000000                            	dc.b $F0, \wait,\speed,\step,\count
00000000                                endm
00000000                            
00000000                            ; F1 - Use sample DAC mode (DAC_MODE - DACM_SAMP)
00000000                            sModeSampDAC	macro
00000000                            	dc.b $F1
00000000                                endm
00000000                            
00000000                            ; F2 - Use pitch DAC mode (DAC_MODE - DACM_NOTE)
00000000                            sModePitchDAC	macro
00000000                            	dc.b $F2
00000000                                endm
00000000                            
00000000                            ; F3xx - PSG4 noise mode xx (PSG_NOISE - PNOIS_AMPS)
00000000                            sNoisePSG	macro val
00000000                            	dc.b $F3, \val
00000000                                endm
00000000                            
00000000                            ; F4xxxx - Keep looping back to xxxx each time the SFX is being played (CONT_SFX)
00000000                            sCont		macro loc
00000000                            	dc.b $F4
00000000                            	dc.w \loc-*-1
00000000                                endm
00000000                            
00000000                            ; F5 - End of channel (TRK_END - TEND_STD)
00000000                            sStop		macro
00000000                            	dc.b $F5
00000000                                endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx (GOTO)
00000000                            sJump		macro loc
00000000                            	dc.b $F6
00000000                            	dc.w \loc-*-1
00000000                                endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing (LOOP)
00000000                            sLoop		macro index,loops,loc
00000000                            	dc.b $F7, \index
00000000                            	dc.w \loc-*-1
00000000                            	dc.b \loops
00000000                                endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point (GOSUB)
00000000                            sCall		macro loc
00000000                            	dc.b $F8
00000000                            	dc.w \loc-*-1
00000000                                endm
00000000                            
00000000                            ; F9 - Return (RETURN)
00000000                            sRet		macro
00000000                            	dc.b $F9
00000000                                endm
00000000                            
00000000                            ; FAyyxx - Set communications byte yy to xx (SET_COMM - SPECIAL)
00000000                            sComm		macro num, val
00000000                            	dc.b $FA, \num,\val
00000000                                endm
00000000                            
00000000                            ; FBxyzz - Get communications byte y, and compare zz with it using condition x (COMM_CONDITION)
00000000                            sCond		macro num, cond, val
00000000                            	dc.b $FB, \num|(\cond<<4),\val
00000000                                endm
00000000                            
00000000                            ; FC - Reset condition (COMM_RESET)
00000000                            sCondOff	macro
00000000                            	dc.b $FC
00000000                                endm
00000000                            
00000000                            ; FDxx - Stop note after xx frames (NOTE_STOP - NSTOP_NORMAL)
00000000                            sNoteTimeOut	macro val
00000000                            	dc.b $FD, \val
00000000                                endm
00000000                            
00000000                            ; FExxyy - YM command yy on register xx (YMCMD)
00000000                            sCmdYM		macro reg, val
00000000                            	dc.b $FE, \reg,\val
00000000                                endm
00000000                            
00000000                            ; FF00xx - Play sample xx on DAC1 (PLAY_DAC - PLAY_DAC1)
00000000                            sPlaySamp1	macro id
00000000                            	dc.b $FF,$00, \id
00000000                                endm
00000000                            
00000000                            ; FF01xx - Play sample xx on DAC1 (PLAY_DAC - PLAY_DAC2)
00000000                            sPlaySamp2	macro id
00000000                            	dc.b $FF,$01, \id
00000000                                endm
00000000                            
00000000                            ; FF02xxxx - Set channel frequency to xxxx (CHFREQ_SET)
00000000                            ssFreq		macro freq
00000000                            	dc.b $FF,$02
00000000                            	dc.w \freq
00000000                                endm
00000000                            
00000000                            ; FF03xx - Set channel frequency to note xx (CHFREQ_SET - CHFREQ_NOTE)
00000000                            ssFreqNote	macro note
00000000                            	dc.b $FF,$03, \note^$80
00000000                                endm
00000000                            
00000000                            ; FF04 - Increment spindash rev counter (SPINDASH_REV - SDREV_INC)
00000000                            sSpinRev	macro
00000000                            	dc.b $FF,$04
00000000                                endm
00000000                            
00000000                            ; FF05 - Reset spindash rev counter (SPINDASH_REV - SDREV_RESET)
00000000                            sSpinReset	macro
00000000                            	dc.b $FF,$05
00000000                                endm
00000000                            
00000000                            ; FF06xx - Add xx to music speed tempo (TEMPO - TEMPO_ADD_SPEED)
00000000                            saTempoSpeed	macro tempo
00000000                            	dc.b $FF,$06, \tempo
00000000                                endm
00000000                            
00000000                            ; FF07xx - Add xx to music tempo (TEMPO - TEMPO_ADD)
00000000                            saTempo		macro tempo
00000000                            	dc.b $FF,$07, \tempo
00000000                                endm
00000000                            
00000000                            ; FF08xyzz - Get RAM address pointer offset by y, compare zz with it using condition x (COMM_CONDITION - COMM_SPEC)
00000000                            sCondReg	macro off, cond, val
00000000                            	dc.b $FF,$08, \off|(\cond<<4),\val
00000000                                endm
00000000                            
00000000                            ; FF09xx - Play another music/sfx (SND_CMD)
00000000                            sPlayMus	macro id
00000000                            	dc.b $FF,$09, \id
00000000                                endm
00000000                            
00000000                            ; FF0A - Enable raw frequency mode (RAW_FREQ)
00000000                            sFreqOn		macro freq
00000000                            	dc.b $FF,$0A
00000000                            	inform 3,"Flag is currently not implemented! Please remove."
00000000                                endm
00000000                            
00000000                            ; FF0B - Disable raw frequency mode (RAW_FREQ - RAW_FREQ_OFF)
00000000                            sFreqOff	macro freq
00000000                            	dc.b $FF,$0B
00000000                            	inform 3,"Flag is currently not implemented! Please remove."
00000000                                endm
00000000                            
00000000                            ; FF0C - Enable FM3 special mode (SPC_FM3)
00000000                            sSpecFM3	macro freq
00000000                            	dc.b $FF,$0C
00000000                            	inform 3,"Flag is currently not implemented! Please remove."
00000000                                endm
00000000                            
00000000                            ; FF0Dxx - Set DAC filter bank address (DAC_FILTER)
00000000                            ssFilter	macro bank
00000000                            	dc.b $FF,$0D, \bank
00000000                                endm
00000000                            
00000000                            ; FF0E - Freeze 68k. Debug flag (DEBUG_STOP_CPU)
00000000                            sFreeze		macro
00000000                            	if safe=1
00000000                            		dc.b $FF,$0E
00000000                            	endif
00000000                                endm
00000000                            
00000000                            ; FF0F - Bring up tracker debugger at end of frame. Debug flag (DEBUG_PRINT_TRACKER)
00000000                            sCheck		macro
00000000                            	if safe=1
00000000                            		dc.b $FF,$0F
00000000                            	endif
00000000                                endm
00000000                            	include "driver/code/macro.asm"
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Various assembly flags
00000000                            ; ---------------------------------------------------------------------------
00000000                            	opt ae+
00000000                            
00000000                            ; if safe mode is enabled (1), then the driver will attempt to find any issues.
00000000                            ; if Vladik's error debugger is installed, then the error will be displayed.
00000000                            ; else, the CPU is trapped.
00000000                            
00000000 =00000001                  safe =	1
00000000                            
00000000                            ; Select the tempo algorith.
00000000                            ; 0 = Overflow method.
00000000                            ; 1 = Counter method.
00000000                            
00000000 =00000000                  tempo =	0
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Channel configuration
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            	rsset 0
00000000 =00000000                  cFlags		rs.b 1		; various channel flags, see below
00000000 =00000001                  cType		rs.b 1		; hardware type for the channel
00000000 =00000002                  cData		rs.l 1		; 68k tracker address for the channel
00000000 =00000006                  cPanning	rs.b 0		; channel panning and LFO. FM and DAC only
00000000 =00000006                  cEnvPos		rs.b 1		; volume envelope position. PSG only
00000000 =00000007                  cDetune		rs.b 1		; frequency detune (offset)
00000000 =00000008                  cPitch		rs.b 1		; pitch (transposition) offset
00000000 =00000009                  cVolume		rs.b 1		; channel volume
00000000 =0000000A                  cTick		rs.b 1		; channel tick multiplier
00000000 =0000000B                  cSample		rs.b 0		; channel sample ID, DAC only
00000000 =0000000B                  cVolEnv		rs.b 0		; volume envelope ID. PSG only
00000000 =0000000B                  cVoice		rs.b 1		; YM2612 voice ID. FM only
00000000 =0000000C                  cDuration	rs.b 1		; current note duration
00000000 =0000000D                  cLastDur	rs.b 1		; last note duration
00000000 =0000000E                  cFreq		rs.w 1		; channel base frequency
00000000 =00000010                  cModDelay	rs.b 0		; delay before modulation starts
00000000 =00000010                  cMod		rs.l 1		; modulation data address
00000000 =00000014                  cModFreq	rs.w 1		; modulation frequency offset
00000000 =00000016                  cModSpeed	rs.b 1		; number of frames til next modulation step
00000000 =00000017                  cModStep	rs.b 1		; modulation frequency offset per step
00000000 =00000018                  cModCount	rs.b 1		; number of modulation steps until reversal
00000000 =00000019                  cLoop		rs.b 3		; loop counter values
00000000 =0000001B                  cStatPSG4 =	__rs-1		; PSG4 type value. PSG3 only
00000000 =0000001A                  cPrio =		__rs-2		; sound effect channel priority. SFX only
00000000 =0000001C                  cSizeSFX	rs.w 0		; size of each SFX track
00000000                            
00000000 =0000001C                  cNoteTimeCur	rs.b 1		; frame counter to note off. Music only
00000000 =0000001D                  cNoteTimeMain	rs.b 1		; copy of frame counter to note off. Music only
00000000 =0000001E                  cStack		rs.b 1		; channel stack pointer. Music only
00000000                            		rs.b 1		; unused. Music only
00000000                            		rs.l 3		; channel stack data. Music only
00000000 =0000002C                  cSize		rs.w 0		; size of each music track
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Bits for cFlags
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            	rsset 0
00000000 =00000000                  cfbMode		rs.b 0		; set if in pitch mode, clear if in sample mode. DAC only
00000000 =00000000                  cfbRest		rs.b 1		; set if channel is resting. FM and PSG only
00000000 =00000001                  cfbInt		rs.b 1		; set if interrupted by SFX. Music only
00000000 =00000002                  cfbHold		rs.b 1		; set if playing notes does not trigger note-on's
00000000 =00000003                  cfbMod		rs.b 1		; set if modulation is enabled
00000000 =00000004                  cfbCond		rs.b 1		; set if ignoring many tracker commands
00000000 =00000005                  cfbVol		rs.b 1		; set if channel should update volume
00000000 =00000007                  cfbRun =	$07		; set if channel is running a tracker
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Misc variables for channel modes
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00000002                  ctbPt2 =	$02		; bit part 2 - FM 4-6
00000000 =00000000                  ctFM1 =		$00		; FM 1
00000000 =00000001                  ctFM2 =		$01		; FM 2
00000000 =00000002                  ctFM3 =		$02		; FM 3	- Valid for SFX
00000000 =00000004                  ctFM4 =		$04		; FM 4	- Valid for SFX
00000000 =00000005                  ctFM5 =		$05		; FM 5	- Valid for SFX
00000000                            
00000000 =00000003                  ctbDAC =	$03		; DAC bit
00000000 =0000000B                  ctDAC1 =	(1<<ctbDAC)|$03	; DAC 1	- Valid for SFX
00000000 =0000000E                  ctDAC2 =	(1<<ctbDAC)|$06	; DAC 2
00000000                            
00000000 =00000080                  ctPSG1 =	$80		; PSG 1	- Valid for SFX
00000000 =000000A0                  ctPSG2 =	$A0		; PSG 2	- Valid for SFX
00000000 =000000C0                  ctPSG3 =	$C0		; PSG 3	- Valid for SFX
00000000 =000000E0                  ctPSG4 =	$E0		; PSG 4
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Misc flags
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00000002                  Mus_DAC =	2		; number of DAC channels
00000000 =00000005                  Mus_FM =	5		; number of FM channels
00000000 =00000003                  Mus_PSG =	3		; number of PSG channels
00000000 =0000000A                  Mus_Ch =	Mus_DAC+Mus_FM+Mus_PSG; total number of music channels
00000000 =00000001                  SFX_DAC =	1		; number of DAC SFX channels
00000000 =00000003                  SFX_FM =	3		; number of FM SFX channels
00000000 =00000003                  SFX_PSG =	3		; number of PSG SFX channels
00000000 =00000007                  SFX_Ch =	SFX_DAC+SFX_FM+SFX_PSG; total number of SFX channels
00000000                            
00000000 =0000001D                  VoiceRegs =	29		; total number of registers inside of a voice
00000000 =00000019                  VoiceTL =	VoiceRegs-4	; location of voice TL levels
00000000                            
00000000 =00001000                  MaxPitch =	$1000		; this is the maximum pitch Dual PCM is capable of processing
00000000 =00000018                  Z80E_Read =	$00018		; this is used by Dual PCM internally but we need this for macros
00000000                            
00000000                            ; NOTE: There is no magic trick to making Dual PCM play samples at higher rates.
00000000                            ; These values are only here to allow you to give lower pitch samples higher
00000000                            ; quality, and playing samples at higher rates than Dual PCM can process them
00000000                            ; may decrease the perceived quality by the end user. Use these equates only
00000000                            ; if you know what you are doing.
00000000                            
00000000 =00000140                  sr17 =		$0140		; 5 Quarter sample rate	17500 Hz
00000000 =00000120                  sr15 =		$0120		; 9 Eights sample rate	15750 Hz
00000000 =00000100                  sr14 =		$0100		; Default sample rate	14000 Hz
00000000 =000000E0                  sr12 =		$00E0		; 7 Eights sample rate	12250 Hz
00000000 =000000C0                  sr10 =		$00C0		; 3 Quarter sample rate	10500 Hz
00000000 =000000A0                  sr8 =		$00A0		; 5 Eights sample rate	8750 Hz
00000000 =00000080                  sr7 =		$0080		; Half sample rate	7000 HZ
00000000 =00000060                  sr5 =		$0060		; 3 Eights sample rate	5250 Hz
00000000 =00000040                  sr3 =		$0040		; 1 Quarter sample rate	3500 Hz
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Sound driver RAM configuration
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00A00000                  dZ80 =		$A00000		; quick reference to Z80 RAM
00000000 =00C00011                  dPSG =		$C00011		; quick reference to PSG port
00000000                            
00000000                            	rsset Drvmem		; Insert your RAM definition here!
00000000 =FFFF8100                  mFlags		rs.b 1		; various driver flags, see below
00000000 =FFFF8101                  mCtrPal		rs.b 1		; frame counter fo 50hz fix
00000000 =FFFF8102                  mVctMus		rs.l 1		; address of voice table for music
00000000 =FFFF8106                  mComm		rs.b 8		; communications bytes
00000000 =FFFF810E                  mMasterVolFM	rs.b 0		; master volume for FM channels
00000000 =FFFF810E                  mFadeAddr	rs.l 1		; fading program address
00000000 =FFFF8112                  mTempoMain	rs.b 1		; music normal tempo
00000000 =FFFF8113                  mTempoSpeed	rs.b 1		; music speed shoes tempo
00000000 =FFFF8114                  mTempo		rs.b 1		; current tempo we are using right now
00000000 =FFFF8115                  mTempoCur	rs.b 1		; tempo counter/accumulator
00000000 =FFFF8116                  mQueue		rs.b 3		; sound queue
00000000 =FFFF8119                  mMasterVolPSG	rs.b 1		; master volume for PSG channels
00000000 =FFFF811A                  mMasterVolDAC	rs.b 1		; master volume for DAC channels
00000000 =FFFF811B                  mSpindash	rs.b 1		; spindash rev counter
00000000 =FFFF811C                  mContCtr	rs.b 1		; continous sfx loop counter
00000000 =FFFF811D                  mContLast	rs.b 1		; last continous sfx played
00000000                            		rs.w 0		; align channel data
00000000                            
00000000 =FFFF811E                  mDAC1		rs.b cSize	; DAC 1 data
00000000 =FFFF814A                  mDAC2		rs.b cSize	; DAC 2 data
00000000 =FFFF8176                  mFM1		rs.b cSize	; FM 1 data
00000000 =FFFF81A2                  mFM2		rs.b cSize	; FM 2 data
00000000 =FFFF81CE                  mFM3		rs.b cSize	; FM 3 data
00000000 =FFFF81FA                  mFM4		rs.b cSize	; FM 4 data
00000000 =FFFF8226                  mFM5		rs.b cSize	; FM 5 data
00000000 =FFFF8252                  mPSG1		rs.b cSize	; PSG 1 data
00000000 =FFFF827E                  mPSG2		rs.b cSize	; PSG 2 data
00000000 =FFFF82AA                  mPSG3		rs.b cSize	; PSG 3 data
00000000 =FFFF82D6                  mSFXDAC1	rs.b cSizeSFX	; SFX DAC 1 data
00000000 =FFFF82F2                  mSFXFM3		rs.b cSizeSFX	; SFX FM 3 data
00000000 =FFFF830E                  mSFXFM4		rs.b cSizeSFX	; SFX FM 4 data
00000000 =FFFF832A                  mSFXFM5		rs.b cSizeSFX	; SFX FM 5 data
00000000 =FFFF8346                  mSFXPSG1	rs.b cSizeSFX	; SFX PSG 1 data
00000000 =FFFF8362                  mSFXPSG2	rs.b cSizeSFX	; SFX PSG 2 data
00000000 =FFFF837E                  mSFXPSG3	rs.b cSizeSFX	; SFX PSG 3 data
00000000                            
00000000 =FFFF839A                  msChktracker	rs.b 1		; safe mode only: If set, bring up debugger
00000000 =FFFF839C                  mSize		rs.w 0		; end of the driver RAM
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Bits for mFlags
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            	rsset 0
00000000 =00000000                  mfbRing		rs.b 1		; if set, change speaker (play different sfx)
00000000 =00000001                  mfbSpeed	rs.b 1		; if set, speed shoes are active
00000000 =00000002                  mfbWater	rs.b 1		; if set, underwater mode is active
00000000 =00000003                  mfbNoPAL	rs.b 1		; if set, play songs slowly in PAL region
00000000 =00000007                  mfbPaused =	$07		; if set, sound driver is paused
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Sound ID equates
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            	rsset 1
00000000 =00000001                  Mus_Reset	rs.b 1		; reset underwater and speed shoes flags, update volume
00000000 =00000002                  Mus_FadeOut	rs.b 1		; initialize a music fade out
00000000 =00000003                  Mus_Stop	rs.b 1		; stop all music
00000000 =00000004                  Mus_ShoesOn	rs.b 1		; enable speed shoes mode
00000000 =00000005                  Mus_ShoesOff	rs.b 1		; disable speed shoes mode
00000000 =00000006                  Mus_ToWater	rs.b 1		; enable underwater mode
00000000 =00000007                  Mus_OutWater	rs.b 1		; disable underwater mode
00000000 =00000008                  Mus_Pause	rs.b 1		; pause the music
00000000 =00000009                  Mus_Unpause	rs.b 1		; unpause the music
00000000 =0000000A                  MusOff		rs.b 0		; first music ID
00000000                            
00000000 =000000F0                  MusCount =	$F0		; number of installed music tracks
00000000 =000000FA                  SFXoff =	MusCount+MusOff	; first SFX ID
00000000 =00000008                  SFXcount =	$08		; number of intalled sound effects
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Condition modes
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            	rsset 0
00000000 =00000000                  dcoT		rs.b 1		; condition T	; True
00000000 =00000001                  dcoF		rs.b 1		; condition F	; False
00000000 =00000002                  dcoHI		rs.b 1		; condition HI	; HIgher (unsigned)
00000000 =00000003                  dcoLS		rs.b 1		; condition LS	; Less or Same (unsigned)
00000000 =00000004                  dcoHS		rs.b 0		; condition HS	; Higher or Sane (unsigned)
00000000 =00000004                  dcoCC		rs.b 1		; condition CC	; Carry Clear (unsigned)
00000000 =00000005                  dcoLO		rs.b 0		; condition LO	; LOwer (unsigned)
00000000 =00000005                  dcoCS		rs.b 1		; condition CS	; Carry Set (unsigned)
00000000 =00000006                  dcoNE		rs.b 1		; condition NE	; Not Equal
00000000 =00000007                  dcoEQ		rs.b 1		; condition EQ	; EQual
00000000 =00000008                  dcoVC		rs.b 1		; condition VC	; oVerflow Clear (signed)
00000000 =00000009                  dcoVS		rs.b 1		; condition VS	; oVerflow Set (signed)
00000000 =0000000A                  dcoPL		rs.b 1		; condition PL	; Positive (PLus)
00000000 =0000000B                  dcoMI		rs.b 1		; condition MI	; Negamite (MInus)
00000000 =0000000C                  dcoGE		rs.b 1		; condition GE	; Greater or Equal (signed)
00000000 =0000000D                  dcoLT		rs.b 1		; condition LT	; Less Than (signed)
00000000 =0000000E                  dcoGT		rs.b 1		; condition GT	; GreaTer (signed)
00000000 =0000000F                  dcoLE		rs.b 1		; condition LE	; Less or Equal (signed)
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Emvelope commands equates
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            	rsset $80
00000000 =00000080                  eReset		rs.w 1		; 80 - Restart from position 0
00000000 =00000082                  eHold		rs.w 1		; 82 - Hold volume at current level
00000000 =00000084                  eLoop		rs.w 1		; 84 - Jump back/forwards according to next byte
00000000 =00000086                  eStop		rs.w 1		; 86 - Stop current note and envelope
00000000 =00000088                  eLast		rs.w 0		; safe mode equate
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Fade out end commands
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            	rsset $80
00000000 =00000080                  fEnd		rs.l 1		; 80 - Do nothing
00000000 =00000084                  fStop		rs.l 1		; 84 - Stop all music
00000000 =00000088                  fResVol		rs.l 1		; 88 - Reset volume and update
00000000 =0000008C                  fReset		rs.l 1		; 8C - Stop music playing and reset volume
00000000 =00000090                  fLast		rs.l 0		; safe mode equate
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Quickly read a word from odd address. 28 cycles
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            dREAD_WORD	macro areg, dreg
00000000                            	move.b	(\areg)+,(sp)		; read the next byte into stack
00000000                            	move.w	(sp),\dreg		; get word back from stack (shift byte by 8 bits)
00000000                            	move.b	(\areg),\dreg		; get the next byte into register
00000000                                endm
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; used to calculate the address of the right FM voice
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            dCALC_VOICE	macro off
00000000                            	lsl.w	#5,d0			; multiply voice ID by $20
00000000                            	if narg>0
00000000                            		add.w	#\off,d0	; if have had extra argument, add it to offset
00000000                            	endif
00000000                            
00000000                            	add.w	d0,a1			; add offset to voice table address
00000000                                endm
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Tells the Z80 to stop, and waits for it to finish stopping (acquire bus)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            stopZ80 	macro
00000000                            	move.w	#$100,$A11100		; stop the Z80
00000000                            .loop\@
00000000                            	btst	#0,$A11100
00000000                            	bne.s	.loop\@			; loop until it says it's stopped
00000000                                endm
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Tells the Z80 to start again
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            startZ80 	macro
00000000                            	move.w	#0,$A11100		; start the Z80
00000000                                endm
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Macro for pausing music
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            AMPS_MUSPAUSE	macro	; enable request pause and paused flags
00000000                            	move.b	#Mus_Pause,mQueue+2.w
00000000                                endm
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Macro for unpausing music
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            AMPS_MUSUNPAUSE	macro	; enable request unpause flag
00000000                            	move.b	#Mus_Unpause,mQueue+2.w
00000000                                endm
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Create volume envelope table, and SMPS2ASM equates
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            volenv		macro name
00000000                            	rept narg			; repeate for all arguments
00000000                            v\name =	__venv			; create SMPS2ASM equate
00000000                            		dc.l vd\name		; create pointer
00000000                            __venv =	__venv+1		; increase ID
00000000                            	shift				; shift next argument into view
00000000                            	endr
00000000                                endm
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Creates SFX pointers table, and creates necessary equates
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            ptrSFX		macro type, file
00000000                            .type =		\type<<24		; create equate for the type mask
00000000                            
00000000                            	rept narg-1			; repeat for all arguments
00000000                            sfx_\file =	__sfx			; create sfx_ equate for the sfx
00000000                            dsfx\$__sfx	equs  "\file"		; create file name equate for later
00000000                            		dc.l dsfxa\$__sfx|.type	; create pointer with specified type
00000000                            __sfx =		__sfx+1			; increase SFX ID
00000000                            	shift				; shift next argument into view
00000000                            	endr
00000000                                endm
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Creates music pointers table, and creates necessary equates
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            ptrMusic	macro file, sptempo
00000000                            	rept narg/2			; repeat for half of the arguments
00000000                            mus_\file =	__mus			; create mus_ equate for the music
00000000                            dmus\$__mus	equs "\file"		; create file name equate for later
00000000                            		dc.l ((\sptempo)<<24)|dmusa\$__mus; create pointer with tempo
00000000                            __mus =		__mus+1			; increase music ID
00000000                            	shift				; shift next argument into view
00000000                            	shift				; ''
00000000                            	endr
00000000                                endm
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Include all SFX data
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            incSFX		macro
00000000                            	local a, b			; define these as local variables
00000000                            a =		SFXoff			; start from first sfx
00000000                            	rept __sfx-SFXoff		; repeat for all sfx we defined
00000000                            		even			; sfx header must be on even byte
00000000                            b		equs dsfx\$a		; hack to get the file name into b
00000000                            _sfx_\b					; create _sfx_<name> equate
00000000                            dsfxa\$a	include "driver/sfx/\b\.asm"; include SFX data
00000000                            a =		a+1			; increase ID
00000000                            	endr
00000000                                endm
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Include all music data
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            incMus		macro file
00000000                            	local a, b			; define these as local variables
00000000                            a =		MusOff			; start from first music
00000000                            	rept __mus-MusOff		; repeat for all music we defined
00000000                            		even			; music header must be on even byte
00000000                            b		equs dmus\$a		; hack to get the file name into b
00000000                            _mus_\b					; create _mus_<name> equate
00000000                            dmusa\$a	include "driver/music/\b\.asm"; include music data
00000000                            a =		a+1			; increase ID
00000000                            	endr
00000000                                endm
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Include PCM data
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            incSWF		macro file
00000000                            	rept narg			; repeat for all arguments
00000000                            SWF_\file	incbin	"driver/DAC/incswf/\file\.swf"; include PCM data
00000000                            SWFR_\file 	dcb.b Z80E_Read*(MaxPitch/$100),$00; add end markers (for Dual PCM)
00000000                            	shift				; shift next argument into view
00000000                            	endr
00000000                                endm
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Create data for a sample
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            sample		macro freq, start, loop, name
00000000                            	if narg=4		; if we have 4 arguments, we'd like a custom name
00000000                            d\name =	__samp		; use the extra argument to create SMPS2ASM equate
00000000                            	else
00000000                            d\start =	__samp		; else, use the first one!
00000000                            	endif
00000000                            
00000000                            __samp =	__samp+1	; increase sample ID
00000000                            ; create offsets for the sample normal, reverse, loop normal, loop reverse.
00000000                            	dc.b SWF_\start&$FF,((SWF_\start>>$08)&$7F)|$80,(SWF_\start>>$0F)&$FF
00000000                            	dc.b (SWFR_\start-1)&$FF,(((SWFR_\start-1)>>$08)&$7F)|$80,((SWFR_\start-1)>>$0F)&$FF
00000000                            	dc.b SWF_\loop&$FF,((SWF_\loop>>$08)&$7F)|$80, (SWF_\loop>>$0F)&$FF
00000000                            	dc.b (SWFR_\loop-1)&$FF,(((SWFR_\loop-1)>>$08)&$7F)|$80,((SWFR_\loop-1)>>$0F)&$FF
00000000                            	dc.w \freq-$100		; sample frequency (actually offset, so we remove $100)
00000000                            	dc.w 0			; unused!
00000000                                endm
00000000                            ; ===========================================================================
00000000                            	opt ae-
00000000                            	include "driver/lang.asm"
00000000                            ; MADE BY NATSUMI 2017
00000000                            
00000000                            ; DEFINE HELPERS
00000000 =00000000                  z80prg =	0		; 0 IN 68K MODE, 1 IN Z80 MODE
00000000 =00000000                  ztemp =		0		; TEMPORARY REGISTER
00000000 =00000001                  zundoc =	1		; SET TO 0 TO USE UNDOCUMENTED OPCODES
00000000 =00000001                  zchkoffs =	1		; SET TO 0 TO NOT CHECK IX/IY AND JR OFFSETS
00000000                            z80regstr	EQUS "a b c d e h l bc de hl sp af ix iy i r ixh ixl iyh iyl (bc) (de) (hl) (sp) af' (ix) (iy)"
00000000                            
00000000                            ; EASILY MAKE SECTIONS
00000000                            z80prog	macro obj
00000000                            	if narg=0
00000000                            		OBJEND
00000000                            
00000000                            	; magic function that fixes all the jr and djnz opcodes, along with offsets.
00000000                            	; Used for detecting illegal forward jumps
00000000                            		local lastpos
00000000                            lastpos =	*
00000000                            			local off, byte
00000000                            		rept zfuturec
00000000                            			popp off
00000000                            			popp byte
00000000                            			org zfuturepos-zfutureobj+off
00000000                            			dc.b byte
00000000                            		endr
00000000                            
00000000                            		org lastpos
00000000                            
00000000                            		POPO		; restore options
00000000                            z80prg =	0
00000000                            		MEXIT		; exit macro here
00000000                            	endif
00000000                            
00000000                            	PUSHO			; push options
00000000                            	OPT AE-			; automatic evens off
00000000                            	OPT AN+			; allow use of 100H instead of $100
00000000                            	OPT M-			; do not print better macro info. Comment out for large text dump.
00000000                            	OPT D-			; make sure EQU/SET do not descope local lables
00000000                            
00000000                            zfutureobj =	\obj
00000000                            zfuturepos =	*
00000000                            zfuturec =	0
00000000                            
00000000                            	if narg=1
00000000                            		OBJ \obj
00000000                            z80prg =	1
00000000                            	else
00000000                            		inform 0,"Invalid num of args!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            ; CREATE A LITTLE-ENDIAN Z80 ABSOLUTE ADDRESS
00000000                            z80word	macro word
00000000                            	dc.b ((\word)&$FF), ((\word)>>8&$FF)
00000000                                endm
00000000                            
00000000                            ; SAVES THE RÈGISTER ID TO ZTEMP
00000000                            zgetreg	macro reg, err
00000000                            	if strlen("\reg")=0
00000000                            		inform \err,"The register must not be empty!"
00000000                            		mexit
00000000                            	endif
00000000                            
00000000                            ztemp = instr("\z80regstr", "\reg")
00000000                            
00000000                            	if (ztemp<>0)&(ztemp<55)
00000000                            ztemp =		(z\reg)
00000000                            
00000000                            	elseif ztemp=56
00000000                            ztemp =		zbcr
00000000                            
00000000                            	elseif ztemp=61
00000000                            ztemp =		zder
00000000                            
00000000                            	elseif ztemp=66
00000000                            ztemp =		zhlr
00000000                            
00000000                            	elseif ztemp=71
00000000                            ztemp =		zspr
00000000                            
00000000                            	elseif ztemp=76
00000000                            ztemp =		zaf2
00000000                            
00000000                            	elseif ztemp=79
00000000                            ztemp =		zixr
00000000                            
00000000                            	elseif ztemp=85
00000000                            ztemp =		ziyr
00000000                            
00000000                            	else
00000000                            
00000000                            		if instr("\reg", "(ix+")<>0|instr("\reg", "(ix-")<>0
00000000                            ztemp =		zixp
00000000                            
00000000                            		elseif instr("\reg", "(iy+")<>0|instr("\reg", "(iy-")<>0
00000000                            ztemp =		ziyp
00000000                            
00000000                            		else
00000000                            ztemp =			-1
00000000                            
00000000                            			local a, cc, p
00000000                            a =			0
00000000                            p =			1
00000000                            d =			0
00000000                            			while a=0
00000000                            				if p>strlen("\reg")
00000000                            ztemp =					-2
00000000                            a =					1
00000000                            
00000000                            				else
00000000                            cc					substr p,p,"\reg"
00000000                            					if '\cc'='('
00000000                            d =						d+1
00000000                            
00000000                            					elseif '\cc'=')'
00000000                            d =						d-1
00000000                            
00000000                            					elseif ('\cc'<>' ')&('\cc'<>'	')
00000000                            						if d<1
00000000                            a =							1
00000000                            						endif
00000000                            					endif
00000000                            				endif
00000000                            p =				p+1
00000000                            			endw
00000000                            		endif
00000000                            	endif
00000000                                endm
00000000                            
00000000                            ; PLACES THE SIGNED OFFSET INTO ROM, AND QUEUES A CHECK
00000000                            zindoff	macro reg, byte
00000000                            	local off
00000000                            off	substr 4, strlen("\reg")-1, "\reg"
00000000                            
00000000                            	if zchkoffs
00000000                            		dc.b -(off)-1, off
00000000                            		zfuture \byte
00000000                            
00000000                            	else
00000000                            		dc.b \byte, off
00000000                            	endif
00000000                                endm
00000000                            
00000000                            zjrfuture macro off, byte
00000000                            	if zchkoffs
00000000                            		dc.b -(off)-1, off
00000000                            		zfuture \byte
00000000                            
00000000                            	else
00000000                            		dc.b \byte, off
00000000                            	endif
00000000                                endm
00000000                            
00000000                            ; QUEUES SIGNED VALUES TO BE FIXED
00000000                            zfuture	macro byte
00000000                            zfuturec =	zfuturec+1
00000000                            		local p,v
00000000                            p =		*-2
00000000                            v =		\byte
00000000                            		pushp "\#v"
00000000                            		pushp "\#p"
00000000                                endm
00000000                            
00000000                            ; Define equates for registers
00000000 =00000000                  zb = 	0
00000000 =00000001                  zc =	1
00000000 =00000002                  zd =	2
00000000 =00000003                  ze =	3
00000000 =00000004                  zh =	4
00000000 =00000005                  zl =	5
00000000 =00000007                  za =	7
00000000 =00000008                  zbc =	8
00000000 =00000009                  zde =	9
00000000 =0000000A                  zhl =	$A
00000000 =0000000B                  zsp =	$B
00000000 =00000018                  zbcr =	$18
00000000 =00000019                  zder =	$19
00000000 =0000001A                  zhlr =	$1A
00000000 =0000001B                  zspr =	$1B
00000000 =00000020                  zix =	$20
00000000 =00000021                  ziy =	$21
00000000 =00000022                  zixr =	$22
00000000 =00000023                  ziyr =	$23
00000000 =00000024                  zixp =	$24
00000000 =00000025                  ziyp =	$25
00000000 =00000028                  zixh =	$28
00000000 =00000029                  zixl =	$29
00000000 =0000002A                  ziyh =	$2A
00000000 =0000002B                  ziyl =	$2B
00000000 =00000030                  zaf =	$30
00000000 =00000031                  zaf2 =	$31
00000000 =00000038                  zi =	$38
00000000 =00000039                  zr =	$39
00000000                            
00000000                            
00000000                            ; Define instructions
00000000                            
00000000                            db	macro val
00000000                            	dc.b \_
00000000                                endm
00000000                            
00000000                            dsb	macro num, val
00000000                            	dcb.b \_
00000000                                endm
00000000                            
00000000                            dw	macro val
00000000                            	rept narg
00000000                            		dc.b ((\val)&$FF), ((\val)>>8&$FF)
00000000                            		shift
00000000                            	endr
00000000                                endm
00000000                            
00000000                            bw	macro val
00000000                            	rept narg
00000000                            		dc.b ((\val)>>8&$FF), ((\val)&$FF)
00000000                            		shift
00000000                            	endr
00000000                                endm
00000000                            
00000000                            dsw	macro num, val
00000000                            	rept \num
00000000                            		dc.b ((\val)&$FF), ((\val)>>8&$FF)
00000000                            		shift
00000000                            	endr
00000000                                endm
00000000                            
00000000                            bsw	macro num, val
00000000                            	rept \num
00000000                            		dc.b ((\val)>>8&$FF), ((\val)&$FF)
00000000                            		shift
00000000                            	endr
00000000                                endm
00000000                            
00000000                            rlc	macro reg, reg2
00000000                            	zgetreg \reg, 0
00000000                            
00000000                            	if narg>2
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	if narg=2
00000000                            		if zundoc
00000000                            			inform 2,"Undocumented opcodes are not enabled."
00000000                            		endif
00000000                            
00000000                            		if (ztemp=zixp)
00000000                            			dc.b $DD
00000000                            
00000000                            		elseif (ztemp=ziyp)
00000000                            			dc.b $FD
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination '\reg' and '\reg2'!"
00000000                            		endif
00000000                            
00000000                            		zindoff \reg, $CD
00000000                            		zgetreg \reg2, 0
00000000                            
00000000                            		if (ztemp>=0)&(ztemp<=za)
00000000                            			dc.b $00+ztemp
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination '\reg' and '\reg2'!"
00000000                            		endif
00000000                            		mexit
00000000                            	endif
00000000                            
00000000                            	if (ztemp>=0)&(ztemp<=za)
00000000                            		dc.b $CB, $00+ztemp		; rlc a, b, c, d, e, h or l
00000000                            
00000000                            	elseif ztemp=zhlr
00000000                            		dc.b $CB, $06			; rlc (hl)
00000000                            
00000000                            	elseif ztemp=zixp
00000000                            		dc.b $DD			; rlc (ix+*)
00000000                            		zindoff \reg, $CB
00000000                            		dc.b $06
00000000                            
00000000                            	elseif ztemp=ziyp
00000000                            		dc.b $FD			; rlc (iy+*)
00000000                            		zindoff \reg, $CB
00000000                            		dc.b $06
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            rrc	macro reg
00000000                            	if narg>2
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 0
00000000                            
00000000                            	if narg=2
00000000                            		if zundoc
00000000                            			inform 2,"Undocumented opcodes are not enabled."
00000000                            		endif
00000000                            
00000000                            		if (ztemp=zixp)
00000000                            			dc.b $DD
00000000                            
00000000                            		elseif (ztemp=ziyp)
00000000                            			dc.b $FD
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination '\reg' and '\reg2'!"
00000000                            		endif
00000000                            
00000000                            		zindoff \reg, $CD
00000000                            		zgetreg \reg2, 0
00000000                            
00000000                            		if (ztemp>=0)&(ztemp<=za)
00000000                            			dc.b $08+ztemp
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination '\reg' and '\reg2'!"
00000000                            		endif
00000000                            		mexit
00000000                            	endif
00000000                            
00000000                            	if (ztemp>=0)&(ztemp<=za)
00000000                            		dc.b $CB, $08+ztemp		; rrc a, b, c, d, e, h or l
00000000                            
00000000                            	elseif ztemp=zhlr
00000000                            		dc.b $CB, $0E			; rrc (hl)
00000000                            
00000000                            	elseif ztemp=zixp
00000000                            		dc.b $DD			; rrc (ix+*)
00000000                            		zindoff \reg, $CB
00000000                            		dc.b $0E
00000000                            
00000000                            	elseif ztemp=ziyp
00000000                            		dc.b $FD			; rrc (iy+*)
00000000                            		zindoff \reg, $CB
00000000                            		dc.b $0E
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            rl	macro reg
00000000                            	if narg>2
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 0
00000000                            
00000000                            	if narg=2
00000000                            		if zundoc
00000000                            			inform 2,"Undocumented opcodes are not enabled."
00000000                            		endif
00000000                            
00000000                            		if (ztemp=zixp)
00000000                            			dc.b $DD
00000000                            
00000000                            		elseif (ztemp=ziyp)
00000000                            			dc.b $FD
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination '\reg' and '\reg2'!"
00000000                            		endif
00000000                            
00000000                            		zindoff \reg, $CD
00000000                            		zgetreg \reg2, 0
00000000                            
00000000                            		if (ztemp>=0)&(ztemp<=za)
00000000                            			dc.b $10+ztemp
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination '\reg' and '\reg2'!"
00000000                            		endif
00000000                            		mexit
00000000                            	endif
00000000                            
00000000                            	if (ztemp>=0)&(ztemp<=za)
00000000                            		dc.b $CB, $10+ztemp		; rl a, b, c, d, e, h or l
00000000                            
00000000                            	elseif ztemp=zhlr
00000000                            		dc.b $CB, $16			; rl (hl)
00000000                            
00000000                            	elseif ztemp=zixp
00000000                            		dc.b $DD			; rl (ix+*)
00000000                            		zindoff \reg, $CB
00000000                            		dc.b $16
00000000                            
00000000                            	elseif ztemp=ziyp
00000000                            		dc.b $FD			; rl (iy+*)
00000000                            		zindoff \reg, $CB
00000000                            		dc.b $16
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            rr	macro reg
00000000                            	if narg>2
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 0
00000000                            
00000000                            	if narg=2
00000000                            		if zundoc
00000000                            			inform 2,"Undocumented opcodes are not enabled."
00000000                            		endif
00000000                            
00000000                            		if (ztemp=zixp)
00000000                            			dc.b $DD
00000000                            
00000000                            		elseif (ztemp=ziyp)
00000000                            			dc.b $FD
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination '\reg' and '\reg2'!"
00000000                            		endif
00000000                            
00000000                            		zindoff \reg, $CD
00000000                            		zgetreg \reg2, 0
00000000                            
00000000                            		if (ztemp>=0)&(ztemp<=za)
00000000                            			dc.b $18+ztemp
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination '\reg' and '\reg2'!"
00000000                            		endif
00000000                            		mexit
00000000                            	endif
00000000                            
00000000                            	if (ztemp>=0)&(ztemp<=za)
00000000                            		dc.b $CB, $18+ztemp		; rr a, b, c, d, e, h or l
00000000                            
00000000                            	elseif ztemp=zhlr
00000000                            		dc.b $CB, $1E			; rr (hl)
00000000                            
00000000                            	elseif ztemp=zixp
00000000                            		dc.b $DD			; rr (ix+*)
00000000                            		zindoff \reg, $CB
00000000                            		dc.b $1E
00000000                            
00000000                            	elseif ztemp=ziyp
00000000                            		dc.b $FD			; rr (iy+*)
00000000                            		zindoff \reg, $CB
00000000                            		dc.b $1E
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            sla	macro reg
00000000                            	if narg>2
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 0
00000000                            
00000000                            	if narg=2
00000000                            		if zundoc
00000000                            			inform 2,"Undocumented opcodes are not enabled."
00000000                            		endif
00000000                            
00000000                            		if (ztemp=zixp)
00000000                            			dc.b $DD
00000000                            
00000000                            		elseif (ztemp=ziyp)
00000000                            			dc.b $FD
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination '\reg' and '\reg2'!"
00000000                            		endif
00000000                            
00000000                            		zindoff \reg, $CD
00000000                            		zgetreg \reg2, 0
00000000                            
00000000                            		if (ztemp>=0)&(ztemp<=za)
00000000                            			dc.b $20+ztemp
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination '\reg' and '\reg2'!"
00000000                            		endif
00000000                            		mexit
00000000                            	endif
00000000                            
00000000                            	if (ztemp>=0)&(ztemp<=za)
00000000                            		dc.b $CB, $20+ztemp		; sla a, b, c, d, e, h or l
00000000                            
00000000                            	elseif ztemp=zhlr
00000000                            		dc.b $CB, $26			; sla (hl)
00000000                            
00000000                            	elseif ztemp=zixp
00000000                            		dc.b $DD			; sla (ix+*)
00000000                            		zindoff \reg, $CB
00000000                            		dc.b $26
00000000                            
00000000                            	elseif ztemp=ziyp
00000000                            		dc.b $FD			; sla (iy+*)
00000000                            		zindoff \reg, $CB
00000000                            		dc.b $26
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            sra	macro reg
00000000                            	if narg>2
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 0
00000000                            
00000000                            	if narg=2
00000000                            		if zundoc
00000000                            			inform 2,"Undocumented opcodes are not enabled."
00000000                            		endif
00000000                            
00000000                            		if (ztemp=zixp)
00000000                            			dc.b $DD
00000000                            
00000000                            		elseif (ztemp=ziyp)
00000000                            			dc.b $FD
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination '\reg' and '\reg2'!"
00000000                            		endif
00000000                            
00000000                            		zindoff \reg, $CD
00000000                            		zgetreg \reg2, 0
00000000                            
00000000                            		if (ztemp>=0)&(ztemp<=za)
00000000                            			dc.b $28+ztemp
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination '\reg' and '\reg2'!"
00000000                            		endif
00000000                            		mexit
00000000                            	endif
00000000                            
00000000                            	if (ztemp>=0)&(ztemp<=za)
00000000                            		dc.b $CB, $28+ztemp		; sra a, b, c, d, e, h or l
00000000                            
00000000                            	elseif ztemp=zhlr
00000000                            		dc.b $CB, $2E			; sra (hl)
00000000                            
00000000                            	elseif ztemp=zixp
00000000                            		dc.b $DD			; sra (ix+*)
00000000                            		zindoff \reg, $CB
00000000                            		dc.b $2E
00000000                            
00000000                            	elseif ztemp=ziyp
00000000                            		dc.b $FD			; sra (iy+*)
00000000                            		zindoff \reg, $CB
00000000                            		dc.b $2E
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            sll	macro reg
00000000                            	if zundoc
00000000                            		inform 2,"Undocumented opcodes are not enabled."
00000000                            	endif
00000000                            
00000000                            	if narg>2
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 0
00000000                            
00000000                            	if narg=2
00000000                            		if (ztemp=zixp)
00000000                            			dc.b $DD
00000000                            
00000000                            		elseif (ztemp=ziyp)
00000000                            			dc.b $FD
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination '\reg' and '\reg2'!"
00000000                            		endif
00000000                            
00000000                            		zindoff \reg, $CD
00000000                            		zgetreg \reg2, 0
00000000                            
00000000                            		if (ztemp>=0)&(ztemp<=za)
00000000                            			dc.b $30+ztemp
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination '\reg' and '\reg2'!"
00000000                            		endif
00000000                            		mexit
00000000                            	endif
00000000                            
00000000                            	if (ztemp>=0)&(ztemp<=za)
00000000                            		dc.b $CB, $30+ztemp		; sll a, b, c, d, e, h or l
00000000                            
00000000                            	elseif ztemp=zhlr
00000000                            		dc.b $CB, $36			; sll (hl)
00000000                            
00000000                            	elseif ztemp=zixp
00000000                            		dc.b $DD			; sll (ix+*)
00000000                            		zindoff \reg, $CB
00000000                            		dc.b $36
00000000                            
00000000                            	elseif ztemp=ziyp
00000000                            		dc.b $FD			; sll (iy+*)
00000000                            		zindoff \reg, $CB
00000000                            		dc.b $36
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            srl	macro reg
00000000                            	if narg>2
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 0
00000000                            
00000000                            	if narg=2
00000000                            		if zundoc
00000000                            			inform 2,"Undocumented opcodes are not enabled."
00000000                            		endif
00000000                            
00000000                            		if (ztemp=zixp)
00000000                            			dc.b $DD
00000000                            
00000000                            		elseif (ztemp=ziyp)
00000000                            			dc.b $FD
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination '\reg' and '\reg2'!"
00000000                            		endif
00000000                            
00000000                            		zindoff \reg, $CD
00000000                            		zgetreg \reg2, 0
00000000                            
00000000                            		if (ztemp>=0)&(ztemp<=za)
00000000                            			dc.b $38+ztemp
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination '\reg' and '\reg2'!"
00000000                            		endif
00000000                            		mexit
00000000                            	endif
00000000                            
00000000                            	if (ztemp>=0)&(ztemp<=za)
00000000                            		dc.b $CB, $38+ztemp		; sra a, b, c, d, e, h or l
00000000                            
00000000                            	elseif ztemp=zhlr
00000000                            		dc.b $CB, $3E			; sra (hl)
00000000                            
00000000                            	elseif ztemp=zixp
00000000                            		dc.b $DD			; sra (ix+*)
00000000                            		zindoff \reg, $CB
00000000                            		dc.b $3E
00000000                            
00000000                            	elseif ztemp=ziyp
00000000                            		dc.b $FD			; sra (iy+*)
00000000                            		zindoff \reg, $CB
00000000                            		dc.b $3E
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            bit	macro bit, reg
00000000                            	if narg<>2
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	if (\bit<0)|(\bit>7)
00000000                            		inform 2,"Invalid bit '\bit'!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 0
00000000                            
00000000                            	if (ztemp>=0)&(ztemp<=za)
00000000                            		dc.b $CB, $40+ztemp+(\bit*$08)	; bit 0-7,a, b, c, d, e, h or l
00000000                            
00000000                            	elseif ztemp=zhlr
00000000                            		dc.b $CB, $46+(\bit*$08)	; bit 0-7,(hl)
00000000                            
00000000                            	elseif ztemp=zixp
00000000                            		dc.b $DD			; bit 0-7,(ix+*)
00000000                            		zindoff \reg, $CB
00000000                            		dc.b $46+(\bit*$08)
00000000                            
00000000                            	elseif ztemp=ziyp
00000000                            		dc.b $FD			; bit 0-7,(iy+*)
00000000                            		zindoff \reg, $CB
00000000                            		dc.b $46+(\bit*$08)
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            res	macro bit, reg, reg2
00000000                            	if narg>3
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	if (\bit<0)|(\bit>7)
00000000                            		inform 2,"Invalid bit '\bit'!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 0
00000000                            
00000000                            	if (ztemp>=0)&(ztemp<=za)
00000000                            		dc.b $CB, $80+ztemp+(\bit*$08)	; res 0-7,a, b, c, d, e, h or l
00000000                            
00000000                            	elseif ztemp=zhlr
00000000                            		dc.b $CB, $86+(\bit*$08)	; res 0-7,(hl)
00000000                            
00000000                            	elseif (ztemp=zixp)|(ztemp=ziyp)
00000000                            		dc.b $DD+((ztemp-zixp)*$20)	; res 0-7,(ix/iy+*),  , a, b, c, d, e, h, l
00000000                            		zindoff \reg, $CB
00000000                            
00000000                            		if narg=3
00000000                            			if zundoc
00000000                            				inform 2,"Undocumented opcodes are not enabled."
00000000                            			endif
00000000                            
00000000                            			zgetreg \reg2, 0
00000000                            			if (ztemp<0)|(ztemp>za)
00000000                            				inform 2,"Invalid or unsupported register '\reg2'!"
00000000                            			endif
00000000                            		else
00000000                            ztemp =			6
00000000                            		endif
00000000                            
00000000                            		dc.b $80+(\bit*$08)+ztemp
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            zset	macro bit, reg
00000000                            	if narg>3
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	if (\bit<0)|(\bit>7)
00000000                            		inform 2,"Invalid bit '\bit'!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 0
00000000                            
00000000                            	if (ztemp>=0)&(ztemp<=za)
00000000                            		dc.b $CB, $C0+ztemp+(\bit*$08)	; set 0-7,a, b, c, d, e, h or l
00000000                            
00000000                            	elseif ztemp=zhlr
00000000                            		dc.b $CB, $C6+(\bit*$08)	; set 0-7,(hl)
00000000                            
00000000                            	elseif (ztemp=zixp)|(ztemp=ziyp)
00000000                            		dc.b $DD+((ztemp-zixp)*$20)	; set 0-7,(ix/iy+*),  , a, b, c, d, e, h, l
00000000                            		zindoff \reg, $CB
00000000                            
00000000                            		if narg=3
00000000                            			if zundoc
00000000                            				inform 2,"Undocumented opcodes are not enabled."
00000000                            			endif
00000000                            
00000000                            			zgetreg \reg2, 0
00000000                            			if (ztemp<0)|(ztemp>za)
00000000                            				inform 2,"Invalid or unsupported register '\reg2'!"
00000000                            			endif
00000000                            		else
00000000                            ztemp =			6
00000000                            		endif
00000000                            
00000000                            		dc.b $C0+(\bit*$08)+ztemp
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            im	macro im
00000000                            	if narg<>1
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	if "\im"="0/1"
00000000                            		if zundoc
00000000                            			inform 2,"Undocumented opcodes are not enabled."
00000000                            		endif
00000000                            
00000000                            		dc.b $ED, $4E		; im 0/1
00000000                            
00000000                            	elseif (\im<0)|(\im>2)
00000000                            		inform 2,"Interrupt mode must only be 0, 1 or 2!"
00000000                            
00000000                            	elseif \im=2
00000000                            		dc.b $ED, $5E		; im 2
00000000                            	else
00000000                            		dc.b $ED, $46+(\im*$10); im 0 or 1
00000000                            	endif
00000000                                endm
00000000                            
00000000                            rst	macro addr
00000000                            	if narg<>1
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	if (\addr&7)=0
00000000                            		if \addr>$48|\addr<0
00000000                            			inform 2,"Invalid address! Must be at least 0 and at most $38!"
00000000                            		else
00000000                            			dc.b $C7+\addr	; RST *
00000000                            		endif
00000000                            	else
00000000                            		inform 2,"Address must be aligned by $8!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            inc	macro reg
00000000                            	if narg<>1
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 2
00000000                            
00000000                            	if ztemp<=za
00000000                            		dc.b $04+(ztemp*$08)		; inc a, b, c, d, e, h or l
00000000                            
00000000                            	elseif ztemp=zhlr
00000000                            		dc.b $34			; inc (hl)
00000000                            
00000000                            	elseif (ztemp>=zbc)&(ztemp<=zsp)
00000000                            		dc.b $03+((ztemp-zbc)*$10)	; inc bc, de, hl or sp
00000000                            
00000000                            	elseif ztemp=zix
00000000                            		dc.b $DD, $23			; inc ix
00000000                            
00000000                            	elseif ztemp=ziy
00000000                            		dc.b $FD, $23			; inc iy
00000000                            
00000000                            	elseif ztemp=zixp
00000000                            		dc.b $DD			; inc ix+
00000000                            		zindoff \reg, $34
00000000                            
00000000                            	elseif ztemp=ziyp
00000000                            		dc.b $FD			; inc iy+
00000000                            		zindoff \reg, $34
00000000                            
00000000                            	elseif (ztemp>=zixh)&(ztemp<=ziyl)
00000000                            		if zundoc
00000000                            			inform 2,"Undocumented opcodes are not enabled."
00000000                            		endif
00000000                            
00000000                            		dc.b $DD+((ztemp&$02)*$10), $24+((ztemp&$01)*$08); inc ixh, ixl, iyh, iyl
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            dec	macro reg
00000000                            	if narg<>1
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 2
00000000                            
00000000                            	if ztemp<=za
00000000                            		dc.b $05+(ztemp*$08)		; dec a, b, c, d, e, h or l
00000000                            
00000000                            	elseif ztemp=zhlr
00000000                            		dc.b $35			; dec (hl)
00000000                            
00000000                            	elseif (ztemp>=zbc)&(ztemp<=zsp)
00000000                            		dc.b $0B+((ztemp-zbc)*$10)	; dec bc, de, hl or sp
00000000                            
00000000                            	elseif ztemp=zix
00000000                            		dc.b $DD, $2B			; dec ix
00000000                            
00000000                            	elseif ztemp=ziy
00000000                            		dc.b $FD, $2B			; dec iy
00000000                            
00000000                            	elseif ztemp=zixp
00000000                            		dc.b $DD			; dec ix+
00000000                            		zindoff \reg, $35
00000000                            
00000000                            	elseif ztemp=ziyp
00000000                            		dc.b $FD			; dec iy+
00000000                            		zindoff \reg, $35
00000000                            
00000000                            	elseif (ztemp>=zixh)&(ztemp<=ziyl)
00000000                            		if zundoc
00000000                            			inform 2,"Undocumented opcodes are not enabled."
00000000                            		endif
00000000                            
00000000                            		dc.b $FD+((ztemp&$02)*$10), $24+((ztemp&$01)*$08); dec ixh, ixl, iyh, iyl
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            zsub	macro reg
00000000                            	if narg<>1
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 0
00000000                            
00000000                            	if ztemp=-1
00000000                            		dc.b $D6			; sub a,*
00000000                            		dc.b \reg
00000000                            
00000000                            	elseif ztemp<=za
00000000                            		dc.b $90+ztemp			; sub a,a, b, c, d, e, h or l
00000000                            
00000000                            	elseif ztemp=zhlr
00000000                            		dc.b $96			; sub a,(hl)
00000000                            
00000000                            	elseif ztemp=zixp
00000000                            		dc.b $DD			; sub a,(ix+*)
00000000                            		zindoff \reg, $96
00000000                            
00000000                            	elseif ztemp=ziyp
00000000                            		dc.b $FD			; sub a,(iy+*)
00000000                            		zindoff \reg, $96
00000000                            
00000000                            	elseif (ztemp>=zixh)&(ztemp<=ziyl)
00000000                            		if zundoc
00000000                            			inform 2,"Undocumented opcodes are not enabled."
00000000                            		endif
00000000                            
00000000                            		dc.b $DD+((ztemp&$02)*$10), $94+(ztemp&$01); sub a,ixh, ixl, iyh, iyl
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            zand	macro reg
00000000                            	if narg<>1
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 0
00000000                            
00000000                            	if ztemp=-1
00000000                            		dc.b $E6			; and a,*
00000000                            		dc.b \reg
00000000                            
00000000                            	elseif ztemp<=za
00000000                            		dc.b $A0+ztemp			; and a,a, b, c, d, e, h or l
00000000                            
00000000                            	elseif ztemp=zhlr
00000000                            		dc.b $A6			; and a,(hl)
00000000                            
00000000                            	elseif ztemp=zixp
00000000                            		dc.b $DD			; and a,(ix+*)
00000000                            		zindoff \reg, $A6
00000000                            
00000000                            	elseif ztemp=ziyp
00000000                            		dc.b $FD			; and a,(iy+*)
00000000                            		zindoff \reg, $A6
00000000                            
00000000                            	elseif (ztemp>=zixh)&(ztemp<=ziyl)
00000000                            		if zundoc
00000000                            			inform 2,"Undocumented opcodes are not enabled."
00000000                            		endif
00000000                            
00000000                            		dc.b $DD+((ztemp&$02)*$10), $A4+(ztemp&$01); and a,ixh, ixl, iyh, iyl
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            zor	macro reg
00000000                            	if narg<>1
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 0
00000000                            
00000000                            	if ztemp=-1
00000000                            		dc.b $F6			; or a,*
00000000                            		dc.b \reg
00000000                            
00000000                            	elseif ztemp<=za
00000000                            		dc.b $B0+ztemp			; or a,a, b, c, d, e, h or l
00000000                            
00000000                            	elseif ztemp=zhlr
00000000                            		dc.b $B6			; or a,(hl)
00000000                            
00000000                            	elseif ztemp=zixp
00000000                            		dc.b $DD			; or a,(ix+*)
00000000                            		zindoff \reg, $B6
00000000                            
00000000                            	elseif ztemp=ziyp
00000000                            		dc.b $FD			; or a,(iy+*)
00000000                            		zindoff \reg, $B6
00000000                            
00000000                            	elseif (ztemp>=zixh)&(ztemp<=ziyl)
00000000                            		if zundoc
00000000                            			inform 2,"Undocumented opcodes are not enabled."
00000000                            		endif
00000000                            
00000000                            		dc.b $DD+((ztemp&$02)*$10), $B4+(ztemp&$01); or a,ixh, ixl, iyh, iyl
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            xor	macro reg
00000000                            	if narg<>1
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 0
00000000                            
00000000                            	if ztemp=-1
00000000                            		dc.b $EE			; xor a,*
00000000                            		dc.b \reg
00000000                            
00000000                            	elseif ztemp<=za
00000000                            		dc.b $A8+ztemp			; xor a,a, b, c, d, e, h or l
00000000                            
00000000                            	elseif ztemp=zhlr
00000000                            		dc.b $B6			; xor a,(hl)
00000000                            
00000000                            	elseif ztemp=zixp
00000000                            		dc.b $DD			; xor a,(ix+*)
00000000                            		zindoff \reg, $AE
00000000                            
00000000                            	elseif ztemp=ziyp
00000000                            		dc.b $FD			; xor a,(iy+*)
00000000                            		zindoff \reg, $AE
00000000                            
00000000                            	elseif (ztemp>=zixh)&(ztemp<=ziyl)
00000000                            		if zundoc
00000000                            			inform 2,"Undocumented opcodes are not enabled."
00000000                            		endif
00000000                            
00000000                            		dc.b $DD+((ztemp&$02)*$10), $AC+(ztemp&$01); xor a,ixh, ixl, iyh, iyl
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            cp	macro reg
00000000                            	if narg<>1
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 0
00000000                            
00000000                            	if ztemp=-1
00000000                            		dc.b $FE			; cp a,*
00000000                            		dc.b \reg
00000000                            
00000000                            	elseif ztemp<=za
00000000                            		dc.b $B8+ztemp			; cp a,a, b, c, d, e, h or l
00000000                            
00000000                            	elseif ztemp=zhlr
00000000                            		dc.b $BE			; cp a,(hl)
00000000                            
00000000                            	elseif ztemp=zixp
00000000                            		dc.b $DD			; cp a,(ix+*)
00000000                            		zindoff \reg, $BE
00000000                            
00000000                            	elseif ztemp=ziyp
00000000                            		dc.b $FD			; cp a,(iy+*)
00000000                            		zindoff \reg, $BE
00000000                            
00000000                            	elseif (ztemp>=zixh)&(ztemp<=ziyl)
00000000                            		if zundoc
00000000                            			inform 2,"Undocumented opcodes are not enabled."
00000000                            		endif
00000000                            
00000000                            		dc.b $DD+((ztemp&$02)*$10), $BC+(ztemp&$01); cp a,ixh, ixl, iyh, iyl
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            zadd	macro reg1, reg2
00000000                            	if narg>2
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg1, 0
00000000                            ztemp1 =	ztemp
00000000                            
00000000                            	if narg>1
00000000                            		zgetreg \reg2, 0
00000000                            	endif
00000000                            
00000000                            	if ((narg=1)&((ztemp<=za)|(ztemp=zhlr)|(ztemp=zixp)|(ztemp=ziyp)))|(ztemp1=za)|(ztemp1=zixp)|(ztemp1=ziyp); this complex piece of shit just checks if we omitted the a param
00000000                            		if (ztemp1=zixp)|(ztemp=zixp)
00000000                            			if ztemp1=za
00000000                            				shift
00000000                            			endif
00000000                            
00000000                            			dc.b $DD		; add a,(ix+*)
00000000                            			zindoff \reg1, $86
00000000                            
00000000                            		elseif (ztemp1=ziyp)|(ztemp=ziyp)
00000000                            			if ztemp1=za
00000000                            				shift
00000000                            			endif
00000000                            
00000000                            			dc.b $FD		; add a,(iy+*)
00000000                            			zindoff \reg1, $86
00000000                            
00000000                            		elseif ztemp=zhlr
00000000                            			dc.b $86		; add a,(hl)
00000000                            
00000000                            		elseif ztemp=-1
00000000                            			if ztemp1=za
00000000                            				shift
00000000                            			endif
00000000                            
00000000                            			dc.b $C6		; add a,*
00000000                            			dc.b \reg1
00000000                            
00000000                            		elseif ztemp<=za
00000000                            			dc.b $80+ztemp		; add a,a, b, c, d, e, h or l
00000000                            
00000000                            		elseif (ztemp>=zixh)&(ztemp<=ziyl)
00000000                            			if zundoc
00000000                            				inform 2,"Undocumented opcodes are not enabled."
00000000                            			endif
00000000                            
00000000                            			dc.b $DD+((ztemp&$02)*$10), $84+(ztemp&$01); add a,ixh, ixl, iyh, iyl
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination: a, \reg2!"
00000000                            		endif
00000000                            
00000000                            	elseif ((narg=1)&(ztemp>=zbc)&(ztemp<=zsp))|(ztemp1=zhl)	; this piece of shit just checks if we omitted the hl param
00000000                            		dc.b $09+((ztemp-zbc)*$10)	; add hl,bc, de, hl or sp
00000000                            
00000000                            	elseif ztemp1=zix
00000000                            		dc.b $DD
00000000                            
00000000                            		if ztemp=zbc
00000000                            			dc.b $09		; add ix,bc
00000000                            
00000000                            		elseif ztemp=zde
00000000                            			dc.b $19		; add ix,de
00000000                            
00000000                            		elseif ztemp=zix
00000000                            			dc.b $29		; add ix,ix
00000000                            
00000000                            		elseif ztemp=zsp
00000000                            			dc.b $39		; add ix,sp
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination: ix, \reg2!"
00000000                            		endif
00000000                            
00000000                            	elseif ztemp1=ziy
00000000                            		dc.b $FD
00000000                            
00000000                            		if ztemp=zbc
00000000                            			dc.b $09		; add iy,bc
00000000                            
00000000                            		elseif ztemp=zde
00000000                            			dc.b $19		; add iy,de
00000000                            
00000000                            		elseif ztemp=ziy
00000000                            			dc.b $29		; add iy,iy
00000000                            
00000000                            		elseif ztemp=zsp
00000000                            			dc.b $39		; add iy,sp
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination: iy, \reg2!"
00000000                            		endif
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg1'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            adc	macro reg1, reg2
00000000                            	if narg>2
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg1, 0
00000000                            ztemp1 =	ztemp
00000000                            
00000000                            	if narg>1
00000000                            		zgetreg \reg2, 0
00000000                            	endif
00000000                            
00000000                            	if ((narg=1)&((ztemp<=za)|(ztemp=zhlr)|(ztemp=zixp)|(ztemp=ziyp)))|(ztemp1=za)|(ztemp1=zixp)|(ztemp1=ziyp); this complex piece of shit just checks if we omitted the a param
00000000                            		if (ztemp1=zixp)|(ztemp=zixp)
00000000                            			if ztemp1=za
00000000                            				shift
00000000                            			endif
00000000                            
00000000                            			dc.b $DD		; adc a,(ix+*)
00000000                            			zindoff \reg1, $8E
00000000                            
00000000                            		elseif (ztemp1=ziyp)|(ztemp=ziyp)
00000000                            			if ztemp1=za
00000000                            				shift
00000000                            			endif
00000000                            
00000000                            			dc.b $FD		; adc a,(iy+*)
00000000                            			zindoff \reg1, $8E
00000000                            
00000000                            		elseif ztemp=zhlr
00000000                            			dc.b $8E		; adc a,(hl)
00000000                            
00000000                            		elseif ztemp=-1
00000000                            			if ztemp1=za
00000000                            				shift
00000000                            			endif
00000000                            
00000000                            			dc.b $CE		; adc a,*
00000000                            			dc.b \reg1
00000000                            
00000000                            		elseif ztemp<=za
00000000                            			dc.b $88+ztemp		; adc a,a, b, c, d, e, h or l
00000000                            
00000000                            		elseif (ztemp>=zixh)&(ztemp<=ziyl)
00000000                            			if zundoc
00000000                            				inform 2,"Undocumented opcodes are not enabled."
00000000                            			endif
00000000                            
00000000                            			dc.b $DD+((ztemp&$02)*$10), $8C+(ztemp&$01); adc a,ixh, ixl, iyh, iyl
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination: a, \reg2!"
00000000                            		endif
00000000                            
00000000                            	elseif ((narg=1)&(ztemp>=zbc)&(ztemp<=zsp))|(ztemp1=zhl)	; this piece of shit just checks if we omitted the hl param
00000000                            		dc.b $ED, $4A+((ztemp-zbc)*$10)	; adc hl,bc, de, hl or sp
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg1'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            sbc	macro reg1, reg2
00000000                            	if narg>2
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg1, 0
00000000                            ztemp1 =	ztemp
00000000                            
00000000                            	if narg>1
00000000                            		zgetreg \reg2, 0
00000000                            	endif
00000000                            
00000000                            	if ((narg=1)&((ztemp<=za)|(ztemp=zhlr)|(ztemp=zixp)|(ztemp=ziyp)))|(ztemp1=za)|(ztemp1=zixp)|(ztemp1=ziyp); this complex piece of shit just checks if we omitted the a param
00000000                            		if (ztemp1=zixp)|(ztemp=zixp)
00000000                            			if ztemp1=za
00000000                            				shift
00000000                            			endif
00000000                            
00000000                            			dc.b $DD		; sbc a,(ix+*)
00000000                            			zindoff \reg1, $9E
00000000                            
00000000                            		elseif (ztemp1=ziyp)|(ztemp=ziyp)
00000000                            			if ztemp1=za
00000000                            				shift
00000000                            			endif
00000000                            
00000000                            			dc.b $FD		; sbc a,(iy+*)
00000000                            			zindoff \reg1, $9E
00000000                            
00000000                            		elseif ztemp=zhlr
00000000                            			dc.b $9E		; sbc a,(hl)
00000000                            
00000000                            		elseif ztemp=-1
00000000                            			if ztemp1=za
00000000                            				shift
00000000                            			endif
00000000                            
00000000                            			dc.b $DE		; sbc a,*
00000000                            			dc.b \reg1
00000000                            
00000000                            		elseif ztemp<=za
00000000                            			dc.b $98+ztemp		; sbc a,a, b, c, d, e, h or l
00000000                            
00000000                            		elseif (ztemp>=zixh)&(ztemp<=ziyl)
00000000                            			if zundoc
00000000                            				inform 2,"Undocumented opcodes are not enabled."
00000000                            			endif
00000000                            
00000000                            			dc.b $DD+((ztemp&$02)*$10), $9C+(ztemp&$01); sbc a,ixh, ixl, iyh, iyl
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination: a, \reg2!"
00000000                            		endif
00000000                            
00000000                            	elseif ((narg=1)&(ztemp>=zbc)&(ztemp<=zsp))|(ztemp1=zhl)	; this piece of shit just checks if we omitted the hl param
00000000                            		dc.b $ED, $42+((ztemp-zbc)*$10)	; sbc hl,bc, de, hl or sp
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg1'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            pop	macro reg
00000000                            	if narg<>1
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 2
00000000                            
00000000                            	if (ztemp>=zbc)&(ztemp<=zhl)
00000000                            		dc.b $C1+((ztemp-zbc)*$10); pop bc, de or hl
00000000                            
00000000                            	elseif ztemp=zaf
00000000                            		dc.b $F1		; pop af
00000000                            	elseif ztemp=zix
00000000                            		dc.b $DD, $E1		; pop ix
00000000                            	elseif ztemp=ziy
00000000                            		dc.b $FD, $E1		; pop iy
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            push	macro reg
00000000                            	if narg<>1
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 2
00000000                            
00000000                            	if (ztemp>=zbc)&(ztemp<=zhl)
00000000                            		dc.b $C5+((ztemp-zbc)*$10); pop bc, de or hl
00000000                            
00000000                            	elseif ztemp=zaf
00000000                            		dc.b $F5		; pop af
00000000                            	elseif ztemp=zix
00000000                            		dc.b $DD, $E5		; pop ix
00000000                            	elseif ztemp=ziy
00000000                            		dc.b $FD, $E5		; pop iy
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            ex	macro reg1, reg2
00000000                            	if narg<>2
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg1, 0
00000000                            zreg1 =	ztemp
00000000                            	zgetreg \reg2, 0
00000000                            
00000000                            	if ((zreg1=zaf)|(zreg1=zaf2))&((ztemp=zaf)|(ztemp=zaf2))
00000000                            		dc.b $08			; ex af,af' & ex af',af & ex af,af
00000000                            
00000000                            	elseif ((zreg1=zde)|(zreg1=zhl))&((ztemp=zde)|(ztemp=zhl))
00000000                            		dc.b $EB			; ex de,hl & ex hl,de
00000000                            
00000000                            	elseif ((zreg1=zspr)|(zreg1=zhl))&((ztemp=zspr)|(ztemp=zhl))
00000000                            		dc.b $E3			; ex (sp),hl & ex hl,(sp)
00000000                            
00000000                            	elseif ((zreg1=zix)|(zreg1=zspr))&((ztemp=zix)|(ztemp=zspr))
00000000                            		dc.b $DD,$E3			; ex (sp),ix & ex ix,(sp)
00000000                            
00000000                            	elseif ((zreg1=ziy)|(zreg1=zspr))&((ztemp=ziy)|(ztemp=zspr))
00000000                            		dc.b $FD,$E3			; ex (sp),iy & ex iy,(sp)
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register combination '\reg1' and '\reg2'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            out	macro port, reg
00000000                            	if narg<>2
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 0
00000000                            
00000000                            	if instr("\port", "(c)")<>0
00000000                            		if (ztemp=-1)&(instr("\port", "0")<>0)
00000000                            			if zundoc
00000000                            				inform 2,"Undocumented opcodes are not enabled."
00000000                            			endif
00000000                            
00000000                            			dc.b $ED, $71		; out (c),0
00000000                            
00000000                            		elseif ztemp<=za
00000000                            			dc.b $ED, $41+(ztemp*$08)		; out (c),a, b, c, d, e, h or l
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register '\reg'!"
00000000                            		endif
00000000                            
00000000                            	elseif ztemp=za
00000000                            		dc.b $D3, \port		; out (*),a
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported port '\port'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            in	macro reg, port
00000000                            	if narg>2
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 0
00000000                            
00000000                            	if instr("\port", "(c)")<>0
00000000                            		if narg=1
00000000                            			if zundoc
00000000                            				inform 2,"Undocumented opcodes are not enabled."
00000000                            			endif
00000000                            
00000000                            			dc.b $ED, $70		; in (c)
00000000                            
00000000                            		elseif ztemp<=za
00000000                            			dc.b $ED, $40+(ztemp*$08)		; in a, b, c, d, e, h or l,(c)
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register '\reg'!"
00000000                            		endif
00000000                            
00000000                            	elseif ztemp=za
00000000                            		dc.b $D3, \port		; in a,(*)
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported port '\port'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            ld	macro reg1, reg2
00000000                            	if narg>2
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg1, 0
00000000                            zreg1 =	ztemp
00000000                            	zgetreg \reg2, 0
00000000                            zreg2 =	ztemp
00000000                            
00000000                            	if zreg1=-2
00000000                            		if zreg2=za
00000000                            			dc.b $32			; ld (**),a
00000000                            			z80word \reg1
00000000                            
00000000                            		elseif zreg2=zhl
00000000                            			dc.b $22			; ld (**),hl
00000000                            			z80word \reg1
00000000                            
00000000                            		elseif (zreg2>=zbc)&(zreg2<=zsp)
00000000                            			dc.b $ED, $43+((zreg2-zbc)*$10)	; ld (**),bc, de, sp
00000000                            			z80word \reg1
00000000                            
00000000                            		elseif zreg2=zix
00000000                            			dc.b $DD, $22			; ld (**),ix
00000000                            			z80word \reg1
00000000                            
00000000                            		elseif zreg2=ziy
00000000                            			dc.b $FD, $22			; ld (**),iy
00000000                            			z80word \reg1
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination '\reg1' and '\reg2'!"
00000000                            		endif
00000000                            
00000000                            	elseif zreg2=-1
00000000                            		if (zreg1<=za)
00000000                            			dc.b $06+(zreg1*$08), \reg2	; ld a, b, c, d, e, h or l,*
00000000                            
00000000                            		elseif zreg1=zhlr
00000000                            			dc.b $36, \reg2			; ld (hl),*
00000000                            
00000000                            		elseif (zreg1>=zbc)&(zreg1<=zsp)
00000000                            			dc.b $01+((zreg1-zbc)*$10)	; ld bc, de, hl, sp,**
00000000                            			z80word \reg2
00000000                            
00000000                            		elseif zreg1=zix
00000000                            			dc.b $DD, $21			; ld ix,**
00000000                            			z80word \reg2
00000000                            
00000000                            		elseif zreg1=ziy
00000000                            			dc.b $FD, $21			; ld iy,**
00000000                            			z80word \reg2
00000000                            
00000000                            		elseif zreg1=zixp
00000000                            			dc.b $DD			; ld (ix+*),*
00000000                            			zindoff \reg1, $36
00000000                            			dc.b \reg2
00000000                            
00000000                            		elseif zreg1=ziyp
00000000                            			dc.b $FD			; ld (iy+*),*
00000000                            			zindoff \reg1, $36
00000000                            			dc.b \reg2
00000000                            
00000000                            		elseif (zreg1>=zixh)&(zreg1<=ziyl)
00000000                            			if zundoc
00000000                            				inform 2,"Undocumented opcodes are not enabled."
00000000                            			endif
00000000                            
00000000                            			dc.b $DD+((zreg1&$02)*$10), $26+((zreg1&$01)*$08), \reg2; ld ixh, ixl, iyh, iyl,*
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination '\reg1' and '\reg2'!"
00000000                            		endif
00000000                            
00000000                            	elseif zreg2=-2
00000000                            		if (zreg1=za)
00000000                            			dc.b $3A			; ld a,(**)
00000000                            			z80word \reg2
00000000                            
00000000                            		elseif zreg1=zhl
00000000                            			dc.b $2A			; ld hl,(**)
00000000                            			z80word \reg2
00000000                            
00000000                            		elseif (zreg1>=zbc)&(zreg1<=zsp)
00000000                            			dc.b $ED, $4B+((zreg1-zbc)*$10)	; ld bc, de, hl, sp,(**)
00000000                            			z80word \reg2
00000000                            
00000000                            		elseif zreg1=zix
00000000                            			dc.b $DD, $2A			; ld ix,(**)
00000000                            			z80word \reg2
00000000                            
00000000                            		elseif zreg1=ziy
00000000                            			dc.b $FD, $2A			; ld iy,(**)
00000000                            			z80word \reg2
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination '\reg1' and '\reg2'!"
00000000                            		endif
00000000                            
00000000                            	elseif (zreg1<=za)&(zreg2<=za)
00000000                            		dc.b $40+(zreg1*$08)+zreg2		; ld a, b, c, d, e, h or l,a, b, c, d, e, h or l
00000000                            
00000000                            	elseif (zreg1=za)&(zreg2=zbcr)
00000000                            		dc.b $0A				; ld a,(bc)
00000000                            
00000000                            	elseif (zreg1=za)&(zreg2=zder)
00000000                            		dc.b $1A				; ld a,(de)
00000000                            
00000000                            	elseif (zreg1<=za)&(zreg2=zhlr)
00000000                            		dc.b $46+(zreg1*$08)			; ld a, b, c, d, e, h or l,(hl)
00000000                            
00000000                            	elseif (zreg1=zhlr)&(zreg2<=za)
00000000                            		dc.b $70+zreg2				; ld (hl),a, b, c, d, e, h or l
00000000                            
00000000                            	elseif (zreg1<=za)&(zreg2=zixp)
00000000                            		dc.b $DD				; ld a, b, c, d, e, h or l,(ix+*)
00000000                            		zindoff \reg2, $46+(zreg1*$08)
00000000                            
00000000                            	elseif (zreg1<=za)&(zreg2=ziyp)
00000000                            		dc.b $FD				; ld a, b, c, d, e, h or l,(iy+*)
00000000                            		zindoff \reg2, $46+(zreg1*$08)
00000000                            
00000000                            	elseif (zreg2<=za)&(zreg1=zixp)
00000000                            		dc.b $DD				; ld (ix+*),a, b, c, d, e, h or l
00000000                            		zindoff \reg1, $70+zreg2
00000000                            
00000000                            	elseif (zreg2<=za)&(zreg1=ziyp)
00000000                            		dc.b $FD				; ld (iy+*),a, b, c, d, e, h or l
00000000                            		zindoff \reg1, $70+zreg2
00000000                            
00000000                            	elseif (zreg1=zbcr)&(zreg2=za)
00000000                            		dc.b $02				; ld (bc),a
00000000                            
00000000                            	elseif (zreg1=zder)&(zreg2=za)
00000000                            		dc.b $12				; ld (de),a
00000000                            
00000000                            	elseif (zreg1=zsp)&(zreg2=zhl)
00000000                            		dc.b $F9				; ld sp,hl
00000000                            
00000000                            	elseif (zreg1=zi)&(zreg2=za)
00000000                            		dc.b $ED, $47				; ld i,a
00000000                            
00000000                            	elseif (zreg2=zi)&(zreg1=za)
00000000                            		dc.b $ED, $57				; ld a,i
00000000                            
00000000                            	elseif (zreg1=zr)&(zreg2=za)
00000000                            		dc.b $ED, $4F				; ld r,a
00000000                            
00000000                            	elseif (zreg2=zr)&(zreg1=za)
00000000                            		dc.b $ED, $5F				; ld a,r
00000000                            
00000000                            	elseif (zreg1=zsp)&(zreg2=zix)
00000000                            		dc.b $DD, $F9				; ld sp, ix
00000000                            
00000000                            	elseif (zreg1=zsp)&(zreg2=ziy)
00000000                            		dc.b $FD, $F9				; ld sp, iy
00000000                            
00000000                            	elseif (zreg1>=zixh)&(zreg1<=ziyl)&((zreg2<=za)&(zreg2<>zh)&(zreg2<>zl))
00000000                            		if zundoc
00000000                            			inform 2,"Undocumented opcodes are not enabled."
00000000                            		endif
00000000                            
00000000                            		dc.b $DD+((zreg1&$02)*$10), $60+((zreg1&$01)*$08)+zreg2; ld ixh, ixl, iyh, iyl,a, b, c, d, e
00000000                            
00000000                            	elseif (zreg2>=zixh)&(zreg2>=ziyl)&((zreg1<=za)&(zreg1<>zh)&(zreg1<>zl))
00000000                            		if zundoc
00000000                            			inform 2,"Undocumented opcodes are not enabled."
00000000                            		endif
00000000                            
00000000                            		dc.b $DD+((zreg2&$02)*$10), $44+(zreg2&$01)+(zreg1*$08); ld a, b, c, d, e,ixh, ixl, iyh, iyl
00000000                            
00000000                            	elseif (zreg1>=zixh)&(zreg1<=ziyl)&(zreg2>=zixh)&(zreg2>=ziyl)
00000000                            		if zundoc
00000000                            			inform 2,"Undocumented opcodes are not enabled."
00000000                            		endif
00000000                            
00000000                            		if ((zreg1&$02)<>(zreg2&$02))
00000000                            			inform 2,"Invalid or unsupported register combination '\reg1' and '\reg2'!"
00000000                            			mexit
00000000                            		endif
00000000                            
00000000                            		dc.b $DD+((zreg1&$02)*$10), $60+((zreg1&$01)*$08)+(zreg2&$01); ld ixh, ixl, iyh, iyl,ixh, ixl, iyh, iyl
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register combination '\reg1' and '\reg2'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            djnz	macro addr
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	zjrfuture \addr-*-2, $10
00000000                                endm
00000000                            
00000000                            jr	macro cond, off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	if narg=1
00000000                            		zjrfuture \cond-*-2, $18
00000000                            	else
00000000                            		jr\cond \off
00000000                            	endif
00000000                                endm
00000000                            
00000000                            jrnz	macro off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	zjrfuture \off-*-2, $20
00000000                                endm
00000000                            
00000000                            jrnc	macro off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	zjrfuture \off-*-2, $30
00000000                                endm
00000000                            
00000000                            jrz	macro off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	zjrfuture \off-*-2, $28
00000000                                endm
00000000                            
00000000                            jrc	macro off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	zjrfuture \off-*-2, $38
00000000                                endm
00000000                            
00000000                            jp	macro cond, off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	if narg=1
00000000                            		zgetreg \cond, 0
00000000                            
00000000                            		if ztemp=zhlr
00000000                            			dc.b $E9		; jp (hl)
00000000                            
00000000                            		elseif ztemp=zixr
00000000                            			dc.b $DD, $E9		; jp (ix)
00000000                            
00000000                            		elseif ztemp=ziyr
00000000                            			dc.b $FD, $E9		; jp (iy)
00000000                            
00000000                            		else
00000000                            			dc.b $C3		; jp **
00000000                            			z80word \cond
00000000                            		endif
00000000                            	else
00000000                            		jp\cond \off
00000000                            	endif
00000000                                endm
00000000                            
00000000                            jpnz	macro off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	dc.b $C2
00000000                            	z80word \off
00000000                                endm
00000000                            
00000000                            jpnc	macro off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	dc.b $D2
00000000                            	z80word \off
00000000                                endm
00000000                            
00000000                            jpz	macro off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	dc.b $CA
00000000                            	z80word \off
00000000                                endm
00000000                            
00000000                            jpc	macro off
00000000                            	dc.b $DA
00000000                            	z80word \off
00000000                                endm
00000000                            
00000000                            jppo	macro off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	dc.b $E2
00000000                            	z80word \off
00000000                                endm
00000000                            
00000000                            jpp	macro off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	dc.b $F2
00000000                            	z80word \off
00000000                                endm
00000000                            
00000000                            jppe	macro off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	dc.b $EA
00000000                            	z80word \off
00000000                                endm
00000000                            
00000000                            jpm	macro off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	dc.b $FA
00000000                            	z80word \off
00000000                                endm
00000000                            
00000000                            call	macro cond, off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	if narg=1
00000000                            		dc.b $CD
00000000                            		z80word \cond
00000000                            	else
00000000                            		call\cond \off
00000000                            	endif
00000000                                endm
00000000                            
00000000                            callnz	macro off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	dc.b $C4
00000000                            	z80word \off
00000000                                endm
00000000                            
00000000                            callz	macro off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	dc.b $CC
00000000                            	z80word \off
00000000                                endm
00000000                            
00000000                            callnc	macro off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	dc.b $D4
00000000                            	z80word \off
00000000                                endm
00000000                            
00000000                            callc	macro off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	dc.b $DC
00000000                            	z80word \off
00000000                                endm
00000000                            
00000000                            callpo	macro off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	dc.b $E4
00000000                            	z80word \off
00000000                                endm
00000000                            
00000000                            callpe	macro off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	dc.b $EC
00000000                            	z80word \off
00000000                                endm
00000000                            
00000000                            callp	macro off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	dc.b $F4
00000000                            	z80word \off
00000000                                endm
00000000                            
00000000                            callm	macro off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	dc.b $FC
00000000                            	z80word \off
00000000                                endm
00000000                            
00000000                            ret	macro cond
00000000                            	if narg=0
00000000                            		dc.b $C9
00000000                            	else
00000000                            		ret\cond
00000000                            	endif
00000000                                endm
00000000                            
00000000                            retnz	macro
00000000                            	dc.b $C0
00000000                                endm
00000000                            
00000000                            retz	macro
00000000                            	dc.b $C8
00000000                                endm
00000000                            
00000000                            retnc	macro
00000000                            	dc.b $D0
00000000                                endm
00000000                            
00000000                            retc	macro
00000000                            	dc.b $D8
00000000                                endm
00000000                            
00000000                            retpo	macro
00000000                            	dc.b $E0
00000000                                endm
00000000                            
00000000                            retpe	macro
00000000                            	dc.b $E8
00000000                                endm
00000000                            
00000000                            retp	macro
00000000                            	dc.b $F0
00000000                                endm
00000000                            
00000000                            retm	macro
00000000                            	dc.b $F8
00000000                                endm
00000000                            
00000000                            di	macro
00000000                            	if z80prg=0
00000000                            		move	#$2700,sr	; THIS IS HERE, IF YOU WANNA USE DI IN 68K CODE ;)
00000000                            	else
00000000                            		dc.b $F3
00000000                            	endif
00000000                                endm
00000000                            
00000000                            ei	macro
00000000                            	if z80prg=0
00000000                            		move	#$2300,sr	; THIS IS HERE, IF YOU WANNA USE EI IN 68K CODE ;)
00000000                            	else
00000000                            		dc.b $FB
00000000                            	endif
00000000                                endm
00000000                            
00000000                            halt	macro
00000000                            	if z80prg=0
00000000                            		stop	#$2700		; THIS IS HERE, IF YOU WANNA USE HALT IN 68K CODE ;)
00000000                            	else
00000000                            		dc.b $76
00000000                            	endif
00000000                                endm
00000000                            
00000000                            znop	macro
00000000                            	dc.b $00
00000000                                endm
00000000                            
00000000                            rlca	macro
00000000                            	dc.b $07
00000000                                endm
00000000                            
00000000                            rla	macro
00000000                            	dc.b $17
00000000                                endm
00000000                            
00000000                            daa	macro
00000000                            	dc.b $27
00000000                                endm
00000000                            
00000000                            scf	macro
00000000                            	dc.b $37
00000000                                endm
00000000                            
00000000                            rrca	macro
00000000                            	dc.b $0F
00000000                                endm
00000000                            
00000000                            rra	macro
00000000                            	dc.b $1F
00000000                                endm
00000000                            
00000000                            cpl	macro
00000000                            	dc.b $2F
00000000                                endm
00000000                            
00000000                            ccf	macro
00000000                            	dc.b $3F
00000000                                endm
00000000                            
00000000                            exx	macro
00000000                            	dc.b $D9
00000000                                endm
00000000                            
00000000                            zneg	macro
00000000                            	dc.b $ED, $44
00000000                                endm
00000000                            
00000000                            retn	macro
00000000                            	dc.b $ED, $45
00000000                                endm
00000000                            
00000000                            reti	macro
00000000                            	dc.b $ED, $4D
00000000                                endm
00000000                            
00000000                            rrd	macro
00000000                            	dc.b $ED, $67
00000000                                endm
00000000                            
00000000                            rld	macro
00000000                            	dc.b $ED, $6F
00000000                                endm
00000000                            
00000000                            ldi	macro
00000000                            	dc.b $ED, $A0
00000000                                endm
00000000                            
00000000                            cpi	macro
00000000                            	dc.b $ED, $A1
00000000                                endm
00000000                            
00000000                            ini	macro
00000000                            	dc.b $ED, $A2
00000000                                endm
00000000                            
00000000                            outi	macro
00000000                            	dc.b $ED, $A3
00000000                                endm
00000000                            
00000000                            ldd	macro
00000000                            	dc.b $ED, $A8
00000000                                endm
00000000                            
00000000                            cpd	macro
00000000                            	dc.b $ED, $A9
00000000                                endm
00000000                            
00000000                            ind	macro
00000000                            	dc.b $ED, $AA
00000000                                endm
00000000                            
00000000                            outd	macro
00000000                            	dc.b $ED, $AB
00000000                                endm
00000000                            
00000000                            ldir	macro
00000000                            	dc.b $ED, $B0
00000000                                endm
00000000                            
00000000                            cpir	macro
00000000                            	dc.b $ED, $B1
00000000                                endm
00000000                            
00000000                            inir	macro
00000000                            	dc.b $ED, $B2
00000000                                endm
00000000                            
00000000                            otir	macro
00000000                            	dc.b $ED, $B3
00000000                                endm
00000000                            
00000000                            lddr	macro
00000000                            	dc.b $ED, $B8
00000000                                endm
00000000                            
00000000                            cpdr	macro
00000000                            	dc.b $ED, $B9
00000000                                endm
00000000                            
00000000                            indr	macro
00000000                            	dc.b $ED, $BA
00000000                                endm
00000000                            
00000000                            otdr	macro
00000000                            	dc.b $ED, $BB
00000000                                endm
00000000                            
00000000                            ; ===========================================================================
00000000                            	org 0
00000000 FFFF 8900 0000 0000 0000+  StartOfRom:	dc.l Stack, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu, Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, VInt, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 2053 5346 2020+  HConsole:	dc.b 'SEGA SSF        ' ; Hardware system ID
00000110 4E41 5453 554D 4920 3230+  		dc.b 'NATSUMI 2016-FEB' ; Release date
00000120 4E41 5453 554D 4927 5320+  		dc.b "NATSUMI'S SEGA MEGA DRIVE SMPS PLAYER DEMO      " ; Domestic name
00000150 4E41 5453 554D 4927 5320+  		dc.b "NATSUMI'S SEGA MEGA DRIVE SMPS PLAYER DEMO      " ; International name
00000180 554E 4F46 4649 4349 414C+  		dc.b 'UNOFFICIAL-00 '   ; Serial/version number
0000018E 0000                       		dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  		dc.l StartOfRom		; ROM start
000001A4 0000 0000                  		dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  		dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  		dc.l $FFFFFF		; RAM end
000001B0 4E4F 2053 5241 4D20 2020+  		dc.b 'NO SRAM     '
000001BC 4F50 454E 2053 4F55 5243+  		dc.b 'OPEN SOURCE SOFTWARE. YOU ARE WELCOME TO MAKE YOUR  '
000001F0 4A55 4520                  		dc.b 'JUE '
000001F4 4F57 4E20 4D4F 4449 4649+  		dc.b 'OWN MODIFICATIONS. PLEASE CREDIT WHEN USED'
0000021E                            ; ===========================================================================
0000021E                            SystemPalette:
0000021E                            	incbin  'code/main.pal'		; system main palette
00000224                            	even
00000224                            
00000224                            SystemFont:
00000224                            	incbin  'code/font.kos'		; System font - made by Bakayote
00000536                            	even
00000536                            ; ===========================================================================
00000536                            
00000536                            	include 'Code/init.asm'		; initialization code and main loop
00000536                            EntryPoint:
00000536 4AB9 00A1 0008             		tst.l	HW_Port_1_Control-1	; test port A control
0000053C 6600                       		bne.s	PortA_Ok
0000053E 4A79 00A1 000C             		tst.w	HW_Expansion_Control-1	; test port C control
00000544                            
00000544                            PortA_Ok:
00000544 6600                       		bne.s	PortC_Ok
00000546 4BFA 0000                  		lea	SetupValues(pc),a5
0000054A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000054E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000552 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000556 0200 000F                  		andi.b	#$F,d0
0000055A 6700                       		beq.s	SkipSecurity
0000055C 2378 0100 2F00             		move.l	HConsole.w,$2F00(a1)
00000562                            
00000562                            SkipSecurity:
00000562 3014                       		move.w	(a4),d0		; check	if VDP works
00000564 7000                       		moveq	#0,d0
00000566 2C40                       		movea.l	d0,a6
00000568 4E66                       		move.l	a6,usp		; set usp to $0
0000056A                            
0000056A 7217                       		moveq	#$17,d1
0000056C                            VDPInitLoop:
0000056C 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
0000056E 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000570 DA47                       		add.w	d7,d5		; next register
00000572 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000576                            
00000576 289D                       		move.l	(a5)+,(a4)
00000578 3680                       		move.w	d0,(a3)		; clear	the screen
0000057A 3287                       		move.w	d7,(a1)		; stop the Z80
0000057C 3487                       		move.w	d7,(a2)		; reset	the Z80
0000057E                            
0000057E                            WaitForZ80:
0000057E 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000580 66FC                       		bne.s	WaitForZ80	; if not, branch
00000582 7400                       		moveq	#endinit-initz80-1,d2
00000584                            Z80InitLoop:
00000584 10DD                       		move.b	(a5)+,(a0)+
00000586 51CA FFFC                  		dbf	d2,Z80InitLoop
0000058A                            
0000058A 3480                       		move.w	d0,(a2)
0000058C 3280                       		move.w	d0,(a1)		; start	the Z80
0000058E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000590                            ClrRAMLoop:
00000590 2D00                       		move.l	d0,-(a6)
00000592 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000596                            
00000596 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
00000598 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000059A 761F                       		moveq	#$1F,d3
0000059C                            ClrCRAMLoop:
0000059C 2680                       		move.l	d0,(a3)
0000059E 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
000005A2                            
000005A2 289D                       		move.l	(a5)+,(a4)
000005A4 7813                       		moveq	#$13,d4
000005A6                            
000005A6                            ClrVDPStuff:
000005A6 2680                       		move.l	d0,(a3)
000005A8 51CC FFFC                  		dbf	d4,ClrVDPStuff
000005AC                            
000005AC 7A03                       		moveq	#3,d5
000005AE                            PSGInitLoop:
000005AE 175D 0011                  		move.b	(a5)+,$11(a3)		; reset	the PSG
000005B2 51CD FFFA                  		dbf	d5,PSGInitLoop
000005B6                            
000005B6 3480                       		move.w	d0,(a2)
000005B8 4CD6 7FFF                  		movem.l	(a6),d0-a6		; clear	all registers
000005BC 46FC 2700                  		move	#$2700,sr		; set the sr
000005C0                            
000005C0                            PortC_Ok:
000005C0 7040                       		moveq	#$40,d0
000005C2 13C0 00A1 0009             		move.b	d0,(HW_Port_1_Control).l
000005C8 13C0 00A1 000B             		move.b	d0,(HW_Port_2_Control).l
000005CE 13C0 00A1 000D             		move.b	d0,(HW_Expansion_Control).l
000005D4 6000 0000                  		bra.w	GameProgram
000005D8                            
000005D8                            ; ===========================================================================
000005D8 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
000005DA 3FFF                       		dc.w $3FFF
000005DC 0100                       		dc.w $100
000005DE                            
000005DE 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
000005E2 00A1 1100                  		dc.l $A11100		; Z80 bus request
000005E6 00A1 1200                  		dc.l $A11200		; Z80 reset
000005EA 00C0 0000                  		dc.l $C00000
000005EE 00C0 0004                  		dc.l $C00004		; address for VDP registers
000005F2                            
000005F2 0474 303C                  		dc.b 4,	$74, $30, $3C	; values for VDP registers
000005F6 076C 0000                  		dc.b 7,	$6C, 0,	0
000005FA 0000 FF00                  		dc.b 0,	0, $FF,	0
000005FE 8137 0001                  		dc.b $81, $37, 0, 1
00000602 0100 00FF                  		dc.b 1,	0, 0, $FF
00000606 FF00 0080                  		dc.b $FF, 0, 0,	$80
0000060A                            
0000060A 4000 0080                  		dc.l $40000080
0000060E                            
0000060E                            initz80	z80prog 0
0000060E                          M 	pusho
0000060E                          M 	opt	ae-
0000060E                          M 	opt	an+
00000612 =00000000                M z80prg	=	0
00000612                          M 	mexit
00000612                            		even
00000612                            endinit
00000612 8174                       		dc.w $8174			; value	for VDP	display	mode
00000614 8F02                       		dc.w $8F02			; value	for VDP	increment
00000616 C000 0000                  		dc.l $C0000000			; value	for CRAM write mode
0000061A 4000 0010                  		dc.l $40000010
0000061E                            
0000061E 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000622                            ; ===========================================================================
00000622                            
00000622                            Textinit:
00000622                            	asc.w 0,"TIMER"
00000622 =00000000                M .lc	=	0
00000622                          M 	rept	strlen("TIMER")
00000622                          M .cc	substr	.lc+1,.lc+1,"TIMER"
00000622 001E                     M 	dc.w	('T'-'A'+$b)|or
00000624 =00000001                M .lc	=	.lc+1
00000624                          M .cc	substr	.lc+1,.lc+1,"TIMER"
00000624 0013                     M 	dc.w	('I'-'A'+$b)|or
00000626 =00000002                M .lc	=	.lc+1
00000626                          M .cc	substr	.lc+1,.lc+1,"TIMER"
00000626 0017                     M 	dc.w	('M'-'A'+$b)|or
00000628 =00000003                M .lc	=	.lc+1
00000628                          M .cc	substr	.lc+1,.lc+1,"TIMER"
00000628 000F                     M 	dc.w	('E'-'A'+$b)|or
0000062A =00000004                M .lc	=	.lc+1
0000062A                          M .cc	substr	.lc+1,.lc+1,"TIMER"
0000062A 001C                     M 	dc.w	('R'-'A'+$b)|or
0000062C =00000005                M .lc	=	.lc+1
0000062C                            	asc.w 0,"TEMPO"
0000062C =00000000                M .lc	=	0
0000062C                          M 	rept	strlen("TEMPO")
0000062C                          M .cc	substr	.lc+1,.lc+1,"TEMPO"
0000062C 001E                     M 	dc.w	('T'-'A'+$b)|or
0000062E =00000001                M .lc	=	.lc+1
0000062E                          M .cc	substr	.lc+1,.lc+1,"TEMPO"
0000062E 000F                     M 	dc.w	('E'-'A'+$b)|or
00000630 =00000002                M .lc	=	.lc+1
00000630                          M .cc	substr	.lc+1,.lc+1,"TEMPO"
00000630 0017                     M 	dc.w	('M'-'A'+$b)|or
00000632 =00000003                M .lc	=	.lc+1
00000632                          M .cc	substr	.lc+1,.lc+1,"TEMPO"
00000632 001A                     M 	dc.w	('P'-'A'+$b)|or
00000634 =00000004                M .lc	=	.lc+1
00000634                          M .cc	substr	.lc+1,.lc+1,"TEMPO"
00000634 0019                     M 	dc.w	('O'-'A'+$b)|or
00000636 =00000005                M .lc	=	.lc+1
00000636                            	asc.w 0,"VOLUME"
00000636 =00000000                M .lc	=	0
00000636                          M 	rept	strlen("VOLUME")
00000636                          M .cc	substr	.lc+1,.lc+1,"VOLUME"
00000636 0020                     M 	dc.w	('V'-'A'+$b)|or
00000638 =00000001                M .lc	=	.lc+1
00000638                          M .cc	substr	.lc+1,.lc+1,"VOLUME"
00000638 0019                     M 	dc.w	('O'-'A'+$b)|or
0000063A =00000002                M .lc	=	.lc+1
0000063A                          M .cc	substr	.lc+1,.lc+1,"VOLUME"
0000063A 0016                     M 	dc.w	('L'-'A'+$b)|or
0000063C =00000003                M .lc	=	.lc+1
0000063C                          M .cc	substr	.lc+1,.lc+1,"VOLUME"
0000063C 001F                     M 	dc.w	('U'-'A'+$b)|or
0000063E =00000004                M .lc	=	.lc+1
0000063E                          M .cc	substr	.lc+1,.lc+1,"VOLUME"
0000063E 0017                     M 	dc.w	('M'-'A'+$b)|or
00000640 =00000005                M .lc	=	.lc+1
00000640                          M .cc	substr	.lc+1,.lc+1,"VOLUME"
00000640 000F                     M 	dc.w	('E'-'A'+$b)|or
00000642 =00000006                M .lc	=	.lc+1
00000642                            	asc.w 0,"DAC1"
00000642 =00000000                M .lc	=	0
00000642                          M 	rept	strlen("DAC1")
00000642                          M .cc	substr	.lc+1,.lc+1,"DAC1"
00000642 000E                     M 	dc.w	('D'-'A'+$b)|or
00000644 =00000001                M .lc	=	.lc+1
00000644                          M .cc	substr	.lc+1,.lc+1,"DAC1"
00000644 000B                     M 	dc.w	('A'-'A'+$b)|or
00000646 =00000002                M .lc	=	.lc+1
00000646                          M .cc	substr	.lc+1,.lc+1,"DAC1"
00000646 000D                     M 	dc.w	('C'-'A'+$b)|or
00000648 =00000003                M .lc	=	.lc+1
00000648                          M .cc	substr	.lc+1,.lc+1,"DAC1"
00000648 0002                     M 	dc.w	('1'-'0'+1)|or
0000064A =00000004                M .lc	=	.lc+1
0000064A                            	asc.w 0,"DAC2"
0000064A =00000000                M .lc	=	0
0000064A                          M 	rept	strlen("DAC2")
0000064A                          M .cc	substr	.lc+1,.lc+1,"DAC2"
0000064A 000E                     M 	dc.w	('D'-'A'+$b)|or
0000064C =00000001                M .lc	=	.lc+1
0000064C                          M .cc	substr	.lc+1,.lc+1,"DAC2"
0000064C 000B                     M 	dc.w	('A'-'A'+$b)|or
0000064E =00000002                M .lc	=	.lc+1
0000064E                          M .cc	substr	.lc+1,.lc+1,"DAC2"
0000064E 000D                     M 	dc.w	('C'-'A'+$b)|or
00000650 =00000003                M .lc	=	.lc+1
00000650                          M .cc	substr	.lc+1,.lc+1,"DAC2"
00000650 0003                     M 	dc.w	('2'-'0'+1)|or
00000652 =00000004                M .lc	=	.lc+1
00000652                            	asc.w 0," FM1"
00000652 =00000000                M .lc	=	0
00000652                          M 	rept	strlen(" FM1")
00000652                          M .cc	substr	.lc+1,.lc+1," FM1"
00000652 0000                     M 	dc.w	0|or
00000654 =00000001                M .lc	=	.lc+1
00000654                          M .cc	substr	.lc+1,.lc+1," FM1"
00000654 0010                     M 	dc.w	('F'-'A'+$b)|or
00000656 =00000002                M .lc	=	.lc+1
00000656                          M .cc	substr	.lc+1,.lc+1," FM1"
00000656 0017                     M 	dc.w	('M'-'A'+$b)|or
00000658 =00000003                M .lc	=	.lc+1
00000658                          M .cc	substr	.lc+1,.lc+1," FM1"
00000658 0002                     M 	dc.w	('1'-'0'+1)|or
0000065A =00000004                M .lc	=	.lc+1
0000065A                            	asc.w 0," FM2"
0000065A =00000000                M .lc	=	0
0000065A                          M 	rept	strlen(" FM2")
0000065A                          M .cc	substr	.lc+1,.lc+1," FM2"
0000065A 0000                     M 	dc.w	0|or
0000065C =00000001                M .lc	=	.lc+1
0000065C                          M .cc	substr	.lc+1,.lc+1," FM2"
0000065C 0010                     M 	dc.w	('F'-'A'+$b)|or
0000065E =00000002                M .lc	=	.lc+1
0000065E                          M .cc	substr	.lc+1,.lc+1," FM2"
0000065E 0017                     M 	dc.w	('M'-'A'+$b)|or
00000660 =00000003                M .lc	=	.lc+1
00000660                          M .cc	substr	.lc+1,.lc+1," FM2"
00000660 0003                     M 	dc.w	('2'-'0'+1)|or
00000662 =00000004                M .lc	=	.lc+1
00000662                            	asc.w 0," FM3"
00000662 =00000000                M .lc	=	0
00000662                          M 	rept	strlen(" FM3")
00000662                          M .cc	substr	.lc+1,.lc+1," FM3"
00000662 0000                     M 	dc.w	0|or
00000664 =00000001                M .lc	=	.lc+1
00000664                          M .cc	substr	.lc+1,.lc+1," FM3"
00000664 0010                     M 	dc.w	('F'-'A'+$b)|or
00000666 =00000002                M .lc	=	.lc+1
00000666                          M .cc	substr	.lc+1,.lc+1," FM3"
00000666 0017                     M 	dc.w	('M'-'A'+$b)|or
00000668 =00000003                M .lc	=	.lc+1
00000668                          M .cc	substr	.lc+1,.lc+1," FM3"
00000668 0004                     M 	dc.w	('3'-'0'+1)|or
0000066A =00000004                M .lc	=	.lc+1
0000066A                            	asc.w 0," FM4"
0000066A =00000000                M .lc	=	0
0000066A                          M 	rept	strlen(" FM4")
0000066A                          M .cc	substr	.lc+1,.lc+1," FM4"
0000066A 0000                     M 	dc.w	0|or
0000066C =00000001                M .lc	=	.lc+1
0000066C                          M .cc	substr	.lc+1,.lc+1," FM4"
0000066C 0010                     M 	dc.w	('F'-'A'+$b)|or
0000066E =00000002                M .lc	=	.lc+1
0000066E                          M .cc	substr	.lc+1,.lc+1," FM4"
0000066E 0017                     M 	dc.w	('M'-'A'+$b)|or
00000670 =00000003                M .lc	=	.lc+1
00000670                          M .cc	substr	.lc+1,.lc+1," FM4"
00000670 0005                     M 	dc.w	('4'-'0'+1)|or
00000672 =00000004                M .lc	=	.lc+1
00000672                            	asc.w 0," FM5"
00000672 =00000000                M .lc	=	0
00000672                          M 	rept	strlen(" FM5")
00000672                          M .cc	substr	.lc+1,.lc+1," FM5"
00000672 0000                     M 	dc.w	0|or
00000674 =00000001                M .lc	=	.lc+1
00000674                          M .cc	substr	.lc+1,.lc+1," FM5"
00000674 0010                     M 	dc.w	('F'-'A'+$b)|or
00000676 =00000002                M .lc	=	.lc+1
00000676                          M .cc	substr	.lc+1,.lc+1," FM5"
00000676 0017                     M 	dc.w	('M'-'A'+$b)|or
00000678 =00000003                M .lc	=	.lc+1
00000678                          M .cc	substr	.lc+1,.lc+1," FM5"
00000678 0006                     M 	dc.w	('5'-'0'+1)|or
0000067A =00000004                M .lc	=	.lc+1
0000067A                            	asc.w 0,"PSG1"
0000067A =00000000                M .lc	=	0
0000067A                          M 	rept	strlen("PSG1")
0000067A                          M .cc	substr	.lc+1,.lc+1,"PSG1"
0000067A 001A                     M 	dc.w	('P'-'A'+$b)|or
0000067C =00000001                M .lc	=	.lc+1
0000067C                          M .cc	substr	.lc+1,.lc+1,"PSG1"
0000067C 001D                     M 	dc.w	('S'-'A'+$b)|or
0000067E =00000002                M .lc	=	.lc+1
0000067E                          M .cc	substr	.lc+1,.lc+1,"PSG1"
0000067E 0011                     M 	dc.w	('G'-'A'+$b)|or
00000680 =00000003                M .lc	=	.lc+1
00000680                          M .cc	substr	.lc+1,.lc+1,"PSG1"
00000680 0002                     M 	dc.w	('1'-'0'+1)|or
00000682 =00000004                M .lc	=	.lc+1
00000682                            	asc.w 0,"PSG2"
00000682 =00000000                M .lc	=	0
00000682                          M 	rept	strlen("PSG2")
00000682                          M .cc	substr	.lc+1,.lc+1,"PSG2"
00000682 001A                     M 	dc.w	('P'-'A'+$b)|or
00000684 =00000001                M .lc	=	.lc+1
00000684                          M .cc	substr	.lc+1,.lc+1,"PSG2"
00000684 001D                     M 	dc.w	('S'-'A'+$b)|or
00000686 =00000002                M .lc	=	.lc+1
00000686                          M .cc	substr	.lc+1,.lc+1,"PSG2"
00000686 0011                     M 	dc.w	('G'-'A'+$b)|or
00000688 =00000003                M .lc	=	.lc+1
00000688                          M .cc	substr	.lc+1,.lc+1,"PSG2"
00000688 0003                     M 	dc.w	('2'-'0'+1)|or
0000068A =00000004                M .lc	=	.lc+1
0000068A                            	asc.w 0,"PSG3"
0000068A =00000000                M .lc	=	0
0000068A                          M 	rept	strlen("PSG3")
0000068A                          M .cc	substr	.lc+1,.lc+1,"PSG3"
0000068A 001A                     M 	dc.w	('P'-'A'+$b)|or
0000068C =00000001                M .lc	=	.lc+1
0000068C                          M .cc	substr	.lc+1,.lc+1,"PSG3"
0000068C 001D                     M 	dc.w	('S'-'A'+$b)|or
0000068E =00000002                M .lc	=	.lc+1
0000068E                          M .cc	substr	.lc+1,.lc+1,"PSG3"
0000068E 0011                     M 	dc.w	('G'-'A'+$b)|or
00000690 =00000003                M .lc	=	.lc+1
00000690                          M .cc	substr	.lc+1,.lc+1,"PSG3"
00000690 0004                     M 	dc.w	('3'-'0'+1)|or
00000692 =00000004                M .lc	=	.lc+1
00000692                            	asc.w 0,"MUS"
00000692 =00000000                M .lc	=	0
00000692                          M 	rept	strlen("MUS")
00000692                          M .cc	substr	.lc+1,.lc+1,"MUS"
00000692 0017                     M 	dc.w	('M'-'A'+$b)|or
00000694 =00000001                M .lc	=	.lc+1
00000694                          M .cc	substr	.lc+1,.lc+1,"MUS"
00000694 001F                     M 	dc.w	('U'-'A'+$b)|or
00000696 =00000002                M .lc	=	.lc+1
00000696                          M .cc	substr	.lc+1,.lc+1,"MUS"
00000696 001D                     M 	dc.w	('S'-'A'+$b)|or
00000698 =00000003                M .lc	=	.lc+1
00000698                            	asc.w 0,"DMA"
00000698 =00000000                M .lc	=	0
00000698                          M 	rept	strlen("DMA")
00000698                          M .cc	substr	.lc+1,.lc+1,"DMA"
00000698 000E                     M 	dc.w	('D'-'A'+$b)|or
0000069A =00000001                M .lc	=	.lc+1
0000069A                          M .cc	substr	.lc+1,.lc+1,"DMA"
0000069A 0017                     M 	dc.w	('M'-'A'+$b)|or
0000069C =00000002                M .lc	=	.lc+1
0000069C                          M .cc	substr	.lc+1,.lc+1,"DMA"
0000069C 000B                     M 	dc.w	('A'-'A'+$b)|or
0000069E =00000003                M .lc	=	.lc+1
0000069E                            	asc.w 0,"COMM"
0000069E =00000000                M .lc	=	0
0000069E                          M 	rept	strlen("COMM")
0000069E                          M .cc	substr	.lc+1,.lc+1,"COMM"
0000069E 000D                     M 	dc.w	('C'-'A'+$b)|or
000006A0 =00000001                M .lc	=	.lc+1
000006A0                          M .cc	substr	.lc+1,.lc+1,"COMM"
000006A0 0019                     M 	dc.w	('O'-'A'+$b)|or
000006A2 =00000002                M .lc	=	.lc+1
000006A2                          M .cc	substr	.lc+1,.lc+1,"COMM"
000006A2 0017                     M 	dc.w	('M'-'A'+$b)|or
000006A4 =00000003                M .lc	=	.lc+1
000006A4                          M .cc	substr	.lc+1,.lc+1,"COMM"
000006A4 0017                     M 	dc.w	('M'-'A'+$b)|or
000006A6 =00000004                M .lc	=	.lc+1
000006A6                            ; ===========================================================================
000006A6                            
000006A6                            GameProgram:
000006A6 303A FF32                  		move.w	SetupValues+2(pc),d0	; get length
000006AA 7200                       		moveq	#0,d1			; fill with 0
000006AC 3041                       		move.w	d1,a0			; reset RAM pos
000006AE                            
000006AE 2101                       .loop		move.l	d1,-(a0)		; clear next word of RAM
000006B0 51C8 FFFC                  		dbf	d0,.loop		; clear entire RAM
000006B4 3E7C 8900                  		move.w	#Stack,sp		; reset stack ptr
000006B8                            
000006B8                            	; load palette
000006B8 41FA FB64                  		lea	SystemPalette(pc),a0	; get system palette
000006BC 43F8 8900                  		lea	Palette.w,a1		; get the palette file
000006C0 7202                       		moveq	#3-1,d1			; get length
000006C2                            
000006C2 32D8                       .load2		move.w	(a0)+,(a1)+		; copy 1 entry
000006C4 51C9 FFFC                  		dbf	d1,.load2		; loop until done
000006C8                            
000006C8                            	; fill entire VRAM with 0
000006C8 4DF9 00C0 0004             		lea	VDP_control_port,a6
000006CE 4BEE FFFC                  		lea	-4(a6),a5		; get ports
000006D2                            		dmaFillVRAM 0,$10000,0,0
000006D2 3CBC 8F01                M 	move.w	#$8f01,(a6)
000006D6 2CBC 94FF 93FF           M 	move.l	#(($9400|((((length)-1)&$ff00)>>8))<<16)|($9300|(((length)-1)&$ff)),(a6)
000006DC 3CBC 9780                M 	move.w	#$9780,(a6)
000006E0 2CBC 4000 0080           M 	move.l	#$40000080|(((addr)&$3fff)<<16)|(((addr)&$c000)>>14),(a6)
000006E6 3ABC 0000                M 	move.w	#(byte)<<8,(a5)
000006EA                            
000006EA                            	; load system font
000006EA 41F9 0000 0224             		lea	SystemFont,a0		; get system font
000006F0 43F9 FFFF 0000             		lea	Buffer,a1		; get start of RAM
000006F6 4EB9 0000 0000             		jsr	KosDec			; decompress the art
000006FC                            
000006FC                            	; init RAM
000006FC 1039 00A1 0001             		move.b	HW_Version,d0		; get System version bits
00000702 0200 00C0                  		andi.b	#$C0,d0
00000706 11C0 898A                  		move.b	d0,Region.w		; save into RAM
0000070A                            
0000070A 31FC 0002 8980             		move.w	#2,DMAlen.w		; reset len
00000710 11FC 000A 8988             		move.b	#MusOff,MusSel.w	; set selected music
00000716                            
00000716                            	; wait for vram fill to finish
00000716 4DF9 00C0 0004             		lea	VDP_control_port,a6
0000071C 4BEE FFFC                  		lea	-4(a6),a5		; get ports
00000720                            
00000720 3216                       .waitFillDone	move.w	(a6),d1
00000722 0801 0001                  		btst	#1,d1
00000726 66F8                       		bne.s	.waitFillDone
00000728 3CBC 8F02                  		move.w	#$8F02,(a6) 		; VRAM pointer increment: $0002
0000072C                            
0000072C                            	dma68kToVDP $FF0000,$20,$BE0,VRAM	; DMA font art
0000072C 2CBC 9405 93F0           M 	move.l	#(($9400|((((length)>>1)&$ff00)>>8))<<16)|($9300|(((length)>>1)&$ff)),(a6)
00000732 2CBC 9680 9500           M 	move.l	#(($9600|((((source)>>1)&$ff00)>>8))<<16)|($9500|(((source)>>1)&$ff)),(a6)
00000738 3CBC 977F                M 	move.w	#$9700|(((((source)>>1)&$ff0000)>>16)&$7f),(a6)
0000073C                          M 	vdpcomm	move.l,$20,vram,dma,(a6)
0000073C 2CBC 4020 0080           M 	move.l	#(((vram&dma)&3)<<30)|(($20&$3fff)<<16)|(((vram&dma)&$fc)<<2)|(($20&$c000)>>14),(a6)
00000742                            
00000742                            	; clear VSRAM
00000742                            ;	vdpComm	move.l,0,VSRAM,WRITE,(a6)
00000742                            ;		move.l	d0,(a5)
00000742                            
00000742                            	; set WINDOW
00000742 3CBC 8F80                  		move.w	#$8F80,(a6)
00000746                            	vdpComm	move.l,$F04E,VRAM,WRITE,(a6)
00000746 2CBC 704E 0003           M 	move.l	#(((vram&write)&3)<<30)|(($f04e&$3fff)<<16)|(((vram&write)&$fc)<<2)|(($f04e&$c000)>>14),(a6)
0000074C 203C 005F 005F             		move.l	#$005F005F,d0
00000752                            	rept 28/2
00000752                            		move.l	d0,(a5)
00000752                            	endr
00000752 2A80                     M 	move.l	d0,(a5)
00000754 2A80                     M 	move.l	d0,(a5)
00000756 2A80                     M 	move.l	d0,(a5)
00000758 2A80                     M 	move.l	d0,(a5)
0000075A 2A80                     M 	move.l	d0,(a5)
0000075C 2A80                     M 	move.l	d0,(a5)
0000075E 2A80                     M 	move.l	d0,(a5)
00000760 2A80                     M 	move.l	d0,(a5)
00000762 2A80                     M 	move.l	d0,(a5)
00000764 2A80                     M 	move.l	d0,(a5)
00000766 2A80                     M 	move.l	d0,(a5)
00000768 2A80                     M 	move.l	d0,(a5)
0000076A 2A80                     M 	move.l	d0,(a5)
0000076C 2A80                     M 	move.l	d0,(a5)
0000076E 3CBC 8F02                  		move.w	#$8F02,(a6)
00000772                            
00000772                            	; write some maps
00000772 41FA FEAE                  		lea	Textinit(pc),a0		; get text data to a0
00000776                            
00000776                            	vdpCoord 1,1,WRITE
00000776                          M 	vdpcomm	move.l,($c000+(1*2)+(1*$80)),vram,write,(a6)
00000776 2CBC 4082 0003           M 	move.l	#(((vram&write)&3)<<30)|((($c000+(1*2)+(1*$80))&$3fff)<<16)|(((vram&write)&$fc)<<2)|((($c000+(1*2)+(1*$80))&$c000)>>14),(a6)
0000077C 2A98                       		move.l	(a0)+,(a5)
0000077E 2A98                       		move.l	(a0)+,(a5)
00000780 3A98                       		move.w	(a0)+,(a5)
00000782                            
00000782                            	vdpCoord 1,2,WRITE
00000782                          M 	vdpcomm	move.l,($c000+(1*2)+(2*$80)),vram,write,(a6)
00000782 2CBC 4102 0003           M 	move.l	#(((vram&write)&3)<<30)|((($c000+(1*2)+(2*$80))&$3fff)<<16)|(((vram&write)&$fc)<<2)|((($c000+(1*2)+(2*$80))&$c000)>>14),(a6)
00000788 2A98                       		move.l	(a0)+,(a5)
0000078A 2A98                       		move.l	(a0)+,(a5)
0000078C 3A98                       		move.w	(a0)+,(a5)
0000078E                            
0000078E                            	vdpCoord 1,3,WRITE
0000078E                          M 	vdpcomm	move.l,($c000+(1*2)+(3*$80)),vram,write,(a6)
0000078E 2CBC 4182 0003           M 	move.l	#(((vram&write)&3)<<30)|((($c000+(1*2)+(3*$80))&$3fff)<<16)|(((vram&write)&$fc)<<2)|((($c000+(1*2)+(3*$80))&$c000)>>14),(a6)
00000794 2A98                       		move.l	(a0)+,(a5)
00000796 2A98                       		move.l	(a0)+,(a5)
00000798 2A98                       		move.l	(a0)+,(a5)
0000079A                            
0000079A                            	vdpCoord 1,5,WRITE
0000079A                          M 	vdpcomm	move.l,($c000+(1*2)+(5*$80)),vram,write,(a6)
0000079A 2CBC 4282 0003           M 	move.l	#(((vram&write)&3)<<30)|((($c000+(1*2)+(5*$80))&$3fff)<<16)|(((vram&write)&$fc)<<2)|((($c000+(1*2)+(5*$80))&$c000)>>14),(a6)
000007A0 2A98                       		move.l	(a0)+,(a5)
000007A2 2A98                       		move.l	(a0)+,(a5)
000007A4                            
000007A4                            	vdpCoord 1,6,WRITE
000007A4                          M 	vdpcomm	move.l,($c000+(1*2)+(6*$80)),vram,write,(a6)
000007A4 2CBC 4302 0003           M 	move.l	#(((vram&write)&3)<<30)|((($c000+(1*2)+(6*$80))&$3fff)<<16)|(((vram&write)&$fc)<<2)|((($c000+(1*2)+(6*$80))&$c000)>>14),(a6)
000007AA 2A98                       		move.l	(a0)+,(a5)
000007AC 2A98                       		move.l	(a0)+,(a5)
000007AE                            
000007AE                            	vdpCoord 1,7,WRITE
000007AE                          M 	vdpcomm	move.l,($c000+(1*2)+(7*$80)),vram,write,(a6)
000007AE 2CBC 4382 0003           M 	move.l	#(((vram&write)&3)<<30)|((($c000+(1*2)+(7*$80))&$3fff)<<16)|(((vram&write)&$fc)<<2)|((($c000+(1*2)+(7*$80))&$c000)>>14),(a6)
000007B4 2A98                       		move.l	(a0)+,(a5)
000007B6 2A98                       		move.l	(a0)+,(a5)
000007B8                            
000007B8                            	vdpCoord 1,8,WRITE
000007B8                          M 	vdpcomm	move.l,($c000+(1*2)+(8*$80)),vram,write,(a6)
000007B8 2CBC 4402 0003           M 	move.l	#(((vram&write)&3)<<30)|((($c000+(1*2)+(8*$80))&$3fff)<<16)|(((vram&write)&$fc)<<2)|((($c000+(1*2)+(8*$80))&$c000)>>14),(a6)
000007BE 2A98                       		move.l	(a0)+,(a5)
000007C0 2A98                       		move.l	(a0)+,(a5)
000007C2                            
000007C2                            	vdpCoord 1,9,WRITE
000007C2                          M 	vdpcomm	move.l,($c000+(1*2)+(9*$80)),vram,write,(a6)
000007C2 2CBC 4482 0003           M 	move.l	#(((vram&write)&3)<<30)|((($c000+(1*2)+(9*$80))&$3fff)<<16)|(((vram&write)&$fc)<<2)|((($c000+(1*2)+(9*$80))&$c000)>>14),(a6)
000007C8 2A98                       		move.l	(a0)+,(a5)
000007CA 2A98                       		move.l	(a0)+,(a5)
000007CC                            
000007CC                            	vdpCoord 1,10,WRITE
000007CC                          M 	vdpcomm	move.l,($c000+(1*2)+(10*$80)),vram,write,(a6)
000007CC 2CBC 4502 0003           M 	move.l	#(((vram&write)&3)<<30)|((($c000+(1*2)+(10*$80))&$3fff)<<16)|(((vram&write)&$fc)<<2)|((($c000+(1*2)+(10*$80))&$c000)>>14),(a6)
000007D2 2A98                       		move.l	(a0)+,(a5)
000007D4 2A98                       		move.l	(a0)+,(a5)
000007D6                            
000007D6                            	vdpCoord 1,11,WRITE
000007D6                          M 	vdpcomm	move.l,($c000+(1*2)+(11*$80)),vram,write,(a6)
000007D6 2CBC 4582 0003           M 	move.l	#(((vram&write)&3)<<30)|((($c000+(1*2)+(11*$80))&$3fff)<<16)|(((vram&write)&$fc)<<2)|((($c000+(1*2)+(11*$80))&$c000)>>14),(a6)
000007DC 2A98                       		move.l	(a0)+,(a5)
000007DE 2A98                       		move.l	(a0)+,(a5)
000007E0                            
000007E0                            	vdpCoord 1,12,WRITE
000007E0                          M 	vdpcomm	move.l,($c000+(1*2)+(12*$80)),vram,write,(a6)
000007E0 2CBC 4602 0003           M 	move.l	#(((vram&write)&3)<<30)|((($c000+(1*2)+(12*$80))&$3fff)<<16)|(((vram&write)&$fc)<<2)|((($c000+(1*2)+(12*$80))&$c000)>>14),(a6)
000007E6 2A98                       		move.l	(a0)+,(a5)
000007E8 2A98                       		move.l	(a0)+,(a5)
000007EA                            
000007EA                            	vdpCoord 1,13,WRITE
000007EA                          M 	vdpcomm	move.l,($c000+(1*2)+(13*$80)),vram,write,(a6)
000007EA 2CBC 4682 0003           M 	move.l	#(((vram&write)&3)<<30)|((($c000+(1*2)+(13*$80))&$3fff)<<16)|(((vram&write)&$fc)<<2)|((($c000+(1*2)+(13*$80))&$c000)>>14),(a6)
000007F0 2A98                       		move.l	(a0)+,(a5)
000007F2 2A98                       		move.l	(a0)+,(a5)
000007F4                            
000007F4                            	vdpCoord 1,14,WRITE
000007F4                          M 	vdpcomm	move.l,($c000+(1*2)+(14*$80)),vram,write,(a6)
000007F4 2CBC 4702 0003           M 	move.l	#(((vram&write)&3)<<30)|((($c000+(1*2)+(14*$80))&$3fff)<<16)|(((vram&write)&$fc)<<2)|((($c000+(1*2)+(14*$80))&$c000)>>14),(a6)
000007FA 2A98                       		move.l	(a0)+,(a5)
000007FC 2A98                       		move.l	(a0)+,(a5)
000007FE                            
000007FE                            	vdpCoord 1,24,WRITE
000007FE                          M 	vdpcomm	move.l,($c000+(1*2)+(24*$80)),vram,write,(a6)
000007FE 2CBC 4C02 0003           M 	move.l	#(((vram&write)&3)<<30)|((($c000+(1*2)+(24*$80))&$3fff)<<16)|(((vram&write)&$fc)<<2)|((($c000+(1*2)+(24*$80))&$c000)>>14),(a6)
00000804 2A98                       		move.l	(a0)+,(a5)
00000806 3A98                       		move.w	(a0)+,(a5)
00000808                            
00000808                            	vdpCoord 1,25,WRITE
00000808                          M 	vdpcomm	move.l,($c000+(1*2)+(25*$80)),vram,write,(a6)
00000808 2CBC 4C82 0003           M 	move.l	#(((vram&write)&3)<<30)|((($c000+(1*2)+(25*$80))&$3fff)<<16)|(((vram&write)&$fc)<<2)|((($c000+(1*2)+(25*$80))&$c000)>>14),(a6)
0000080E 2A98                       		move.l	(a0)+,(a5)
00000810 3A98                       		move.w	(a0)+,(a5)
00000812                            
00000812                            	vdpCoord 1,26,WRITE
00000812                          M 	vdpcomm	move.l,($c000+(1*2)+(26*$80)),vram,write,(a6)
00000812 2CBC 4D02 0003           M 	move.l	#(((vram&write)&3)<<30)|((($c000+(1*2)+(26*$80))&$3fff)<<16)|(((vram&write)&$fc)<<2)|((($c000+(1*2)+(26*$80))&$c000)>>14),(a6)
00000818 2A98                       		move.l	(a0)+,(a5)
0000081A 2A98                       		move.l	(a0)+,(a5)
0000081C                            
0000081C 4EB9 0000 0000             		jsr	LoadDualPCM	; load dual pcm
00000822 4E72 2300                  @mainloop	stop	#$2300		; enable ints and stop CPU
00000826 60FA                       		bra.s	@mainloop	; loop
00000828                            ; ===========================================================================
00000828                            	include "code/string.asm"	; string lib
00000828                            ; ===========================================================================
00000828                            ; This function writes a hexadecimal number into screen at specific coordinates.
00000828                            ; input:
00000828                            ;  d3 - number to write. Is destroyed
00000828                            ; ===========================================================================
00000828                            PutHex:
00000828 3A06                       		move.w	d6,d5			; copy length
0000082A 1803                       .loop		move.b	d3,d4			; get next nibble
0000082C 0244 000F                  		andi.w	#%1111,d4		; keep the nibble only
00000830 5204                       		addq.b	#1,d4			; increment 1 (to skip null)
00000832 3F04                       		move.w	d4,-(sp)		; then store the number on plane
00000834 E89B                       		ror.l	#4,d3			; rotate right four times, to get the next nibble.
00000836                            						; Also returns d3 to original value
00000836 51CE FFF2                  		dbf	d6,.loop		; loop until full number is done
0000083A                            
0000083A 3A9F                       .write		move.w	(sp)+,(a5)		; copy number to VRAM
0000083C 51CD FFFC                  		dbf	d5,.write		; write for so many bytes as we need
00000840 4E75                       		rts
00000842                            	include "code/draw.asm"		; rendering and visualisation routines
00000842 0000 0080 0680 0900 1000+  dlen:	dc.w 0, $80, $680, $900, $1000, $2000
0000084E                            
0000084E                            DrawScene:
0000084E                            	vdpCoord 8,1,WRITE
0000084E                          M 	vdpcomm	move.l,($c000+(8*2)+(1*$80)),vram,write,(a6)
0000084E 2CBC 4090 0003           M 	move.l	#(((vram&write)&3)<<30)|((($c000+(8*2)+(1*$80))&$3fff)<<16)|(((vram&write)&$fc)<<2)|((($c000+(8*2)+(1*$80))&$c000)>>14),(a6)
00000854 7C03                       		moveq	#4-1,d6			; digit ct
00000856 3638 8982                  		move.w	Frame.w,d3		; get frame num
0000085A 4EB8 0828                  		jsr	PutHex.w		; write it onscreen
0000085E                            
0000085E                            	vdpCoord 6,25,WRITE
0000085E                          M 	vdpcomm	move.l,($c000+(6*2)+(25*$80)),vram,write,(a6)
0000085E 2CBC 4C8C 0003           M 	move.l	#(((vram&write)&3)<<30)|((($c000+(6*2)+(25*$80))&$3fff)<<16)|(((vram&write)&$fc)<<2)|((($c000+(6*2)+(25*$80))&$c000)>>14),(a6)
00000864 7C03                       		moveq	#4-1,d6			; digit ct
00000866 3638 8980                  		move.w	DMAlen.w,d3		; get dma len
0000086A 363B 30D6                  		move.w	dlen(pc,d3.w),d3	; translate to actual num
0000086E 4EB8 0828                  		jsr	PutHex.w		; write it onscreen
00000872                            
00000872                            	vdpCoord 6,26,WRITE
00000872                          M 	vdpcomm	move.l,($c000+(6*2)+(26*$80)),vram,write,(a6)
00000872 2CBC 4D0C 0003           M 	move.l	#(((vram&write)&3)<<30)|((($c000+(6*2)+(26*$80))&$3fff)<<16)|(((vram&write)&$fc)<<2)|((($c000+(6*2)+(26*$80))&$c000)>>14),(a6)
00000878 7E00                       		moveq 	#0,d7
0000087A 7407                       		moveq	#8-1,d2			; set repeat count
0000087C 41F8 8106                  		lea	mComm.w,a0		; get comm bytes
00000880                            
00000880 7C01                       .comm		moveq	#2-1,d6			; digit ct
00000882 1618                       		move.b	(a0)+,d3		; get next num
00000884 4EB8 0828                  		jsr	PutHex.w		; write it onscreen
00000888 3A87                       		move.w	d7,(a5)			; write 1 space
0000088A 51CA FFF4                  		dbf	d2,.comm		; loop
0000088E                            
0000088E 41FA 0000                  		lea	.list(pc),a0		; get data list to a0
00000892                            
00000892                            	vdpCoord 6,24,WRITE
00000892                          M 	vdpcomm	move.l,($c000+(6*2)+(24*$80)),vram,write,(a6)
00000892 2CBC 4C0C 0003           M 	move.l	#(((vram&write)&3)<<30)|((($c000+(6*2)+(24*$80))&$3fff)<<16)|(((vram&write)&$fc)<<2)|((($c000+(6*2)+(24*$80))&$c000)>>14),(a6)
00000898 7401                       		moveq	#2-1,d2			; set rept count
0000089A 6100 0000                  		bsr.w	.writeb			; write music selection
0000089E                            
0000089E                            	vdpCoord 8,2,WRITE
0000089E                          M 	vdpcomm	move.l,($c000+(8*2)+(2*$80)),vram,write,(a6)
0000089E 2CBC 4110 0003           M 	move.l	#(((vram&write)&3)<<30)|((($c000+(8*2)+(2*$80))&$3fff)<<16)|(((vram&write)&$fc)<<2)|((($c000+(8*2)+(2*$80))&$c000)>>14),(a6)
000008A4 7403                       		moveq	#4-1,d2			; set rept count
000008A6 6100 0000                  		bsr.w	.writeb			; write tempo data
000008AA                            
000008AA                            	vdpCoord 8,3,WRITE
000008AA                          M 	vdpcomm	move.l,($c000+(8*2)+(3*$80)),vram,write,(a6)
000008AA 2CBC 4190 0003           M 	move.l	#(((vram&write)&3)<<30)|((($c000+(8*2)+(3*$80))&$3fff)<<16)|(((vram&write)&$fc)<<2)|((($c000+(8*2)+(3*$80))&$c000)>>14),(a6)
000008B0 7402                       		moveq	#3-1,d2			; set rept count
000008B2 6100 0000                  		bsr.w	.writeb			; write volume data
000008B6                            
000008B6 =00000005                  .p =	5
000008B6                            	rept Mus_Ch
000008B6                            		vdpCoord 6,.p,WRITE
000008B6                            		moveq	#9-1,d2			; set rept count
000008B6                            		bsr.w	.writeb			; write data
000008B6                            .p =		.p+1
000008B6                            	endr
000008B6                          M 	vdpcoord	6,.p,write
000008B6                          M 	vdpcomm	move.l,($c000+(6*2)+(.p*$80)),vram,write,(a6)
000008B6 2CBC 428C 0003           M 	move.l	#(((vram&write)&3)<<30)|((($c000+(6*2)+(.p*$80))&$3fff)<<16)|(((vram&write)&$fc)<<2)|((($c000+(6*2)+(.p*$80))&$c000)>>14),(a6)
000008BC 7408                     M 	moveq	#9-1,d2
000008BE 6100 0000                M 	bsr.w	.writeb
000008C2 =00000006                M .p	=	.p+1
000008C2                          M 	vdpcoord	6,.p,write
000008C2                          M 	vdpcomm	move.l,($c000+(6*2)+(.p*$80)),vram,write,(a6)
000008C2 2CBC 430C 0003           M 	move.l	#(((vram&write)&3)<<30)|((($c000+(6*2)+(.p*$80))&$3fff)<<16)|(((vram&write)&$fc)<<2)|((($c000+(6*2)+(.p*$80))&$c000)>>14),(a6)
000008C8 7408                     M 	moveq	#9-1,d2
000008CA 6100 0000                M 	bsr.w	.writeb
000008CE =00000007                M .p	=	.p+1
000008CE                          M 	vdpcoord	6,.p,write
000008CE                          M 	vdpcomm	move.l,($c000+(6*2)+(.p*$80)),vram,write,(a6)
000008CE 2CBC 438C 0003           M 	move.l	#(((vram&write)&3)<<30)|((($c000+(6*2)+(.p*$80))&$3fff)<<16)|(((vram&write)&$fc)<<2)|((($c000+(6*2)+(.p*$80))&$c000)>>14),(a6)
000008D4 7408                     M 	moveq	#9-1,d2
000008D6 6100 0000                M 	bsr.w	.writeb
000008DA =00000008                M .p	=	.p+1
000008DA                          M 	vdpcoord	6,.p,write
000008DA                          M 	vdpcomm	move.l,($c000+(6*2)+(.p*$80)),vram,write,(a6)
000008DA 2CBC 440C 0003           M 	move.l	#(((vram&write)&3)<<30)|((($c000+(6*2)+(.p*$80))&$3fff)<<16)|(((vram&write)&$fc)<<2)|((($c000+(6*2)+(.p*$80))&$c000)>>14),(a6)
000008E0 7408                     M 	moveq	#9-1,d2
000008E2 6100 0000                M 	bsr.w	.writeb
000008E6 =00000009                M .p	=	.p+1
000008E6                          M 	vdpcoord	6,.p,write
000008E6                          M 	vdpcomm	move.l,($c000+(6*2)+(.p*$80)),vram,write,(a6)
000008E6 2CBC 448C 0003           M 	move.l	#(((vram&write)&3)<<30)|((($c000+(6*2)+(.p*$80))&$3fff)<<16)|(((vram&write)&$fc)<<2)|((($c000+(6*2)+(.p*$80))&$c000)>>14),(a6)
000008EC 7408                     M 	moveq	#9-1,d2
000008EE 6100 0000                M 	bsr.w	.writeb
000008F2 =0000000A                M .p	=	.p+1
000008F2                          M 	vdpcoord	6,.p,write
000008F2                          M 	vdpcomm	move.l,($c000+(6*2)+(.p*$80)),vram,write,(a6)
000008F2 2CBC 450C 0003           M 	move.l	#(((vram&write)&3)<<30)|((($c000+(6*2)+(.p*$80))&$3fff)<<16)|(((vram&write)&$fc)<<2)|((($c000+(6*2)+(.p*$80))&$c000)>>14),(a6)
000008F8 7408                     M 	moveq	#9-1,d2
000008FA 6100 0000                M 	bsr.w	.writeb
000008FE =0000000B                M .p	=	.p+1
000008FE                          M 	vdpcoord	6,.p,write
000008FE                          M 	vdpcomm	move.l,($c000+(6*2)+(.p*$80)),vram,write,(a6)
000008FE 2CBC 458C 0003           M 	move.l	#(((vram&write)&3)<<30)|((($c000+(6*2)+(.p*$80))&$3fff)<<16)|(((vram&write)&$fc)<<2)|((($c000+(6*2)+(.p*$80))&$c000)>>14),(a6)
00000904 7408                     M 	moveq	#9-1,d2
00000906 6100 0000                M 	bsr.w	.writeb
0000090A =0000000C                M .p	=	.p+1
0000090A                          M 	vdpcoord	6,.p,write
0000090A                          M 	vdpcomm	move.l,($c000+(6*2)+(.p*$80)),vram,write,(a6)
0000090A 2CBC 460C 0003           M 	move.l	#(((vram&write)&3)<<30)|((($c000+(6*2)+(.p*$80))&$3fff)<<16)|(((vram&write)&$fc)<<2)|((($c000+(6*2)+(.p*$80))&$c000)>>14),(a6)
00000910 7408                     M 	moveq	#9-1,d2
00000912 6100 0000                M 	bsr.w	.writeb
00000916 =0000000D                M .p	=	.p+1
00000916                          M 	vdpcoord	6,.p,write
00000916                          M 	vdpcomm	move.l,($c000+(6*2)+(.p*$80)),vram,write,(a6)
00000916 2CBC 468C 0003           M 	move.l	#(((vram&write)&3)<<30)|((($c000+(6*2)+(.p*$80))&$3fff)<<16)|(((vram&write)&$fc)<<2)|((($c000+(6*2)+(.p*$80))&$c000)>>14),(a6)
0000091C 7408                     M 	moveq	#9-1,d2
0000091E 6100 0000                M 	bsr.w	.writeb
00000922 =0000000E                M .p	=	.p+1
00000922                          M 	vdpcoord	6,.p,write
00000922                          M 	vdpcomm	move.l,($c000+(6*2)+(.p*$80)),vram,write,(a6)
00000922 2CBC 470C 0003           M 	move.l	#(((vram&write)&3)<<30)|((($c000+(6*2)+(.p*$80))&$3fff)<<16)|(((vram&write)&$fc)<<2)|((($c000+(6*2)+(.p*$80))&$c000)>>14),(a6)
00000928 7408                     M 	moveq	#9-1,d2
0000092A 6100 0000                M 	bsr.w	.writeb
0000092E =0000000F                M .p	=	.p+1
0000092E 4E75                       		rts
00000930                            
00000930 3258                       .writeb		move.w	(a0)+,a1		; get addr
00000932 3609                       		move.w	a1,d3			; check addr
00000934 6B00                       		bmi.s	.norm			; if negative, branch
00000936 4EBB 3000                  		jsr	.rt(pc,d3.w)		; jump to appropriate routine
0000093A 6000                       		bra.s	.write
0000093C                            
0000093C 7C01                       .norm		moveq	#2-1,d6			; digit ct
0000093E 1611                       		move.b	(a1),d3			; get byte
00000940 4EB8 0828                  .write		jsr	PutHex.w		; write it onscreen
00000944 3A87                       		move.w	d7,(a5)			; write 1 space
00000946 51CA FFE8                  		dbf	d2,.writeb		; loopdeloop
0000094A 4E75                       		rts
0000094C                            
0000094C 7C03                       .rt		moveq	#4-1,d6			; digit ct
0000094E 3258                       		move.w	(a0)+,a1		; get actual addr
00000950 3619                       		move.w	(a1)+,d3		; get value as a word
00000952 4E75                       		rts
00000954                            
00000954 7C03                       .modf		moveq	#4-1,d6			; digit ct
00000956 3258                       		move.w	(a0)+,a1		; get actual addr
00000958 1629 0007                  		move.b	cDetune(a1),d3		; get detune
0000095C 4883                       		ext.w	d3			; extend to word
0000095E D669 000E                  		add.w	cFreq(a1),d3		; add frequency
00000962 D669 0014                  		add.w	cModFreq(a1),d3		; add modulation frequency
00000966 4E75                       		rts
00000968                            
00000968 8988 8989                  .list	dc.w MusSel, MusPlay
0000096C 8114 8112 8113 8115        	dc.w mTempo, mTempoMain, mTempoSpeed, mTempoCur
00000974 810E 8119 811A             	dc.w mMasterVolFM, mMasterVolPSG, mMasterVolDAC
0000097A                            
0000097A =FFFF811E                  .ch =	mDAC1
0000097A                            	rept Mus_Ch
0000097A                            		dc.w .ch, .ch+cPanning, .ch+cPitch, .ch+cVolume
0000097A                            		dc.w .ch+cVoice, .ch+cLastDur, .ch+cDuration
0000097A                            		dc.w 0, .ch+cFreq, .modf-.rt, .ch
0000097A                            .ch =		.ch+cSize
0000097A                            	endr
0000097A 811E 8124 8126 8127      M 	dc.w	.ch,.ch+cpanning,.ch+cpitch,.ch+cvolume
00000982 8129 812B 812A           M 	dc.w	.ch+cvoice,.ch+clastdur,.ch+cduration
00000988 0000 812C 0008 811E      M 	dc.w	0,.ch+cfreq,.modf-.rt,.ch
00000990 =FFFF814A                M .ch	=	.ch+csize
00000990 814A 8150 8152 8153      M 	dc.w	.ch,.ch+cpanning,.ch+cpitch,.ch+cvolume
00000998 8155 8157 8156           M 	dc.w	.ch+cvoice,.ch+clastdur,.ch+cduration
0000099E 0000 8158 0008 814A      M 	dc.w	0,.ch+cfreq,.modf-.rt,.ch
000009A6 =FFFF8176                M .ch	=	.ch+csize
000009A6 8176 817C 817E 817F      M 	dc.w	.ch,.ch+cpanning,.ch+cpitch,.ch+cvolume
000009AE 8181 8183 8182           M 	dc.w	.ch+cvoice,.ch+clastdur,.ch+cduration
000009B4 0000 8184 0008 8176      M 	dc.w	0,.ch+cfreq,.modf-.rt,.ch
000009BC =FFFF81A2                M .ch	=	.ch+csize
000009BC 81A2 81A8 81AA 81AB      M 	dc.w	.ch,.ch+cpanning,.ch+cpitch,.ch+cvolume
000009C4 81AD 81AF 81AE           M 	dc.w	.ch+cvoice,.ch+clastdur,.ch+cduration
000009CA 0000 81B0 0008 81A2      M 	dc.w	0,.ch+cfreq,.modf-.rt,.ch
000009D2 =FFFF81CE                M .ch	=	.ch+csize
000009D2 81CE 81D4 81D6 81D7      M 	dc.w	.ch,.ch+cpanning,.ch+cpitch,.ch+cvolume
000009DA 81D9 81DB 81DA           M 	dc.w	.ch+cvoice,.ch+clastdur,.ch+cduration
000009E0 0000 81DC 0008 81CE      M 	dc.w	0,.ch+cfreq,.modf-.rt,.ch
000009E8 =FFFF81FA                M .ch	=	.ch+csize
000009E8 81FA 8200 8202 8203      M 	dc.w	.ch,.ch+cpanning,.ch+cpitch,.ch+cvolume
000009F0 8205 8207 8206           M 	dc.w	.ch+cvoice,.ch+clastdur,.ch+cduration
000009F6 0000 8208 0008 81FA      M 	dc.w	0,.ch+cfreq,.modf-.rt,.ch
000009FE =FFFF8226                M .ch	=	.ch+csize
000009FE 8226 822C 822E 822F      M 	dc.w	.ch,.ch+cpanning,.ch+cpitch,.ch+cvolume
00000A06 8231 8233 8232           M 	dc.w	.ch+cvoice,.ch+clastdur,.ch+cduration
00000A0C 0000 8234 0008 8226      M 	dc.w	0,.ch+cfreq,.modf-.rt,.ch
00000A14 =FFFF8252                M .ch	=	.ch+csize
00000A14 8252 8258 825A 825B      M 	dc.w	.ch,.ch+cpanning,.ch+cpitch,.ch+cvolume
00000A1C 825D 825F 825E           M 	dc.w	.ch+cvoice,.ch+clastdur,.ch+cduration
00000A22 0000 8260 0008 8252      M 	dc.w	0,.ch+cfreq,.modf-.rt,.ch
00000A2A =FFFF827E                M .ch	=	.ch+csize
00000A2A 827E 8284 8286 8287      M 	dc.w	.ch,.ch+cpanning,.ch+cpitch,.ch+cvolume
00000A32 8289 828B 828A           M 	dc.w	.ch+cvoice,.ch+clastdur,.ch+cduration
00000A38 0000 828C 0008 827E      M 	dc.w	0,.ch+cfreq,.modf-.rt,.ch
00000A40 =FFFF82AA                M .ch	=	.ch+csize
00000A40 82AA 82B0 82B2 82B3      M 	dc.w	.ch,.ch+cpanning,.ch+cpitch,.ch+cvolume
00000A48 82B5 82B7 82B6           M 	dc.w	.ch+cvoice,.ch+clastdur,.ch+cduration
00000A4E 0000 82B8 0008 82AA      M 	dc.w	0,.ch+cfreq,.modf-.rt,.ch
00000A56 =FFFF82D6                M .ch	=	.ch+csize
00000A56                            	include "code/vint.asm"		; v-int routines
00000A56                            VInt:
00000A56 6100 0000                  		bsr.w	ReadControllers		; read controller input
00000A5A                            
00000A5A 0838 0002 8985             		btst	#2,Ctrl1Press.w		; check if pressing left
00000A60 6700                       		beq.s	.nol			; if no, branch
00000A62 5338 8988                  		subq.b	#1,MusSel.w		; decrease selection
00000A66                            
00000A66 0838 0003 8985             .nol		btst	#3,Ctrl1Press.w		; check if pressing right
00000A6C 6700                       		beq.s	.nor			; if no, branch
00000A6E 5238 8988                  		addq.b	#1,MusSel.w		; icnrease selection
00000A72                            
00000A72 0838 0000 8984             .nor		btst	#0,Ctrl1Hold.w		; check if pressing up
00000A78 6700                       		beq.s	.nou			; if no, branch
00000A7A 5338 811A                  		subq.b	#1,mMasterVolDAC.w	; increase volume
00000A7E 6A00                       		bpl.s	.copyvol		; if positive, copy vol
00000A80 4238 811A                  		clr.b	mMasterVolDAC.w		; reset to 0
00000A84 6000                       		bra.s	.copyvol
00000A86                            
00000A86 0838 0001 8984             .nou		btst	#1,Ctrl1Hold.w		; check if pressing down
00000A8C 6700                       		beq.s	.nod			; if no, branch
00000A8E 5238 811A                  		addq.b	#1,mMasterVolDAC.w	; increase volume
00000A92 6A00                       		bpl.s	.copyvol		; if positive, copy vol
00000A94 11FC 007F 811A             		move.b	#$7F,mMasterVolDAC.w	; reset to 0
00000A9A                            
00000A9A 1038 811A                  .copyvol	move.b	mMasterVolDAC.w,d0	; get vol to d0
00000A9E 11C0 810E                  		move.b	d0,mMasterVolFM.w	; copy to FM
00000AA2 E608                       		lsr.b	#3,d0			; divide by 8
00000AA4 11C0 8119                  		move.b	d0,mMasterVolPSG.w	; copy to PSG
00000AA8 4EB9 0000 0000             		jsr	dUpdateVolumeAll	; update all volume
00000AAE                            
00000AAE 0838 0006 8985             .nod		btst	#6,Ctrl1Press.w		; check if pressing A
00000AB4 6700                       		beq.s	.noA			; if no, branch
00000AB6 5478 8980                  		addq.w	#2,DMAlen.w		; icnrease DMA len
00000ABA                            
00000ABA 0C78 000C 8980             		cmp.w	#$C,DMAlen.w		; check if max
00000AC0 6D00                       		blt.s	.noA			; if no, branch
00000AC2 4278 8980                  		clr.w	DMAlen.w		; clear dma len
00000AC6                            
00000AC6 0838 0004 8985             .noA		btst	#4,Ctrl1Press.w		; check if pressing B
00000ACC 6700                       		beq.s	.noB			; if no, branch
00000ACE 11FC 0002 8116             		move.b	#Mus_FadeOut,mQueue.w	; fade out music
00000AD4 11F8 8116 8989             		move.b	mQueue.w,MusPlay.w	;
00000ADA                            
00000ADA 4A38 8985                  .noB		tst.b	Ctrl1Press.w		; check if pressed
00000ADE 6A00                       		bpl.s	.noprs			; if not, branch
00000AE0 11F8 8988 8116             		move.b	MusSel.w,mQueue.w	; copy music to queue
00000AE6 11F8 8988 8989             		move.b	MusSel.w,MusPlay.w	; update music played
00000AEC                            
00000AEC 5278 8982                  .noprs		addq.w	#1,Frame.w		; advance frame timer
00000AF0 4A78 8980                  		tst.w	DMAlen.w		; check if dmalen = 0
00000AF4 6700                       		beq.s	.skip			; if so, do not even stop z80
00000AF6                            
00000AF6 3038 8980                  		move.w	DMAlen.w,d0		; get DMA length setting
00000AFA 323B 0000                  		move.w	.offs-2(pc,d0.w),d1	; get offset to the routine
00000AFE 4EBB 1000                  		jsr	.offs(pc,d1.w)		; jump to it
00000B02                            
00000B02 0C2E 0004 0004             .skip		cmp.b	#4,4(a6)		; check v-counter
00000B08 6DF8                       		blt.s	.skip			; if not positive, wait
00000B0A                            
00000B0A 3CBC 9193                  		move.w	#$9193,(a6)		; enable window
00000B0E 4EB9 0000 0000             		jsr	UpdateAMPS		; update driver crap
00000B14 4DF9 00C0 0004             		lea	VDP_control_port,a6
00000B1A 4BEE FFFC                  		lea	-4(a6),a5
00000B1E                            
00000B1E 3CBC 9100                  		move.w	#$9100,(a6)		; disable window
00000B22 4EB8 084E                  		jsr	DrawScene.w		; draw all text n shit
00000B26 4E73                       		rte
00000B28                            
00000B28 0000                       .offs	dc.w dma_0x80-.offs
00000B2A 0000                       	dc.w dma_0x680-.offs
00000B2C 0000                       	dc.w dma_0x900-.offs
00000B2E 0000                       	dc.w dma_0x1000-.offs
00000B30 0000                       	dc.w dma_0x2000-.offs
00000B32                            ; ===========================================================================
00000B32                            
00000B32                            ReadControllers:
00000B32 41F8 8984                  		lea	Ctrl1Hold.w,a0		; get held buttons array
00000B36 43F9 00A1 0003             		lea	HW_Port_1_Data,a1
00000B3C 6100                       		bsr.s	.readone		; poll first controller
00000B3E 5449                       		addq.w	#2,a1			; poll second controller
00000B40                            
00000B40 12BC 0000                  .readone	move.b	#0,(a1)			; Poll controller data port
00000B44 8080                       		or.l	d0,d0
00000B46 1011                       		move.b	(a1),d0			; Get controller port data (start/A)
00000B48 E508                       		lsl.b	#2,d0
00000B4A 0200 00C0                  		andi.b	#$C0,d0
00000B4E 12BC 0040                  		move.b	#$40,(a1)		; Poll controller data port again
00000B52 8080                       		or.l	d0,d0
00000B54 1211                       		move.b	(a1),d1			; Get controller port data (B/C/Dpad)
00000B56 0201 003F                  		andi.b	#$3F,d1
00000B5A 8001                       		or.b	d1,d0			; Fuse together into one controller bit array
00000B5C 4600                       		not.b	d0
00000B5E 1210                       		move.b	(a0),d1			; Get press button data
00000B60 B101                       		eor.b	d0,d1			; Toggle off buttons that are being held
00000B62 10C0                       		move.b	d0,(a0)+		; Put raw controller input (for held buttons) in F604/F606
00000B64 C200                       		and.b	d0,d1
00000B66 10C1                       		move.b	d1,(a0)+		; Put pressed controller input in RAM
00000B68 4E75                       		rts
00000B6A                            ; ===========================================================================
00000B6A                            
00000B6A                            dma_0x2000:	dma68kToVDP 0,$400*32,$1000,VRAM
00000B6A 2CBC 9408 9300           M 	move.l	#(($9400|((((length)>>1)&$ff00)>>8))<<16)|($9300|(((length)>>1)&$ff)),(a6)
00000B70 2CBC 9600 9500           M 	move.l	#(($9600|((((source)>>1)&$ff00)>>8))<<16)|($9500|(((source)>>1)&$ff)),(a6)
00000B76 3CBC 9700                M 	move.w	#$9700|(((((source)>>1)&$ff0000)>>16)&$7f),(a6)
00000B7A                          M 	vdpcomm	move.l,$400*32,vram,dma,(a6)
00000B7A 2CBC C000 0080           M 	move.l	#(((vram&dma)&3)<<30)|(($400*32&$3fff)<<16)|(((vram&dma)&$fc)<<2)|(($400*32&$c000)>>14),(a6)
00000B80                            dma_0x1000:	dma68kToVDP 0,$400*32,$700,VRAM
00000B80 2CBC 9403 9380           M 	move.l	#(($9400|((((length)>>1)&$ff00)>>8))<<16)|($9300|(((length)>>1)&$ff)),(a6)
00000B86 2CBC 9600 9500           M 	move.l	#(($9600|((((source)>>1)&$ff00)>>8))<<16)|($9500|(((source)>>1)&$ff)),(a6)
00000B8C 3CBC 9700                M 	move.w	#$9700|(((((source)>>1)&$ff0000)>>16)&$7f),(a6)
00000B90                          M 	vdpcomm	move.l,$400*32,vram,dma,(a6)
00000B90 2CBC C000 0080           M 	move.l	#(((vram&dma)&3)<<30)|(($400*32&$3fff)<<16)|(((vram&dma)&$fc)<<2)|(($400*32&$c000)>>14),(a6)
00000B96                            dma_0x900:	dma68kToVDP 0,$400*32,$280,VRAM
00000B96 2CBC 9401 9340           M 	move.l	#(($9400|((((length)>>1)&$ff00)>>8))<<16)|($9300|(((length)>>1)&$ff)),(a6)
00000B9C 2CBC 9600 9500           M 	move.l	#(($9600|((((source)>>1)&$ff00)>>8))<<16)|($9500|(((source)>>1)&$ff)),(a6)
00000BA2 3CBC 9700                M 	move.w	#$9700|(((((source)>>1)&$ff0000)>>16)&$7f),(a6)
00000BA6                          M 	vdpcomm	move.l,$400*32,vram,dma,(a6)
00000BA6 2CBC C000 0080           M 	move.l	#(((vram&dma)&3)<<30)|(($400*32&$3fff)<<16)|(((vram&dma)&$fc)<<2)|(($400*32&$c000)>>14),(a6)
00000BAC                            dma_0x680:	dma68kToVDP 0,$400*32,$600,VRAM
00000BAC 2CBC 9403 9300           M 	move.l	#(($9400|((((length)>>1)&$ff00)>>8))<<16)|($9300|(((length)>>1)&$ff)),(a6)
00000BB2 2CBC 9600 9500           M 	move.l	#(($9600|((((source)>>1)&$ff00)>>8))<<16)|($9500|(((source)>>1)&$ff)),(a6)
00000BB8 3CBC 9700                M 	move.w	#$9700|(((((source)>>1)&$ff0000)>>16)&$7f),(a6)
00000BBC                          M 	vdpcomm	move.l,$400*32,vram,dma,(a6)
00000BBC 2CBC C000 0080           M 	move.l	#(((vram&dma)&3)<<30)|(($400*32&$3fff)<<16)|(((vram&dma)&$fc)<<2)|(($400*32&$c000)>>14),(a6)
00000BC2                            dma_0x80:	dma68kToVDP Palette,0,$80,CRAM		; DMA palette to CRAM
00000BC2 2CBC 9400 9340           M 	move.l	#(($9400|((((length)>>1)&$ff00)>>8))<<16)|($9300|(((length)>>1)&$ff)),(a6)
00000BC8 2CBC 96C4 9580           M 	move.l	#(($9600|((((source)>>1)&$ff00)>>8))<<16)|($9500|(((source)>>1)&$ff)),(a6)
00000BCE 3CBC 977F                M 	move.w	#$9700|(((((source)>>1)&$ff0000)>>16)&$7f),(a6)
00000BD2                          M 	vdpcomm	move.l,0,cram,dma,(a6)
00000BD2 2CBC C000 0080           M 	move.l	#(((cram&dma)&3)<<30)|((0&$3fff)<<16)|(((cram&dma)&$fc)<<2)|((0&$c000)>>14),(a6)
00000BD8 4E75                       		rts
00000BDA                            	include "code/decomp.asm"	; decompressor routines
00000BDA                            ; ---------------------------------------------------------------------------
00000BDA                            ; KOSINSKI DECOMPRESSION PROCEDURE
00000BDA                            ; (sometimes called KOZINSKI decompression)
00000BDA                            ;
00000BDA                            ; ARGUMENTS:
00000BDA                            ; a0 = source address
00000BDA                            ; a1 = destination address
00000BDA                            ;
00000BDA                            ; For format explanation see http://info.sonicretro.org/Kosinski_compression
00000BDA                            ; New faster version by written by vladikcomper, with additional improvements by
00000BDA                            ; MarkeyJester and Flamewing
00000BDA                            ; ---------------------------------------------------------------------------
00000BDA =00000001                  _Kos_UseLUT = 1
00000BDA =00000003                  _Kos_LoopUnroll = 3
00000BDA =00000001                  _Kos_ExtremeUnrolling = 1
00000BDA                            
00000BDA                            _Kos_RunBitStream macro
00000BDA                            	dbra	d2,.skip\@
00000BDA                            	moveq	#7,d2					; Set repeat count to 8.
00000BDA                            	move.b	d1,d0					; Use the remaining 8 bits.
00000BDA                            	not.w	d3					; Have all 16 bits been used up?
00000BDA                            	bne.s	.skip\@					; Branch if not.
00000BDA                            	move.b	(a0)+,d0				; Get desc field low-byte.
00000BDA                            	move.b	(a0)+,d1				; Get desc field hi-byte.
00000BDA                            
00000BDA                            	if _Kos_UseLUT=1
00000BDA                            		move.b	(a4,d0.w),d0			; Invert bit order...
00000BDA                            		move.b	(a4,d1.w),d1			; ... for both bytes.
00000BDA                            	endif
00000BDA                            .skip\@
00000BDA                            	endm
00000BDA                            
00000BDA                            _Kos_ReadBit macro
00000BDA                            	if _Kos_UseLUT=1
00000BDA                            		add.b	d0,d0				; Get a bit from the bitstream.
00000BDA                            	else
00000BDA                            		lsr.b	#1,d0				; Get a bit from the bitstream.
00000BDA                            	endif
00000BDA                            	endm
00000BDA                            ; ===========================================================================
00000BDA                            ; KozDec_193A:
00000BDA                            KosDec:
00000BDA 7E07                       	moveq	#(1<<_Kos_LoopUnroll)-1,d7
00000BDC 7000                       		moveq	#0,d0
00000BDE 7200                       		moveq	#0,d1
00000BE0 49FA 0000                  		lea	KosDec_ByteMap(pc),a4		; Load LUT pointer.
00000BE4                            
00000BE4 1018                       	move.b	(a0)+,d0				; Get desc field low-byte.
00000BE6 1218                       	move.b	(a0)+,d1				; Get desc field hi-byte.
00000BE8                            
00000BE8 1034 0000                  		move.b	(a4,d0.w),d0			; Invert bit order...
00000BEC 1234 1000                  		move.b	(a4,d1.w),d1			; ... for both bytes.
00000BF0                            
00000BF0 7407                       	moveq	#7,d2					; Set repeat count to 8.
00000BF2 7600                       	moveq	#0,d3					; d3 will be desc field switcher.
00000BF4 6000                       	bra.s	.FetchNewCode
00000BF6                            ; ---------------------------------------------------------------------------
00000BF6                            .FetchCodeLoop:
00000BF6                            	; Code 1 (Uncompressed byte).
00000BF6                            	_Kos_RunBitStream
00000BF6 51CA 0000                M 	dbra	d2,.skip_110
00000BFA 7407                     M 	moveq	#7,d2
00000BFC 1001                     M 	move.b	d1,d0
00000BFE 4643                     M 	not.w	d3
00000C00 6600                     M 	bne.s	.skip_110
00000C02 1018                     M 	move.b	(a0)+,d0
00000C04 1218                     M 	move.b	(a0)+,d1
00000C06 1034 0000                M 	move.b	(a4,d0.w),d0
00000C0A 1234 1000                M 	move.b	(a4,d1.w),d1
00000C0E                          M .skip_110
00000C0E 12D8                       	move.b	(a0)+,(a1)+
00000C10                            
00000C10                            .FetchNewCode:
00000C10                            	_Kos_ReadBit
00000C10 D000                     M 	add.b	d0,d0
00000C12 65E2                       	bcs.s	.FetchCodeLoop			; If code = 1, branch.
00000C14                            
00000C14                            	; Codes 00 and 01.
00000C14 7AFF                       	moveq	#-1,d5
00000C16 4BD1                       	lea	(a1),a5
00000C18                            	_Kos_RunBitStream
00000C18 51CA 0000                M 	dbra	d2,.skip_112
00000C1C 7407                     M 	moveq	#7,d2
00000C1E 1001                     M 	move.b	d1,d0
00000C20 4643                     M 	not.w	d3
00000C22 6600                     M 	bne.s	.skip_112
00000C24 1018                     M 	move.b	(a0)+,d0
00000C26 1218                     M 	move.b	(a0)+,d1
00000C28 1034 0000                M 	move.b	(a4,d0.w),d0
00000C2C 1234 1000                M 	move.b	(a4,d1.w),d1
00000C30                          M .skip_112
00000C30                            
00000C30                            	_Kos_ReadBit
00000C30 D000                     M 	add.b	d0,d0
00000C32 6500 0000                  	bcs.w	.Code_01
00000C36                            
00000C36                            	; Code 00 (Dictionary ref. short).
00000C36                            	_Kos_RunBitStream
00000C36 51CA 0000                M 	dbra	d2,.skip_114
00000C3A 7407                     M 	moveq	#7,d2
00000C3C 1001                     M 	move.b	d1,d0
00000C3E 4643                     M 	not.w	d3
00000C40 6600                     M 	bne.s	.skip_114
00000C42 1018                     M 	move.b	(a0)+,d0
00000C44 1218                     M 	move.b	(a0)+,d1
00000C46 1034 0000                M 	move.b	(a4,d0.w),d0
00000C4A 1234 1000                M 	move.b	(a4,d1.w),d1
00000C4E                          M .skip_114
00000C4E                            	_Kos_ReadBit
00000C4E D000                     M 	add.b	d0,d0
00000C50 6500                       	bcs.s	.Copy45
00000C52                            	_Kos_RunBitStream
00000C52 51CA 0000                M 	dbra	d2,.skip_116
00000C56 7407                     M 	moveq	#7,d2
00000C58 1001                     M 	move.b	d1,d0
00000C5A 4643                     M 	not.w	d3
00000C5C 6600                     M 	bne.s	.skip_116
00000C5E 1018                     M 	move.b	(a0)+,d0
00000C60 1218                     M 	move.b	(a0)+,d1
00000C62 1034 0000                M 	move.b	(a4,d0.w),d0
00000C66 1234 1000                M 	move.b	(a4,d1.w),d1
00000C6A                          M .skip_116
00000C6A                            	_Kos_ReadBit
00000C6A D000                     M 	add.b	d0,d0
00000C6C 6500                       	bcs.s	.Copy3
00000C6E                            	_Kos_RunBitStream
00000C6E 51CA 0000                M 	dbra	d2,.skip_118
00000C72 7407                     M 	moveq	#7,d2
00000C74 1001                     M 	move.b	d1,d0
00000C76 4643                     M 	not.w	d3
00000C78 6600                     M 	bne.s	.skip_118
00000C7A 1018                     M 	move.b	(a0)+,d0
00000C7C 1218                     M 	move.b	(a0)+,d1
00000C7E 1034 0000                M 	move.b	(a4,d0.w),d0
00000C82 1234 1000                M 	move.b	(a4,d1.w),d1
00000C86                          M .skip_118
00000C86 1A18                       	move.b	(a0)+,d5				; d5 = displacement.
00000C88 DAC5                       	adda.w	d5,a5
00000C8A 12DD                       	move.b	(a5)+,(a1)+
00000C8C 12DD                       	move.b	(a5)+,(a1)+
00000C8E 6080                       	bra.s	.FetchNewCode
00000C90                            ; ---------------------------------------------------------------------------
00000C90                            .Copy3:
00000C90                            	_Kos_RunBitStream
00000C90 51CA 0000                M 	dbra	d2,.skip_119
00000C94 7407                     M 	moveq	#7,d2
00000C96 1001                     M 	move.b	d1,d0
00000C98 4643                     M 	not.w	d3
00000C9A 6600                     M 	bne.s	.skip_119
00000C9C 1018                     M 	move.b	(a0)+,d0
00000C9E 1218                     M 	move.b	(a0)+,d1
00000CA0 1034 0000                M 	move.b	(a4,d0.w),d0
00000CA4 1234 1000                M 	move.b	(a4,d1.w),d1
00000CA8                          M .skip_119
00000CA8 1A18                       	move.b	(a0)+,d5				; d5 = displacement.
00000CAA DAC5                       	adda.w	d5,a5
00000CAC 12DD                       	move.b	(a5)+,(a1)+
00000CAE 12DD                       	move.b	(a5)+,(a1)+
00000CB0 12DD                       	move.b	(a5)+,(a1)+
00000CB2 6000 FF5C                  	bra.w	.FetchNewCode
00000CB6                            ; ---------------------------------------------------------------------------
00000CB6                            .Copy45:
00000CB6                            	_Kos_RunBitStream
00000CB6 51CA 0000                M 	dbra	d2,.skip_120
00000CBA 7407                     M 	moveq	#7,d2
00000CBC 1001                     M 	move.b	d1,d0
00000CBE 4643                     M 	not.w	d3
00000CC0 6600                     M 	bne.s	.skip_120
00000CC2 1018                     M 	move.b	(a0)+,d0
00000CC4 1218                     M 	move.b	(a0)+,d1
00000CC6 1034 0000                M 	move.b	(a4,d0.w),d0
00000CCA 1234 1000                M 	move.b	(a4,d1.w),d1
00000CCE                          M .skip_120
00000CCE                            	_Kos_ReadBit
00000CCE D000                     M 	add.b	d0,d0
00000CD0 6500                       	bcs.s	.Copy5
00000CD2                            	_Kos_RunBitStream
00000CD2 51CA 0000                M 	dbra	d2,.skip_122
00000CD6 7407                     M 	moveq	#7,d2
00000CD8 1001                     M 	move.b	d1,d0
00000CDA 4643                     M 	not.w	d3
00000CDC 6600                     M 	bne.s	.skip_122
00000CDE 1018                     M 	move.b	(a0)+,d0
00000CE0 1218                     M 	move.b	(a0)+,d1
00000CE2 1034 0000                M 	move.b	(a4,d0.w),d0
00000CE6 1234 1000                M 	move.b	(a4,d1.w),d1
00000CEA                          M .skip_122
00000CEA 1A18                       	move.b	(a0)+,d5				; d5 = displacement.
00000CEC DAC5                       	adda.w	d5,a5
00000CEE 12DD                       	move.b	(a5)+,(a1)+
00000CF0 12DD                       	move.b	(a5)+,(a1)+
00000CF2 12DD                       	move.b	(a5)+,(a1)+
00000CF4 12DD                       	move.b	(a5)+,(a1)+
00000CF6 6000 FF18                  	bra.w	.FetchNewCode
00000CFA                            ; ---------------------------------------------------------------------------
00000CFA                            .Copy5:
00000CFA                            	_Kos_RunBitStream
00000CFA 51CA 0000                M 	dbra	d2,.skip_123
00000CFE 7407                     M 	moveq	#7,d2
00000D00 1001                     M 	move.b	d1,d0
00000D02 4643                     M 	not.w	d3
00000D04 6600                     M 	bne.s	.skip_123
00000D06 1018                     M 	move.b	(a0)+,d0
00000D08 1218                     M 	move.b	(a0)+,d1
00000D0A 1034 0000                M 	move.b	(a4,d0.w),d0
00000D0E 1234 1000                M 	move.b	(a4,d1.w),d1
00000D12                          M .skip_123
00000D12 1A18                       	move.b	(a0)+,d5				; d5 = displacement.
00000D14 DAC5                       	adda.w	d5,a5
00000D16 12DD                       	move.b	(a5)+,(a1)+
00000D18 12DD                       	move.b	(a5)+,(a1)+
00000D1A 12DD                       	move.b	(a5)+,(a1)+
00000D1C 12DD                       	move.b	(a5)+,(a1)+
00000D1E 12DD                       	move.b	(a5)+,(a1)+
00000D20 6000 FEEE                  	bra.w	.FetchNewCode
00000D24                            ; ---------------------------------------------------------------------------
00000D24                            ; ---------------------------------------------------------------------------
00000D24                            .Code_01:
00000D24 7800                       	moveq	#0,d4					; d4 will contain copy count.
00000D26                            	; Code 01 (Dictionary ref. long / special).
00000D26                            	_Kos_RunBitStream
00000D26 51CA 0000                M 	dbra	d2,.skip_124
00000D2A 7407                     M 	moveq	#7,d2
00000D2C 1001                     M 	move.b	d1,d0
00000D2E 4643                     M 	not.w	d3
00000D30 6600                     M 	bne.s	.skip_124
00000D32 1018                     M 	move.b	(a0)+,d0
00000D34 1218                     M 	move.b	(a0)+,d1
00000D36 1034 0000                M 	move.b	(a4,d0.w),d0
00000D3A 1234 1000                M 	move.b	(a4,d1.w),d1
00000D3E                          M .skip_124
00000D3E 1C18                       	move.b	(a0)+,d6				; d6 = %LLLLLLLL.
00000D40 1818                       	move.b	(a0)+,d4				; d4 = %HHHHHCCC.
00000D42 1A04                       	move.b	d4,d5					; d5 = %11111111 HHHHHCCC.
00000D44 EB4D                       	lsl.w	#5,d5					; d5 = %111HHHHH CCC00000.
00000D46 1A06                       	move.b	d6,d5					; d5 = %111HHHHH LLLLLLLL.
00000D48                            
00000D48 C847                       		and.w	d7,d4				; d4 = %00000CCC.
00000D4A                            
00000D4A 6600                       	bne.s	.StreamCopy				; if CCC=0, branch.
00000D4C                            
00000D4C                            	; special mode (extended counter)
00000D4C 1818                       	move.b	(a0)+,d4				; Read cnt
00000D4E 6700                       	beq.s	.Quit					; If cnt=0, quit decompression.
00000D50 5304                       	subq.b	#1,d4
00000D52 6700 FEBC                  	beq.w	.FetchNewCode			; If cnt=1, fetch a new code.
00000D56                            
00000D56 DAC5                       	adda.w	d5,a5
00000D58 12DD                       	move.b	(a5)+,(a1)+				; Do 1 extra copy (to compensate +1 to copy counter).
00000D5A 3C04                       	move.w	d4,d6
00000D5C 4646                       	not.w	d6
00000D5E CC47                       	and.w	d7,d6
00000D60 DC46                       	add.w	d6,d6
00000D62 E64C                       	lsr.w	#_Kos_LoopUnroll,d4
00000D64 4EFB 6000                  	jmp	.largecopy(pc,d6.w)
00000D68                            ; ---------------------------------------------------------------------------
00000D68                            .largecopy:
00000D68                            	rept (1<<_Kos_LoopUnroll)
00000D68                            		move.b	(a5)+,(a1)+
00000D68                            	endr
00000D68 12DD                     M 	move.b	(a5)+,(a1)+
00000D6A 12DD                     M 	move.b	(a5)+,(a1)+
00000D6C 12DD                     M 	move.b	(a5)+,(a1)+
00000D6E 12DD                     M 	move.b	(a5)+,(a1)+
00000D70 12DD                     M 	move.b	(a5)+,(a1)+
00000D72 12DD                     M 	move.b	(a5)+,(a1)+
00000D74 12DD                     M 	move.b	(a5)+,(a1)+
00000D76 12DD                     M 	move.b	(a5)+,(a1)+
00000D78                            
00000D78 51CC FFEE                  	dbra	d4,.largecopy
00000D7C 6000 FE92                  	bra.w	.FetchNewCode
00000D80                            ; ---------------------------------------------------------------------------
00000D80                            .StreamCopy:
00000D80 DAC5                       	adda.w	d5,a5
00000D82 12DD                       	move.b	(a5)+,(a1)+				; Do 1 extra copy (to compensate +1 to copy counter).
00000D84                            
00000D84 BF44                       		eor.w	d7,d4
00000D86                            
00000D86 D844                       	add.w	d4,d4
00000D88 4EFB 4000                  	jmp	.mediumcopy(pc,d4.w)
00000D8C                            ; ---------------------------------------------------------------------------
00000D8C                            .mediumcopy:
00000D8C                            	rept 8
00000D8C                            		move.b	(a5)+,(a1)+
00000D8C                            	endr
00000D8C 12DD                     M 	move.b	(a5)+,(a1)+
00000D8E 12DD                     M 	move.b	(a5)+,(a1)+
00000D90 12DD                     M 	move.b	(a5)+,(a1)+
00000D92 12DD                     M 	move.b	(a5)+,(a1)+
00000D94 12DD                     M 	move.b	(a5)+,(a1)+
00000D96 12DD                     M 	move.b	(a5)+,(a1)+
00000D98 12DD                     M 	move.b	(a5)+,(a1)+
00000D9A 12DD                     M 	move.b	(a5)+,(a1)+
00000D9C                            
00000D9C 6000 FE72                  	bra.w	.FetchNewCode
00000DA0                            ; ---------------------------------------------------------------------------
00000DA0                            .Quit:
00000DA0 4E75                       	rts						; End of function KosDec.
00000DA2                            
00000DA2                            ; ===========================================================================
00000DA2                            KosDec_ByteMap:
00000DA2 0080 40C0 20A0 60E0 1090+  	dc.b $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
00000DB2 0888 48C8 28A8 68E8 1898+  	dc.b $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
00000DC2 0484 44C4 24A4 64E4 1494+  	dc.b $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
00000DD2 0C8C 4CCC 2CAC 6CEC 1C9C+  	dc.b $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
00000DE2 0282 42C2 22A2 62E2 1292+  	dc.b $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
00000DF2 0A8A 4ACA 2AAA 6AEA 1A9A+  	dc.b $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
00000E02 0686 46C6 26A6 66E6 1696+  	dc.b $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
00000E12 0E8E 4ECE 2EAE 6EEE 1E9E+  	dc.b $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
00000E22 0181 41C1 21A1 61E1 1191+  	dc.b $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
00000E32 0989 49C9 29A9 69E9 1999+  	dc.b $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
00000E42 0585 45C5 25A5 65E5 1595+  	dc.b $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
00000E52 0D8D 4DCD 2DAD 6DED 1D9D+  	dc.b $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
00000E62 0383 43C3 23A3 63E3 1393+  	dc.b $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
00000E72 0B8B 4BCB 2BAB 6BEB 1B9B+  	dc.b $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
00000E82 0787 47C7 27A7 67E7 1797+  	dc.b $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
00000E92 0F8F 4FCF 2FAF 6FEF 1F9F+  	dc.b $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
00000EA2                            ; ===========================================================================
00000EA2                            
00000EA2                            ; ==============================================================================
00000EA2                            ; ------------------------------------------------------------------------------
00000EA2                            ; Nemesis decompression routine
00000EA2                            ; ------------------------------------------------------------------------------
00000EA2                            ; Optimized by vladikcomper
00000EA2                            ; ------------------------------------------------------------------------------
00000EA2                            
00000EA2                            NemDec_RAM:
00000EA2 47FA 0000                  	lea	NemDec_WriteRowToRAM(pc),a3
00000EA6                            
00000EA6                            NemDec_Main:
00000EA6 43F9 FFFF 3000             	lea	Buffer+$3000,a1		; load Nemesis decompression buffer
00000EAC 3418                       	move.w	(a0)+,d2		; get number of patterns
00000EAE 6A00                       	bpl.s	.0			; are we in Mode 0?
00000EB0 47EB 000A                  	lea	$A(a3),a3		; if not, use Mode 1
00000EB4 E74A                       .0	lsl.w	#3,d2
00000EB6 3A42                       	movea.w	d2,a5
00000EB8 7607                       	moveq	#7,d3
00000EBA 7400                       	moveq	#0,d2
00000EBC 7800                       	moveq	#0,d4
00000EBE 6100 0000                  	bsr.w	NemDec4
00000EC2 1A18                       	move.b	(a0)+,d5		; get first byte of compressed data
00000EC4 E145                       	asl.w	#8,d5			; shift up by a byte
00000EC6 1A18                       	move.b	(a0)+,d5		; get second byte of compressed data
00000EC8 3C3C 0010                  	move.w	#$10,d6			; set initial shift value
00000ECC 6100                       	bsr.s	NemDec2
00000ECE 4E75                       	rts
00000ED0                            
00000ED0                            ; ---------------------------------------------------------------------------
00000ED0                            ; Part of the Nemesis decompressor, processes the actual compressed data
00000ED0                            ; ---------------------------------------------------------------------------
00000ED0                            
00000ED0                            NemDec2:
00000ED0 3E06                       	move.w	d6,d7
00000ED2 5147                       	subq.w	#8,d7			; get shift value
00000ED4 3205                       	move.w	d5,d1
00000ED6 EE69                       	lsr.w	d7,d1			; shift so that high bit of the code is in bit position 7
00000ED8 0C01 00FC                  	cmpi.b	#%11111100,d1		; are the high 6 bits set?
00000EDC 6400                       	bcc.s	NemDec_InlineData	; if they are, it signifies inline data
00000EDE 0241 00FF                  	andi.w	#$FF,d1
00000EE2 D241                       	add.w	d1,d1
00000EE4 9C31 1000                  	sub.b	(a1,d1.w),d6		; ~~ subtract from shift value so that the next code is read next time around
00000EE8 0C46 0009                  	cmpi.w	#9,d6			; does a new byte need to be read?
00000EEC 6400                       	bcc.s	.0			; if not, branch
00000EEE 5046                       	addq.w	#8,d6
00000EF0 E145                       	asl.w	#8,d5
00000EF2 1A18                       	move.b	(a0)+,d5		; read next byte
00000EF4 1231 1001                  .0	move.b	1(a1,d1.w),d1
00000EF8 3001                       	move.w	d1,d0
00000EFA 0241 000F                  	andi.w	#$F,d1			; get palette index for pixel
00000EFE 0240 00F0                  	andi.w	#$F0,d0
00000F02                            
00000F02                            NemDec_GetRepeatCount:
00000F02 E848                       	lsr.w	#4,d0			; get repeat count
00000F04                            
00000F04                            NemDec_WritePixel:
00000F04 E98C                       	lsl.l	#4,d4			; shift up by a nybble
00000F06 8801                       	or.b	d1,d4			; write pixel
00000F08 51CB 0000                  	dbf	d3,NemDec_WritePixelLoop; ~~
00000F0C 4ED3                       	jmp	(a3)			; otherwise, write the row to its destination
00000F0E                            ; ---------------------------------------------------------------------------
00000F0E                            
00000F0E                            NemDec3:
00000F0E 7800                       	moveq	#0,d4			; reset row
00000F10 7607                       	moveq	#7,d3			; reset nybble counter
00000F12                            
00000F12                            NemDec_WritePixelLoop:
00000F12 51C8 FFF0                  	dbf	d0,NemDec_WritePixel
00000F16 60B8                       	bra.s	NemDec2
00000F18                            ; ---------------------------------------------------------------------------
00000F18                            
00000F18                            NemDec_InlineData:
00000F18 5D46                       	subq.w	#6,d6			; 6 bits needed to signal inline data
00000F1A 0C46 0009                  	cmpi.w	#9,d6
00000F1E 6400                       	bcc.s	.0
00000F20 5046                       	addq.w	#8,d6
00000F22 E145                       	asl.w	#8,d5
00000F24 1A18                       	move.b	(a0)+,d5
00000F26 5F46                       .0	subq.w	#7,d6			; and 7 bits needed for the inline data itself
00000F28 3205                       	move.w	d5,d1
00000F2A EC69                       	lsr.w	d6,d1			; shift so that low bit of the code is in bit position 0
00000F2C 3001                       	move.w	d1,d0
00000F2E 0241 000F                  	andi.w	#$F,d1			; get palette index for pixel
00000F32 0240 0070                  	andi.w	#$70,d0			; high nybble is repeat count for pixel
00000F36 0C46 0009                  	cmpi.w	#9,d6
00000F3A 64C6                       	bcc.s	NemDec_GetRepeatCount
00000F3C 5046                       	addq.w	#8,d6
00000F3E E145                       	asl.w	#8,d5
00000F40 1A18                       	move.b	(a0)+,d5
00000F42 60BE                       	bra.s	NemDec_GetRepeatCount
00000F44                            
00000F44                            ; ---------------------------------------------------------------------------
00000F44                            ; Subroutines to output decompressed entry
00000F44                            ; Selected depending on current decompression mode
00000F44                            ; ---------------------------------------------------------------------------
00000F44                            
00000F44                            NemDec_WriteRowToVDP:
00000F44                            loc_1502:
00000F44 2884                       	move.l	d4,(a4)			; write 8-pixel row
00000F46 534D                       	subq.w	#1,a5
00000F48 380D                       	move.w	a5,d4			; have all the 8-pixel rows been written?
00000F4A 66C2                       	bne.s	NemDec3			; if not, branch
00000F4C 4E75                       	rts
00000F4E                            ; ---------------------------------------------------------------------------
00000F4E                            
00000F4E                            NemDec_WriteRowToVDP_XOR:
00000F4E B982                       	eor.l	d4,d2			; XOR the previous row by the current row
00000F50 2882                       	move.l	d2,(a4)			; and write the result
00000F52 534D                       	subq.w	#1,a5
00000F54 380D                       	move.w	a5,d4
00000F56 66B6                       	bne.s	NemDec3
00000F58 4E75                       	rts
00000F5A                            ; ---------------------------------------------------------------------------
00000F5A                            
00000F5A                            NemDec_WriteRowToRAM:
00000F5A 28C4                       	move.l	d4,(a4)+		; write 8-pixel row
00000F5C 534D                       	subq.w	#1,a5
00000F5E 380D                       	move.w	a5,d4			; have all the 8-pixel rows been written?
00000F60 66AC                       	bne.s	NemDec3			; if not, branch
00000F62 4E75                       	rts
00000F64                            ; ---------------------------------------------------------------------------
00000F64                            
00000F64                            NemDec_WriteRowToRAM_XOR:
00000F64 B982                       	eor.l	d4,d2			; XOR the previous row by the current row
00000F66 28C2                       	move.l	d2,(a4)+		; and write the result
00000F68 534D                       	subq.w	#1,a5
00000F6A 380D                       	move.w	a5,d4
00000F6C 66A0                       	bne.s	NemDec3
00000F6E 4E75                       	rts
00000F70                            
00000F70                            ; ---------------------------------------------------------------------------
00000F70                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
00000F70                            ; ---------------------------------------------------------------------------
00000F70                            
00000F70                            NemDec4:
00000F70 1018                       	move.b	(a0)+,d0		; read first byte
00000F72                            
00000F72                            .ChkEnd:
00000F72 0C00 00FF                  	cmpi.b	#$FF,d0			; has the end of the code table description been reached?
00000F76 6600                       	bne.s	.NewPalIndex		; if not, branch
00000F78 4E75                       	rts
00000F7A                            ; ---------------------------------------------------------------------------
00000F7A                            
00000F7A                            .NewPalIndex:
00000F7A 3E00                       	move.w	d0,d7
00000F7C                            
00000F7C                            .ItemLoop:
00000F7C 1018                       	move.b	(a0)+,d0		; read next byte
00000F7E 6BF2                       	bmi.s	.ChkEnd			; ~~
00000F80 1200                       	move.b	d0,d1
00000F82 0247 000F                  	andi.w	#$F,d7			; get palette index
00000F86 0241 0070                  	andi.w	#$70,d1			; get repeat count for palette index
00000F8A 8E41                       	or.w	d1,d7			; combine the two
00000F8C 0240 000F                  	andi.w	#$F,d0			; get the length of the code in bits
00000F90 1200                       	move.b	d0,d1
00000F92 E149                       	lsl.w	#8,d1
00000F94 8E41                       	or.w	d1,d7			; combine with palette index and repeat count to form code table entry
00000F96 7208                       	moveq	#8,d1
00000F98 9240                       	sub.w	d0,d1			; is the code 8 bits long?
00000F9A 6600                       	bne.s	.ItemShortCode		; if not, a bit of extra processing is needed
00000F9C 1018                       	move.b	(a0)+,d0		; get code
00000F9E D040                       	add.w	d0,d0			; each code gets a word-sized entry in the table
00000FA0 3387 0000                  	move.w	d7,(a1,d0.w)		; store the entry for the code
00000FA4 60D6                       	bra.s	.ItemLoop		; repeat
00000FA6                            ; ---------------------------------------------------------------------------
00000FA6                            
00000FA6                            .ItemShortCode:
00000FA6 1018                       	move.b	(a0)+,d0		; get code
00000FA8 E368                       	lsl.w	d1,d0			; shift so that high bit is in bit position 7
00000FAA D040                       	add.w	d0,d0			; get index into code table
00000FAC 7A01                       	moveq	#1,d5
00000FAE E36D                       	lsl.w	d1,d5
00000FB0 5345                       	subq.w	#1,d5			; d5 = 2^d1 - 1
00000FB2 4DF1 0000                  	lea	(a1,d0.w),a6		; ~~
00000FB6                            
00000FB6                            .ItemShortCodeLoop:
00000FB6 3CC7                       	move.w	d7,(a6)+		; ~~ store entry
00000FB8 51CD FFFC                  	dbf	d5,.ItemShortCodeLoop	; repeat for required number of entries
00000FBC 60BE                       	bra.s	.ItemLoop
00000FBE                            
00000FBE                            ; ===============================================================
00000FBE                            ; ---------------------------------------------------------------
00000FBE                            ; COMPER Decompressor
00000FBE                            ; ---------------------------------------------------------------
00000FBE                            ; INPUT:
00000FBE                            ;	a0	- Source Offset
00000FBE                            ;	a1	- Destination Offset
00000FBE                            ; ---------------------------------------------------------------
00000FBE                            
00000FBE                            CompDec:
00000FBE                            .newblock
00000FBE 3018                       	move.w	(a0)+,d0		; fetch description field
00000FC0 760F                       	moveq	#15,d3			; set bits counter to 16
00000FC2                            
00000FC2                            .mainloop
00000FC2 D040                       	add.w	d0,d0			; roll description field
00000FC4 6500                       	bcs.s	.flag			; if a flag issued, branch
00000FC6 32D8                       	move.w	(a0)+,(a1)+		; otherwise, do uncompressed data
00000FC8 51CB FFF8                  	dbf	d3,.mainloop		; if bits counter remains, parse the next word
00000FCC 60F0                       	bra.s	.newblock		; start a new block
00000FCE                            
00000FCE                            ; ---------------------------------------------------------------
00000FCE 72FF                       .flag	moveq	#-1,d1			; init displacement
00000FD0 1218                       	move.b	(a0)+,d1		; load displacement
00000FD2 D241                       	add.w	d1,d1
00000FD4 7400                       	moveq	#0,d2			; init copy count
00000FD6 1418                       	move.b	(a0)+,d2		; load copy length
00000FD8 6700                       	beq.s	.end			; if zero, branch
00000FDA 45F1 1000                  	lea	(a1,d1),a2		; load start copy address
00000FDE                            
00000FDE 32DA                       .loop	move.w	(a2)+,(a1)+		; copy given sequence
00000FE0 51CA FFFC                  	dbf	d2,.loop		; repeat
00000FE4 51CB FFDC                  	dbf	d3,.mainloop		; if bits counter remains, parse the next word
00000FE8 60D4                       	bra.s	.newblock		; start a new block
00000FEA                            
00000FEA 4E75                       .end	rts
00000FEC                            
00000FEC                            ; ---------------------------------------------------------------------------
00000FEC                            ; Enigma decompression algorithm
00000FEC                            ; input:
00000FEC                            ;	d0 = starting art tile (added to each 8x8 before writing to destination)
00000FEC                            ;	a0 = source address
00000FEC                            ;	a1 = destination address
00000FEC                            ; usage:
00000FEC                            ;	lea	(source).l,a0
00000FEC                            ;	lea	(destination).l,a1
00000FEC                            ;	move.w	#arttile,d0
00000FEC                            ;	bsr.w	EniDec
00000FEC                            ; See http://www.segaretro.org/Enigma_compression for format description
00000FEC                            ; ---------------------------------------------------------------------------
00000FEC                            
00000FEC                            EniDec:
00000FEC 3640                       		movea.w	d0,a3		; store starting art tile
00000FEE 1018                       		move.b	(a0)+,d0
00000FF0 4880                       		ext.w	d0
00000FF2 3A40                       		movea.w	d0,a5		; store number of bits in inline copy value
00000FF4 1818                       		move.b	(a0)+,d4
00000FF6 E70C                       		lsl.b	#3,d4		; store PCCVH flags bitfield
00000FF8 3458                       		movea.w	(a0)+,a2
00000FFA D4CB                       		adda.w	a3,a2		; store incremental copy word
00000FFC 3858                       		movea.w	(a0)+,a4
00000FFE D8CB                       		adda.w	a3,a4		; store literal copy word
00001000 1A18                       		move.b	(a0)+,d5
00001002 E145                       		asl.w	#8,d5
00001004 1A18                       		move.b	(a0)+,d5	; get first word in format list
00001006 7C10                       		moveq	#16,d6		; initial shift value
00001008                            ; loc_173E:
00001008                            Eni_Loop:
00001008 7007                       		moveq	#7,d0		; assume a format list entry is 7 bits
0000100A 3E06                       		move.w	d6,d7
0000100C 9E40                       		sub.w	d0,d7
0000100E 3205                       		move.w	d5,d1
00001010 EE69                       		lsr.w	d7,d1
00001012 0241 007F                  		andi.w	#$7F,d1		; get format list entry
00001016 3401                       		move.w	d1,d2		; and copy it
00001018 0C41 0040                  		cmpi.w	#$40,d1		; is the high bit of the entry set?
0000101C 6400                       		bhs.s	.sevenbitentry
0000101E 7006                       		moveq	#6,d0		; if it isn't, the entry is actually 6 bits
00001020 E24A                       		lsr.w	#1,d2
00001022                            ; loc_1758:
00001022                            .sevenbitentry:
00001022 6100 0000                  		bsr.w	EniDec_FetchByte
00001026 0242 000F                  		andi.w	#$F,d2		; get repeat count
0000102A E849                       		lsr.w	#4,d1
0000102C D241                       		add.w	d1,d1
0000102E 4EFB 1000                  		jmp	EniDec_Index(pc,d1.w)
00001032                            ; End of function EniDec
00001032                            
00001032                            ; ===========================================================================
00001032                            ; loc_1768:
00001032                            EniDec_00:
00001032 32CA                       .loop:		move.w	a2,(a1)+	; copy incremental copy word
00001034 524A                       		addq.w	#1,a2		; increment it
00001036 51CA FFFA                  		dbf	d2,.loop	; repeat
0000103A 60CC                       		bra.s	Eni_Loop
0000103C                            ; ===========================================================================
0000103C                            ; loc_1772:
0000103C                            EniDec_01:
0000103C 32CC                       .loop:		move.w	a4,(a1)+	; copy literal copy word
0000103E 51CA FFFC                  		dbf	d2,.loop	; repeat
00001042 60C4                       		bra.s	Eni_Loop
00001044                            ; ===========================================================================
00001044                            ; loc_177A:
00001044                            EniDec_100:
00001044 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001048                            ; loc_177E:
00001048 32C1                       .loop:		move.w	d1,(a1)+	; copy inline value
0000104A 51CA FFFC                  		dbf	d2,.loop	; repeat
0000104E                            
0000104E 60B8                       		bra.s	Eni_Loop
00001050                            ; ===========================================================================
00001050                            ; loc_1786:
00001050                            EniDec_101:
00001050 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001054                            ; loc_178A:
00001054 32C1                       .loop:		move.w	d1,(a1)+	; copy inline value
00001056 5241                       		addq.w	#1,d1		; increment
00001058 51CA FFFA                  		dbf	d2,.loop	; repeat
0000105C                            
0000105C 60AA                       		bra.s	Eni_Loop
0000105E                            ; ===========================================================================
0000105E                            ; loc_1794:
0000105E                            EniDec_110:
0000105E 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001062                            ; loc_1798:
00001062 32C1                       .loop:		move.w	d1,(a1)+	; copy inline value
00001064 5341                       		subq.w	#1,d1		; decrement
00001066 51CA FFFA                  		dbf	d2,.loop	; repeat
0000106A                            
0000106A 609C                       		bra.s	Eni_Loop
0000106C                            ; ===========================================================================
0000106C                            ; loc_17A2:
0000106C                            EniDec_111:
0000106C 0C42 000F                  		cmpi.w	#$F,d2
00001070 6700                       		beq.s	EniDec_Done
00001072                            ; loc_17A8:
00001072 6100 0000                  .loop:		bsr.w	EniDec_FetchInlineValue	; fetch new inline value
00001076 32C1                       		move.w	d1,(a1)+	; copy it
00001078 51CA FFF8                  		dbf	d2,.loop	; and repeat
0000107C                            
0000107C 608A                       		bra.s	Eni_Loop
0000107E                            ; ===========================================================================
0000107E                            ; loc_17B4:
0000107E                            EniDec_Index:
0000107E 60B2                       		bra.s	EniDec_00
00001080 60B0                       		bra.s	EniDec_00
00001082 60B8                       		bra.s	EniDec_01
00001084 60B6                       		bra.s	EniDec_01
00001086 60BC                       		bra.s	EniDec_100
00001088 60C6                       		bra.s	EniDec_101
0000108A 60D2                       		bra.s	EniDec_110
0000108C 60DE                       		bra.s	EniDec_111
0000108E                            ; ===========================================================================
0000108E                            ; loc_17C4:
0000108E                            EniDec_Done:
0000108E 5348                       		subq.w	#1,a0		; go back by one byte
00001090 0C46 0010                  		cmpi.w	#16,d6		; were we going to start on a completely new byte?
00001094 6600                       		bne.s	.notnewbyte	; if not, branch
00001096 5348                       		subq.w	#1,a0		; and another one if needed
00001098                            ; loc_17CE:
00001098                            .notnewbyte:
00001098 3008                       		move.w	a0,d0
0000109A E248                       		lsr.w	#1,d0		; are we on an odd byte?
0000109C 6400                       		bcc.s	.evenbyte	; if not, branch
0000109E 5248                       		addq.w	#1,a0		; ensure we're on an even byte
000010A0                            ; loc_17D6:
000010A0                            .evenbyte:
000010A0 4E75                       		rts
000010A2                            
000010A2                            ; ---------------------------------------------------------------------------
000010A2                            ; Part of the Enigma decompressor
000010A2                            ; Fetches an inline copy value and stores it in d1
000010A2                            ; ---------------------------------------------------------------------------
000010A2                            
000010A2                            ; loc_17DC:
000010A2                            EniDec_FetchInlineValue:
000010A2 360B                       		move.w	a3,d3		; copy starting art tile
000010A4 1204                       		move.b	d4,d1		; copy PCCVH bitfield
000010A6 D201                       		add.b	d1,d1		; is the priority bit set?
000010A8 6400                       		bcc.s	.skippriority	; if not, branch
000010AA 5346                       		subq.w	#1,d6
000010AC 0D05                       		btst	d6,d5		; is the priority bit set in the inline render flags?
000010AE 6700                       		beq.s	.skippriority	; if not, branch
000010B0 0043 8000                  		ori.w	#$8000,d3	; otherwise set priority bit in art tile
000010B4                            ; loc_17EE:
000010B4                            .skippriority:
000010B4 D201                       		add.b	d1,d1		; is the high palette line bit set?
000010B6 6400                       		bcc.s	.skiphighpal	; if not, branch
000010B8 5346                       		subq.w	#1,d6
000010BA 0D05                       		btst	d6,d5
000010BC 6700                       		beq.s	.skiphighpal
000010BE 0643 4000                  		addi.w	#$4000,d3	; set second palette line bit
000010C2                            ; loc_17FC:
000010C2                            .skiphighpal:
000010C2 D201                       		add.b	d1,d1		; is the low palette line bit set?
000010C4 6400                       		bcc.s	.skiplowpal	; if not, branch
000010C6 5346                       		subq.w	#1,d6
000010C8 0D05                       		btst	d6,d5
000010CA 6700                       		beq.s	.skiplowpal
000010CC 0643 2000                  		addi.w	#$2000,d3	; set first palette line bit
000010D0                            ; loc_180A:
000010D0                            .skiplowpal:
000010D0 D201                       		add.b	d1,d1		; is the vertical flip flag set?
000010D2 6400                       		bcc.s	.skipyflip	; if not, branch
000010D4 5346                       		subq.w	#1,d6
000010D6 0D05                       		btst	d6,d5
000010D8 6700                       		beq.s	.skipyflip
000010DA 0043 1000                  		ori.w	#$1000,d3	; set Y-flip bit
000010DE                            ; loc_1818:
000010DE                            .skipyflip:
000010DE D201                       		add.b	d1,d1		; is the horizontal flip flag set?
000010E0 6400                       		bcc.s	.skipxflip	; if not, branch
000010E2 5346                       		subq.w	#1,d6
000010E4 0D05                       		btst	d6,d5
000010E6 6700                       		beq.s	.skipxflip
000010E8 0043 0800                  		ori.w	#$800,d3	; set X-flip bit
000010EC                            ; loc_1826:
000010EC                            .skipxflip:
000010EC 3205                       		move.w	d5,d1
000010EE 3E06                       		move.w	d6,d7
000010F0 9E4D                       		sub.w	a5,d7		; subtract length in bits of inline copy value
000010F2 6400                       		bcc.s	.enoughbits	; branch if a new word doesn't need to be read
000010F4 3C07                       		move.w	d7,d6
000010F6 0646 0010                  		addi.w	#16,d6
000010FA 4447                       		neg.w	d7		; calculate bit deficit
000010FC EF69                       		lsl.w	d7,d1		; and make space for that many bits
000010FE 1A10                       		move.b	(a0),d5		; get next byte
00001100 EF3D                       		rol.b	d7,d5		; and rotate the required bits into the lowest positions
00001102 DE47                       		add.w	d7,d7
00001104 CA7B 7000                  		and.w	EniDec_Masks-2(pc,d7.w),d5
00001108 D245                       		add.w	d5,d1		; combine upper bits with lower bits
0000110A                            ; loc_1844:
0000110A                            .maskvalue:
0000110A 300D                       		move.w	a5,d0		; get length in bits of inline copy value
0000110C D040                       		add.w	d0,d0
0000110E C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; mask value appropriately
00001112 D243                       		add.w	d3,d1		; add starting art tile
00001114 1A18                       		move.b	(a0)+,d5
00001116 E14D                       		lsl.w	#8,d5
00001118 1A18                       		move.b	(a0)+,d5	; get next word
0000111A 4E75                       		rts
0000111C                            ; ===========================================================================
0000111C                            ; loc_1856:
0000111C                            .enoughbits:
0000111C 6700                       		beq.s	.justenough	; if the word has been exactly exhausted, branch
0000111E EE69                       		lsr.w	d7,d1	; get inline copy value
00001120 300D                       		move.w	a5,d0
00001122 D040                       		add.w	d0,d0
00001124 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; and mask it appropriately
00001128 D243                       		add.w	d3,d1	; add starting art tile
0000112A 300D                       		move.w	a5,d0
0000112C 6000                       		bra.s	EniDec_FetchByte
0000112E                            ; ===========================================================================
0000112E                            ; loc_1868:
0000112E                            .justenough:
0000112E 7C10                       		moveq	#16,d6	; reset shift value
00001130 60D8                       		bra.s	.maskvalue
00001132                            ; ===========================================================================
00001132                            ; word_186C:
00001132                            EniDec_Masks:
00001132 0001 0003 0007 000F        		dc.w	 1,    3,    7,   $F
0000113A 001F 003F 007F 00FF        		dc.w   $1F,  $3F,  $7F,  $FF
00001142 01FF 03FF 07FF 0FFF        		dc.w  $1FF, $3FF, $7FF, $FFF
0000114A 1FFF 3FFF 7FFF FFFF        		dc.w $1FFF,$3FFF,$7FFF,$FFFF
00001152                            ; ===========================================================================
00001152                            
00001152                            ; sub_188C:
00001152                            EniDec_FetchByte:
00001152 9C40                       		sub.w	d0,d6	; subtract length of current entry from shift value so that next entry is read next time around
00001154 0C46 0009                  		cmpi.w	#9,d6	; does a new byte need to be read?
00001158 6400                       		bhs.s	.locret	; if not, branch
0000115A 5046                       		addq.w	#8,d6
0000115C E145                       		asl.w	#8,d5
0000115E 1A18                       		move.b	(a0)+,d5
00001160                            .locret:
00001160 4E75                       		rts
00001162                            ; End of function EniDec_FetchByte
00001162                            ; ===========================================================================
00001162                            
00001162                            ; ===========================================================================
00001162                            	align $10000
00001162                          M 	cnop	0,$10000
00010000                            	include "driver/code/68k.asm"
00010000                            	opt oz+					; enable zero-offset optimization
00010000                            	opt l.					; local lables are dots
00010000                            	opt ae+					; enable automatic even's
00010000                            
00010000                            	include "driver/code/routines.asm"	; include macro'd routines
00010000                            ; ===========================================================================
00010000                            ; ---------------------------------------------------------------------------
00010000                            ; Note timout handler macro
00010000                            ; ---------------------------------------------------------------------------
00010000                            
00010000                            dNoteToutHandler	macro
00010000                            		tst.b	cNoteTimeCur(a5)	; check if timer is 0
00010000                            		beq.s	.endt			; if is, do not timeout
00010000                            		subq.b	#1,cNoteTimeCur(a5)	; decrease delay by 1
00010000                            		bne.s	.endt			; if still not 0, branch
00010000                                endm
00010000                            ; ===========================================================================
00010000                            ; ---------------------------------------------------------------------------
00010000                            ; Note timout handler macro for DAC
00010000                            ; ---------------------------------------------------------------------------
00010000                            
00010000                            dNoteToutDAC	macro
00010000                            	dNoteToutHandler			; include timeout handler
00010000                            		moveq	#0,d0			; play stop sample
00010000                            		bra.w	dNoteOnDAC2		; ''
00010000                            .endt
00010000                                endm
00010000                            ; ===========================================================================
00010000                            ; ---------------------------------------------------------------------------
00010000                            ; Note timout handler macro for FM
00010000                            ; ---------------------------------------------------------------------------
00010000                            
00010000                            dNoteToutFM	macro
00010000                            	dNoteToutHandler			; include timeout handler
00010000                            		bset	#cfbRest,(a5)		; set track to resting
00010000                            		bsr.w	dKeyOffFM		; key off FM
00010000                            		bra.\0	.next			; jump to next track
00010000                            .endt
00010000                                endm
00010000                            ; ===========================================================================
00010000                            ; ---------------------------------------------------------------------------
00010000                            ; Note timout handler macro for PSG
00010000                            ; ---------------------------------------------------------------------------
00010000                            
00010000                            dNoteToutPSG	macro
00010000                            	dNoteToutHandler			; include timeout handler
00010000                            		bset	#cfbRest,(a5)		; set track to resting
00010000                            		bsr.w	dMutePSGmus		; mute PSG channel
00010000                            		bra.s	.next			; jump to next track
00010000                            .endt
00010000                                endm
00010000                            ; ===========================================================================
00010000                            ; ---------------------------------------------------------------------------
00010000                            ; Macro for calculating the current frequency (without modulation) into d6.
00010000                            ; Used if user wants to add extra pitch effects such as pitch slides.
00010000                            ; ---------------------------------------------------------------------------
00010000                            
00010000                            dCalcFreq	macro
00010000                            		move.b	cDetune(a5),d6		; get detune value to d6
00010000                            		ext.w	d6			; extend to word
00010000                            		add.w	cFreq(a5),d6		; add channel base frequency to it
00010000                                endm
00010000                            ; ===========================================================================
00010000                            ; ---------------------------------------------------------------------------
00010000                            ; Macro for generating frequency modulation code
00010000                            ; ---------------------------------------------------------------------------
00010000                            
00010000                            dModulate	macro jump,loop,type
00010000                            		btst	#cfbMod,(a5)		; check if modulation is active
00010000                            		beq.s	.noret			; if not, update volume and return
00010000                            		tst.b	cModDelay(a5)		; check if there is delay left
00010000                            		beq.s	.started		; if not, modulate!
00010000                            		subq.b	#1,cModDelay(a5)	; decrease delay
00010000                            
00010000                            .noret
00010000                            	if narg>0
00010000                            		if narg=3
00010000                            			if type<2
00010000                            				bclr	#cfbVol,(a5)		; check if volume update is needed and clear bit
00010000                            				beq.s	.noupdatevol		; if not, skip
00010000                            				jsr	dUpdateVolFM(pc)	; update FM volume
00010000                            			.noupdatevol:
00010000                            			endif
00010000                            			if type>=4
00010000                            				bclr	#cfbVol,(a5)		; check if volume update is needed and clear bit
00010000                            				beq.s	.noupdatevol		; if not, skip
00010000                            				jsr	dUpdateVolDAC(pc)	; update DAC volume
00010000                            			.noupdatevol:
00010000                            			endif
00010000                            			if \type<>5
00010000                            				dbf	d7,\loop		; loop for all channels
00010000                            			endif
00010000                            		endif
00010000                            		bra.w	\jump			; jump to next routine
00010000                            	else
00010000                            		bra.s	.endm			; jump to the next .endm routine
00010000                            	endif
00010000                            
00010000                            .started
00010000                            		subq.b	#1,cModSpeed(a5)	; decrease modulation speed counter
00010000                            		bne.s	.noret			; if there's still delay left, update vol and return
00010000                            		movea.l	cMod(a5),a1		; get modulation data offset to a1
00010000                            		move.b	1(a1),cModSpeed(a5)	; reset modulation speed counter
00010000                            
00010000                            		tst.b	cModCount(a5)		; check if this was the last step
00010000                            		bne.s	.norev			; if was not, do not reverse
00010000                            		move.b	3(a1),cModCount(a5)	; reset steps counter
00010000                            		neg.b	cModStep(a5)		; negate step amount
00010000                            
00010000                            .norev
00010000                            		subq.b	#1,cModCount(a5)	; decrease step counter
00010000                            		move.b	cModStep(a5),d5		; get step offset into d5
00010000                            		ext.w	d5			; extend to word
00010000                            
00010000                            		add.w	cModFreq(a5),d5		; add modulation frequency to it
00010000                            		move.w	d5,cModFreq(a5)		; save as the modulation frequency
00010000                            		add.w	d5,d6			; add to channel base frequency
00010000                                endm
00010000                            ; ===========================================================================
00010000                            ; ---------------------------------------------------------------------------
00010000                            ; Macro for processing the tracker
00010000                            ; ---------------------------------------------------------------------------
00010000                            
00010000                            dDoTracker	macro
00010000                            		movea.l	cData(a5),a4		; grab tracker address
00010000                            	if safe=1
00010000                            		AMPS_Debug_TrackUpd		; check if this address is valid
00010000                            	endif
00010000                            
00010000                            .data
00010000                            		moveq	#0,d5
00010000                            		move.b	(a4)+,d5		; get a byte from tracker
00010000                            		cmpi.b	#$E0,d5			; is this a command?
00010000                            		blo.s	.notcomm		; if not, continue
00010000                            		jsr	dCommands(pc)		; run the condition flag
00010000                            		bra.s	.data			; for most commands, use this branch to loop
00010000                            		bra.s	.next			; however, for example sStop will make us return here.
00010000                            .notcomm
00010000                                endm
00010000                            ; ===========================================================================
00010000                            ; ---------------------------------------------------------------------------
00010000                            ; Macro for playing a note, and setting up for it (software updates only)
00010000                            ; ---------------------------------------------------------------------------
00010000                            
00010000                            dProcNote	macro sfx, psg
00010000                            		move.l	a4,cData(a5)		; save tracker address
00010000                            		move.b	cLastDur(a5),cDuration(a5); copy stored duration
00010000                            		btst	#cfbHold,(a5)		; check if we are holding
00010000                            		bne.s	.endpn			; if we are, branch
00010000                            
00010000                            	if sfx=0
00010000                            		move.b	cNoteTimeMain(a5),cNoteTimeCur(a5); copy note timeout value
00010000                            	endif
00010000                            
00010000                            	if psg<>0
00010000                            		clr.b	cEnvPos(a5)		; clear envelope position if PSG channel
00010000                            	endif
00010000                            
00010000                            		btst	#cfbMod,(a5)		; check if modulation is enabled
00010000                            		beq.s	.endpn			; if not, branch
00010000                            
00010000                            		movea.l	cMod(a5),a1		; get modulation data address
00010000                            		move.b	(a1)+,cModDelay(a5)	; copy delay
00010000                            		move.b	(a1)+,cModSpeed(a5)	; copy speed
00010000                            		move.b	(a1)+,cModStep(a5)	; copy step offset
00010000                            
00010000                            		move.b	(a1),d0			; get number of steps
00010000                            		lsr.b	#1,d0			; halve it
00010000                            		move.b	d0,cModCount(a5)	; save as the current number of steps
00010000                            		clr.w	cModFreq(a5)		; clear frequency offset
00010000                            .endpn
00010000                                endm
00010000                            ; ===========================================================================
00010000                            ; ---------------------------------------------------------------------------
00010000                            ; Macro for processing a note in DAC channel
00010000                            ; ---------------------------------------------------------------------------
00010000                            
00010000                            dTrackNoteDAC	macro
00010000                            		btst	#cfbMode,(a5)		; check if we are on pitch mode
00010000                            		bne.s	.pitch			; if so, load pitch
00010000                            		move.b	d5,cSample(a5)		; else, save as a sample
00010000                            		bra.s	.cont
00010000                            
00010000                            .pitch
00010000                            		subi.b	#$80,d5			; sub $80 from the note (notes start at $80)
00010000                            		bne.s	.noprest		; branch if note wasnt $80 (rest)
00010000                            		moveq	#0,d0			; play stop sample
00010000                            		bsr.w	dNoteOnDAC2		; ''
00010000                            		moveq	#-$80,d6		; tell the code we are resting
00010000                            		bra.s	.cont
00010000                            
00010000                            .noprest
00010000                            		add.b	cPitch(a5),d5		; add pitch offset to note
00010000                            		add.w	d5,d5			; double offset (each entry is a word)
00010000                            		lea	dFreqDAC(pc),a1		; load DAC frequency table to a1
00010000                            		move.w	(a1,d5.w),cFreq(a5)	; load and save the requested frequency
00010000                            
00010000                            .cont
00010000                                endm
00010000                            ; ===========================================================================
00010000                            ; ---------------------------------------------------------------------------
00010000                            ; Macro for doing keying-on FM channel
00010000                            ; ---------------------------------------------------------------------------
00010000                            
00010000                            dKeyOnFM	macro
00010000                            		btst	#cfbHold,(a5)		; check if note is held
00010000                            		bne.s	.k			; if so, do not note on
00010000                            		btst	#cfbRest,(a5)		; check if channel is resting
00010000                            		bne.s	.k			; if so, do not note on
00010000                            	if narg=0
00010000                            		btst	#cfbInt,(a5)		; check if overridden by sfx
00010000                            		bne.s	.k			; if so, do not note on
00010000                            	endif
00010000                            
00010000                            		moveq	#$28,d0			; YM command: Key on
00010000                            		move.b	cType(a5),d1		; get channel type bits
00010000                            		ori.b	#$F0,d1			; turn all FM operators on
00010000                            		bsr.w	WriteYM_Pt1		; send note-on event
00010000                            .k
00010000                                endm
00010000                            ; ===========================================================================
00010000                            ; ---------------------------------------------------------------------------
00010000                            ; Macro for processing a note in PSG channel
00010000                            ; ---------------------------------------------------------------------------
00010000                            
00010000                            dGetFreqPSG	macro
00010000                            		subi.b	#$81,d5			; sub $81 from the note (notes start at $80)
00010000                            		bhs.s	.norest			; branch if note wasnt $80 (rest)
00010000                            		bset	#cfbRest,(a5)		; set channel to resting
00010000                            		move.w	#-1,cFreq(a5)		; set invalid PSG frequency
00010000                            		jsr	dMutePSGmus(pc)		; mute this PSG channel
00010000                            		bra.s	.freqgot
00010000                            
00010000                            .norest
00010000                            		add.b	cPitch(a5),d5		; add pitch offset to note
00010000                            		andi.w	#$7F,d5			; keep within $80 notes
00010000                            		add.w	d5,d5			; double offset (each entry is a word)
00010000                            		move.w	(a6,d5.w),cFreq(a5)	; load and save the requested frequency
00010000                            
00010000                            	if safe=1
00010000                            		AMPS_Debug_NotePSG		; check if the note was valid
00010000                            	endif
00010000                            .freqgot
00010000                                endm
00010000                            ; ===========================================================================
00010000                            	include "driver/code/debug.asm"		; debug data blob
00010000                            ; ===========================================================================
00010000                            ; ---------------------------------------------------------------------------
00010000                            ; write channel string to console
00010000                            ; ---------------------------------------------------------------------------
00010000                            
00010000                            AMPS_Debug_GetChannel	macro
00010000                            	cmp.w	#mPSG1,a5
00010000                            	bne.s	.cpsg2
00010000                            	Console.Write "PSG1"
00010000                            	bra.w	.end
00010000                            
00010000                            .cpsg2
00010000                            	cmp.w	#mPSG2,a5
00010000                            	bne.s	.cpsg3
00010000                            	Console.Write "PSG2"
00010000                            	bra.w	.end
00010000                            
00010000                            .cpsg3
00010000                            	cmp.w	#mPSG3,a5
00010000                            	bne.s	.cpsgs1
00010000                            	Console.Write "PSG3"
00010000                            	bra.w	.end
00010000                            
00010000                            .cpsgs1
00010000                            	cmp.w	#mSFXPSG1,a5
00010000                            	bne.s	.cpsgs2
00010000                            	Console.Write "SFX PSG1"
00010000                            	bra.w	.end
00010000                            
00010000                            .cpsgs2
00010000                            	cmp.w	#mSFXPSG2,a5
00010000                            	bne.s	.cpsgs3
00010000                            	Console.Write "SFX PSG2"
00010000                            	bra.w	.end
00010000                            
00010000                            .cpsgs3
00010000                            	cmp.w	#mSFXPSG3,a5
00010000                            	bne.s	.cdacs1
00010000                            	Console.Write "SFX PSG3"
00010000                            	bra.w	.end
00010000                            
00010000                            .cdacs1
00010000                            	cmp.w	#mSFXDAC1,a5
00010000                            	bne.s	.cdac1
00010000                            	Console.Write "SFX DAC1"
00010000                            	bra.w	.end
00010000                            
00010000                            .cdac1
00010000                            	cmp.w	#mDAC1,a5
00010000                            	bne.s	.cdac2
00010000                            	Console.Write "DAC1"
00010000                            	bra.w	.end
00010000                            
00010000                            .cdac2
00010000                            	cmp.w	#mDAC2,a5
00010000                            	bne.s	.cfm1
00010000                            	Console.Write "DAC2"
00010000                            	bra.w	.end
00010000                            
00010000                            .cfm1
00010000                            	cmp.w	#mFM1,a5
00010000                            	bne.s	.cfm2
00010000                            	Console.Write "FM1"
00010000                            	bra.w	.end
00010000                            
00010000                            .cfm2
00010000                            	cmp.w	#mFM2,a5
00010000                            	bne.s	.cfm3
00010000                            	Console.Write "FM2"
00010000                            	bra.w	.end
00010000                            
00010000                            .cfm3
00010000                            	cmp.w	#mFM3,a5
00010000                            	bne.s	.cfm4
00010000                            	Console.Write "FM3"
00010000                            	bra.w	.end
00010000                            
00010000                            .cfm4
00010000                            	cmp.w	#mFM4,a5
00010000                            	bne.s	.cfm5
00010000                            	Console.Write "FM4"
00010000                            	bra.w	.end
00010000                            
00010000                            .cfm5
00010000                            	cmp.w	#mFM5,a5
00010000                            	bne.s	.cfms3
00010000                            	Console.Write "FM5"
00010000                            	bra.w	.end
00010000                            
00010000                            .cfms3
00010000                            	cmp.w	#mSFXFM3,a5
00010000                            	bne.s	.cfms4
00010000                            	Console.Write "SFX FM3"
00010000                            	rts
00010000                            
00010000                            .cfms4
00010000                            	cmp.w	#mSFXFM4,a5
00010000                            	bne.s	.cfms5
00010000                            	Console.Write "SFX FM4"
00010000                            	bra.s	.end
00010000                            
00010000                            .cfms5
00010000                            	cmp.w	#mSFXFM5,a5
00010000                            	beq.s	.cfms5_
00010000                            
00010000                            .addr
00010000                            	Console.Write "%<pal2>%<.l a5>"
00010000                            	rts
00010000                            
00010000                            .cfms5_
00010000                            	Console.Write "SFX FM5"
00010000                            .end
00010000                            	endm
00010000                            ; ===========================================================================
00010000                            ; ---------------------------------------------------------------------------
00010000                            ; Channel console code
00010000                            ; ---------------------------------------------------------------------------
00010000                            
00010000                            AMPS_Debug_Console_Channel:
00010000                            	Console.WriteLine "  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
00010000 40E7                     M 	move.w	sr,-(sp)
00010002                          M 	__fstring_generateargumentscode	"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
00010002 =00000003                M 	__pos:	set instr("  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'%<')
00010002 =00000000                M 	__stack:set	0
00010002 =00000000                M 	__sp:	set 0
00010002                          M 	while	(__pos)
00010002 =00000009                M 	__endpos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'>')
00010002 =0000000D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",' ')
00010002 =00000009                M 	__midpos:	= __endpos
00010002                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
00010002                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
00010002 =0000000E                M 	__pos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'%<')
00010002 =00000014                M 	__endpos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'>')
00010002 =00000019                M 	__midpos:	set instr(__pos+5,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",' ')
00010002 =00000014                M 	__midpos:	= __endpos
00010002                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
00010002                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
00010002 =00000015                M 	__pos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'%<')
00010002 =0000001C                M 	__endpos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'>')
00010002 =0000001D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",' ')
00010002 =0000001C                M 	__midpos:	= __endpos
00010002                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
00010002                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
00010002                          M 	__operand:	substr __pos+1+1,__midpos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
00010002                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
00010002                          M 	pushp	"move.l d0,-(sp)"
00010002 =00000001                M 	__stack:	= __stack+1
00010002 =00000004                M 	__sp:	= __sp+4
00010002 =0000001F                M 	__pos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'%<')
00010002 =00000025                M 	__endpos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'>')
00010002 =00000029                M 	__midpos:	set instr(__pos+5,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",' ')
00010002 =00000025                M 	__midpos:	= __endpos
00010002                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
00010002                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
00010002 =0000002A                M 	__pos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'%<')
00010002 =00000030                M 	__endpos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'>')
00010002 =00000035                M 	__midpos:	set instr(__pos+5,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",' ')
00010002 =00000030                M 	__midpos:	= __endpos
00010002                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
00010002                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
00010002 =00000031                M 	__pos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'%<')
00010002 =00000038                M 	__endpos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'>')
00010002 =00000000                M 	__midpos:	set instr(__pos+5,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",' ')
00010002 =00000038                M 	__midpos:	= __endpos
00010002                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
00010002                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
00010002                          M 	__operand:	substr __pos+1+1,__midpos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
00010002                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
00010002                          M 	pushp	"move.l a0,-(sp)"
00010002 =00000002                M 	__stack:	= __stack+1
00010002 =00000008                M 	__sp:	= __sp+4
00010002 =00000000                M 	__pos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'%<')
00010002                          M 	rept	__stack
00010002                          M 	popp	__command
00010002 2F08                     M 	move.l	a0,-(sp)
00010004                          M 	popp	__command
00010004 2F00                     M 	move.l	d0,-(sp)
00010006 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
0001000A 45EF 0010                M 	lea	4*4(sp),a2
0001000E 43FA 0000                M 	lea	.str_126(pc),a1
00010012 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_writeline_formatted
00010018 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
0001001C 504F                     M 	addq.w	#__sp,sp
0001001E 46DF                     M 	move.w	(sp)+,sr
00010020 6000 0000                M 	bra.w	.instr_end_126
00010024                          M 	.str_126:
00010024                          M 	__fstring_generatedecodedstring	"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
00010024 =00000001                M 	__lpos:	set 1
00010024 =00000003                M 	__pos:	set instr("  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'%<')
00010024                          M 	while	(__pos)
00010024                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
00010024 2020                     M 	dc.b	"  "
00010026 =00000009                M 	__endpos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'>')
00010026 =0000000D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",' ')
00010026 =00000009                M 	__midpos:	= __endpos
00010026                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
00010026                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
00010026 E8                       M 	dc.b	pal0
00010027 =0000000A                M 	__lpos:	set __endpos+1
00010027 =0000000E                M 	__pos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'%<')
00010027                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
00010027 6430 3A20                M 	dc.b	"d0: "
0001002B =00000014                M 	__endpos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'>')
0001002B =00000019                M 	__midpos:	set instr(__pos+5,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",' ')
0001002B =00000014                M 	__midpos:	= __endpos
0001002B                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
0001002B                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
0001002B EC                       M 	dc.b	pal2
0001002C =00000015                M 	__lpos:	set __endpos+1
0001002C =00000015                M 	__pos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'%<')
0001002C                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
0001002C                          M 	dc.b	""
0001002C =0000001C                M 	__endpos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'>')
0001002C =0000001D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",' ')
0001002C =0000001C                M 	__midpos:	= __endpos
0001002C                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
0001002C                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
0001002C                          M 	__param:	substr ,,"hex"
0001002C 83                       M 	dc.b	hex|3
0001002D =0000001D                M 	__lpos:	set __endpos+1
0001002D =0000001F                M 	__pos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'%<')
0001002D                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
0001002D 2020                     M 	dc.b	"  "
0001002F =00000025                M 	__endpos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'>')
0001002F =00000029                M 	__midpos:	set instr(__pos+5,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",' ')
0001002F =00000025                M 	__midpos:	= __endpos
0001002F                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
0001002F                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
0001002F E8                       M 	dc.b	pal0
00010030 =00000026                M 	__lpos:	set __endpos+1
00010030 =0000002A                M 	__pos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'%<')
00010030                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
00010030 6130 3A20                M 	dc.b	"a0: "
00010034 =00000030                M 	__endpos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'>')
00010034 =00000035                M 	__midpos:	set instr(__pos+5,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",' ')
00010034 =00000030                M 	__midpos:	= __endpos
00010034                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
00010034                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
00010034 EC                       M 	dc.b	pal2
00010035 =00000031                M 	__lpos:	set __endpos+1
00010035 =00000031                M 	__pos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'%<')
00010035                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
00010035                          M 	dc.b	""
00010035 =00000038                M 	__endpos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'>')
00010035 =00000000                M 	__midpos:	set instr(__pos+5,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",' ')
00010035 =00000038                M 	__midpos:	= __endpos
00010035                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
00010035                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
00010035                          M 	__param:	substr ,,"hex"
00010035 83                       M 	dc.b	hex|3
00010036 =00000039                M 	__lpos:	set __endpos+1
00010036 =00000000                M 	__pos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'%<')
00010036                          M 	__substr:	substr __lpos,,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
00010036                          M 	dc.b	""
00010036 00                       M 	dc.b	0
00010038 00                       M 	even
00010038                          M 	.instr_end_126:
00010038                            	Console.WriteLine "  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
00010038 40E7                     M 	move.w	sr,-(sp)
0001003A                          M 	__fstring_generateargumentscode	"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
0001003A =00000003                M 	__pos:	set instr("  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'%<')
0001003A =00000000                M 	__stack:set	0
0001003A =00000000                M 	__sp:	set 0
0001003A                          M 	while	(__pos)
0001003A =00000009                M 	__endpos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'>')
0001003A =0000000D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",' ')
0001003A =00000009                M 	__midpos:	= __endpos
0001003A                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
0001003A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
0001003A =0000000E                M 	__pos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'%<')
0001003A =00000014                M 	__endpos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'>')
0001003A =00000019                M 	__midpos:	set instr(__pos+5,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",' ')
0001003A =00000014                M 	__midpos:	= __endpos
0001003A                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
0001003A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
0001003A =00000015                M 	__pos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'%<')
0001003A =0000001C                M 	__endpos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'>')
0001003A =0000001D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",' ')
0001003A =0000001C                M 	__midpos:	= __endpos
0001003A                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
0001003A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
0001003A                          M 	__operand:	substr __pos+1+1,__midpos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
0001003A                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
0001003A                          M 	pushp	"move.l d1,-(sp)"
0001003A =00000001                M 	__stack:	= __stack+1
0001003A =00000004                M 	__sp:	= __sp+4
0001003A =0000001F                M 	__pos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'%<')
0001003A =00000025                M 	__endpos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'>')
0001003A =00000029                M 	__midpos:	set instr(__pos+5,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",' ')
0001003A =00000025                M 	__midpos:	= __endpos
0001003A                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
0001003A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
0001003A =0000002A                M 	__pos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'%<')
0001003A =00000030                M 	__endpos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'>')
0001003A =00000035                M 	__midpos:	set instr(__pos+5,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",' ')
0001003A =00000030                M 	__midpos:	= __endpos
0001003A                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
0001003A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
0001003A =00000031                M 	__pos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'%<')
0001003A =00000038                M 	__endpos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'>')
0001003A =00000000                M 	__midpos:	set instr(__pos+5,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",' ')
0001003A =00000038                M 	__midpos:	= __endpos
0001003A                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
0001003A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
0001003A                          M 	__operand:	substr __pos+1+1,__midpos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
0001003A                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
0001003A                          M 	pushp	"move.l a1,-(sp)"
0001003A =00000002                M 	__stack:	= __stack+1
0001003A =00000008                M 	__sp:	= __sp+4
0001003A =00000000                M 	__pos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'%<')
0001003A                          M 	rept	__stack
0001003A                          M 	popp	__command
0001003A 2F09                     M 	move.l	a1,-(sp)
0001003C                          M 	popp	__command
0001003C 2F01                     M 	move.l	d1,-(sp)
0001003E 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
00010042 45EF 0010                M 	lea	4*4(sp),a2
00010046 43FA 0000                M 	lea	.str_129(pc),a1
0001004A 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_writeline_formatted
00010050 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
00010054 504F                     M 	addq.w	#__sp,sp
00010056 46DF                     M 	move.w	(sp)+,sr
00010058 6000 0000                M 	bra.w	.instr_end_129
0001005C                          M 	.str_129:
0001005C                          M 	__fstring_generatedecodedstring	"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
0001005C =00000001                M 	__lpos:	set 1
0001005C =00000003                M 	__pos:	set instr("  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'%<')
0001005C                          M 	while	(__pos)
0001005C                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
0001005C 2020                     M 	dc.b	"  "
0001005E =00000009                M 	__endpos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'>')
0001005E =0000000D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",' ')
0001005E =00000009                M 	__midpos:	= __endpos
0001005E                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
0001005E                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
0001005E E8                       M 	dc.b	pal0
0001005F =0000000A                M 	__lpos:	set __endpos+1
0001005F =0000000E                M 	__pos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'%<')
0001005F                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
0001005F 6431 3A20                M 	dc.b	"d1: "
00010063 =00000014                M 	__endpos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'>')
00010063 =00000019                M 	__midpos:	set instr(__pos+5,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",' ')
00010063 =00000014                M 	__midpos:	= __endpos
00010063                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
00010063                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
00010063 EC                       M 	dc.b	pal2
00010064 =00000015                M 	__lpos:	set __endpos+1
00010064 =00000015                M 	__pos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'%<')
00010064                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
00010064                          M 	dc.b	""
00010064 =0000001C                M 	__endpos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'>')
00010064 =0000001D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",' ')
00010064 =0000001C                M 	__midpos:	= __endpos
00010064                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
00010064                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
00010064                          M 	__param:	substr ,,"hex"
00010064 83                       M 	dc.b	hex|3
00010065 =0000001D                M 	__lpos:	set __endpos+1
00010065 =0000001F                M 	__pos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'%<')
00010065                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
00010065 2020                     M 	dc.b	"  "
00010067 =00000025                M 	__endpos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'>')
00010067 =00000029                M 	__midpos:	set instr(__pos+5,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",' ')
00010067 =00000025                M 	__midpos:	= __endpos
00010067                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
00010067                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
00010067 E8                       M 	dc.b	pal0
00010068 =00000026                M 	__lpos:	set __endpos+1
00010068 =0000002A                M 	__pos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'%<')
00010068                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
00010068 6131 3A20                M 	dc.b	"a1: "
0001006C =00000030                M 	__endpos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'>')
0001006C =00000035                M 	__midpos:	set instr(__pos+5,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",' ')
0001006C =00000030                M 	__midpos:	= __endpos
0001006C                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
0001006C                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
0001006C EC                       M 	dc.b	pal2
0001006D =00000031                M 	__lpos:	set __endpos+1
0001006D =00000031                M 	__pos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'%<')
0001006D                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
0001006D                          M 	dc.b	""
0001006D =00000038                M 	__endpos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'>')
0001006D =00000000                M 	__midpos:	set instr(__pos+5,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",' ')
0001006D =00000038                M 	__midpos:	= __endpos
0001006D                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
0001006D                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
0001006D                          M 	__param:	substr ,,"hex"
0001006D 83                       M 	dc.b	hex|3
0001006E =00000039                M 	__lpos:	set __endpos+1
0001006E =00000000                M 	__pos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'%<')
0001006E                          M 	__substr:	substr __lpos,,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
0001006E                          M 	dc.b	""
0001006E 00                       M 	dc.b	0
00010070 00                       M 	even
00010070                          M 	.instr_end_129:
00010070                            	Console.WriteLine "  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010070 40E7                     M 	move.w	sr,-(sp)
00010072                          M 	__fstring_generateargumentscode	"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010072 =00000003                M 	__pos:	set instr("  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'%<')
00010072 =00000000                M 	__stack:set	0
00010072 =00000000                M 	__sp:	set 0
00010072                          M 	while	(__pos)
00010072 =00000009                M 	__endpos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'>')
00010072 =0000000D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",' ')
00010072 =00000009                M 	__midpos:	= __endpos
00010072                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010072                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010072 =0000000E                M 	__pos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'%<')
00010072 =00000014                M 	__endpos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'>')
00010072 =00000019                M 	__midpos:	set instr(__pos+5,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",' ')
00010072 =00000014                M 	__midpos:	= __endpos
00010072                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010072                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010072 =00000015                M 	__pos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'%<')
00010072 =0000001C                M 	__endpos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'>')
00010072 =0000001D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",' ')
00010072 =0000001C                M 	__midpos:	= __endpos
00010072                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010072                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010072                          M 	__operand:	substr __pos+1+1,__midpos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010072                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010072                          M 	pushp	"move.l d2,-(sp)"
00010072 =00000001                M 	__stack:	= __stack+1
00010072 =00000004                M 	__sp:	= __sp+4
00010072 =0000001F                M 	__pos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'%<')
00010072 =00000025                M 	__endpos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'>')
00010072 =00000029                M 	__midpos:	set instr(__pos+5,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",' ')
00010072 =00000025                M 	__midpos:	= __endpos
00010072                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010072                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010072 =0000002A                M 	__pos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'%<')
00010072 =00000030                M 	__endpos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'>')
00010072 =00000035                M 	__midpos:	set instr(__pos+5,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",' ')
00010072 =00000030                M 	__midpos:	= __endpos
00010072                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010072                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010072 =00000031                M 	__pos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'%<')
00010072 =00000038                M 	__endpos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'>')
00010072 =00000000                M 	__midpos:	set instr(__pos+5,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",' ')
00010072 =00000038                M 	__midpos:	= __endpos
00010072                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010072                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010072                          M 	__operand:	substr __pos+1+1,__midpos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010072                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010072                          M 	pushp	"move.l a2,-(sp)"
00010072 =00000002                M 	__stack:	= __stack+1
00010072 =00000008                M 	__sp:	= __sp+4
00010072 =00000000                M 	__pos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'%<')
00010072                          M 	rept	__stack
00010072                          M 	popp	__command
00010072 2F0A                     M 	move.l	a2,-(sp)
00010074                          M 	popp	__command
00010074 2F02                     M 	move.l	d2,-(sp)
00010076 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
0001007A 45EF 0010                M 	lea	4*4(sp),a2
0001007E 43FA 0000                M 	lea	.str_132(pc),a1
00010082 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_writeline_formatted
00010088 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
0001008C 504F                     M 	addq.w	#__sp,sp
0001008E 46DF                     M 	move.w	(sp)+,sr
00010090 6000 0000                M 	bra.w	.instr_end_132
00010094                          M 	.str_132:
00010094                          M 	__fstring_generatedecodedstring	"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010094 =00000001                M 	__lpos:	set 1
00010094 =00000003                M 	__pos:	set instr("  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'%<')
00010094                          M 	while	(__pos)
00010094                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010094 2020                     M 	dc.b	"  "
00010096 =00000009                M 	__endpos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'>')
00010096 =0000000D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",' ')
00010096 =00000009                M 	__midpos:	= __endpos
00010096                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010096                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010096 E8                       M 	dc.b	pal0
00010097 =0000000A                M 	__lpos:	set __endpos+1
00010097 =0000000E                M 	__pos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'%<')
00010097                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010097 6432 3A20                M 	dc.b	"d2: "
0001009B =00000014                M 	__endpos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'>')
0001009B =00000019                M 	__midpos:	set instr(__pos+5,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",' ')
0001009B =00000014                M 	__midpos:	= __endpos
0001009B                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
0001009B                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
0001009B EC                       M 	dc.b	pal2
0001009C =00000015                M 	__lpos:	set __endpos+1
0001009C =00000015                M 	__pos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'%<')
0001009C                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
0001009C                          M 	dc.b	""
0001009C =0000001C                M 	__endpos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'>')
0001009C =0000001D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",' ')
0001009C =0000001C                M 	__midpos:	= __endpos
0001009C                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
0001009C                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
0001009C                          M 	__param:	substr ,,"hex"
0001009C 83                       M 	dc.b	hex|3
0001009D =0000001D                M 	__lpos:	set __endpos+1
0001009D =0000001F                M 	__pos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'%<')
0001009D                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
0001009D 2020                     M 	dc.b	"  "
0001009F =00000025                M 	__endpos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'>')
0001009F =00000029                M 	__midpos:	set instr(__pos+5,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",' ')
0001009F =00000025                M 	__midpos:	= __endpos
0001009F                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
0001009F                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
0001009F E8                       M 	dc.b	pal0
000100A0 =00000026                M 	__lpos:	set __endpos+1
000100A0 =0000002A                M 	__pos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'%<')
000100A0                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
000100A0 6132 3A20                M 	dc.b	"a2: "
000100A4 =00000030                M 	__endpos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'>')
000100A4 =00000035                M 	__midpos:	set instr(__pos+5,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",' ')
000100A4 =00000030                M 	__midpos:	= __endpos
000100A4                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
000100A4                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
000100A4 EC                       M 	dc.b	pal2
000100A5 =00000031                M 	__lpos:	set __endpos+1
000100A5 =00000031                M 	__pos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'%<')
000100A5                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
000100A5                          M 	dc.b	""
000100A5 =00000038                M 	__endpos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'>')
000100A5 =00000000                M 	__midpos:	set instr(__pos+5,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",' ')
000100A5 =00000038                M 	__midpos:	= __endpos
000100A5                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
000100A5                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
000100A5                          M 	__param:	substr ,,"hex"
000100A5 83                       M 	dc.b	hex|3
000100A6 =00000039                M 	__lpos:	set __endpos+1
000100A6 =00000000                M 	__pos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'%<')
000100A6                          M 	__substr:	substr __lpos,,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
000100A6                          M 	dc.b	""
000100A6 00                       M 	dc.b	0
000100A8 00                       M 	even
000100A8                          M 	.instr_end_132:
000100A8                            	Console.WriteLine "  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
000100A8 40E7                     M 	move.w	sr,-(sp)
000100AA                          M 	__fstring_generateargumentscode	"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
000100AA =00000003                M 	__pos:	set instr("  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'%<')
000100AA =00000000                M 	__stack:set	0
000100AA =00000000                M 	__sp:	set 0
000100AA                          M 	while	(__pos)
000100AA =00000009                M 	__endpos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'>')
000100AA =0000000D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",' ')
000100AA =00000009                M 	__midpos:	= __endpos
000100AA                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
000100AA                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
000100AA =0000000E                M 	__pos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'%<')
000100AA =00000014                M 	__endpos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'>')
000100AA =00000019                M 	__midpos:	set instr(__pos+5,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",' ')
000100AA =00000014                M 	__midpos:	= __endpos
000100AA                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
000100AA                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
000100AA =00000015                M 	__pos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'%<')
000100AA =0000001C                M 	__endpos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'>')
000100AA =0000001D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",' ')
000100AA =0000001C                M 	__midpos:	= __endpos
000100AA                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
000100AA                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
000100AA                          M 	__operand:	substr __pos+1+1,__midpos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
000100AA                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
000100AA                          M 	pushp	"move.l d3,-(sp)"
000100AA =00000001                M 	__stack:	= __stack+1
000100AA =00000004                M 	__sp:	= __sp+4
000100AA =0000001F                M 	__pos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'%<')
000100AA =00000025                M 	__endpos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'>')
000100AA =00000029                M 	__midpos:	set instr(__pos+5,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",' ')
000100AA =00000025                M 	__midpos:	= __endpos
000100AA                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
000100AA                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
000100AA =0000002A                M 	__pos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'%<')
000100AA =00000030                M 	__endpos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'>')
000100AA =00000035                M 	__midpos:	set instr(__pos+5,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",' ')
000100AA =00000030                M 	__midpos:	= __endpos
000100AA                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
000100AA                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
000100AA =00000031                M 	__pos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'%<')
000100AA =00000038                M 	__endpos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'>')
000100AA =00000000                M 	__midpos:	set instr(__pos+5,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",' ')
000100AA =00000038                M 	__midpos:	= __endpos
000100AA                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
000100AA                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
000100AA                          M 	__operand:	substr __pos+1+1,__midpos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
000100AA                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
000100AA                          M 	pushp	"move.l a3,-(sp)"
000100AA =00000002                M 	__stack:	= __stack+1
000100AA =00000008                M 	__sp:	= __sp+4
000100AA =00000000                M 	__pos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'%<')
000100AA                          M 	rept	__stack
000100AA                          M 	popp	__command
000100AA 2F0B                     M 	move.l	a3,-(sp)
000100AC                          M 	popp	__command
000100AC 2F03                     M 	move.l	d3,-(sp)
000100AE 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
000100B2 45EF 0010                M 	lea	4*4(sp),a2
000100B6 43FA 0000                M 	lea	.str_135(pc),a1
000100BA 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_writeline_formatted
000100C0 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
000100C4 504F                     M 	addq.w	#__sp,sp
000100C6 46DF                     M 	move.w	(sp)+,sr
000100C8 6000 0000                M 	bra.w	.instr_end_135
000100CC                          M 	.str_135:
000100CC                          M 	__fstring_generatedecodedstring	"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
000100CC =00000001                M 	__lpos:	set 1
000100CC =00000003                M 	__pos:	set instr("  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'%<')
000100CC                          M 	while	(__pos)
000100CC                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
000100CC 2020                     M 	dc.b	"  "
000100CE =00000009                M 	__endpos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'>')
000100CE =0000000D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",' ')
000100CE =00000009                M 	__midpos:	= __endpos
000100CE                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
000100CE                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
000100CE E8                       M 	dc.b	pal0
000100CF =0000000A                M 	__lpos:	set __endpos+1
000100CF =0000000E                M 	__pos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'%<')
000100CF                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
000100CF 6433 3A20                M 	dc.b	"d3: "
000100D3 =00000014                M 	__endpos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'>')
000100D3 =00000019                M 	__midpos:	set instr(__pos+5,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",' ')
000100D3 =00000014                M 	__midpos:	= __endpos
000100D3                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
000100D3                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
000100D3 EC                       M 	dc.b	pal2
000100D4 =00000015                M 	__lpos:	set __endpos+1
000100D4 =00000015                M 	__pos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'%<')
000100D4                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
000100D4                          M 	dc.b	""
000100D4 =0000001C                M 	__endpos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'>')
000100D4 =0000001D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",' ')
000100D4 =0000001C                M 	__midpos:	= __endpos
000100D4                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
000100D4                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
000100D4                          M 	__param:	substr ,,"hex"
000100D4 83                       M 	dc.b	hex|3
000100D5 =0000001D                M 	__lpos:	set __endpos+1
000100D5 =0000001F                M 	__pos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'%<')
000100D5                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
000100D5 2020                     M 	dc.b	"  "
000100D7 =00000025                M 	__endpos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'>')
000100D7 =00000029                M 	__midpos:	set instr(__pos+5,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",' ')
000100D7 =00000025                M 	__midpos:	= __endpos
000100D7                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
000100D7                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
000100D7 E8                       M 	dc.b	pal0
000100D8 =00000026                M 	__lpos:	set __endpos+1
000100D8 =0000002A                M 	__pos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'%<')
000100D8                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
000100D8 6133 3A20                M 	dc.b	"a3: "
000100DC =00000030                M 	__endpos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'>')
000100DC =00000035                M 	__midpos:	set instr(__pos+5,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",' ')
000100DC =00000030                M 	__midpos:	= __endpos
000100DC                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
000100DC                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
000100DC EC                       M 	dc.b	pal2
000100DD =00000031                M 	__lpos:	set __endpos+1
000100DD =00000031                M 	__pos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'%<')
000100DD                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
000100DD                          M 	dc.b	""
000100DD =00000038                M 	__endpos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'>')
000100DD =00000000                M 	__midpos:	set instr(__pos+5,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",' ')
000100DD =00000038                M 	__midpos:	= __endpos
000100DD                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
000100DD                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
000100DD                          M 	__param:	substr ,,"hex"
000100DD 83                       M 	dc.b	hex|3
000100DE =00000039                M 	__lpos:	set __endpos+1
000100DE =00000000                M 	__pos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'%<')
000100DE                          M 	__substr:	substr __lpos,,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
000100DE                          M 	dc.b	""
000100DE 00                       M 	dc.b	0
000100E0 00                       M 	even
000100E0                          M 	.instr_end_135:
000100E0                            	Console.WriteLine "  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
000100E0 40E7                     M 	move.w	sr,-(sp)
000100E2                          M 	__fstring_generateargumentscode	"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
000100E2 =00000003                M 	__pos:	set instr("  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'%<')
000100E2 =00000000                M 	__stack:set	0
000100E2 =00000000                M 	__sp:	set 0
000100E2                          M 	while	(__pos)
000100E2 =00000009                M 	__endpos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'>')
000100E2 =0000000D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",' ')
000100E2 =00000009                M 	__midpos:	= __endpos
000100E2                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
000100E2                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
000100E2 =0000000E                M 	__pos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'%<')
000100E2 =00000014                M 	__endpos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'>')
000100E2 =00000019                M 	__midpos:	set instr(__pos+5,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",' ')
000100E2 =00000014                M 	__midpos:	= __endpos
000100E2                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
000100E2                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
000100E2 =00000015                M 	__pos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'%<')
000100E2 =0000001C                M 	__endpos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'>')
000100E2 =0000001D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",' ')
000100E2 =0000001C                M 	__midpos:	= __endpos
000100E2                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
000100E2                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
000100E2                          M 	__operand:	substr __pos+1+1,__midpos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
000100E2                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
000100E2                          M 	pushp	"move.l d4,-(sp)"
000100E2 =00000001                M 	__stack:	= __stack+1
000100E2 =00000004                M 	__sp:	= __sp+4
000100E2 =0000001F                M 	__pos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'%<')
000100E2 =00000025                M 	__endpos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'>')
000100E2 =00000029                M 	__midpos:	set instr(__pos+5,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",' ')
000100E2 =00000025                M 	__midpos:	= __endpos
000100E2                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
000100E2                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
000100E2 =0000002A                M 	__pos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'%<')
000100E2 =00000030                M 	__endpos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'>')
000100E2 =00000035                M 	__midpos:	set instr(__pos+5,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",' ')
000100E2 =00000030                M 	__midpos:	= __endpos
000100E2                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
000100E2                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
000100E2 =00000031                M 	__pos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'%<')
000100E2 =00000038                M 	__endpos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'>')
000100E2 =00000000                M 	__midpos:	set instr(__pos+5,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",' ')
000100E2 =00000038                M 	__midpos:	= __endpos
000100E2                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
000100E2                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
000100E2                          M 	__operand:	substr __pos+1+1,__midpos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
000100E2                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
000100E2                          M 	pushp	"move.l a4,-(sp)"
000100E2 =00000002                M 	__stack:	= __stack+1
000100E2 =00000008                M 	__sp:	= __sp+4
000100E2 =00000000                M 	__pos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'%<')
000100E2                          M 	rept	__stack
000100E2                          M 	popp	__command
000100E2 2F0C                     M 	move.l	a4,-(sp)
000100E4                          M 	popp	__command
000100E4 2F04                     M 	move.l	d4,-(sp)
000100E6 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
000100EA 45EF 0010                M 	lea	4*4(sp),a2
000100EE 43FA 0000                M 	lea	.str_138(pc),a1
000100F2 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_writeline_formatted
000100F8 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
000100FC 504F                     M 	addq.w	#__sp,sp
000100FE 46DF                     M 	move.w	(sp)+,sr
00010100 6000 0000                M 	bra.w	.instr_end_138
00010104                          M 	.str_138:
00010104                          M 	__fstring_generatedecodedstring	"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
00010104 =00000001                M 	__lpos:	set 1
00010104 =00000003                M 	__pos:	set instr("  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'%<')
00010104                          M 	while	(__pos)
00010104                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
00010104 2020                     M 	dc.b	"  "
00010106 =00000009                M 	__endpos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'>')
00010106 =0000000D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",' ')
00010106 =00000009                M 	__midpos:	= __endpos
00010106                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
00010106                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
00010106 E8                       M 	dc.b	pal0
00010107 =0000000A                M 	__lpos:	set __endpos+1
00010107 =0000000E                M 	__pos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'%<')
00010107                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
00010107 6434 3A20                M 	dc.b	"d4: "
0001010B =00000014                M 	__endpos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'>')
0001010B =00000019                M 	__midpos:	set instr(__pos+5,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",' ')
0001010B =00000014                M 	__midpos:	= __endpos
0001010B                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
0001010B                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
0001010B EC                       M 	dc.b	pal2
0001010C =00000015                M 	__lpos:	set __endpos+1
0001010C =00000015                M 	__pos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'%<')
0001010C                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
0001010C                          M 	dc.b	""
0001010C =0000001C                M 	__endpos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'>')
0001010C =0000001D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",' ')
0001010C =0000001C                M 	__midpos:	= __endpos
0001010C                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
0001010C                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
0001010C                          M 	__param:	substr ,,"hex"
0001010C 83                       M 	dc.b	hex|3
0001010D =0000001D                M 	__lpos:	set __endpos+1
0001010D =0000001F                M 	__pos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'%<')
0001010D                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
0001010D 2020                     M 	dc.b	"  "
0001010F =00000025                M 	__endpos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'>')
0001010F =00000029                M 	__midpos:	set instr(__pos+5,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",' ')
0001010F =00000025                M 	__midpos:	= __endpos
0001010F                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
0001010F                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
0001010F E8                       M 	dc.b	pal0
00010110 =00000026                M 	__lpos:	set __endpos+1
00010110 =0000002A                M 	__pos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'%<')
00010110                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
00010110 6134 3A20                M 	dc.b	"a4: "
00010114 =00000030                M 	__endpos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'>')
00010114 =00000035                M 	__midpos:	set instr(__pos+5,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",' ')
00010114 =00000030                M 	__midpos:	= __endpos
00010114                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
00010114                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
00010114 EC                       M 	dc.b	pal2
00010115 =00000031                M 	__lpos:	set __endpos+1
00010115 =00000031                M 	__pos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'%<')
00010115                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
00010115                          M 	dc.b	""
00010115 =00000038                M 	__endpos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'>')
00010115 =00000000                M 	__midpos:	set instr(__pos+5,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",' ')
00010115 =00000038                M 	__midpos:	= __endpos
00010115                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
00010115                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
00010115                          M 	__param:	substr ,,"hex"
00010115 83                       M 	dc.b	hex|3
00010116 =00000039                M 	__lpos:	set __endpos+1
00010116 =00000000                M 	__pos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'%<')
00010116                          M 	__substr:	substr __lpos,,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
00010116                          M 	dc.b	""
00010116 00                       M 	dc.b	0
00010118 00                       M 	even
00010118                          M 	.instr_end_138:
00010118                            	Console.WriteLine "  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
00010118 40E7                     M 	move.w	sr,-(sp)
0001011A                          M 	__fstring_generateargumentscode	"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
0001011A =00000003                M 	__pos:	set instr("  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'%<')
0001011A =00000000                M 	__stack:set	0
0001011A =00000000                M 	__sp:	set 0
0001011A                          M 	while	(__pos)
0001011A =00000009                M 	__endpos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'>')
0001011A =0000000D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",' ')
0001011A =00000009                M 	__midpos:	= __endpos
0001011A                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
0001011A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
0001011A =0000000E                M 	__pos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'%<')
0001011A =00000014                M 	__endpos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'>')
0001011A =00000019                M 	__midpos:	set instr(__pos+5,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",' ')
0001011A =00000014                M 	__midpos:	= __endpos
0001011A                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
0001011A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
0001011A =00000015                M 	__pos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'%<')
0001011A =0000001C                M 	__endpos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'>')
0001011A =0000001D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",' ')
0001011A =0000001C                M 	__midpos:	= __endpos
0001011A                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
0001011A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
0001011A                          M 	__operand:	substr __pos+1+1,__midpos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
0001011A                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
0001011A                          M 	pushp	"move.l d5,-(sp)"
0001011A =00000001                M 	__stack:	= __stack+1
0001011A =00000004                M 	__sp:	= __sp+4
0001011A =0000001F                M 	__pos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'%<')
0001011A =00000025                M 	__endpos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'>')
0001011A =00000029                M 	__midpos:	set instr(__pos+5,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",' ')
0001011A =00000025                M 	__midpos:	= __endpos
0001011A                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
0001011A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
0001011A =0000002A                M 	__pos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'%<')
0001011A =00000030                M 	__endpos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'>')
0001011A =00000035                M 	__midpos:	set instr(__pos+5,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",' ')
0001011A =00000030                M 	__midpos:	= __endpos
0001011A                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
0001011A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
0001011A =00000031                M 	__pos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'%<')
0001011A =00000038                M 	__endpos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'>')
0001011A =00000000                M 	__midpos:	set instr(__pos+5,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",' ')
0001011A =00000038                M 	__midpos:	= __endpos
0001011A                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
0001011A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
0001011A                          M 	__operand:	substr __pos+1+1,__midpos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
0001011A                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
0001011A                          M 	pushp	"move.l a5,-(sp)"
0001011A =00000002                M 	__stack:	= __stack+1
0001011A =00000008                M 	__sp:	= __sp+4
0001011A =00000000                M 	__pos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'%<')
0001011A                          M 	rept	__stack
0001011A                          M 	popp	__command
0001011A 2F0D                     M 	move.l	a5,-(sp)
0001011C                          M 	popp	__command
0001011C 2F05                     M 	move.l	d5,-(sp)
0001011E 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
00010122 45EF 0010                M 	lea	4*4(sp),a2
00010126 43FA 0000                M 	lea	.str_141(pc),a1
0001012A 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_writeline_formatted
00010130 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
00010134 504F                     M 	addq.w	#__sp,sp
00010136 46DF                     M 	move.w	(sp)+,sr
00010138 6000 0000                M 	bra.w	.instr_end_141
0001013C                          M 	.str_141:
0001013C                          M 	__fstring_generatedecodedstring	"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
0001013C =00000001                M 	__lpos:	set 1
0001013C =00000003                M 	__pos:	set instr("  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'%<')
0001013C                          M 	while	(__pos)
0001013C                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
0001013C 2020                     M 	dc.b	"  "
0001013E =00000009                M 	__endpos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'>')
0001013E =0000000D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",' ')
0001013E =00000009                M 	__midpos:	= __endpos
0001013E                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
0001013E                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
0001013E E8                       M 	dc.b	pal0
0001013F =0000000A                M 	__lpos:	set __endpos+1
0001013F =0000000E                M 	__pos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'%<')
0001013F                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
0001013F 6435 3A20                M 	dc.b	"d5: "
00010143 =00000014                M 	__endpos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'>')
00010143 =00000019                M 	__midpos:	set instr(__pos+5,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",' ')
00010143 =00000014                M 	__midpos:	= __endpos
00010143                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
00010143                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
00010143 EC                       M 	dc.b	pal2
00010144 =00000015                M 	__lpos:	set __endpos+1
00010144 =00000015                M 	__pos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'%<')
00010144                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
00010144                          M 	dc.b	""
00010144 =0000001C                M 	__endpos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'>')
00010144 =0000001D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",' ')
00010144 =0000001C                M 	__midpos:	= __endpos
00010144                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
00010144                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
00010144                          M 	__param:	substr ,,"hex"
00010144 83                       M 	dc.b	hex|3
00010145 =0000001D                M 	__lpos:	set __endpos+1
00010145 =0000001F                M 	__pos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'%<')
00010145                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
00010145 2020                     M 	dc.b	"  "
00010147 =00000025                M 	__endpos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'>')
00010147 =00000029                M 	__midpos:	set instr(__pos+5,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",' ')
00010147 =00000025                M 	__midpos:	= __endpos
00010147                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
00010147                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
00010147 E8                       M 	dc.b	pal0
00010148 =00000026                M 	__lpos:	set __endpos+1
00010148 =0000002A                M 	__pos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'%<')
00010148                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
00010148 6135 3A20                M 	dc.b	"a5: "
0001014C =00000030                M 	__endpos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'>')
0001014C =00000035                M 	__midpos:	set instr(__pos+5,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",' ')
0001014C =00000030                M 	__midpos:	= __endpos
0001014C                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
0001014C                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
0001014C EC                       M 	dc.b	pal2
0001014D =00000031                M 	__lpos:	set __endpos+1
0001014D =00000031                M 	__pos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'%<')
0001014D                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
0001014D                          M 	dc.b	""
0001014D =00000038                M 	__endpos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'>')
0001014D =00000000                M 	__midpos:	set instr(__pos+5,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",' ')
0001014D =00000038                M 	__midpos:	= __endpos
0001014D                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
0001014D                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
0001014D                          M 	__param:	substr ,,"hex"
0001014D 83                       M 	dc.b	hex|3
0001014E =00000039                M 	__lpos:	set __endpos+1
0001014E =00000000                M 	__pos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'%<')
0001014E                          M 	__substr:	substr __lpos,,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
0001014E                          M 	dc.b	""
0001014E 00                       M 	dc.b	0
00010150 00                       M 	even
00010150                          M 	.instr_end_141:
00010150                            	Console.WriteLine "  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
00010150 40E7                     M 	move.w	sr,-(sp)
00010152                          M 	__fstring_generateargumentscode	"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
00010152 =00000003                M 	__pos:	set instr("  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'%<')
00010152 =00000000                M 	__stack:set	0
00010152 =00000000                M 	__sp:	set 0
00010152                          M 	while	(__pos)
00010152 =00000009                M 	__endpos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'>')
00010152 =0000000D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",' ')
00010152 =00000009                M 	__midpos:	= __endpos
00010152                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
00010152                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
00010152 =0000000E                M 	__pos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'%<')
00010152 =00000014                M 	__endpos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'>')
00010152 =00000019                M 	__midpos:	set instr(__pos+5,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",' ')
00010152 =00000014                M 	__midpos:	= __endpos
00010152                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
00010152                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
00010152 =00000015                M 	__pos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'%<')
00010152 =0000001C                M 	__endpos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'>')
00010152 =0000001D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",' ')
00010152 =0000001C                M 	__midpos:	= __endpos
00010152                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
00010152                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
00010152                          M 	__operand:	substr __pos+1+1,__midpos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
00010152                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
00010152                          M 	pushp	"move.l d6,-(sp)"
00010152 =00000001                M 	__stack:	= __stack+1
00010152 =00000004                M 	__sp:	= __sp+4
00010152 =0000001F                M 	__pos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'%<')
00010152 =00000025                M 	__endpos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'>')
00010152 =00000029                M 	__midpos:	set instr(__pos+5,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",' ')
00010152 =00000025                M 	__midpos:	= __endpos
00010152                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
00010152                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
00010152 =0000002A                M 	__pos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'%<')
00010152 =00000030                M 	__endpos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'>')
00010152 =00000035                M 	__midpos:	set instr(__pos+5,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",' ')
00010152 =00000030                M 	__midpos:	= __endpos
00010152                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
00010152                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
00010152 =00000031                M 	__pos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'%<')
00010152 =00000038                M 	__endpos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'>')
00010152 =00000000                M 	__midpos:	set instr(__pos+5,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",' ')
00010152 =00000038                M 	__midpos:	= __endpos
00010152                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
00010152                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
00010152                          M 	__operand:	substr __pos+1+1,__midpos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
00010152                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
00010152                          M 	pushp	"move.l a6,-(sp)"
00010152 =00000002                M 	__stack:	= __stack+1
00010152 =00000008                M 	__sp:	= __sp+4
00010152 =00000000                M 	__pos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'%<')
00010152                          M 	rept	__stack
00010152                          M 	popp	__command
00010152 2F0E                     M 	move.l	a6,-(sp)
00010154                          M 	popp	__command
00010154 2F06                     M 	move.l	d6,-(sp)
00010156 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
0001015A 45EF 0010                M 	lea	4*4(sp),a2
0001015E 43FA 0000                M 	lea	.str_144(pc),a1
00010162 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_writeline_formatted
00010168 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
0001016C 504F                     M 	addq.w	#__sp,sp
0001016E 46DF                     M 	move.w	(sp)+,sr
00010170 6000 0000                M 	bra.w	.instr_end_144
00010174                          M 	.str_144:
00010174                          M 	__fstring_generatedecodedstring	"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
00010174 =00000001                M 	__lpos:	set 1
00010174 =00000003                M 	__pos:	set instr("  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'%<')
00010174                          M 	while	(__pos)
00010174                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
00010174 2020                     M 	dc.b	"  "
00010176 =00000009                M 	__endpos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'>')
00010176 =0000000D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",' ')
00010176 =00000009                M 	__midpos:	= __endpos
00010176                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
00010176                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
00010176 E8                       M 	dc.b	pal0
00010177 =0000000A                M 	__lpos:	set __endpos+1
00010177 =0000000E                M 	__pos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'%<')
00010177                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
00010177 6436 3A20                M 	dc.b	"d6: "
0001017B =00000014                M 	__endpos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'>')
0001017B =00000019                M 	__midpos:	set instr(__pos+5,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",' ')
0001017B =00000014                M 	__midpos:	= __endpos
0001017B                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
0001017B                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
0001017B EC                       M 	dc.b	pal2
0001017C =00000015                M 	__lpos:	set __endpos+1
0001017C =00000015                M 	__pos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'%<')
0001017C                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
0001017C                          M 	dc.b	""
0001017C =0000001C                M 	__endpos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'>')
0001017C =0000001D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",' ')
0001017C =0000001C                M 	__midpos:	= __endpos
0001017C                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
0001017C                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
0001017C                          M 	__param:	substr ,,"hex"
0001017C 83                       M 	dc.b	hex|3
0001017D =0000001D                M 	__lpos:	set __endpos+1
0001017D =0000001F                M 	__pos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'%<')
0001017D                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
0001017D 2020                     M 	dc.b	"  "
0001017F =00000025                M 	__endpos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'>')
0001017F =00000029                M 	__midpos:	set instr(__pos+5,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",' ')
0001017F =00000025                M 	__midpos:	= __endpos
0001017F                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
0001017F                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
0001017F E8                       M 	dc.b	pal0
00010180 =00000026                M 	__lpos:	set __endpos+1
00010180 =0000002A                M 	__pos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'%<')
00010180                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
00010180 6136 3A20                M 	dc.b	"a6: "
00010184 =00000030                M 	__endpos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'>')
00010184 =00000035                M 	__midpos:	set instr(__pos+5,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",' ')
00010184 =00000030                M 	__midpos:	= __endpos
00010184                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
00010184                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
00010184 EC                       M 	dc.b	pal2
00010185 =00000031                M 	__lpos:	set __endpos+1
00010185 =00000031                M 	__pos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'%<')
00010185                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
00010185                          M 	dc.b	""
00010185 =00000038                M 	__endpos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'>')
00010185 =00000000                M 	__midpos:	set instr(__pos+5,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",' ')
00010185 =00000038                M 	__midpos:	= __endpos
00010185                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
00010185                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
00010185                          M 	__param:	substr ,,"hex"
00010185 83                       M 	dc.b	hex|3
00010186 =00000039                M 	__lpos:	set __endpos+1
00010186 =00000000                M 	__pos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'%<')
00010186                          M 	__substr:	substr __lpos,,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
00010186                          M 	dc.b	""
00010186 00                       M 	dc.b	0
00010188 00                       M 	even
00010188                          M 	.instr_end_144:
00010188                            	Console.WriteLine "  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
00010188 40E7                     M 	move.w	sr,-(sp)
0001018A                          M 	__fstring_generateargumentscode	"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
0001018A =00000003                M 	__pos:	set instr("  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'%<')
0001018A =00000000                M 	__stack:set	0
0001018A =00000000                M 	__sp:	set 0
0001018A                          M 	while	(__pos)
0001018A =00000009                M 	__endpos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'>')
0001018A =0000000D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",' ')
0001018A =00000009                M 	__midpos:	= __endpos
0001018A                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
0001018A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
0001018A =0000000E                M 	__pos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'%<')
0001018A =00000014                M 	__endpos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'>')
0001018A =00000019                M 	__midpos:	set instr(__pos+5,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",' ')
0001018A =00000014                M 	__midpos:	= __endpos
0001018A                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
0001018A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
0001018A =00000015                M 	__pos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'%<')
0001018A =0000001C                M 	__endpos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'>')
0001018A =0000001D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",' ')
0001018A =0000001C                M 	__midpos:	= __endpos
0001018A                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
0001018A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
0001018A                          M 	__operand:	substr __pos+1+1,__midpos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
0001018A                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
0001018A                          M 	pushp	"move.l d7,-(sp)"
0001018A =00000001                M 	__stack:	= __stack+1
0001018A =00000004                M 	__sp:	= __sp+4
0001018A =0000001F                M 	__pos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'%<')
0001018A =00000025                M 	__endpos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'>')
0001018A =00000029                M 	__midpos:	set instr(__pos+5,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",' ')
0001018A =00000025                M 	__midpos:	= __endpos
0001018A                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
0001018A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
0001018A =0000002A                M 	__pos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'%<')
0001018A =00000030                M 	__endpos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'>')
0001018A =00000035                M 	__midpos:	set instr(__pos+5,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",' ')
0001018A =00000030                M 	__midpos:	= __endpos
0001018A                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
0001018A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
0001018A =00000031                M 	__pos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'%<')
0001018A =00000038                M 	__endpos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'>')
0001018A =00000000                M 	__midpos:	set instr(__pos+5,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",' ')
0001018A =00000038                M 	__midpos:	= __endpos
0001018A                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
0001018A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
0001018A                          M 	__operand:	substr __pos+1+1,__midpos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
0001018A                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
0001018A                          M 	pushp	"move.l a7,-(sp)"
0001018A =00000002                M 	__stack:	= __stack+1
0001018A =00000008                M 	__sp:	= __sp+4
0001018A =00000000                M 	__pos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'%<')
0001018A                          M 	rept	__stack
0001018A                          M 	popp	__command
0001018A 2F0F                     M 	move.l	a7,-(sp)
0001018C                          M 	popp	__command
0001018C 2F07                     M 	move.l	d7,-(sp)
0001018E 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
00010192 45EF 0010                M 	lea	4*4(sp),a2
00010196 43FA 0000                M 	lea	.str_147(pc),a1
0001019A 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_writeline_formatted
000101A0 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
000101A4 504F                     M 	addq.w	#__sp,sp
000101A6 46DF                     M 	move.w	(sp)+,sr
000101A8 6000 0000                M 	bra.w	.instr_end_147
000101AC                          M 	.str_147:
000101AC                          M 	__fstring_generatedecodedstring	"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
000101AC =00000001                M 	__lpos:	set 1
000101AC =00000003                M 	__pos:	set instr("  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'%<')
000101AC                          M 	while	(__pos)
000101AC                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
000101AC 2020                     M 	dc.b	"  "
000101AE =00000009                M 	__endpos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'>')
000101AE =0000000D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",' ')
000101AE =00000009                M 	__midpos:	= __endpos
000101AE                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
000101AE                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
000101AE E8                       M 	dc.b	pal0
000101AF =0000000A                M 	__lpos:	set __endpos+1
000101AF =0000000E                M 	__pos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'%<')
000101AF                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
000101AF 6437 3A20                M 	dc.b	"d7: "
000101B3 =00000014                M 	__endpos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'>')
000101B3 =00000019                M 	__midpos:	set instr(__pos+5,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",' ')
000101B3 =00000014                M 	__midpos:	= __endpos
000101B3                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
000101B3                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
000101B3 EC                       M 	dc.b	pal2
000101B4 =00000015                M 	__lpos:	set __endpos+1
000101B4 =00000015                M 	__pos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'%<')
000101B4                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
000101B4                          M 	dc.b	""
000101B4 =0000001C                M 	__endpos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'>')
000101B4 =0000001D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",' ')
000101B4 =0000001C                M 	__midpos:	= __endpos
000101B4                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
000101B4                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
000101B4                          M 	__param:	substr ,,"hex"
000101B4 83                       M 	dc.b	hex|3
000101B5 =0000001D                M 	__lpos:	set __endpos+1
000101B5 =0000001F                M 	__pos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'%<')
000101B5                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
000101B5 2020                     M 	dc.b	"  "
000101B7 =00000025                M 	__endpos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'>')
000101B7 =00000029                M 	__midpos:	set instr(__pos+5,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",' ')
000101B7 =00000025                M 	__midpos:	= __endpos
000101B7                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
000101B7                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
000101B7 E8                       M 	dc.b	pal0
000101B8 =00000026                M 	__lpos:	set __endpos+1
000101B8 =0000002A                M 	__pos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'%<')
000101B8                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
000101B8 7370 3A20                M 	dc.b	"sp: "
000101BC =00000030                M 	__endpos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'>')
000101BC =00000035                M 	__midpos:	set instr(__pos+5,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",' ')
000101BC =00000030                M 	__midpos:	= __endpos
000101BC                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
000101BC                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
000101BC EC                       M 	dc.b	pal2
000101BD =00000031                M 	__lpos:	set __endpos+1
000101BD =00000031                M 	__pos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'%<')
000101BD                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
000101BD                          M 	dc.b	""
000101BD =00000038                M 	__endpos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'>')
000101BD =00000000                M 	__midpos:	set instr(__pos+5,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",' ')
000101BD =00000038                M 	__midpos:	= __endpos
000101BD                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
000101BD                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
000101BD                          M 	__param:	substr ,,"hex"
000101BD 83                       M 	dc.b	hex|3
000101BE =00000039                M 	__lpos:	set __endpos+1
000101BE =00000000                M 	__pos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'%<')
000101BE                          M 	__substr:	substr __lpos,,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
000101BE                          M 	dc.b	""
000101BE 00                       M 	dc.b	0
000101C0 00                       M 	even
000101C0                          M 	.instr_end_147:
000101C0                            	Console.BreakLine
000101C0 40E7                     M 	move.w	sr,-(sp)
000101C2 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_startnewline
000101C8 46DF                     M 	move.w	(sp)+,sr
000101CA                            
000101CA                            	Console.Write "%<pal1>Channel: %<pal0>"
000101CA 40E7                     M 	move.w	sr,-(sp)
000101CC                          M 	__fstring_generateargumentscode	"%<pal1>Channel: %<pal0>"
000101CC =00000001                M 	__pos:	set instr("%<pal1>Channel: %<pal0>",'%<')
000101CC =00000000                M 	__stack:set	0
000101CC =00000000                M 	__sp:	set 0
000101CC                          M 	while	(__pos)
000101CC =00000007                M 	__endpos:	set instr(__pos+1,"%<pal1>Channel: %<pal0>",'>')
000101CC =00000010                M 	__midpos:	set instr(__pos+5,"%<pal1>Channel: %<pal0>",' ')
000101CC =00000007                M 	__midpos:	= __endpos
000101CC                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Channel: %<pal0>"
000101CC                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Channel: %<pal0>"
000101CC =00000011                M 	__pos:	set instr(__pos+1,"%<pal1>Channel: %<pal0>",'%<')
000101CC =00000017                M 	__endpos:	set instr(__pos+1,"%<pal1>Channel: %<pal0>",'>')
000101CC =00000000                M 	__midpos:	set instr(__pos+5,"%<pal1>Channel: %<pal0>",' ')
000101CC =00000017                M 	__midpos:	= __endpos
000101CC                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Channel: %<pal0>"
000101CC                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Channel: %<pal0>"
000101CC =00000000                M 	__pos:	set instr(__pos+1,"%<pal1>Channel: %<pal0>",'%<')
000101CC                          M 	rept	__stack
000101CC 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
000101D0 43FA 0000                M 	lea	.str_151(pc),a1
000101D4 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_write_formatted
000101DA 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
000101DE 46DF                     M 	move.w	(sp)+,sr
000101E0 6000 0000                M 	bra.w	.instr_end_151
000101E4                          M 	.str_151:
000101E4                          M 	__fstring_generatedecodedstring	"%<pal1>Channel: %<pal0>"
000101E4 =00000001                M 	__lpos:	set 1
000101E4 =00000001                M 	__pos:	set instr("%<pal1>Channel: %<pal0>",'%<')
000101E4                          M 	while	(__pos)
000101E4                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Channel: %<pal0>"
000101E4                          M 	dc.b	""
000101E4 =00000007                M 	__endpos:	set instr(__pos+1,"%<pal1>Channel: %<pal0>",'>')
000101E4 =00000010                M 	__midpos:	set instr(__pos+5,"%<pal1>Channel: %<pal0>",' ')
000101E4 =00000007                M 	__midpos:	= __endpos
000101E4                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Channel: %<pal0>"
000101E4                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Channel: %<pal0>"
000101E4 EA                       M 	dc.b	pal1
000101E5 =00000008                M 	__lpos:	set __endpos+1
000101E5 =00000011                M 	__pos:	set instr(__pos+1,"%<pal1>Channel: %<pal0>",'%<')
000101E5                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Channel: %<pal0>"
000101E5 4368 616E 6E65 6C3A 20   M 	dc.b	"Channel: "
000101EE =00000017                M 	__endpos:	set instr(__pos+1,"%<pal1>Channel: %<pal0>",'>')
000101EE =00000000                M 	__midpos:	set instr(__pos+5,"%<pal1>Channel: %<pal0>",' ')
000101EE =00000017                M 	__midpos:	= __endpos
000101EE                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Channel: %<pal0>"
000101EE                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Channel: %<pal0>"
000101EE E8                       M 	dc.b	pal0
000101EF =00000018                M 	__lpos:	set __endpos+1
000101EF =00000000                M 	__pos:	set instr(__pos+1,"%<pal1>Channel: %<pal0>",'%<')
000101EF                          M 	__substr:	substr __lpos,,"%<pal1>Channel: %<pal0>"
000101EF                          M 	dc.b	""
000101EF 00                       M 	dc.b	0
000101F0                          M 	even
000101F0                          M 	.instr_end_151:
000101F0                            	AMPS_Debug_GetChannel
000101F0 BAFC 8252                M 	cmp.w	#mpsg1,a5
000101F4 6600                     M 	bne.s	.cpsg2
000101F6                          M 	console.write	"PSG1"
000101F6 40E7                     M 	move.w	sr,-(sp)
000101F8                          M 	__fstring_generateargumentscode	"PSG1"
000101F8 =00000000                M 	__pos:	set instr("PSG1",'%<')
000101F8 =00000000                M 	__stack:set	0
000101F8 =00000000                M 	__sp:	set 0
000101F8                          M 	while	(__pos)
000101F8                          M 	rept	__stack
000101F8 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
000101FC 43FA 0000                M 	lea	.str_155(pc),a1
00010200 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_write_formatted
00010206 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
0001020A 46DF                     M 	move.w	(sp)+,sr
0001020C 6000 0000                M 	bra.w	.instr_end_155
00010210                          M 	.str_155:
00010210                          M 	__fstring_generatedecodedstring	"PSG1"
00010210 =00000001                M 	__lpos:	set 1
00010210 =00000000                M 	__pos:	set instr("PSG1",'%<')
00010210                          M 	while	(__pos)
00010210                          M 	__substr:	substr __lpos,,"PSG1"
00010210 5053 4731                M 	dc.b	"PSG1"
00010214 00                       M 	dc.b	0
00010216 00                       M 	even
00010216                          M 	.instr_end_155:
00010216 6000 0000                M 	bra.w	.end
0001021A                          M .cpsg2
0001021A BAFC 827E                M 	cmp.w	#mpsg2,a5
0001021E 6600                     M 	bne.s	.cpsg3
00010220                          M 	console.write	"PSG2"
00010220 40E7                     M 	move.w	sr,-(sp)
00010222                          M 	__fstring_generateargumentscode	"PSG2"
00010222 =00000000                M 	__pos:	set instr("PSG2",'%<')
00010222 =00000000                M 	__stack:set	0
00010222 =00000000                M 	__sp:	set 0
00010222                          M 	while	(__pos)
00010222                          M 	rept	__stack
00010222 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
00010226 43FA 0000                M 	lea	.str_158(pc),a1
0001022A 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_write_formatted
00010230 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
00010234 46DF                     M 	move.w	(sp)+,sr
00010236 6000 0000                M 	bra.w	.instr_end_158
0001023A                          M 	.str_158:
0001023A                          M 	__fstring_generatedecodedstring	"PSG2"
0001023A =00000001                M 	__lpos:	set 1
0001023A =00000000                M 	__pos:	set instr("PSG2",'%<')
0001023A                          M 	while	(__pos)
0001023A                          M 	__substr:	substr __lpos,,"PSG2"
0001023A 5053 4732                M 	dc.b	"PSG2"
0001023E 00                       M 	dc.b	0
00010240 00                       M 	even
00010240                          M 	.instr_end_158:
00010240 6000 0000                M 	bra.w	.end
00010244                          M .cpsg3
00010244 BAFC 82AA                M 	cmp.w	#mpsg3,a5
00010248 6600                     M 	bne.s	.cpsgs1
0001024A                          M 	console.write	"PSG3"
0001024A 40E7                     M 	move.w	sr,-(sp)
0001024C                          M 	__fstring_generateargumentscode	"PSG3"
0001024C =00000000                M 	__pos:	set instr("PSG3",'%<')
0001024C =00000000                M 	__stack:set	0
0001024C =00000000                M 	__sp:	set 0
0001024C                          M 	while	(__pos)
0001024C                          M 	rept	__stack
0001024C 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
00010250 43FA 0000                M 	lea	.str_161(pc),a1
00010254 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_write_formatted
0001025A 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
0001025E 46DF                     M 	move.w	(sp)+,sr
00010260 6000 0000                M 	bra.w	.instr_end_161
00010264                          M 	.str_161:
00010264                          M 	__fstring_generatedecodedstring	"PSG3"
00010264 =00000001                M 	__lpos:	set 1
00010264 =00000000                M 	__pos:	set instr("PSG3",'%<')
00010264                          M 	while	(__pos)
00010264                          M 	__substr:	substr __lpos,,"PSG3"
00010264 5053 4733                M 	dc.b	"PSG3"
00010268 00                       M 	dc.b	0
0001026A 00                       M 	even
0001026A                          M 	.instr_end_161:
0001026A 6000 0000                M 	bra.w	.end
0001026E                          M .cpsgs1
0001026E BAFC 8346                M 	cmp.w	#msfxpsg1,a5
00010272 6600                     M 	bne.s	.cpsgs2
00010274                          M 	console.write	"SFX PSG1"
00010274 40E7                     M 	move.w	sr,-(sp)
00010276                          M 	__fstring_generateargumentscode	"SFX PSG1"
00010276 =00000000                M 	__pos:	set instr("SFX PSG1",'%<')
00010276 =00000000                M 	__stack:set	0
00010276 =00000000                M 	__sp:	set 0
00010276                          M 	while	(__pos)
00010276                          M 	rept	__stack
00010276 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
0001027A 43FA 0000                M 	lea	.str_164(pc),a1
0001027E 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_write_formatted
00010284 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
00010288 46DF                     M 	move.w	(sp)+,sr
0001028A 6000 0000                M 	bra.w	.instr_end_164
0001028E                          M 	.str_164:
0001028E                          M 	__fstring_generatedecodedstring	"SFX PSG1"
0001028E =00000001                M 	__lpos:	set 1
0001028E =00000000                M 	__pos:	set instr("SFX PSG1",'%<')
0001028E                          M 	while	(__pos)
0001028E                          M 	__substr:	substr __lpos,,"SFX PSG1"
0001028E 5346 5820 5053 4731      M 	dc.b	"SFX PSG1"
00010296 00                       M 	dc.b	0
00010298 00                       M 	even
00010298                          M 	.instr_end_164:
00010298 6000 0000                M 	bra.w	.end
0001029C                          M .cpsgs2
0001029C BAFC 8362                M 	cmp.w	#msfxpsg2,a5
000102A0 6600                     M 	bne.s	.cpsgs3
000102A2                          M 	console.write	"SFX PSG2"
000102A2 40E7                     M 	move.w	sr,-(sp)
000102A4                          M 	__fstring_generateargumentscode	"SFX PSG2"
000102A4 =00000000                M 	__pos:	set instr("SFX PSG2",'%<')
000102A4 =00000000                M 	__stack:set	0
000102A4 =00000000                M 	__sp:	set 0
000102A4                          M 	while	(__pos)
000102A4                          M 	rept	__stack
000102A4 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
000102A8 43FA 0000                M 	lea	.str_167(pc),a1
000102AC 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_write_formatted
000102B2 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
000102B6 46DF                     M 	move.w	(sp)+,sr
000102B8 6000 0000                M 	bra.w	.instr_end_167
000102BC                          M 	.str_167:
000102BC                          M 	__fstring_generatedecodedstring	"SFX PSG2"
000102BC =00000001                M 	__lpos:	set 1
000102BC =00000000                M 	__pos:	set instr("SFX PSG2",'%<')
000102BC                          M 	while	(__pos)
000102BC                          M 	__substr:	substr __lpos,,"SFX PSG2"
000102BC 5346 5820 5053 4732      M 	dc.b	"SFX PSG2"
000102C4 00                       M 	dc.b	0
000102C6 00                       M 	even
000102C6                          M 	.instr_end_167:
000102C6 6000 0000                M 	bra.w	.end
000102CA                          M .cpsgs3
000102CA BAFC 837E                M 	cmp.w	#msfxpsg3,a5
000102CE 6600                     M 	bne.s	.cdacs1
000102D0                          M 	console.write	"SFX PSG3"
000102D0 40E7                     M 	move.w	sr,-(sp)
000102D2                          M 	__fstring_generateargumentscode	"SFX PSG3"
000102D2 =00000000                M 	__pos:	set instr("SFX PSG3",'%<')
000102D2 =00000000                M 	__stack:set	0
000102D2 =00000000                M 	__sp:	set 0
000102D2                          M 	while	(__pos)
000102D2                          M 	rept	__stack
000102D2 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
000102D6 43FA 0000                M 	lea	.str_170(pc),a1
000102DA 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_write_formatted
000102E0 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
000102E4 46DF                     M 	move.w	(sp)+,sr
000102E6 6000 0000                M 	bra.w	.instr_end_170
000102EA                          M 	.str_170:
000102EA                          M 	__fstring_generatedecodedstring	"SFX PSG3"
000102EA =00000001                M 	__lpos:	set 1
000102EA =00000000                M 	__pos:	set instr("SFX PSG3",'%<')
000102EA                          M 	while	(__pos)
000102EA                          M 	__substr:	substr __lpos,,"SFX PSG3"
000102EA 5346 5820 5053 4733      M 	dc.b	"SFX PSG3"
000102F2 00                       M 	dc.b	0
000102F4 00                       M 	even
000102F4                          M 	.instr_end_170:
000102F4 6000 0000                M 	bra.w	.end
000102F8                          M .cdacs1
000102F8 BAFC 82D6                M 	cmp.w	#msfxdac1,a5
000102FC 6600                     M 	bne.s	.cdac1
000102FE                          M 	console.write	"SFX DAC1"
000102FE 40E7                     M 	move.w	sr,-(sp)
00010300                          M 	__fstring_generateargumentscode	"SFX DAC1"
00010300 =00000000                M 	__pos:	set instr("SFX DAC1",'%<')
00010300 =00000000                M 	__stack:set	0
00010300 =00000000                M 	__sp:	set 0
00010300                          M 	while	(__pos)
00010300                          M 	rept	__stack
00010300 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
00010304 43FA 0000                M 	lea	.str_173(pc),a1
00010308 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_write_formatted
0001030E 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
00010312 46DF                     M 	move.w	(sp)+,sr
00010314 6000 0000                M 	bra.w	.instr_end_173
00010318                          M 	.str_173:
00010318                          M 	__fstring_generatedecodedstring	"SFX DAC1"
00010318 =00000001                M 	__lpos:	set 1
00010318 =00000000                M 	__pos:	set instr("SFX DAC1",'%<')
00010318                          M 	while	(__pos)
00010318                          M 	__substr:	substr __lpos,,"SFX DAC1"
00010318 5346 5820 4441 4331      M 	dc.b	"SFX DAC1"
00010320 00                       M 	dc.b	0
00010322 00                       M 	even
00010322                          M 	.instr_end_173:
00010322 6000 0000                M 	bra.w	.end
00010326                          M .cdac1
00010326 BAFC 811E                M 	cmp.w	#mdac1,a5
0001032A 6600                     M 	bne.s	.cdac2
0001032C                          M 	console.write	"DAC1"
0001032C 40E7                     M 	move.w	sr,-(sp)
0001032E                          M 	__fstring_generateargumentscode	"DAC1"
0001032E =00000000                M 	__pos:	set instr("DAC1",'%<')
0001032E =00000000                M 	__stack:set	0
0001032E =00000000                M 	__sp:	set 0
0001032E                          M 	while	(__pos)
0001032E                          M 	rept	__stack
0001032E 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
00010332 43FA 0000                M 	lea	.str_176(pc),a1
00010336 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_write_formatted
0001033C 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
00010340 46DF                     M 	move.w	(sp)+,sr
00010342 6000 0000                M 	bra.w	.instr_end_176
00010346                          M 	.str_176:
00010346                          M 	__fstring_generatedecodedstring	"DAC1"
00010346 =00000001                M 	__lpos:	set 1
00010346 =00000000                M 	__pos:	set instr("DAC1",'%<')
00010346                          M 	while	(__pos)
00010346                          M 	__substr:	substr __lpos,,"DAC1"
00010346 4441 4331                M 	dc.b	"DAC1"
0001034A 00                       M 	dc.b	0
0001034C 00                       M 	even
0001034C                          M 	.instr_end_176:
0001034C 6000 0000                M 	bra.w	.end
00010350                          M .cdac2
00010350 BAFC 814A                M 	cmp.w	#mdac2,a5
00010354 6600                     M 	bne.s	.cfm1
00010356                          M 	console.write	"DAC2"
00010356 40E7                     M 	move.w	sr,-(sp)
00010358                          M 	__fstring_generateargumentscode	"DAC2"
00010358 =00000000                M 	__pos:	set instr("DAC2",'%<')
00010358 =00000000                M 	__stack:set	0
00010358 =00000000                M 	__sp:	set 0
00010358                          M 	while	(__pos)
00010358                          M 	rept	__stack
00010358 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
0001035C 43FA 0000                M 	lea	.str_179(pc),a1
00010360 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_write_formatted
00010366 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
0001036A 46DF                     M 	move.w	(sp)+,sr
0001036C 6000 0000                M 	bra.w	.instr_end_179
00010370                          M 	.str_179:
00010370                          M 	__fstring_generatedecodedstring	"DAC2"
00010370 =00000001                M 	__lpos:	set 1
00010370 =00000000                M 	__pos:	set instr("DAC2",'%<')
00010370                          M 	while	(__pos)
00010370                          M 	__substr:	substr __lpos,,"DAC2"
00010370 4441 4332                M 	dc.b	"DAC2"
00010374 00                       M 	dc.b	0
00010376 00                       M 	even
00010376                          M 	.instr_end_179:
00010376 6000 0000                M 	bra.w	.end
0001037A                          M .cfm1
0001037A BAFC 8176                M 	cmp.w	#mfm1,a5
0001037E 6600                     M 	bne.s	.cfm2
00010380                          M 	console.write	"FM1"
00010380 40E7                     M 	move.w	sr,-(sp)
00010382                          M 	__fstring_generateargumentscode	"FM1"
00010382 =00000000                M 	__pos:	set instr("FM1",'%<')
00010382 =00000000                M 	__stack:set	0
00010382 =00000000                M 	__sp:	set 0
00010382                          M 	while	(__pos)
00010382                          M 	rept	__stack
00010382 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
00010386 43FA 0000                M 	lea	.str_182(pc),a1
0001038A 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_write_formatted
00010390 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
00010394 46DF                     M 	move.w	(sp)+,sr
00010396 6000 0000                M 	bra.w	.instr_end_182
0001039A                          M 	.str_182:
0001039A                          M 	__fstring_generatedecodedstring	"FM1"
0001039A =00000001                M 	__lpos:	set 1
0001039A =00000000                M 	__pos:	set instr("FM1",'%<')
0001039A                          M 	while	(__pos)
0001039A                          M 	__substr:	substr __lpos,,"FM1"
0001039A 464D 31                  M 	dc.b	"FM1"
0001039D 00                       M 	dc.b	0
0001039E                          M 	even
0001039E                          M 	.instr_end_182:
0001039E 6000 0000                M 	bra.w	.end
000103A2                          M .cfm2
000103A2 BAFC 81A2                M 	cmp.w	#mfm2,a5
000103A6 6600                     M 	bne.s	.cfm3
000103A8                          M 	console.write	"FM2"
000103A8 40E7                     M 	move.w	sr,-(sp)
000103AA                          M 	__fstring_generateargumentscode	"FM2"
000103AA =00000000                M 	__pos:	set instr("FM2",'%<')
000103AA =00000000                M 	__stack:set	0
000103AA =00000000                M 	__sp:	set 0
000103AA                          M 	while	(__pos)
000103AA                          M 	rept	__stack
000103AA 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
000103AE 43FA 0000                M 	lea	.str_185(pc),a1
000103B2 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_write_formatted
000103B8 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
000103BC 46DF                     M 	move.w	(sp)+,sr
000103BE 6000 0000                M 	bra.w	.instr_end_185
000103C2                          M 	.str_185:
000103C2                          M 	__fstring_generatedecodedstring	"FM2"
000103C2 =00000001                M 	__lpos:	set 1
000103C2 =00000000                M 	__pos:	set instr("FM2",'%<')
000103C2                          M 	while	(__pos)
000103C2                          M 	__substr:	substr __lpos,,"FM2"
000103C2 464D 32                  M 	dc.b	"FM2"
000103C5 00                       M 	dc.b	0
000103C6                          M 	even
000103C6                          M 	.instr_end_185:
000103C6 6000 0000                M 	bra.w	.end
000103CA                          M .cfm3
000103CA BAFC 81CE                M 	cmp.w	#mfm3,a5
000103CE 6600                     M 	bne.s	.cfm4
000103D0                          M 	console.write	"FM3"
000103D0 40E7                     M 	move.w	sr,-(sp)
000103D2                          M 	__fstring_generateargumentscode	"FM3"
000103D2 =00000000                M 	__pos:	set instr("FM3",'%<')
000103D2 =00000000                M 	__stack:set	0
000103D2 =00000000                M 	__sp:	set 0
000103D2                          M 	while	(__pos)
000103D2                          M 	rept	__stack
000103D2 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
000103D6 43FA 0000                M 	lea	.str_188(pc),a1
000103DA 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_write_formatted
000103E0 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
000103E4 46DF                     M 	move.w	(sp)+,sr
000103E6 6000 0000                M 	bra.w	.instr_end_188
000103EA                          M 	.str_188:
000103EA                          M 	__fstring_generatedecodedstring	"FM3"
000103EA =00000001                M 	__lpos:	set 1
000103EA =00000000                M 	__pos:	set instr("FM3",'%<')
000103EA                          M 	while	(__pos)
000103EA                          M 	__substr:	substr __lpos,,"FM3"
000103EA 464D 33                  M 	dc.b	"FM3"
000103ED 00                       M 	dc.b	0
000103EE                          M 	even
000103EE                          M 	.instr_end_188:
000103EE 6000 0000                M 	bra.w	.end
000103F2                          M .cfm4
000103F2 BAFC 81FA                M 	cmp.w	#mfm4,a5
000103F6 6600                     M 	bne.s	.cfm5
000103F8                          M 	console.write	"FM4"
000103F8 40E7                     M 	move.w	sr,-(sp)
000103FA                          M 	__fstring_generateargumentscode	"FM4"
000103FA =00000000                M 	__pos:	set instr("FM4",'%<')
000103FA =00000000                M 	__stack:set	0
000103FA =00000000                M 	__sp:	set 0
000103FA                          M 	while	(__pos)
000103FA                          M 	rept	__stack
000103FA 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
000103FE 43FA 0000                M 	lea	.str_191(pc),a1
00010402 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_write_formatted
00010408 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
0001040C 46DF                     M 	move.w	(sp)+,sr
0001040E 6000 0000                M 	bra.w	.instr_end_191
00010412                          M 	.str_191:
00010412                          M 	__fstring_generatedecodedstring	"FM4"
00010412 =00000001                M 	__lpos:	set 1
00010412 =00000000                M 	__pos:	set instr("FM4",'%<')
00010412                          M 	while	(__pos)
00010412                          M 	__substr:	substr __lpos,,"FM4"
00010412 464D 34                  M 	dc.b	"FM4"
00010415 00                       M 	dc.b	0
00010416                          M 	even
00010416                          M 	.instr_end_191:
00010416 6000 0000                M 	bra.w	.end
0001041A                          M .cfm5
0001041A BAFC 8226                M 	cmp.w	#mfm5,a5
0001041E 6600                     M 	bne.s	.cfms3
00010420                          M 	console.write	"FM5"
00010420 40E7                     M 	move.w	sr,-(sp)
00010422                          M 	__fstring_generateargumentscode	"FM5"
00010422 =00000000                M 	__pos:	set instr("FM5",'%<')
00010422 =00000000                M 	__stack:set	0
00010422 =00000000                M 	__sp:	set 0
00010422                          M 	while	(__pos)
00010422                          M 	rept	__stack
00010422 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
00010426 43FA 0000                M 	lea	.str_194(pc),a1
0001042A 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_write_formatted
00010430 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
00010434 46DF                     M 	move.w	(sp)+,sr
00010436 6000 0000                M 	bra.w	.instr_end_194
0001043A                          M 	.str_194:
0001043A                          M 	__fstring_generatedecodedstring	"FM5"
0001043A =00000001                M 	__lpos:	set 1
0001043A =00000000                M 	__pos:	set instr("FM5",'%<')
0001043A                          M 	while	(__pos)
0001043A                          M 	__substr:	substr __lpos,,"FM5"
0001043A 464D 35                  M 	dc.b	"FM5"
0001043D 00                       M 	dc.b	0
0001043E                          M 	even
0001043E                          M 	.instr_end_194:
0001043E 6000 0000                M 	bra.w	.end
00010442                          M .cfms3
00010442 BAFC 82F2                M 	cmp.w	#msfxfm3,a5
00010446 6600                     M 	bne.s	.cfms4
00010448                          M 	console.write	"SFX FM3"
00010448 40E7                     M 	move.w	sr,-(sp)
0001044A                          M 	__fstring_generateargumentscode	"SFX FM3"
0001044A =00000000                M 	__pos:	set instr("SFX FM3",'%<')
0001044A =00000000                M 	__stack:set	0
0001044A =00000000                M 	__sp:	set 0
0001044A                          M 	while	(__pos)
0001044A                          M 	rept	__stack
0001044A 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
0001044E 43FA 0000                M 	lea	.str_197(pc),a1
00010452 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_write_formatted
00010458 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
0001045C 46DF                     M 	move.w	(sp)+,sr
0001045E 6000 0000                M 	bra.w	.instr_end_197
00010462                          M 	.str_197:
00010462                          M 	__fstring_generatedecodedstring	"SFX FM3"
00010462 =00000001                M 	__lpos:	set 1
00010462 =00000000                M 	__pos:	set instr("SFX FM3",'%<')
00010462                          M 	while	(__pos)
00010462                          M 	__substr:	substr __lpos,,"SFX FM3"
00010462 5346 5820 464D 33        M 	dc.b	"SFX FM3"
00010469 00                       M 	dc.b	0
0001046A                          M 	even
0001046A                          M 	.instr_end_197:
0001046A 4E75                     M 	rts
0001046C                          M .cfms4
0001046C BAFC 830E                M 	cmp.w	#msfxfm4,a5
00010470 6600                     M 	bne.s	.cfms5
00010472                          M 	console.write	"SFX FM4"
00010472 40E7                     M 	move.w	sr,-(sp)
00010474                          M 	__fstring_generateargumentscode	"SFX FM4"
00010474 =00000000                M 	__pos:	set instr("SFX FM4",'%<')
00010474 =00000000                M 	__stack:set	0
00010474 =00000000                M 	__sp:	set 0
00010474                          M 	while	(__pos)
00010474                          M 	rept	__stack
00010474 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
00010478 43FA 0000                M 	lea	.str_200(pc),a1
0001047C 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_write_formatted
00010482 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
00010486 46DF                     M 	move.w	(sp)+,sr
00010488 6000 0000                M 	bra.w	.instr_end_200
0001048C                          M 	.str_200:
0001048C                          M 	__fstring_generatedecodedstring	"SFX FM4"
0001048C =00000001                M 	__lpos:	set 1
0001048C =00000000                M 	__pos:	set instr("SFX FM4",'%<')
0001048C                          M 	while	(__pos)
0001048C                          M 	__substr:	substr __lpos,,"SFX FM4"
0001048C 5346 5820 464D 34        M 	dc.b	"SFX FM4"
00010493 00                       M 	dc.b	0
00010494                          M 	even
00010494                          M 	.instr_end_200:
00010494 6000                     M 	bra.s	.end
00010496                          M .cfms5
00010496 BAFC 832A                M 	cmp.w	#msfxfm5,a5
0001049A 6700                     M 	beq.s	.cfms5_
0001049C                          M .addr
0001049C                          M 	console.write	"%<pal2>%<.l a5>"
0001049C 40E7                     M 	move.w	sr,-(sp)
0001049E                          M 	__fstring_generateargumentscode	"%<pal2>%<.l a5>"
0001049E =00000001                M 	__pos:	set instr("%<pal2>%<.l a5>",'%<')
0001049E =00000000                M 	__stack:set	0
0001049E =00000000                M 	__sp:	set 0
0001049E                          M 	while	(__pos)
0001049E =00000007                M 	__endpos:	set instr(__pos+1,"%<pal2>%<.l a5>",'>')
0001049E =0000000C                M 	__midpos:	set instr(__pos+5,"%<pal2>%<.l a5>",' ')
0001049E =00000007                M 	__midpos:	= __endpos
0001049E                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal2>%<.l a5>"
0001049E                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal2>%<.l a5>"
0001049E =00000008                M 	__pos:	set instr(__pos+1,"%<pal2>%<.l a5>",'%<')
0001049E =0000000F                M 	__endpos:	set instr(__pos+1,"%<pal2>%<.l a5>",'>')
0001049E =00000000                M 	__midpos:	set instr(__pos+5,"%<pal2>%<.l a5>",' ')
0001049E =0000000F                M 	__midpos:	= __endpos
0001049E                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal2>%<.l a5>"
0001049E                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal2>%<.l a5>"
0001049E                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<pal2>%<.l a5>"
0001049E                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal2>%<.l a5>"
0001049E                          M 	pushp	"move.l a5,-(sp)"
0001049E =00000001                M 	__stack:	= __stack+1
0001049E =00000004                M 	__sp:	= __sp+4
0001049E =00000000                M 	__pos:	set instr(__pos+1,"%<pal2>%<.l a5>",'%<')
0001049E                          M 	rept	__stack
0001049E                          M 	popp	__command
0001049E 2F0D                     M 	move.l	a5,-(sp)
000104A0 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
000104A4 45EF 0010                M 	lea	4*4(sp),a2
000104A8 43FA 0000                M 	lea	.str_203(pc),a1
000104AC 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_write_formatted
000104B2 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
000104B6 584F                     M 	addq.w	#__sp,sp
000104B8 46DF                     M 	move.w	(sp)+,sr
000104BA 6000 0000                M 	bra.w	.instr_end_203
000104BE                          M 	.str_203:
000104BE                          M 	__fstring_generatedecodedstring	"%<pal2>%<.l a5>"
000104BE =00000001                M 	__lpos:	set 1
000104BE =00000001                M 	__pos:	set instr("%<pal2>%<.l a5>",'%<')
000104BE                          M 	while	(__pos)
000104BE                          M 	__substr:	substr __lpos,__pos-1,"%<pal2>%<.l a5>"
000104BE                          M 	dc.b	""
000104BE =00000007                M 	__endpos:	set instr(__pos+1,"%<pal2>%<.l a5>",'>')
000104BE =0000000C                M 	__midpos:	set instr(__pos+5,"%<pal2>%<.l a5>",' ')
000104BE =00000007                M 	__midpos:	= __endpos
000104BE                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal2>%<.l a5>"
000104BE                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal2>%<.l a5>"
000104BE EC                       M 	dc.b	pal2
000104BF =00000008                M 	__lpos:	set __endpos+1
000104BF =00000008                M 	__pos:	set instr(__pos+1,"%<pal2>%<.l a5>",'%<')
000104BF                          M 	__substr:	substr __lpos,__pos-1,"%<pal2>%<.l a5>"
000104BF                          M 	dc.b	""
000104BF =0000000F                M 	__endpos:	set instr(__pos+1,"%<pal2>%<.l a5>",'>')
000104BF =00000000                M 	__midpos:	set instr(__pos+5,"%<pal2>%<.l a5>",' ')
000104BF =0000000F                M 	__midpos:	= __endpos
000104BF                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal2>%<.l a5>"
000104BF                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal2>%<.l a5>"
000104BF                          M 	__param:	substr ,,"hex"
000104BF 83                       M 	dc.b	hex|3
000104C0 =00000010                M 	__lpos:	set __endpos+1
000104C0 =00000000                M 	__pos:	set instr(__pos+1,"%<pal2>%<.l a5>",'%<')
000104C0                          M 	__substr:	substr __lpos,,"%<pal2>%<.l a5>"
000104C0                          M 	dc.b	""
000104C0 00                       M 	dc.b	0
000104C2 00                       M 	even
000104C2                          M 	.instr_end_203:
000104C2 4E75                     M 	rts
000104C4                          M .cfms5_
000104C4                          M 	console.write	"SFX FM5"
000104C4 40E7                     M 	move.w	sr,-(sp)
000104C6                          M 	__fstring_generateargumentscode	"SFX FM5"
000104C6 =00000000                M 	__pos:	set instr("SFX FM5",'%<')
000104C6 =00000000                M 	__stack:set	0
000104C6 =00000000                M 	__sp:	set 0
000104C6                          M 	while	(__pos)
000104C6                          M 	rept	__stack
000104C6 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
000104CA 43FA 0000                M 	lea	.str_206(pc),a1
000104CE 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_write_formatted
000104D4 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
000104D8 46DF                     M 	move.w	(sp)+,sr
000104DA 6000 0000                M 	bra.w	.instr_end_206
000104DE                          M 	.str_206:
000104DE                          M 	__fstring_generatedecodedstring	"SFX FM5"
000104DE =00000001                M 	__lpos:	set 1
000104DE =00000000                M 	__pos:	set instr("SFX FM5",'%<')
000104DE                          M 	while	(__pos)
000104DE                          M 	__substr:	substr __lpos,,"SFX FM5"
000104DE 5346 5820 464D 35        M 	dc.b	"SFX FM5"
000104E5 00                       M 	dc.b	0
000104E6                          M 	even
000104E6                          M 	.instr_end_206:
000104E6                          M .end
000104E6                            	Console.BreakLine
000104E6 40E7                     M 	move.w	sr,-(sp)
000104E8 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_startnewline
000104EE 46DF                     M 	move.w	(sp)+,sr
000104F0                            
000104F0                            	Console.WriteLine "%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>"
000104F0 40E7                     M 	move.w	sr,-(sp)
000104F2                          M 	__fstring_generateargumentscode	"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>"
000104F2 =00000001                M 	__pos:	set instr("%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>",'%<')
000104F2 =00000000                M 	__stack:set	0
000104F2 =00000000                M 	__sp:	set 0
000104F2                          M 	while	(__pos)
000104F2 =00000007                M 	__endpos:	set instr(__pos+1,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>",'>')
000104F2 =0000000D                M 	__midpos:	set instr(__pos+5,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>",' ')
000104F2 =00000007                M 	__midpos:	= __endpos
000104F2                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>"
000104F2                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>"
000104F2 =0000000E                M 	__pos:	set instr(__pos+1,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>",'%<')
000104F2 =00000014                M 	__endpos:	set instr(__pos+1,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>",'>')
000104F2 =00000019                M 	__midpos:	set instr(__pos+5,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>",' ')
000104F2 =00000014                M 	__midpos:	= __endpos
000104F2                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>"
000104F2                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>"
000104F2 =00000015                M 	__pos:	set instr(__pos+1,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>",'%<')
000104F2 =00000026                M 	__endpos:	set instr(__pos+1,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>",'>')
000104F2 =0000001C                M 	__midpos:	set instr(__pos+5,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>",' ')
000104F2                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>"
000104F2                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>"
000104F2                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>"
000104F2                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>"
000104F2                          M 	pushp	"move.l a4,-(sp)"
000104F2 =00000001                M 	__stack:	= __stack+1
000104F2 =00000004                M 	__sp:	= __sp+4
000104F2 =00000027                M 	__pos:	set instr(__pos+1,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>",'%<')
000104F2 =00000035                M 	__endpos:	set instr(__pos+1,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>",'>')
000104F2 =00000000                M 	__midpos:	set instr(__pos+5,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>",' ')
000104F2 =00000035                M 	__midpos:	= __endpos
000104F2                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>"
000104F2                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>"
000104F2 =00000000                M 	__pos:	set instr(__pos+1,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>",'%<')
000104F2                          M 	rept	__stack
000104F2                          M 	popp	__command
000104F2 2F0C                     M 	move.l	a4,-(sp)
000104F4 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
000104F8 45EF 0010                M 	lea	4*4(sp),a2
000104FC 43FA 0000                M 	lea	.str_210(pc),a1
00010500 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_writeline_formatted
00010506 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
0001050A 584F                     M 	addq.w	#__sp,sp
0001050C 46DF                     M 	move.w	(sp)+,sr
0001050E 6000 0000                M 	bra.w	.instr_end_210
00010512                          M 	.str_210:
00010512                          M 	__fstring_generatedecodedstring	"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>"
00010512 =00000001                M 	__lpos:	set 1
00010512 =00000001                M 	__pos:	set instr("%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>",'%<')
00010512                          M 	while	(__pos)
00010512                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>"
00010512                          M 	dc.b	""
00010512 =00000007                M 	__endpos:	set instr(__pos+1,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>",'>')
00010512 =0000000D                M 	__midpos:	set instr(__pos+5,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>",' ')
00010512 =00000007                M 	__midpos:	= __endpos
00010512                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>"
00010512                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>"
00010512 EA                       M 	dc.b	pal1
00010513 =00000008                M 	__lpos:	set __endpos+1
00010513 =0000000E                M 	__pos:	set instr(__pos+1,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>",'%<')
00010513                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>"
00010513 4164 6472 3A20           M 	dc.b	"Addr: "
00010519 =00000014                M 	__endpos:	set instr(__pos+1,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>",'>')
00010519 =00000019                M 	__midpos:	set instr(__pos+5,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>",' ')
00010519 =00000014                M 	__midpos:	= __endpos
00010519                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>"
00010519                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>"
00010519 E8                       M 	dc.b	pal0
0001051A =00000015                M 	__lpos:	set __endpos+1
0001051A =00000015                M 	__pos:	set instr(__pos+1,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>",'%<')
0001051A                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>"
0001051A                          M 	dc.b	""
0001051A =00000026                M 	__endpos:	set instr(__pos+1,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>",'>')
0001051A =0000001C                M 	__midpos:	set instr(__pos+5,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>",' ')
0001051A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>"
0001051A                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>"
0001051A BB                       M 	dc.b	sym|split|3
0001051B =00000027                M 	__lpos:	set __endpos+1
0001051B =00000027                M 	__pos:	set instr(__pos+1,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>",'%<')
0001051B                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>"
0001051B                          M 	dc.b	""
0001051B =00000035                M 	__endpos:	set instr(__pos+1,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>",'>')
0001051B =00000000                M 	__midpos:	set instr(__pos+5,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>",' ')
0001051B =00000035                M 	__midpos:	= __endpos
0001051B                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>"
0001051B                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>"
0001051B ECC0                     M 	dc.b	pal2,symdisp
0001051D =00000036                M 	__lpos:	set __endpos+1
0001051D =00000000                M 	__pos:	set instr(__pos+1,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>",'%<')
0001051D                          M 	__substr:	substr __lpos,,"%<pal1>Addr: %<pal0>%<.l a4 sym|split>%<pal2,symdisp>"
0001051D                          M 	dc.b	""
0001051D 00                       M 	dc.b	0
0001051E                          M 	even
0001051E                          M 	.instr_end_210:
0001051E                            ; fmt: flag, type, pan, det, pitch, vol, tick, sample/voice, dur, lastdur, freq
0001051E                            	Console.Write	  "%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> "
0001051E 40E7                     M 	move.w	sr,-(sp)
00010520                          M 	__fstring_generateargumentscode	"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> "
00010520 =00000001                M 	__pos:	set instr("%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> ",'%<')
00010520 =00000000                M 	__stack:set	0
00010520 =00000000                M 	__sp:	set 0
00010520                          M 	while	(__pos)
00010520 =00000007                M 	__endpos:	set instr(__pos+1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> ",'>')
00010520 =0000000B                M 	__midpos:	set instr(__pos+5,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> ",' ')
00010520 =00000007                M 	__midpos:	= __endpos
00010520                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> "
00010520                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> "
00010520 =0000000C                M 	__pos:	set instr(__pos+1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> ",'%<')
00010520 =00000012                M 	__endpos:	set instr(__pos+1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> ",'>')
00010520 =00000017                M 	__midpos:	set instr(__pos+5,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> ",' ')
00010520 =00000012                M 	__midpos:	= __endpos
00010520                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> "
00010520                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> "
00010520 =00000013                M 	__pos:	set instr(__pos+1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> ",'%<')
00010520 =0000001C                M 	__endpos:	set instr(__pos+1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> ",'>')
00010520 =0000001D                M 	__midpos:	set instr(__pos+5,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> ",' ')
00010520 =0000001C                M 	__midpos:	= __endpos
00010520                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> "
00010520                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> "
00010520                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> "
00010520                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> "
00010520                          M 	pushp	"move.b (a5),1(sp)"
00010520                          M 	pushp	"subq.w	#2, sp"
00010520 =00000002                M 	__stack:	= __stack+2
00010520 =00000002                M 	__sp:	= __sp+2
00010520 =0000001E                M 	__pos:	set instr(__pos+1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> ",'%<')
00010520 =0000002C                M 	__endpos:	set instr(__pos+1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> ",'>')
00010520 =0000002D                M 	__midpos:	set instr(__pos+5,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> ",' ')
00010520 =0000002C                M 	__midpos:	= __endpos
00010520                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> "
00010520                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> "
00010520                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> "
00010520                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> "
00010520                          M 	pushp	"move.b cType(a5),1(sp)"
00010520                          M 	pushp	"subq.w	#2, sp"
00010520 =00000004                M 	__stack:	= __stack+2
00010520 =00000004                M 	__sp:	= __sp+2
00010520 =0000002E                M 	__pos:	set instr(__pos+1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> ",'%<')
00010520 =0000003F                M 	__endpos:	set instr(__pos+1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> ",'>')
00010520 =00000040                M 	__midpos:	set instr(__pos+5,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> ",' ')
00010520 =0000003F                M 	__midpos:	= __endpos
00010520                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> "
00010520                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> "
00010520                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> "
00010520                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> "
00010520                          M 	pushp	"move.b cPanning(a5),1(sp)"
00010520                          M 	pushp	"subq.w	#2, sp"
00010520 =00000006                M 	__stack:	= __stack+2
00010520 =00000006                M 	__sp:	= __sp+2
00010520 =00000000                M 	__pos:	set instr(__pos+1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> ",'%<')
00010520                          M 	rept	__stack
00010520                          M 	popp	__command
00010520 554F                     M 	subq.w	#2,sp
00010522                          M 	popp	__command
00010522 1F6D 0006 0001           M 	move.b	cpanning(a5),1(sp)
00010528                          M 	popp	__command
00010528 554F                     M 	subq.w	#2,sp
0001052A                          M 	popp	__command
0001052A 1F6D 0001 0001           M 	move.b	ctype(a5),1(sp)
00010530                          M 	popp	__command
00010530 554F                     M 	subq.w	#2,sp
00010532                          M 	popp	__command
00010532 1F55 0001                M 	move.b	(a5),1(sp)
00010536 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
0001053A 45EF 0010                M 	lea	4*4(sp),a2
0001053E 43FA 0000                M 	lea	.str_213(pc),a1
00010542 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_write_formatted
00010548 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
0001054C 5C4F                     M 	addq.w	#__sp,sp
0001054E 46DF                     M 	move.w	(sp)+,sr
00010550 6000 0000                M 	bra.w	.instr_end_213
00010554                          M 	.str_213:
00010554                          M 	__fstring_generatedecodedstring	"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> "
00010554 =00000001                M 	__lpos:	set 1
00010554 =00000001                M 	__pos:	set instr("%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> ",'%<')
00010554                          M 	while	(__pos)
00010554                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> "
00010554                          M 	dc.b	""
00010554 =00000007                M 	__endpos:	set instr(__pos+1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> ",'>')
00010554 =0000000B                M 	__midpos:	set instr(__pos+5,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> ",' ')
00010554 =00000007                M 	__midpos:	= __endpos
00010554                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> "
00010554                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> "
00010554 EA                       M 	dc.b	pal1
00010555 =00000008                M 	__lpos:	set __endpos+1
00010555 =0000000C                M 	__pos:	set instr(__pos+1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> ",'%<')
00010555                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> "
00010555 4348 3A20                M 	dc.b	"CH: "
00010559 =00000012                M 	__endpos:	set instr(__pos+1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> ",'>')
00010559 =00000017                M 	__midpos:	set instr(__pos+5,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> ",' ')
00010559 =00000012                M 	__midpos:	= __endpos
00010559                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> "
00010559                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> "
00010559 EC                       M 	dc.b	pal2
0001055A =00000013                M 	__lpos:	set __endpos+1
0001055A =00000013                M 	__pos:	set instr(__pos+1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> ",'%<')
0001055A                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> "
0001055A                          M 	dc.b	""
0001055A =0000001C                M 	__endpos:	set instr(__pos+1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> ",'>')
0001055A =0000001D                M 	__midpos:	set instr(__pos+5,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> ",' ')
0001055A =0000001C                M 	__midpos:	= __endpos
0001055A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> "
0001055A                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> "
0001055A                          M 	__param:	substr ,,"hex"
0001055A 80                       M 	dc.b	hex
0001055B =0000001D                M 	__lpos:	set __endpos+1
0001055B =0000001E                M 	__pos:	set instr(__pos+1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> ",'%<')
0001055B                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> "
0001055B 20                       M 	dc.b	" "
0001055C =0000002C                M 	__endpos:	set instr(__pos+1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> ",'>')
0001055C =0000002D                M 	__midpos:	set instr(__pos+5,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> ",' ')
0001055C =0000002C                M 	__midpos:	= __endpos
0001055C                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> "
0001055C                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> "
0001055C                          M 	__param:	substr ,,"hex"
0001055C 80                       M 	dc.b	hex
0001055D =0000002D                M 	__lpos:	set __endpos+1
0001055D =0000002E                M 	__pos:	set instr(__pos+1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> ",'%<')
0001055D                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> "
0001055D 20                       M 	dc.b	" "
0001055E =0000003F                M 	__endpos:	set instr(__pos+1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> ",'>')
0001055E =00000040                M 	__midpos:	set instr(__pos+5,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> ",' ')
0001055E =0000003F                M 	__midpos:	= __endpos
0001055E                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> "
0001055E                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> "
0001055E                          M 	__param:	substr ,,"hex"
0001055E 80                       M 	dc.b	hex
0001055F =00000040                M 	__lpos:	set __endpos+1
0001055F =00000000                M 	__pos:	set instr(__pos+1,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> ",'%<')
0001055F                          M 	__substr:	substr __lpos,,"%<pal1>CH: %<pal2>%<.b (a5)> %<.b cType(a5)> %<.b cPanning(a5)> "
0001055F 20                       M 	dc.b	" "
00010560 00                       M 	dc.b	0
00010562 00                       M 	even
00010562                          M 	.instr_end_213:
00010562                            	Console.Write	  "%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> "
00010562 40E7                     M 	move.w	sr,-(sp)
00010564                          M 	__fstring_generateargumentscode	"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> "
00010564 =00000001                M 	__pos:	set instr("%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> ",'%<')
00010564 =00000000                M 	__stack:set	0
00010564 =00000000                M 	__sp:	set 0
00010564                          M 	while	(__pos)
00010564 =00000011                M 	__endpos:	set instr(__pos+1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> ",'>')
00010564 =00000012                M 	__midpos:	set instr(__pos+5,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> ",' ')
00010564 =00000011                M 	__midpos:	= __endpos
00010564                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> "
00010564                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> "
00010564                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> "
00010564                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> "
00010564                          M 	pushp	"move.b cDetune(a5),1(sp)"
00010564                          M 	pushp	"subq.w	#2, sp"
00010564 =00000002                M 	__stack:	= __stack+2
00010564 =00000002                M 	__sp:	= __sp+2
00010564 =00000013                M 	__pos:	set instr(__pos+1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> ",'%<')
00010564 =00000022                M 	__endpos:	set instr(__pos+1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> ",'>')
00010564 =00000023                M 	__midpos:	set instr(__pos+5,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> ",' ')
00010564 =00000022                M 	__midpos:	= __endpos
00010564                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> "
00010564                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> "
00010564                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> "
00010564                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> "
00010564                          M 	pushp	"move.b cPitch(a5),1(sp)"
00010564                          M 	pushp	"subq.w	#2, sp"
00010564 =00000004                M 	__stack:	= __stack+2
00010564 =00000004                M 	__sp:	= __sp+2
00010564 =00000024                M 	__pos:	set instr(__pos+1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> ",'%<')
00010564 =00000034                M 	__endpos:	set instr(__pos+1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> ",'>')
00010564 =00000035                M 	__midpos:	set instr(__pos+5,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> ",' ')
00010564 =00000034                M 	__midpos:	= __endpos
00010564                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> "
00010564                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> "
00010564                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> "
00010564                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> "
00010564                          M 	pushp	"move.b cVolume(a5),1(sp)"
00010564                          M 	pushp	"subq.w	#2, sp"
00010564 =00000006                M 	__stack:	= __stack+2
00010564 =00000006                M 	__sp:	= __sp+2
00010564 =00000036                M 	__pos:	set instr(__pos+1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> ",'%<')
00010564 =00000044                M 	__endpos:	set instr(__pos+1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> ",'>')
00010564 =00000045                M 	__midpos:	set instr(__pos+5,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> ",' ')
00010564 =00000044                M 	__midpos:	= __endpos
00010564                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> "
00010564                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> "
00010564                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> "
00010564                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> "
00010564                          M 	pushp	"move.b cTick(a5),1(sp)"
00010564                          M 	pushp	"subq.w	#2, sp"
00010564 =00000008                M 	__stack:	= __stack+2
00010564 =00000008                M 	__sp:	= __sp+2
00010564 =00000000                M 	__pos:	set instr(__pos+1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> ",'%<')
00010564                          M 	rept	__stack
00010564                          M 	popp	__command
00010564 554F                     M 	subq.w	#2,sp
00010566                          M 	popp	__command
00010566 1F6D 000A 0001           M 	move.b	ctick(a5),1(sp)
0001056C                          M 	popp	__command
0001056C 554F                     M 	subq.w	#2,sp
0001056E                          M 	popp	__command
0001056E 1F6D 0009 0001           M 	move.b	cvolume(a5),1(sp)
00010574                          M 	popp	__command
00010574 554F                     M 	subq.w	#2,sp
00010576                          M 	popp	__command
00010576 1F6D 0008 0001           M 	move.b	cpitch(a5),1(sp)
0001057C                          M 	popp	__command
0001057C 554F                     M 	subq.w	#2,sp
0001057E                          M 	popp	__command
0001057E 1F6D 0007 0001           M 	move.b	cdetune(a5),1(sp)
00010584 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
00010588 45EF 0010                M 	lea	4*4(sp),a2
0001058C 43FA 0000                M 	lea	.str_216(pc),a1
00010590 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_write_formatted
00010596 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
0001059A 504F                     M 	addq.w	#__sp,sp
0001059C 46DF                     M 	move.w	(sp)+,sr
0001059E 6000 0000                M 	bra.w	.instr_end_216
000105A2                          M 	.str_216:
000105A2                          M 	__fstring_generatedecodedstring	"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> "
000105A2 =00000001                M 	__lpos:	set 1
000105A2 =00000001                M 	__pos:	set instr("%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> ",'%<')
000105A2                          M 	while	(__pos)
000105A2                          M 	__substr:	substr __lpos,__pos-1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> "
000105A2                          M 	dc.b	""
000105A2 =00000011                M 	__endpos:	set instr(__pos+1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> ",'>')
000105A2 =00000012                M 	__midpos:	set instr(__pos+5,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> ",' ')
000105A2 =00000011                M 	__midpos:	= __endpos
000105A2                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> "
000105A2                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> "
000105A2                          M 	__param:	substr ,,"hex"
000105A2 80                       M 	dc.b	hex
000105A3 =00000012                M 	__lpos:	set __endpos+1
000105A3 =00000013                M 	__pos:	set instr(__pos+1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> ",'%<')
000105A3                          M 	__substr:	substr __lpos,__pos-1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> "
000105A3 20                       M 	dc.b	" "
000105A4 =00000022                M 	__endpos:	set instr(__pos+1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> ",'>')
000105A4 =00000023                M 	__midpos:	set instr(__pos+5,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> ",' ')
000105A4 =00000022                M 	__midpos:	= __endpos
000105A4                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> "
000105A4                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> "
000105A4                          M 	__param:	substr ,,"hex"
000105A4 80                       M 	dc.b	hex
000105A5 =00000023                M 	__lpos:	set __endpos+1
000105A5 =00000024                M 	__pos:	set instr(__pos+1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> ",'%<')
000105A5                          M 	__substr:	substr __lpos,__pos-1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> "
000105A5 20                       M 	dc.b	" "
000105A6 =00000034                M 	__endpos:	set instr(__pos+1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> ",'>')
000105A6 =00000035                M 	__midpos:	set instr(__pos+5,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> ",' ')
000105A6 =00000034                M 	__midpos:	= __endpos
000105A6                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> "
000105A6                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> "
000105A6                          M 	__param:	substr ,,"hex"
000105A6 80                       M 	dc.b	hex
000105A7 =00000035                M 	__lpos:	set __endpos+1
000105A7 =00000036                M 	__pos:	set instr(__pos+1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> ",'%<')
000105A7                          M 	__substr:	substr __lpos,__pos-1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> "
000105A7 20                       M 	dc.b	" "
000105A8 =00000044                M 	__endpos:	set instr(__pos+1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> ",'>')
000105A8 =00000045                M 	__midpos:	set instr(__pos+5,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> ",' ')
000105A8 =00000044                M 	__midpos:	= __endpos
000105A8                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> "
000105A8                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> "
000105A8                          M 	__param:	substr ,,"hex"
000105A8 80                       M 	dc.b	hex
000105A9 =00000045                M 	__lpos:	set __endpos+1
000105A9 =00000000                M 	__pos:	set instr(__pos+1,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> ",'%<')
000105A9                          M 	__substr:	substr __lpos,,"%<.b cDetune(a5)> %<.b cPitch(a5)> %<.b cVolume(a5)> %<.b cTick(a5)> "
000105A9 20                       M 	dc.b	" "
000105AA 00                       M 	dc.b	0
000105AC 00                       M 	even
000105AC                          M 	.instr_end_216:
000105AC                            	Console.WriteLine "%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>"
000105AC 40E7                     M 	move.w	sr,-(sp)
000105AE                          M 	__fstring_generateargumentscode	"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>"
000105AE =00000001                M 	__pos:	set instr("%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>",'%<')
000105AE =00000000                M 	__stack:set	0
000105AE =00000000                M 	__sp:	set 0
000105AE                          M 	while	(__pos)
000105AE =00000011                M 	__endpos:	set instr(__pos+1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>",'>')
000105AE =00000012                M 	__midpos:	set instr(__pos+5,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>",' ')
000105AE =00000011                M 	__midpos:	= __endpos
000105AE                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>"
000105AE                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>"
000105AE                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>"
000105AE                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>"
000105AE                          M 	pushp	"move.b cSample(a5),1(sp)"
000105AE                          M 	pushp	"subq.w	#2, sp"
000105AE =00000002                M 	__stack:	= __stack+2
000105AE =00000002                M 	__sp:	= __sp+2
000105AE =00000013                M 	__pos:	set instr(__pos+1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>",'%<')
000105AE =00000025                M 	__endpos:	set instr(__pos+1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>",'>')
000105AE =00000026                M 	__midpos:	set instr(__pos+5,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>",' ')
000105AE =00000025                M 	__midpos:	= __endpos
000105AE                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>"
000105AE                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>"
000105AE                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>"
000105AE                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>"
000105AE                          M 	pushp	"move.b cDuration(a5),1(sp)"
000105AE                          M 	pushp	"subq.w	#2, sp"
000105AE =00000004                M 	__stack:	= __stack+2
000105AE =00000004                M 	__sp:	= __sp+2
000105AE =00000027                M 	__pos:	set instr(__pos+1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>",'%<')
000105AE =00000038                M 	__endpos:	set instr(__pos+1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>",'>')
000105AE =00000039                M 	__midpos:	set instr(__pos+5,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>",' ')
000105AE =00000038                M 	__midpos:	= __endpos
000105AE                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>"
000105AE                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>"
000105AE                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>"
000105AE                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>"
000105AE                          M 	pushp	"move.b cLastDur(a5),1(sp)"
000105AE                          M 	pushp	"subq.w	#2, sp"
000105AE =00000006                M 	__stack:	= __stack+2
000105AE =00000006                M 	__sp:	= __sp+2
000105AE =0000003A                M 	__pos:	set instr(__pos+1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>",'%<')
000105AE =00000048                M 	__endpos:	set instr(__pos+1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>",'>')
000105AE =00000000                M 	__midpos:	set instr(__pos+5,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>",' ')
000105AE =00000048                M 	__midpos:	= __endpos
000105AE                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>"
000105AE                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>"
000105AE                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>"
000105AE                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>"
000105AE                          M 	pushp	"move.w cFreq(a5),-(sp)"
000105AE =00000007                M 	__stack:	= __stack+1
000105AE =00000008                M 	__sp:	= __sp+2
000105AE =00000000                M 	__pos:	set instr(__pos+1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>",'%<')
000105AE                          M 	rept	__stack
000105AE                          M 	popp	__command
000105AE 3F2D 000E                M 	move.w	cfreq(a5),-(sp)
000105B2                          M 	popp	__command
000105B2 554F                     M 	subq.w	#2,sp
000105B4                          M 	popp	__command
000105B4 1F6D 000D 0001           M 	move.b	clastdur(a5),1(sp)
000105BA                          M 	popp	__command
000105BA 554F                     M 	subq.w	#2,sp
000105BC                          M 	popp	__command
000105BC 1F6D 000C 0001           M 	move.b	cduration(a5),1(sp)
000105C2                          M 	popp	__command
000105C2 554F                     M 	subq.w	#2,sp
000105C4                          M 	popp	__command
000105C4 1F6D 000B 0001           M 	move.b	csample(a5),1(sp)
000105CA 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
000105CE 45EF 0010                M 	lea	4*4(sp),a2
000105D2 43FA 0000                M 	lea	.str_219(pc),a1
000105D6 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_writeline_formatted
000105DC 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
000105E0 504F                     M 	addq.w	#__sp,sp
000105E2 46DF                     M 	move.w	(sp)+,sr
000105E4 6000 0000                M 	bra.w	.instr_end_219
000105E8                          M 	.str_219:
000105E8                          M 	__fstring_generatedecodedstring	"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>"
000105E8 =00000001                M 	__lpos:	set 1
000105E8 =00000001                M 	__pos:	set instr("%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>",'%<')
000105E8                          M 	while	(__pos)
000105E8                          M 	__substr:	substr __lpos,__pos-1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>"
000105E8                          M 	dc.b	""
000105E8 =00000011                M 	__endpos:	set instr(__pos+1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>",'>')
000105E8 =00000012                M 	__midpos:	set instr(__pos+5,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>",' ')
000105E8 =00000011                M 	__midpos:	= __endpos
000105E8                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>"
000105E8                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>"
000105E8                          M 	__param:	substr ,,"hex"
000105E8 80                       M 	dc.b	hex
000105E9 =00000012                M 	__lpos:	set __endpos+1
000105E9 =00000013                M 	__pos:	set instr(__pos+1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>",'%<')
000105E9                          M 	__substr:	substr __lpos,__pos-1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>"
000105E9 20                       M 	dc.b	" "
000105EA =00000025                M 	__endpos:	set instr(__pos+1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>",'>')
000105EA =00000026                M 	__midpos:	set instr(__pos+5,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>",' ')
000105EA =00000025                M 	__midpos:	= __endpos
000105EA                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>"
000105EA                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>"
000105EA                          M 	__param:	substr ,,"hex"
000105EA 80                       M 	dc.b	hex
000105EB =00000026                M 	__lpos:	set __endpos+1
000105EB =00000027                M 	__pos:	set instr(__pos+1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>",'%<')
000105EB                          M 	__substr:	substr __lpos,__pos-1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>"
000105EB 20                       M 	dc.b	" "
000105EC =00000038                M 	__endpos:	set instr(__pos+1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>",'>')
000105EC =00000039                M 	__midpos:	set instr(__pos+5,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>",' ')
000105EC =00000038                M 	__midpos:	= __endpos
000105EC                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>"
000105EC                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>"
000105EC                          M 	__param:	substr ,,"hex"
000105EC 80                       M 	dc.b	hex
000105ED =00000039                M 	__lpos:	set __endpos+1
000105ED =0000003A                M 	__pos:	set instr(__pos+1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>",'%<')
000105ED                          M 	__substr:	substr __lpos,__pos-1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>"
000105ED 20                       M 	dc.b	" "
000105EE =00000048                M 	__endpos:	set instr(__pos+1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>",'>')
000105EE =00000000                M 	__midpos:	set instr(__pos+5,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>",' ')
000105EE =00000048                M 	__midpos:	= __endpos
000105EE                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>"
000105EE                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>"
000105EE                          M 	__param:	substr ,,"hex"
000105EE 81                       M 	dc.b	hex|1
000105EF =00000049                M 	__lpos:	set __endpos+1
000105EF =00000000                M 	__pos:	set instr(__pos+1,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>",'%<')
000105EF                          M 	__substr:	substr __lpos,,"%<.b cSample(a5)> %<.b cDuration(a5)> %<.b cLastDur(a5)> %<.w cFreq(a5)>"
000105EF                          M 	dc.b	""
000105EF 00                       M 	dc.b	0
000105F0                          M 	even
000105F0                          M 	.instr_end_219:
000105F0                            	Console.BreakLine
000105F0 40E7                     M 	move.w	sr,-(sp)
000105F2 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_startnewline
000105F8 46DF                     M 	move.w	(sp)+,sr
000105FA                            
000105FA                            	Console.WriteLine "%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>"
000105FA 40E7                     M 	move.w	sr,-(sp)
000105FC                          M 	__fstring_generateargumentscode	"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>"
000105FC =00000001                M 	__pos:	set instr("%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>",'%<')
000105FC =00000000                M 	__stack:set	0
000105FC =00000000                M 	__sp:	set 0
000105FC                          M 	while	(__pos)
000105FC =00000007                M 	__endpos:	set instr(__pos+1,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>",'>')
000105FC =0000000C                M 	__midpos:	set instr(__pos+5,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>",' ')
000105FC =00000007                M 	__midpos:	= __endpos
000105FC                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>"
000105FC                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>"
000105FC =0000000D                M 	__pos:	set instr(__pos+1,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>",'%<')
000105FC =00000013                M 	__endpos:	set instr(__pos+1,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>",'>')
000105FC =00000018                M 	__midpos:	set instr(__pos+5,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>",' ')
000105FC =00000013                M 	__midpos:	= __endpos
000105FC                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>"
000105FC                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>"
000105FC =00000014                M 	__pos:	set instr(__pos+1,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>",'%<')
000105FC =0000002B                M 	__endpos:	set instr(__pos+1,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>",'>')
000105FC =00000021                M 	__midpos:	set instr(__pos+5,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>",' ')
000105FC                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>"
000105FC                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>"
000105FC                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>"
000105FC                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>"
000105FC                          M 	pushp	"move.l cMod(a5),-(sp)"
000105FC =00000001                M 	__stack:	= __stack+1
000105FC =00000004                M 	__sp:	= __sp+4
000105FC =0000002C                M 	__pos:	set instr(__pos+1,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>",'%<')
000105FC =0000003A                M 	__endpos:	set instr(__pos+1,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>",'>')
000105FC =00000000                M 	__midpos:	set instr(__pos+5,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>",' ')
000105FC =0000003A                M 	__midpos:	= __endpos
000105FC                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>"
000105FC                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>"
000105FC =00000000                M 	__pos:	set instr(__pos+1,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>",'%<')
000105FC                          M 	rept	__stack
000105FC                          M 	popp	__command
000105FC 2F2D 0010                M 	move.l	cmod(a5),-(sp)
00010600 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
00010604 45EF 0010                M 	lea	4*4(sp),a2
00010608 43FA 0000                M 	lea	.str_223(pc),a1
0001060C 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_writeline_formatted
00010612 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
00010616 584F                     M 	addq.w	#__sp,sp
00010618 46DF                     M 	move.w	(sp)+,sr
0001061A 6000 0000                M 	bra.w	.instr_end_223
0001061E                          M 	.str_223:
0001061E                          M 	__fstring_generatedecodedstring	"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>"
0001061E =00000001                M 	__lpos:	set 1
0001061E =00000001                M 	__pos:	set instr("%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>",'%<')
0001061E                          M 	while	(__pos)
0001061E                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>"
0001061E                          M 	dc.b	""
0001061E =00000007                M 	__endpos:	set instr(__pos+1,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>",'>')
0001061E =0000000C                M 	__midpos:	set instr(__pos+5,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>",' ')
0001061E =00000007                M 	__midpos:	= __endpos
0001061E                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>"
0001061E                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>"
0001061E EA                       M 	dc.b	pal1
0001061F =00000008                M 	__lpos:	set __endpos+1
0001061F =0000000D                M 	__pos:	set instr(__pos+1,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>",'%<')
0001061F                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>"
0001061F 4D6F 643A 20             M 	dc.b	"Mod: "
00010624 =00000013                M 	__endpos:	set instr(__pos+1,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>",'>')
00010624 =00000018                M 	__midpos:	set instr(__pos+5,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>",' ')
00010624 =00000013                M 	__midpos:	= __endpos
00010624                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>"
00010624                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>"
00010624 E8                       M 	dc.b	pal0
00010625 =00000014                M 	__lpos:	set __endpos+1
00010625 =00000014                M 	__pos:	set instr(__pos+1,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>",'%<')
00010625                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>"
00010625                          M 	dc.b	""
00010625 =0000002B                M 	__endpos:	set instr(__pos+1,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>",'>')
00010625 =00000021                M 	__midpos:	set instr(__pos+5,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>",' ')
00010625                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>"
00010625                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>"
00010625 BB                       M 	dc.b	sym|split|3
00010626 =0000002C                M 	__lpos:	set __endpos+1
00010626 =0000002C                M 	__pos:	set instr(__pos+1,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>",'%<')
00010626                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>"
00010626                          M 	dc.b	""
00010626 =0000003A                M 	__endpos:	set instr(__pos+1,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>",'>')
00010626 =00000000                M 	__midpos:	set instr(__pos+5,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>",' ')
00010626 =0000003A                M 	__midpos:	= __endpos
00010626                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>"
00010626                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>"
00010626 ECC0                     M 	dc.b	pal2,symdisp
00010628 =0000003B                M 	__lpos:	set __endpos+1
00010628 =00000000                M 	__pos:	set instr(__pos+1,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>",'%<')
00010628                          M 	__substr:	substr __lpos,,"%<pal1>Mod: %<pal0>%<.l cMod(a5) sym|split>%<pal2,symdisp>"
00010628                          M 	dc.b	""
00010628 00                       M 	dc.b	0
0001062A 00                       M 	even
0001062A                          M 	.instr_end_223:
0001062A                            	Console.Write	  "%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> "
0001062A 40E7                     M 	move.w	sr,-(sp)
0001062C                          M 	__fstring_generateargumentscode	"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> "
0001062C =00000001                M 	__pos:	set instr("%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> ",'%<')
0001062C =00000000                M 	__stack:set	0
0001062C =00000000                M 	__sp:	set 0
0001062C                          M 	while	(__pos)
0001062C =00000007                M 	__endpos:	set instr(__pos+1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> ",'>')
0001062C =0000000B                M 	__midpos:	set instr(__pos+5,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> ",' ')
0001062C =00000007                M 	__midpos:	= __endpos
0001062C                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> "
0001062C                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> "
0001062C =00000012                M 	__pos:	set instr(__pos+1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> ",'%<')
0001062C =00000018                M 	__endpos:	set instr(__pos+1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> ",'>')
0001062C =0000001D                M 	__midpos:	set instr(__pos+5,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> ",' ')
0001062C =00000018                M 	__midpos:	= __endpos
0001062C                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> "
0001062C                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> "
0001062C =00000019                M 	__pos:	set instr(__pos+1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> ",'%<')
0001062C =0000002B                M 	__endpos:	set instr(__pos+1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> ",'>')
0001062C =0000002C                M 	__midpos:	set instr(__pos+5,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> ",' ')
0001062C =0000002B                M 	__midpos:	= __endpos
0001062C                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> "
0001062C                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> "
0001062C                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> "
0001062C                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> "
0001062C                          M 	pushp	"move.b cModDelay(a5),1(sp)"
0001062C                          M 	pushp	"subq.w	#2, sp"
0001062C =00000002                M 	__stack:	= __stack+2
0001062C =00000002                M 	__sp:	= __sp+2
0001062C =0000002D                M 	__pos:	set instr(__pos+1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> ",'%<')
0001062C =00000033                M 	__endpos:	set instr(__pos+1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> ",'>')
0001062C =00000038                M 	__midpos:	set instr(__pos+5,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> ",' ')
0001062C =00000033                M 	__midpos:	= __endpos
0001062C                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> "
0001062C                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> "
0001062C =00000034                M 	__pos:	set instr(__pos+1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> ",'%<')
0001062C =00000045                M 	__endpos:	set instr(__pos+1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> ",'>')
0001062C =00000046                M 	__midpos:	set instr(__pos+5,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> ",' ')
0001062C =00000045                M 	__midpos:	= __endpos
0001062C                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> "
0001062C                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> "
0001062C                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> "
0001062C                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> "
0001062C                          M 	pushp	"move.w cModFreq(a5),-(sp)"
0001062C =00000003                M 	__stack:	= __stack+1
0001062C =00000004                M 	__sp:	= __sp+2
0001062C =00000000                M 	__pos:	set instr(__pos+1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> ",'%<')
0001062C                          M 	rept	__stack
0001062C                          M 	popp	__command
0001062C 3F2D 0014                M 	move.w	cmodfreq(a5),-(sp)
00010630                          M 	popp	__command
00010630 554F                     M 	subq.w	#2,sp
00010632                          M 	popp	__command
00010632 1F6D 0010 0001           M 	move.b	cmoddelay(a5),1(sp)
00010638 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
0001063C 45EF 0010                M 	lea	4*4(sp),a2
00010640 43FA 0000                M 	lea	.str_226(pc),a1
00010644 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_write_formatted
0001064A 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
0001064E 584F                     M 	addq.w	#__sp,sp
00010650 46DF                     M 	move.w	(sp)+,sr
00010652 6000 0000                M 	bra.w	.instr_end_226
00010656                          M 	.str_226:
00010656                          M 	__fstring_generatedecodedstring	"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> "
00010656 =00000001                M 	__lpos:	set 1
00010656 =00000001                M 	__pos:	set instr("%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> ",'%<')
00010656                          M 	while	(__pos)
00010656                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> "
00010656                          M 	dc.b	""
00010656 =00000007                M 	__endpos:	set instr(__pos+1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> ",'>')
00010656 =0000000B                M 	__midpos:	set instr(__pos+5,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> ",' ')
00010656 =00000007                M 	__midpos:	= __endpos
00010656                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> "
00010656                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> "
00010656 EA                       M 	dc.b	pal1
00010657 =00000008                M 	__lpos:	set __endpos+1
00010657 =00000012                M 	__pos:	set instr(__pos+1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> ",'%<')
00010657                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> "
00010657 4D6F 6420 4461 7461 3A20 M 	dc.b	"Mod Data: "
00010661 =00000018                M 	__endpos:	set instr(__pos+1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> ",'>')
00010661 =0000001D                M 	__midpos:	set instr(__pos+5,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> ",' ')
00010661 =00000018                M 	__midpos:	= __endpos
00010661                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> "
00010661                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> "
00010661 EC                       M 	dc.b	pal2
00010662 =00000019                M 	__lpos:	set __endpos+1
00010662 =00000019                M 	__pos:	set instr(__pos+1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> ",'%<')
00010662                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> "
00010662                          M 	dc.b	""
00010662 =0000002B                M 	__endpos:	set instr(__pos+1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> ",'>')
00010662 =0000002C                M 	__midpos:	set instr(__pos+5,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> ",' ')
00010662 =0000002B                M 	__midpos:	= __endpos
00010662                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> "
00010662                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> "
00010662                          M 	__param:	substr ,,"hex"
00010662 80                       M 	dc.b	hex
00010663 =0000002C                M 	__lpos:	set __endpos+1
00010663 =0000002D                M 	__pos:	set instr(__pos+1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> ",'%<')
00010663                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> "
00010663 20                       M 	dc.b	" "
00010664 =00000033                M 	__endpos:	set instr(__pos+1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> ",'>')
00010664 =00000038                M 	__midpos:	set instr(__pos+5,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> ",' ')
00010664 =00000033                M 	__midpos:	= __endpos
00010664                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> "
00010664                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> "
00010664 EC                       M 	dc.b	pal2
00010665 =00000034                M 	__lpos:	set __endpos+1
00010665 =00000034                M 	__pos:	set instr(__pos+1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> ",'%<')
00010665                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> "
00010665                          M 	dc.b	""
00010665 =00000045                M 	__endpos:	set instr(__pos+1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> ",'>')
00010665 =00000046                M 	__midpos:	set instr(__pos+5,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> ",' ')
00010665 =00000045                M 	__midpos:	= __endpos
00010665                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> "
00010665                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> "
00010665                          M 	__param:	substr ,,"hex"
00010665 81                       M 	dc.b	hex|1
00010666 =00000046                M 	__lpos:	set __endpos+1
00010666 =00000000                M 	__pos:	set instr(__pos+1,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> ",'%<')
00010666                          M 	__substr:	substr __lpos,,"%<pal1>Mod Data: %<pal2>%<.b cModDelay(a5)> %<pal2>%<.w cModFreq(a5)> "
00010666 20                       M 	dc.b	" "
00010667 00                       M 	dc.b	0
00010668                          M 	even
00010668                          M 	.instr_end_226:
00010668                            	Console.WriteLine "%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>"
00010668 40E7                     M 	move.w	sr,-(sp)
0001066A                          M 	__fstring_generateargumentscode	"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>"
0001066A =00000001                M 	__pos:	set instr("%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>",'%<')
0001066A =00000000                M 	__stack:set	0
0001066A =00000000                M 	__sp:	set 0
0001066A                          M 	while	(__pos)
0001066A =00000013                M 	__endpos:	set instr(__pos+1,"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>",'>')
0001066A =00000014                M 	__midpos:	set instr(__pos+5,"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>",' ')
0001066A =00000013                M 	__midpos:	= __endpos
0001066A                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>"
0001066A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>"
0001066A                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>"
0001066A                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>"
0001066A                          M 	pushp	"move.b cModSpeed(a5),1(sp)"
0001066A                          M 	pushp	"subq.w	#2, sp"
0001066A =00000002                M 	__stack:	= __stack+2
0001066A =00000002                M 	__sp:	= __sp+2
0001066A =00000015                M 	__pos:	set instr(__pos+1,"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>",'%<')
0001066A =00000026                M 	__endpos:	set instr(__pos+1,"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>",'>')
0001066A =00000027                M 	__midpos:	set instr(__pos+5,"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>",' ')
0001066A =00000026                M 	__midpos:	= __endpos
0001066A                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>"
0001066A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>"
0001066A                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>"
0001066A                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>"
0001066A                          M 	pushp	"move.b cModStep(a5),1(sp)"
0001066A                          M 	pushp	"subq.w	#2, sp"
0001066A =00000004                M 	__stack:	= __stack+2
0001066A =00000004                M 	__sp:	= __sp+2
0001066A =00000028                M 	__pos:	set instr(__pos+1,"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>",'%<')
0001066A =0000003A                M 	__endpos:	set instr(__pos+1,"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>",'>')
0001066A =00000000                M 	__midpos:	set instr(__pos+5,"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>",' ')
0001066A =0000003A                M 	__midpos:	= __endpos
0001066A                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>"
0001066A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>"
0001066A                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>"
0001066A                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>"
0001066A                          M 	pushp	"move.b cModCount(a5),1(sp)"
0001066A                          M 	pushp	"subq.w	#2, sp"
0001066A =00000006                M 	__stack:	= __stack+2
0001066A =00000006                M 	__sp:	= __sp+2
0001066A =00000000                M 	__pos:	set instr(__pos+1,"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>",'%<')
0001066A                          M 	rept	__stack
0001066A                          M 	popp	__command
0001066A 554F                     M 	subq.w	#2,sp
0001066C                          M 	popp	__command
0001066C 1F6D 0018 0001           M 	move.b	cmodcount(a5),1(sp)
00010672                          M 	popp	__command
00010672 554F                     M 	subq.w	#2,sp
00010674                          M 	popp	__command
00010674 1F6D 0017 0001           M 	move.b	cmodstep(a5),1(sp)
0001067A                          M 	popp	__command
0001067A 554F                     M 	subq.w	#2,sp
0001067C                          M 	popp	__command
0001067C 1F6D 0016 0001           M 	move.b	cmodspeed(a5),1(sp)
00010682 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
00010686 45EF 0010                M 	lea	4*4(sp),a2
0001068A 43FA 0000                M 	lea	.str_229(pc),a1
0001068E 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_writeline_formatted
00010694 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
00010698 5C4F                     M 	addq.w	#__sp,sp
0001069A 46DF                     M 	move.w	(sp)+,sr
0001069C 6000 0000                M 	bra.w	.instr_end_229
000106A0                          M 	.str_229:
000106A0                          M 	__fstring_generatedecodedstring	"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>"
000106A0 =00000001                M 	__lpos:	set 1
000106A0 =00000001                M 	__pos:	set instr("%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>",'%<')
000106A0                          M 	while	(__pos)
000106A0                          M 	__substr:	substr __lpos,__pos-1,"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>"
000106A0                          M 	dc.b	""
000106A0 =00000013                M 	__endpos:	set instr(__pos+1,"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>",'>')
000106A0 =00000014                M 	__midpos:	set instr(__pos+5,"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>",' ')
000106A0 =00000013                M 	__midpos:	= __endpos
000106A0                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>"
000106A0                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>"
000106A0                          M 	__param:	substr ,,"hex"
000106A0 80                       M 	dc.b	hex
000106A1 =00000014                M 	__lpos:	set __endpos+1
000106A1 =00000015                M 	__pos:	set instr(__pos+1,"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>",'%<')
000106A1                          M 	__substr:	substr __lpos,__pos-1,"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>"
000106A1 20                       M 	dc.b	" "
000106A2 =00000026                M 	__endpos:	set instr(__pos+1,"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>",'>')
000106A2 =00000027                M 	__midpos:	set instr(__pos+5,"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>",' ')
000106A2 =00000026                M 	__midpos:	= __endpos
000106A2                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>"
000106A2                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>"
000106A2                          M 	__param:	substr ,,"hex"
000106A2 80                       M 	dc.b	hex
000106A3 =00000027                M 	__lpos:	set __endpos+1
000106A3 =00000028                M 	__pos:	set instr(__pos+1,"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>",'%<')
000106A3                          M 	__substr:	substr __lpos,__pos-1,"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>"
000106A3 20                       M 	dc.b	" "
000106A4 =0000003A                M 	__endpos:	set instr(__pos+1,"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>",'>')
000106A4 =00000000                M 	__midpos:	set instr(__pos+5,"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>",' ')
000106A4 =0000003A                M 	__midpos:	= __endpos
000106A4                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>"
000106A4                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>"
000106A4                          M 	__param:	substr ,,"hex"
000106A4 80                       M 	dc.b	hex
000106A5 =0000003B                M 	__lpos:	set __endpos+1
000106A5 =00000000                M 	__pos:	set instr(__pos+1,"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>",'%<')
000106A5                          M 	__substr:	substr __lpos,,"%<.b cModSpeed(a5)> %<.b cModStep(a5)> %<.b cModCount(a5)>"
000106A5                          M 	dc.b	""
000106A5 00                       M 	dc.b	0
000106A6                          M 	even
000106A6                          M 	.instr_end_229:
000106A6                            	Console.BreakLine
000106A6 40E7                     M 	move.w	sr,-(sp)
000106A8 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_startnewline
000106AE 46DF                     M 	move.w	(sp)+,sr
000106B0                            
000106B0                            	Console.Write "%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> "
000106B0 40E7                     M 	move.w	sr,-(sp)
000106B2                          M 	__fstring_generateargumentscode	"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> "
000106B2 =00000001                M 	__pos:	set instr("%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> ",'%<')
000106B2 =00000000                M 	__stack:set	0
000106B2 =00000000                M 	__sp:	set 0
000106B2                          M 	while	(__pos)
000106B2 =00000007                M 	__endpos:	set instr(__pos+1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> ",'>')
000106B2 =0000000D                M 	__midpos:	set instr(__pos+5,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> ",' ')
000106B2 =00000007                M 	__midpos:	= __endpos
000106B2                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> "
000106B2                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> "
000106B2 =0000000E                M 	__pos:	set instr(__pos+1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> ",'%<')
000106B2 =00000014                M 	__endpos:	set instr(__pos+1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> ",'>')
000106B2 =00000019                M 	__midpos:	set instr(__pos+5,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> ",' ')
000106B2 =00000014                M 	__midpos:	= __endpos
000106B2                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> "
000106B2                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> "
000106B2 =00000015                M 	__pos:	set instr(__pos+1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> ",'%<')
000106B2 =00000023                M 	__endpos:	set instr(__pos+1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> ",'>')
000106B2 =00000024                M 	__midpos:	set instr(__pos+5,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> ",' ')
000106B2 =00000023                M 	__midpos:	= __endpos
000106B2                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> "
000106B2                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> "
000106B2                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> "
000106B2                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> "
000106B2                          M 	pushp	"move.b cLoop(a5),1(sp)"
000106B2                          M 	pushp	"subq.w	#2, sp"
000106B2 =00000002                M 	__stack:	= __stack+2
000106B2 =00000002                M 	__sp:	= __sp+2
000106B2 =00000025                M 	__pos:	set instr(__pos+1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> ",'%<')
000106B2 =00000035                M 	__endpos:	set instr(__pos+1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> ",'>')
000106B2 =00000036                M 	__midpos:	set instr(__pos+5,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> ",' ')
000106B2 =00000035                M 	__midpos:	= __endpos
000106B2                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> "
000106B2                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> "
000106B2                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> "
000106B2                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> "
000106B2                          M 	pushp	"move.b cLoop+1(a5),1(sp)"
000106B2                          M 	pushp	"subq.w	#2, sp"
000106B2 =00000004                M 	__stack:	= __stack+2
000106B2 =00000004                M 	__sp:	= __sp+2
000106B2 =00000037                M 	__pos:	set instr(__pos+1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> ",'%<')
000106B2 =00000047                M 	__endpos:	set instr(__pos+1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> ",'>')
000106B2 =00000048                M 	__midpos:	set instr(__pos+5,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> ",' ')
000106B2 =00000047                M 	__midpos:	= __endpos
000106B2                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> "
000106B2                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> "
000106B2                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> "
000106B2                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> "
000106B2                          M 	pushp	"move.b cLoop+2(a5),1(sp)"
000106B2                          M 	pushp	"subq.w	#2, sp"
000106B2 =00000006                M 	__stack:	= __stack+2
000106B2 =00000006                M 	__sp:	= __sp+2
000106B2 =00000000                M 	__pos:	set instr(__pos+1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> ",'%<')
000106B2                          M 	rept	__stack
000106B2                          M 	popp	__command
000106B2 554F                     M 	subq.w	#2,sp
000106B4                          M 	popp	__command
000106B4 1F6D 001B 0001           M 	move.b	cloop+2(a5),1(sp)
000106BA                          M 	popp	__command
000106BA 554F                     M 	subq.w	#2,sp
000106BC                          M 	popp	__command
000106BC 1F6D 001A 0001           M 	move.b	cloop+1(a5),1(sp)
000106C2                          M 	popp	__command
000106C2 554F                     M 	subq.w	#2,sp
000106C4                          M 	popp	__command
000106C4 1F6D 0019 0001           M 	move.b	cloop(a5),1(sp)
000106CA 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
000106CE 45EF 0010                M 	lea	4*4(sp),a2
000106D2 43FA 0000                M 	lea	.str_233(pc),a1
000106D6 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_write_formatted
000106DC 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
000106E0 5C4F                     M 	addq.w	#__sp,sp
000106E2 46DF                     M 	move.w	(sp)+,sr
000106E4 6000 0000                M 	bra.w	.instr_end_233
000106E8                          M 	.str_233:
000106E8                          M 	__fstring_generatedecodedstring	"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> "
000106E8 =00000001                M 	__lpos:	set 1
000106E8 =00000001                M 	__pos:	set instr("%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> ",'%<')
000106E8                          M 	while	(__pos)
000106E8                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> "
000106E8                          M 	dc.b	""
000106E8 =00000007                M 	__endpos:	set instr(__pos+1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> ",'>')
000106E8 =0000000D                M 	__midpos:	set instr(__pos+5,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> ",' ')
000106E8 =00000007                M 	__midpos:	= __endpos
000106E8                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> "
000106E8                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> "
000106E8 EA                       M 	dc.b	pal1
000106E9 =00000008                M 	__lpos:	set __endpos+1
000106E9 =0000000E                M 	__pos:	set instr(__pos+1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> ",'%<')
000106E9                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> "
000106E9 4C6F 6F70 3A20           M 	dc.b	"Loop: "
000106EF =00000014                M 	__endpos:	set instr(__pos+1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> ",'>')
000106EF =00000019                M 	__midpos:	set instr(__pos+5,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> ",' ')
000106EF =00000014                M 	__midpos:	= __endpos
000106EF                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> "
000106EF                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> "
000106EF EC                       M 	dc.b	pal2
000106F0 =00000015                M 	__lpos:	set __endpos+1
000106F0 =00000015                M 	__pos:	set instr(__pos+1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> ",'%<')
000106F0                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> "
000106F0                          M 	dc.b	""
000106F0 =00000023                M 	__endpos:	set instr(__pos+1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> ",'>')
000106F0 =00000024                M 	__midpos:	set instr(__pos+5,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> ",' ')
000106F0 =00000023                M 	__midpos:	= __endpos
000106F0                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> "
000106F0                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> "
000106F0                          M 	__param:	substr ,,"hex"
000106F0 80                       M 	dc.b	hex
000106F1 =00000024                M 	__lpos:	set __endpos+1
000106F1 =00000025                M 	__pos:	set instr(__pos+1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> ",'%<')
000106F1                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> "
000106F1 20                       M 	dc.b	" "
000106F2 =00000035                M 	__endpos:	set instr(__pos+1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> ",'>')
000106F2 =00000036                M 	__midpos:	set instr(__pos+5,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> ",' ')
000106F2 =00000035                M 	__midpos:	= __endpos
000106F2                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> "
000106F2                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> "
000106F2                          M 	__param:	substr ,,"hex"
000106F2 80                       M 	dc.b	hex
000106F3 =00000036                M 	__lpos:	set __endpos+1
000106F3 =00000037                M 	__pos:	set instr(__pos+1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> ",'%<')
000106F3                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> "
000106F3 20                       M 	dc.b	" "
000106F4 =00000047                M 	__endpos:	set instr(__pos+1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> ",'>')
000106F4 =00000048                M 	__midpos:	set instr(__pos+5,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> ",' ')
000106F4 =00000047                M 	__midpos:	= __endpos
000106F4                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> "
000106F4                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> "
000106F4                          M 	__param:	substr ,,"hex"
000106F4 80                       M 	dc.b	hex
000106F5 =00000048                M 	__lpos:	set __endpos+1
000106F5 =00000000                M 	__pos:	set instr(__pos+1,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> ",'%<')
000106F5                          M 	__substr:	substr __lpos,,"%<pal1>Loop: %<pal2>%<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)> "
000106F5 20                       M 	dc.b	" "
000106F6 00                       M 	dc.b	0
000106F8 00                       M 	even
000106F8                          M 	.instr_end_233:
000106F8 BAFC 82D6                  	cmp.w	#mSFXDAC1,a5
000106FC 6400 0000                  	bhs.w	.rts
00010700                            	Console.WriteLine "%<.b cNoteTimeCur(a5)> %<.b cNoteTimeMain(a5)>"
00010700 40E7                     M 	move.w	sr,-(sp)
00010702                          M 	__fstring_generateargumentscode	"%<.b cNoteTimeCur(a5)> %<.b cNoteTimeMain(a5)>"
00010702 =00000001                M 	__pos:	set instr("%<.b cNoteTimeCur(a5)> %<.b cNoteTimeMain(a5)>",'%<')
00010702 =00000000                M 	__stack:set	0
00010702 =00000000                M 	__sp:	set 0
00010702                          M 	while	(__pos)
00010702 =00000016                M 	__endpos:	set instr(__pos+1,"%<.b cNoteTimeCur(a5)> %<.b cNoteTimeMain(a5)>",'>')
00010702 =00000017                M 	__midpos:	set instr(__pos+5,"%<.b cNoteTimeCur(a5)> %<.b cNoteTimeMain(a5)>",' ')
00010702 =00000016                M 	__midpos:	= __endpos
00010702                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<.b cNoteTimeCur(a5)> %<.b cNoteTimeMain(a5)>"
00010702                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b cNoteTimeCur(a5)> %<.b cNoteTimeMain(a5)>"
00010702                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<.b cNoteTimeCur(a5)> %<.b cNoteTimeMain(a5)>"
00010702                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b cNoteTimeCur(a5)> %<.b cNoteTimeMain(a5)>"
00010702                          M 	pushp	"move.b cNoteTimeCur(a5),1(sp)"
00010702                          M 	pushp	"subq.w	#2, sp"
00010702 =00000002                M 	__stack:	= __stack+2
00010702 =00000002                M 	__sp:	= __sp+2
00010702 =00000018                M 	__pos:	set instr(__pos+1,"%<.b cNoteTimeCur(a5)> %<.b cNoteTimeMain(a5)>",'%<')
00010702 =0000002E                M 	__endpos:	set instr(__pos+1,"%<.b cNoteTimeCur(a5)> %<.b cNoteTimeMain(a5)>",'>')
00010702 =00000000                M 	__midpos:	set instr(__pos+5,"%<.b cNoteTimeCur(a5)> %<.b cNoteTimeMain(a5)>",' ')
00010702 =0000002E                M 	__midpos:	= __endpos
00010702                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<.b cNoteTimeCur(a5)> %<.b cNoteTimeMain(a5)>"
00010702                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b cNoteTimeCur(a5)> %<.b cNoteTimeMain(a5)>"
00010702                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<.b cNoteTimeCur(a5)> %<.b cNoteTimeMain(a5)>"
00010702                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b cNoteTimeCur(a5)> %<.b cNoteTimeMain(a5)>"
00010702                          M 	pushp	"move.b cNoteTimeMain(a5),1(sp)"
00010702                          M 	pushp	"subq.w	#2, sp"
00010702 =00000004                M 	__stack:	= __stack+2
00010702 =00000004                M 	__sp:	= __sp+2
00010702 =00000000                M 	__pos:	set instr(__pos+1,"%<.b cNoteTimeCur(a5)> %<.b cNoteTimeMain(a5)>",'%<')
00010702                          M 	rept	__stack
00010702                          M 	popp	__command
00010702 554F                     M 	subq.w	#2,sp
00010704                          M 	popp	__command
00010704 1F6D 001D 0001           M 	move.b	cnotetimemain(a5),1(sp)
0001070A                          M 	popp	__command
0001070A 554F                     M 	subq.w	#2,sp
0001070C                          M 	popp	__command
0001070C 1F6D 001C 0001           M 	move.b	cnotetimecur(a5),1(sp)
00010712 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
00010716 45EF 0010                M 	lea	4*4(sp),a2
0001071A 43FA 0000                M 	lea	.str_236(pc),a1
0001071E 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_writeline_formatted
00010724 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
00010728 584F                     M 	addq.w	#__sp,sp
0001072A 46DF                     M 	move.w	(sp)+,sr
0001072C 6000 0000                M 	bra.w	.instr_end_236
00010730                          M 	.str_236:
00010730                          M 	__fstring_generatedecodedstring	"%<.b cNoteTimeCur(a5)> %<.b cNoteTimeMain(a5)>"
00010730 =00000001                M 	__lpos:	set 1
00010730 =00000001                M 	__pos:	set instr("%<.b cNoteTimeCur(a5)> %<.b cNoteTimeMain(a5)>",'%<')
00010730                          M 	while	(__pos)
00010730                          M 	__substr:	substr __lpos,__pos-1,"%<.b cNoteTimeCur(a5)> %<.b cNoteTimeMain(a5)>"
00010730                          M 	dc.b	""
00010730 =00000016                M 	__endpos:	set instr(__pos+1,"%<.b cNoteTimeCur(a5)> %<.b cNoteTimeMain(a5)>",'>')
00010730 =00000017                M 	__midpos:	set instr(__pos+5,"%<.b cNoteTimeCur(a5)> %<.b cNoteTimeMain(a5)>",' ')
00010730 =00000016                M 	__midpos:	= __endpos
00010730                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b cNoteTimeCur(a5)> %<.b cNoteTimeMain(a5)>"
00010730                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b cNoteTimeCur(a5)> %<.b cNoteTimeMain(a5)>"
00010730                          M 	__param:	substr ,,"hex"
00010730 80                       M 	dc.b	hex
00010731 =00000017                M 	__lpos:	set __endpos+1
00010731 =00000018                M 	__pos:	set instr(__pos+1,"%<.b cNoteTimeCur(a5)> %<.b cNoteTimeMain(a5)>",'%<')
00010731                          M 	__substr:	substr __lpos,__pos-1,"%<.b cNoteTimeCur(a5)> %<.b cNoteTimeMain(a5)>"
00010731 20                       M 	dc.b	" "
00010732 =0000002E                M 	__endpos:	set instr(__pos+1,"%<.b cNoteTimeCur(a5)> %<.b cNoteTimeMain(a5)>",'>')
00010732 =00000000                M 	__midpos:	set instr(__pos+5,"%<.b cNoteTimeCur(a5)> %<.b cNoteTimeMain(a5)>",' ')
00010732 =0000002E                M 	__midpos:	= __endpos
00010732                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b cNoteTimeCur(a5)> %<.b cNoteTimeMain(a5)>"
00010732                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b cNoteTimeCur(a5)> %<.b cNoteTimeMain(a5)>"
00010732                          M 	__param:	substr ,,"hex"
00010732 80                       M 	dc.b	hex
00010733 =0000002F                M 	__lpos:	set __endpos+1
00010733 =00000000                M 	__pos:	set instr(__pos+1,"%<.b cNoteTimeCur(a5)> %<.b cNoteTimeMain(a5)>",'%<')
00010733                          M 	__substr:	substr __lpos,,"%<.b cNoteTimeCur(a5)> %<.b cNoteTimeMain(a5)>"
00010733                          M 	dc.b	""
00010733 00                       M 	dc.b	0
00010734                          M 	even
00010734                          M 	.instr_end_236:
00010734                            	Console.WriteLine "%<pal1>Stack: %<pal2>%<.b cStack(a5)>"
00010734 40E7                     M 	move.w	sr,-(sp)
00010736                          M 	__fstring_generateargumentscode	"%<pal1>Stack: %<pal2>%<.b cStack(a5)>"
00010736 =00000001                M 	__pos:	set instr("%<pal1>Stack: %<pal2>%<.b cStack(a5)>",'%<')
00010736 =00000000                M 	__stack:set	0
00010736 =00000000                M 	__sp:	set 0
00010736                          M 	while	(__pos)
00010736 =00000007                M 	__endpos:	set instr(__pos+1,"%<pal1>Stack: %<pal2>%<.b cStack(a5)>",'>')
00010736 =0000000E                M 	__midpos:	set instr(__pos+5,"%<pal1>Stack: %<pal2>%<.b cStack(a5)>",' ')
00010736 =00000007                M 	__midpos:	= __endpos
00010736                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Stack: %<pal2>%<.b cStack(a5)>"
00010736                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Stack: %<pal2>%<.b cStack(a5)>"
00010736 =0000000F                M 	__pos:	set instr(__pos+1,"%<pal1>Stack: %<pal2>%<.b cStack(a5)>",'%<')
00010736 =00000015                M 	__endpos:	set instr(__pos+1,"%<pal1>Stack: %<pal2>%<.b cStack(a5)>",'>')
00010736 =0000001A                M 	__midpos:	set instr(__pos+5,"%<pal1>Stack: %<pal2>%<.b cStack(a5)>",' ')
00010736 =00000015                M 	__midpos:	= __endpos
00010736                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Stack: %<pal2>%<.b cStack(a5)>"
00010736                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Stack: %<pal2>%<.b cStack(a5)>"
00010736 =00000016                M 	__pos:	set instr(__pos+1,"%<pal1>Stack: %<pal2>%<.b cStack(a5)>",'%<')
00010736 =00000025                M 	__endpos:	set instr(__pos+1,"%<pal1>Stack: %<pal2>%<.b cStack(a5)>",'>')
00010736 =00000000                M 	__midpos:	set instr(__pos+5,"%<pal1>Stack: %<pal2>%<.b cStack(a5)>",' ')
00010736 =00000025                M 	__midpos:	= __endpos
00010736                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Stack: %<pal2>%<.b cStack(a5)>"
00010736                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Stack: %<pal2>%<.b cStack(a5)>"
00010736                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<pal1>Stack: %<pal2>%<.b cStack(a5)>"
00010736                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Stack: %<pal2>%<.b cStack(a5)>"
00010736                          M 	pushp	"move.b cStack(a5),1(sp)"
00010736                          M 	pushp	"subq.w	#2, sp"
00010736 =00000002                M 	__stack:	= __stack+2
00010736 =00000002                M 	__sp:	= __sp+2
00010736 =00000000                M 	__pos:	set instr(__pos+1,"%<pal1>Stack: %<pal2>%<.b cStack(a5)>",'%<')
00010736                          M 	rept	__stack
00010736                          M 	popp	__command
00010736 554F                     M 	subq.w	#2,sp
00010738                          M 	popp	__command
00010738 1F6D 001E 0001           M 	move.b	cstack(a5),1(sp)
0001073E 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
00010742 45EF 0010                M 	lea	4*4(sp),a2
00010746 43FA 0000                M 	lea	.str_239(pc),a1
0001074A 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_writeline_formatted
00010750 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
00010754 544F                     M 	addq.w	#__sp,sp
00010756 46DF                     M 	move.w	(sp)+,sr
00010758 6000 0000                M 	bra.w	.instr_end_239
0001075C                          M 	.str_239:
0001075C                          M 	__fstring_generatedecodedstring	"%<pal1>Stack: %<pal2>%<.b cStack(a5)>"
0001075C =00000001                M 	__lpos:	set 1
0001075C =00000001                M 	__pos:	set instr("%<pal1>Stack: %<pal2>%<.b cStack(a5)>",'%<')
0001075C                          M 	while	(__pos)
0001075C                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Stack: %<pal2>%<.b cStack(a5)>"
0001075C                          M 	dc.b	""
0001075C =00000007                M 	__endpos:	set instr(__pos+1,"%<pal1>Stack: %<pal2>%<.b cStack(a5)>",'>')
0001075C =0000000E                M 	__midpos:	set instr(__pos+5,"%<pal1>Stack: %<pal2>%<.b cStack(a5)>",' ')
0001075C =00000007                M 	__midpos:	= __endpos
0001075C                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Stack: %<pal2>%<.b cStack(a5)>"
0001075C                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Stack: %<pal2>%<.b cStack(a5)>"
0001075C EA                       M 	dc.b	pal1
0001075D =00000008                M 	__lpos:	set __endpos+1
0001075D =0000000F                M 	__pos:	set instr(__pos+1,"%<pal1>Stack: %<pal2>%<.b cStack(a5)>",'%<')
0001075D                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Stack: %<pal2>%<.b cStack(a5)>"
0001075D 5374 6163 6B3A 20        M 	dc.b	"Stack: "
00010764 =00000015                M 	__endpos:	set instr(__pos+1,"%<pal1>Stack: %<pal2>%<.b cStack(a5)>",'>')
00010764 =0000001A                M 	__midpos:	set instr(__pos+5,"%<pal1>Stack: %<pal2>%<.b cStack(a5)>",' ')
00010764 =00000015                M 	__midpos:	= __endpos
00010764                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Stack: %<pal2>%<.b cStack(a5)>"
00010764                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Stack: %<pal2>%<.b cStack(a5)>"
00010764 EC                       M 	dc.b	pal2
00010765 =00000016                M 	__lpos:	set __endpos+1
00010765 =00000016                M 	__pos:	set instr(__pos+1,"%<pal1>Stack: %<pal2>%<.b cStack(a5)>",'%<')
00010765                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Stack: %<pal2>%<.b cStack(a5)>"
00010765                          M 	dc.b	""
00010765 =00000025                M 	__endpos:	set instr(__pos+1,"%<pal1>Stack: %<pal2>%<.b cStack(a5)>",'>')
00010765 =00000000                M 	__midpos:	set instr(__pos+5,"%<pal1>Stack: %<pal2>%<.b cStack(a5)>",' ')
00010765 =00000025                M 	__midpos:	= __endpos
00010765                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Stack: %<pal2>%<.b cStack(a5)>"
00010765                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Stack: %<pal2>%<.b cStack(a5)>"
00010765                          M 	__param:	substr ,,"hex"
00010765 80                       M 	dc.b	hex
00010766 =00000026                M 	__lpos:	set __endpos+1
00010766 =00000000                M 	__pos:	set instr(__pos+1,"%<pal1>Stack: %<pal2>%<.b cStack(a5)>",'%<')
00010766                          M 	__substr:	substr __lpos,,"%<pal1>Stack: %<pal2>%<.b cStack(a5)>"
00010766                          M 	dc.b	""
00010766 00                       M 	dc.b	0
00010768 00                       M 	even
00010768                          M 	.instr_end_239:
00010768                            
00010768 320D                       	move.w	a5,d1
0001076A 0641 002C                  	add.w	#cSize,d1
0001076E                            
0001076E 7000                       	moveq	#0,d0
00010770 102D 001E                  	move.b	cStack(a5),d0
00010774 DAC0                       	add.w	d0,a5
00010776                            
00010776                            .loop
00010776 B24D                       	cmp.w	a5,d1
00010778 6300                       	bls.s	.rts
0001077A                            	Console.WriteLine "%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>"
0001077A 40E7                     M 	move.w	sr,-(sp)
0001077C                          M 	__fstring_generateargumentscode	"%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>"
0001077C =00000001                M 	__pos:	set instr("%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>",'%<')
0001077C =00000000                M 	__stack:set	0
0001077C =00000000                M 	__sp:	set 0
0001077C                          M 	while	(__pos)
0001077C =00000007                M 	__endpos:	set instr(__pos+1,"%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>",'>')
0001077C =0000000C                M 	__midpos:	set instr(__pos+5,"%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>",' ')
0001077C =00000007                M 	__midpos:	= __endpos
0001077C                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>"
0001077C                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>"
0001077C =00000008                M 	__pos:	set instr(__pos+1,"%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>",'%<')
0001077C =0000001C                M 	__endpos:	set instr(__pos+1,"%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>",'>')
0001077C =00000012                M 	__midpos:	set instr(__pos+5,"%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>",' ')
0001077C                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>"
0001077C                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>"
0001077C                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>"
0001077C                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>"
0001077C                          M 	pushp	"move.l (a5)+,-(sp)"
0001077C =00000001                M 	__stack:	= __stack+1
0001077C =00000004                M 	__sp:	= __sp+4
0001077C =0000001D                M 	__pos:	set instr(__pos+1,"%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>",'%<')
0001077C =0000002B                M 	__endpos:	set instr(__pos+1,"%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>",'>')
0001077C =00000000                M 	__midpos:	set instr(__pos+5,"%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>",' ')
0001077C =0000002B                M 	__midpos:	= __endpos
0001077C                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>"
0001077C                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>"
0001077C =00000000                M 	__pos:	set instr(__pos+1,"%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>",'%<')
0001077C                          M 	rept	__stack
0001077C                          M 	popp	__command
0001077C 2F1D                     M 	move.l	(a5)+,-(sp)
0001077E 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
00010782 45EF 0010                M 	lea	4*4(sp),a2
00010786 43FA 0000                M 	lea	.str_242(pc),a1
0001078A 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_writeline_formatted
00010790 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
00010794 584F                     M 	addq.w	#__sp,sp
00010796 46DF                     M 	move.w	(sp)+,sr
00010798 6000 0000                M 	bra.w	.instr_end_242
0001079C                          M 	.str_242:
0001079C                          M 	__fstring_generatedecodedstring	"%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>"
0001079C =00000001                M 	__lpos:	set 1
0001079C =00000001                M 	__pos:	set instr("%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>",'%<')
0001079C                          M 	while	(__pos)
0001079C                          M 	__substr:	substr __lpos,__pos-1,"%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>"
0001079C                          M 	dc.b	""
0001079C =00000007                M 	__endpos:	set instr(__pos+1,"%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>",'>')
0001079C =0000000C                M 	__midpos:	set instr(__pos+5,"%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>",' ')
0001079C =00000007                M 	__midpos:	= __endpos
0001079C                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>"
0001079C                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>"
0001079C E8                       M 	dc.b	pal0
0001079D =00000008                M 	__lpos:	set __endpos+1
0001079D =00000008                M 	__pos:	set instr(__pos+1,"%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>",'%<')
0001079D                          M 	__substr:	substr __lpos,__pos-1,"%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>"
0001079D                          M 	dc.b	""
0001079D =0000001C                M 	__endpos:	set instr(__pos+1,"%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>",'>')
0001079D =00000012                M 	__midpos:	set instr(__pos+5,"%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>",' ')
0001079D                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>"
0001079D                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>"
0001079D BB                       M 	dc.b	sym|split|3
0001079E =0000001D                M 	__lpos:	set __endpos+1
0001079E =0000001D                M 	__pos:	set instr(__pos+1,"%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>",'%<')
0001079E                          M 	__substr:	substr __lpos,__pos-1,"%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>"
0001079E                          M 	dc.b	""
0001079E =0000002B                M 	__endpos:	set instr(__pos+1,"%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>",'>')
0001079E =00000000                M 	__midpos:	set instr(__pos+5,"%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>",' ')
0001079E =0000002B                M 	__midpos:	= __endpos
0001079E                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>"
0001079E                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>"
0001079E ECC0                     M 	dc.b	pal2,symdisp
000107A0 =0000002C                M 	__lpos:	set __endpos+1
000107A0 =00000000                M 	__pos:	set instr(__pos+1,"%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>",'%<')
000107A0                          M 	__substr:	substr __lpos,,"%<pal0>%<.l (a5)+ sym|split>%<pal2,symdisp>"
000107A0                          M 	dc.b	""
000107A0 00                       M 	dc.b	0
000107A2 00                       M 	even
000107A2                          M 	.instr_end_242:
000107A2 60D2                       	bra.s	.loop
000107A4                            
000107A4                            .rts
000107A4 4E75                       	rts
000107A6                            ; ===========================================================================
000107A6                            ; ---------------------------------------------------------------------------
000107A6                            ; Generic console code
000107A6                            ; ---------------------------------------------------------------------------
000107A6                            
000107A6                            AMPS_Debug_Console_Main:
000107A6                            	Console.WriteLine "  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
000107A6 40E7                     M 	move.w	sr,-(sp)
000107A8                          M 	__fstring_generateargumentscode	"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
000107A8 =00000003                M 	__pos:	set instr("  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'%<')
000107A8 =00000000                M 	__stack:set	0
000107A8 =00000000                M 	__sp:	set 0
000107A8                          M 	while	(__pos)
000107A8 =00000009                M 	__endpos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'>')
000107A8 =0000000D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",' ')
000107A8 =00000009                M 	__midpos:	= __endpos
000107A8                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
000107A8                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
000107A8 =0000000E                M 	__pos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'%<')
000107A8 =00000014                M 	__endpos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'>')
000107A8 =00000019                M 	__midpos:	set instr(__pos+5,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",' ')
000107A8 =00000014                M 	__midpos:	= __endpos
000107A8                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
000107A8                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
000107A8 =00000015                M 	__pos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'%<')
000107A8 =0000001C                M 	__endpos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'>')
000107A8 =0000001D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",' ')
000107A8 =0000001C                M 	__midpos:	= __endpos
000107A8                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
000107A8                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
000107A8                          M 	__operand:	substr __pos+1+1,__midpos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
000107A8                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
000107A8                          M 	pushp	"move.l d0,-(sp)"
000107A8 =00000001                M 	__stack:	= __stack+1
000107A8 =00000004                M 	__sp:	= __sp+4
000107A8 =0000001F                M 	__pos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'%<')
000107A8 =00000025                M 	__endpos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'>')
000107A8 =00000029                M 	__midpos:	set instr(__pos+5,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",' ')
000107A8 =00000025                M 	__midpos:	= __endpos
000107A8                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
000107A8                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
000107A8 =0000002A                M 	__pos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'%<')
000107A8 =00000030                M 	__endpos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'>')
000107A8 =00000035                M 	__midpos:	set instr(__pos+5,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",' ')
000107A8 =00000030                M 	__midpos:	= __endpos
000107A8                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
000107A8                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
000107A8 =00000031                M 	__pos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'%<')
000107A8 =00000038                M 	__endpos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'>')
000107A8 =00000000                M 	__midpos:	set instr(__pos+5,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",' ')
000107A8 =00000038                M 	__midpos:	= __endpos
000107A8                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
000107A8                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
000107A8                          M 	__operand:	substr __pos+1+1,__midpos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
000107A8                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
000107A8                          M 	pushp	"move.l a0,-(sp)"
000107A8 =00000002                M 	__stack:	= __stack+1
000107A8 =00000008                M 	__sp:	= __sp+4
000107A8 =00000000                M 	__pos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'%<')
000107A8                          M 	rept	__stack
000107A8                          M 	popp	__command
000107A8 2F08                     M 	move.l	a0,-(sp)
000107AA                          M 	popp	__command
000107AA 2F00                     M 	move.l	d0,-(sp)
000107AC 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
000107B0 45EF 0010                M 	lea	4*4(sp),a2
000107B4 43FA 0000                M 	lea	.str_245(pc),a1
000107B8 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_writeline_formatted
000107BE 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
000107C2 504F                     M 	addq.w	#__sp,sp
000107C4 46DF                     M 	move.w	(sp)+,sr
000107C6 6000 0000                M 	bra.w	.instr_end_245
000107CA                          M 	.str_245:
000107CA                          M 	__fstring_generatedecodedstring	"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
000107CA =00000001                M 	__lpos:	set 1
000107CA =00000003                M 	__pos:	set instr("  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'%<')
000107CA                          M 	while	(__pos)
000107CA                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
000107CA 2020                     M 	dc.b	"  "
000107CC =00000009                M 	__endpos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'>')
000107CC =0000000D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",' ')
000107CC =00000009                M 	__midpos:	= __endpos
000107CC                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
000107CC                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
000107CC E8                       M 	dc.b	pal0
000107CD =0000000A                M 	__lpos:	set __endpos+1
000107CD =0000000E                M 	__pos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'%<')
000107CD                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
000107CD 6430 3A20                M 	dc.b	"d0: "
000107D1 =00000014                M 	__endpos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'>')
000107D1 =00000019                M 	__midpos:	set instr(__pos+5,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",' ')
000107D1 =00000014                M 	__midpos:	= __endpos
000107D1                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
000107D1                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
000107D1 EC                       M 	dc.b	pal2
000107D2 =00000015                M 	__lpos:	set __endpos+1
000107D2 =00000015                M 	__pos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'%<')
000107D2                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
000107D2                          M 	dc.b	""
000107D2 =0000001C                M 	__endpos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'>')
000107D2 =0000001D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",' ')
000107D2 =0000001C                M 	__midpos:	= __endpos
000107D2                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
000107D2                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
000107D2                          M 	__param:	substr ,,"hex"
000107D2 83                       M 	dc.b	hex|3
000107D3 =0000001D                M 	__lpos:	set __endpos+1
000107D3 =0000001F                M 	__pos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'%<')
000107D3                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
000107D3 2020                     M 	dc.b	"  "
000107D5 =00000025                M 	__endpos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'>')
000107D5 =00000029                M 	__midpos:	set instr(__pos+5,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",' ')
000107D5 =00000025                M 	__midpos:	= __endpos
000107D5                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
000107D5                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
000107D5 E8                       M 	dc.b	pal0
000107D6 =00000026                M 	__lpos:	set __endpos+1
000107D6 =0000002A                M 	__pos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'%<')
000107D6                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
000107D6 6130 3A20                M 	dc.b	"a0: "
000107DA =00000030                M 	__endpos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'>')
000107DA =00000035                M 	__midpos:	set instr(__pos+5,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",' ')
000107DA =00000030                M 	__midpos:	= __endpos
000107DA                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
000107DA                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
000107DA EC                       M 	dc.b	pal2
000107DB =00000031                M 	__lpos:	set __endpos+1
000107DB =00000031                M 	__pos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'%<')
000107DB                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
000107DB                          M 	dc.b	""
000107DB =00000038                M 	__endpos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'>')
000107DB =00000000                M 	__midpos:	set instr(__pos+5,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",' ')
000107DB =00000038                M 	__midpos:	= __endpos
000107DB                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
000107DB                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
000107DB                          M 	__param:	substr ,,"hex"
000107DB 83                       M 	dc.b	hex|3
000107DC =00000039                M 	__lpos:	set __endpos+1
000107DC =00000000                M 	__pos:	set instr(__pos+1,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>",'%<')
000107DC                          M 	__substr:	substr __lpos,,"  %<pal0>d0: %<pal2>%<.l d0>  %<pal0>a0: %<pal2>%<.l a0>"
000107DC                          M 	dc.b	""
000107DC 00                       M 	dc.b	0
000107DE 00                       M 	even
000107DE                          M 	.instr_end_245:
000107DE                            	Console.WriteLine "  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
000107DE 40E7                     M 	move.w	sr,-(sp)
000107E0                          M 	__fstring_generateargumentscode	"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
000107E0 =00000003                M 	__pos:	set instr("  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'%<')
000107E0 =00000000                M 	__stack:set	0
000107E0 =00000000                M 	__sp:	set 0
000107E0                          M 	while	(__pos)
000107E0 =00000009                M 	__endpos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'>')
000107E0 =0000000D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",' ')
000107E0 =00000009                M 	__midpos:	= __endpos
000107E0                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
000107E0                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
000107E0 =0000000E                M 	__pos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'%<')
000107E0 =00000014                M 	__endpos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'>')
000107E0 =00000019                M 	__midpos:	set instr(__pos+5,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",' ')
000107E0 =00000014                M 	__midpos:	= __endpos
000107E0                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
000107E0                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
000107E0 =00000015                M 	__pos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'%<')
000107E0 =0000001C                M 	__endpos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'>')
000107E0 =0000001D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",' ')
000107E0 =0000001C                M 	__midpos:	= __endpos
000107E0                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
000107E0                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
000107E0                          M 	__operand:	substr __pos+1+1,__midpos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
000107E0                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
000107E0                          M 	pushp	"move.l d1,-(sp)"
000107E0 =00000001                M 	__stack:	= __stack+1
000107E0 =00000004                M 	__sp:	= __sp+4
000107E0 =0000001F                M 	__pos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'%<')
000107E0 =00000025                M 	__endpos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'>')
000107E0 =00000029                M 	__midpos:	set instr(__pos+5,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",' ')
000107E0 =00000025                M 	__midpos:	= __endpos
000107E0                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
000107E0                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
000107E0 =0000002A                M 	__pos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'%<')
000107E0 =00000030                M 	__endpos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'>')
000107E0 =00000035                M 	__midpos:	set instr(__pos+5,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",' ')
000107E0 =00000030                M 	__midpos:	= __endpos
000107E0                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
000107E0                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
000107E0 =00000031                M 	__pos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'%<')
000107E0 =00000038                M 	__endpos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'>')
000107E0 =00000000                M 	__midpos:	set instr(__pos+5,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",' ')
000107E0 =00000038                M 	__midpos:	= __endpos
000107E0                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
000107E0                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
000107E0                          M 	__operand:	substr __pos+1+1,__midpos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
000107E0                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
000107E0                          M 	pushp	"move.l a1,-(sp)"
000107E0 =00000002                M 	__stack:	= __stack+1
000107E0 =00000008                M 	__sp:	= __sp+4
000107E0 =00000000                M 	__pos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'%<')
000107E0                          M 	rept	__stack
000107E0                          M 	popp	__command
000107E0 2F09                     M 	move.l	a1,-(sp)
000107E2                          M 	popp	__command
000107E2 2F01                     M 	move.l	d1,-(sp)
000107E4 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
000107E8 45EF 0010                M 	lea	4*4(sp),a2
000107EC 43FA 0000                M 	lea	.str_248(pc),a1
000107F0 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_writeline_formatted
000107F6 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
000107FA 504F                     M 	addq.w	#__sp,sp
000107FC 46DF                     M 	move.w	(sp)+,sr
000107FE 6000 0000                M 	bra.w	.instr_end_248
00010802                          M 	.str_248:
00010802                          M 	__fstring_generatedecodedstring	"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
00010802 =00000001                M 	__lpos:	set 1
00010802 =00000003                M 	__pos:	set instr("  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'%<')
00010802                          M 	while	(__pos)
00010802                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
00010802 2020                     M 	dc.b	"  "
00010804 =00000009                M 	__endpos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'>')
00010804 =0000000D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",' ')
00010804 =00000009                M 	__midpos:	= __endpos
00010804                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
00010804                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
00010804 E8                       M 	dc.b	pal0
00010805 =0000000A                M 	__lpos:	set __endpos+1
00010805 =0000000E                M 	__pos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'%<')
00010805                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
00010805 6431 3A20                M 	dc.b	"d1: "
00010809 =00000014                M 	__endpos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'>')
00010809 =00000019                M 	__midpos:	set instr(__pos+5,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",' ')
00010809 =00000014                M 	__midpos:	= __endpos
00010809                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
00010809                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
00010809 EC                       M 	dc.b	pal2
0001080A =00000015                M 	__lpos:	set __endpos+1
0001080A =00000015                M 	__pos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'%<')
0001080A                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
0001080A                          M 	dc.b	""
0001080A =0000001C                M 	__endpos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'>')
0001080A =0000001D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",' ')
0001080A =0000001C                M 	__midpos:	= __endpos
0001080A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
0001080A                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
0001080A                          M 	__param:	substr ,,"hex"
0001080A 83                       M 	dc.b	hex|3
0001080B =0000001D                M 	__lpos:	set __endpos+1
0001080B =0000001F                M 	__pos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'%<')
0001080B                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
0001080B 2020                     M 	dc.b	"  "
0001080D =00000025                M 	__endpos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'>')
0001080D =00000029                M 	__midpos:	set instr(__pos+5,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",' ')
0001080D =00000025                M 	__midpos:	= __endpos
0001080D                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
0001080D                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
0001080D E8                       M 	dc.b	pal0
0001080E =00000026                M 	__lpos:	set __endpos+1
0001080E =0000002A                M 	__pos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'%<')
0001080E                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
0001080E 6131 3A20                M 	dc.b	"a1: "
00010812 =00000030                M 	__endpos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'>')
00010812 =00000035                M 	__midpos:	set instr(__pos+5,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",' ')
00010812 =00000030                M 	__midpos:	= __endpos
00010812                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
00010812                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
00010812 EC                       M 	dc.b	pal2
00010813 =00000031                M 	__lpos:	set __endpos+1
00010813 =00000031                M 	__pos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'%<')
00010813                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
00010813                          M 	dc.b	""
00010813 =00000038                M 	__endpos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'>')
00010813 =00000000                M 	__midpos:	set instr(__pos+5,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",' ')
00010813 =00000038                M 	__midpos:	= __endpos
00010813                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
00010813                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
00010813                          M 	__param:	substr ,,"hex"
00010813 83                       M 	dc.b	hex|3
00010814 =00000039                M 	__lpos:	set __endpos+1
00010814 =00000000                M 	__pos:	set instr(__pos+1,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>",'%<')
00010814                          M 	__substr:	substr __lpos,,"  %<pal0>d1: %<pal2>%<.l d1>  %<pal0>a1: %<pal2>%<.l a1>"
00010814                          M 	dc.b	""
00010814 00                       M 	dc.b	0
00010816 00                       M 	even
00010816                          M 	.instr_end_248:
00010816                            	Console.WriteLine "  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010816 40E7                     M 	move.w	sr,-(sp)
00010818                          M 	__fstring_generateargumentscode	"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010818 =00000003                M 	__pos:	set instr("  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'%<')
00010818 =00000000                M 	__stack:set	0
00010818 =00000000                M 	__sp:	set 0
00010818                          M 	while	(__pos)
00010818 =00000009                M 	__endpos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'>')
00010818 =0000000D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",' ')
00010818 =00000009                M 	__midpos:	= __endpos
00010818                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010818                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010818 =0000000E                M 	__pos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'%<')
00010818 =00000014                M 	__endpos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'>')
00010818 =00000019                M 	__midpos:	set instr(__pos+5,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",' ')
00010818 =00000014                M 	__midpos:	= __endpos
00010818                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010818                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010818 =00000015                M 	__pos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'%<')
00010818 =0000001C                M 	__endpos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'>')
00010818 =0000001D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",' ')
00010818 =0000001C                M 	__midpos:	= __endpos
00010818                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010818                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010818                          M 	__operand:	substr __pos+1+1,__midpos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010818                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010818                          M 	pushp	"move.l d2,-(sp)"
00010818 =00000001                M 	__stack:	= __stack+1
00010818 =00000004                M 	__sp:	= __sp+4
00010818 =0000001F                M 	__pos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'%<')
00010818 =00000025                M 	__endpos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'>')
00010818 =00000029                M 	__midpos:	set instr(__pos+5,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",' ')
00010818 =00000025                M 	__midpos:	= __endpos
00010818                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010818                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010818 =0000002A                M 	__pos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'%<')
00010818 =00000030                M 	__endpos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'>')
00010818 =00000035                M 	__midpos:	set instr(__pos+5,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",' ')
00010818 =00000030                M 	__midpos:	= __endpos
00010818                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010818                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010818 =00000031                M 	__pos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'%<')
00010818 =00000038                M 	__endpos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'>')
00010818 =00000000                M 	__midpos:	set instr(__pos+5,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",' ')
00010818 =00000038                M 	__midpos:	= __endpos
00010818                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010818                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010818                          M 	__operand:	substr __pos+1+1,__midpos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010818                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010818                          M 	pushp	"move.l a2,-(sp)"
00010818 =00000002                M 	__stack:	= __stack+1
00010818 =00000008                M 	__sp:	= __sp+4
00010818 =00000000                M 	__pos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'%<')
00010818                          M 	rept	__stack
00010818                          M 	popp	__command
00010818 2F0A                     M 	move.l	a2,-(sp)
0001081A                          M 	popp	__command
0001081A 2F02                     M 	move.l	d2,-(sp)
0001081C 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
00010820 45EF 0010                M 	lea	4*4(sp),a2
00010824 43FA 0000                M 	lea	.str_251(pc),a1
00010828 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_writeline_formatted
0001082E 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
00010832 504F                     M 	addq.w	#__sp,sp
00010834 46DF                     M 	move.w	(sp)+,sr
00010836 6000 0000                M 	bra.w	.instr_end_251
0001083A                          M 	.str_251:
0001083A                          M 	__fstring_generatedecodedstring	"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
0001083A =00000001                M 	__lpos:	set 1
0001083A =00000003                M 	__pos:	set instr("  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'%<')
0001083A                          M 	while	(__pos)
0001083A                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
0001083A 2020                     M 	dc.b	"  "
0001083C =00000009                M 	__endpos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'>')
0001083C =0000000D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",' ')
0001083C =00000009                M 	__midpos:	= __endpos
0001083C                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
0001083C                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
0001083C E8                       M 	dc.b	pal0
0001083D =0000000A                M 	__lpos:	set __endpos+1
0001083D =0000000E                M 	__pos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'%<')
0001083D                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
0001083D 6432 3A20                M 	dc.b	"d2: "
00010841 =00000014                M 	__endpos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'>')
00010841 =00000019                M 	__midpos:	set instr(__pos+5,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",' ')
00010841 =00000014                M 	__midpos:	= __endpos
00010841                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010841                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010841 EC                       M 	dc.b	pal2
00010842 =00000015                M 	__lpos:	set __endpos+1
00010842 =00000015                M 	__pos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'%<')
00010842                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010842                          M 	dc.b	""
00010842 =0000001C                M 	__endpos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'>')
00010842 =0000001D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",' ')
00010842 =0000001C                M 	__midpos:	= __endpos
00010842                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010842                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010842                          M 	__param:	substr ,,"hex"
00010842 83                       M 	dc.b	hex|3
00010843 =0000001D                M 	__lpos:	set __endpos+1
00010843 =0000001F                M 	__pos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'%<')
00010843                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010843 2020                     M 	dc.b	"  "
00010845 =00000025                M 	__endpos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'>')
00010845 =00000029                M 	__midpos:	set instr(__pos+5,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",' ')
00010845 =00000025                M 	__midpos:	= __endpos
00010845                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010845                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010845 E8                       M 	dc.b	pal0
00010846 =00000026                M 	__lpos:	set __endpos+1
00010846 =0000002A                M 	__pos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'%<')
00010846                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
00010846 6132 3A20                M 	dc.b	"a2: "
0001084A =00000030                M 	__endpos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'>')
0001084A =00000035                M 	__midpos:	set instr(__pos+5,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",' ')
0001084A =00000030                M 	__midpos:	= __endpos
0001084A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
0001084A                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
0001084A EC                       M 	dc.b	pal2
0001084B =00000031                M 	__lpos:	set __endpos+1
0001084B =00000031                M 	__pos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'%<')
0001084B                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
0001084B                          M 	dc.b	""
0001084B =00000038                M 	__endpos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'>')
0001084B =00000000                M 	__midpos:	set instr(__pos+5,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",' ')
0001084B =00000038                M 	__midpos:	= __endpos
0001084B                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
0001084B                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
0001084B                          M 	__param:	substr ,,"hex"
0001084B 83                       M 	dc.b	hex|3
0001084C =00000039                M 	__lpos:	set __endpos+1
0001084C =00000000                M 	__pos:	set instr(__pos+1,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>",'%<')
0001084C                          M 	__substr:	substr __lpos,,"  %<pal0>d2: %<pal2>%<.l d2>  %<pal0>a2: %<pal2>%<.l a2>"
0001084C                          M 	dc.b	""
0001084C 00                       M 	dc.b	0
0001084E 00                       M 	even
0001084E                          M 	.instr_end_251:
0001084E                            	Console.WriteLine "  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
0001084E 40E7                     M 	move.w	sr,-(sp)
00010850                          M 	__fstring_generateargumentscode	"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
00010850 =00000003                M 	__pos:	set instr("  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'%<')
00010850 =00000000                M 	__stack:set	0
00010850 =00000000                M 	__sp:	set 0
00010850                          M 	while	(__pos)
00010850 =00000009                M 	__endpos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'>')
00010850 =0000000D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",' ')
00010850 =00000009                M 	__midpos:	= __endpos
00010850                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
00010850                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
00010850 =0000000E                M 	__pos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'%<')
00010850 =00000014                M 	__endpos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'>')
00010850 =00000019                M 	__midpos:	set instr(__pos+5,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",' ')
00010850 =00000014                M 	__midpos:	= __endpos
00010850                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
00010850                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
00010850 =00000015                M 	__pos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'%<')
00010850 =0000001C                M 	__endpos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'>')
00010850 =0000001D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",' ')
00010850 =0000001C                M 	__midpos:	= __endpos
00010850                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
00010850                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
00010850                          M 	__operand:	substr __pos+1+1,__midpos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
00010850                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
00010850                          M 	pushp	"move.l d3,-(sp)"
00010850 =00000001                M 	__stack:	= __stack+1
00010850 =00000004                M 	__sp:	= __sp+4
00010850 =0000001F                M 	__pos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'%<')
00010850 =00000025                M 	__endpos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'>')
00010850 =00000029                M 	__midpos:	set instr(__pos+5,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",' ')
00010850 =00000025                M 	__midpos:	= __endpos
00010850                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
00010850                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
00010850 =0000002A                M 	__pos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'%<')
00010850 =00000030                M 	__endpos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'>')
00010850 =00000035                M 	__midpos:	set instr(__pos+5,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",' ')
00010850 =00000030                M 	__midpos:	= __endpos
00010850                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
00010850                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
00010850 =00000031                M 	__pos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'%<')
00010850 =00000038                M 	__endpos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'>')
00010850 =00000000                M 	__midpos:	set instr(__pos+5,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",' ')
00010850 =00000038                M 	__midpos:	= __endpos
00010850                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
00010850                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
00010850                          M 	__operand:	substr __pos+1+1,__midpos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
00010850                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
00010850                          M 	pushp	"move.l a3,-(sp)"
00010850 =00000002                M 	__stack:	= __stack+1
00010850 =00000008                M 	__sp:	= __sp+4
00010850 =00000000                M 	__pos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'%<')
00010850                          M 	rept	__stack
00010850                          M 	popp	__command
00010850 2F0B                     M 	move.l	a3,-(sp)
00010852                          M 	popp	__command
00010852 2F03                     M 	move.l	d3,-(sp)
00010854 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
00010858 45EF 0010                M 	lea	4*4(sp),a2
0001085C 43FA 0000                M 	lea	.str_254(pc),a1
00010860 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_writeline_formatted
00010866 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
0001086A 504F                     M 	addq.w	#__sp,sp
0001086C 46DF                     M 	move.w	(sp)+,sr
0001086E 6000 0000                M 	bra.w	.instr_end_254
00010872                          M 	.str_254:
00010872                          M 	__fstring_generatedecodedstring	"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
00010872 =00000001                M 	__lpos:	set 1
00010872 =00000003                M 	__pos:	set instr("  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'%<')
00010872                          M 	while	(__pos)
00010872                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
00010872 2020                     M 	dc.b	"  "
00010874 =00000009                M 	__endpos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'>')
00010874 =0000000D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",' ')
00010874 =00000009                M 	__midpos:	= __endpos
00010874                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
00010874                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
00010874 E8                       M 	dc.b	pal0
00010875 =0000000A                M 	__lpos:	set __endpos+1
00010875 =0000000E                M 	__pos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'%<')
00010875                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
00010875 6433 3A20                M 	dc.b	"d3: "
00010879 =00000014                M 	__endpos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'>')
00010879 =00000019                M 	__midpos:	set instr(__pos+5,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",' ')
00010879 =00000014                M 	__midpos:	= __endpos
00010879                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
00010879                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
00010879 EC                       M 	dc.b	pal2
0001087A =00000015                M 	__lpos:	set __endpos+1
0001087A =00000015                M 	__pos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'%<')
0001087A                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
0001087A                          M 	dc.b	""
0001087A =0000001C                M 	__endpos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'>')
0001087A =0000001D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",' ')
0001087A =0000001C                M 	__midpos:	= __endpos
0001087A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
0001087A                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
0001087A                          M 	__param:	substr ,,"hex"
0001087A 83                       M 	dc.b	hex|3
0001087B =0000001D                M 	__lpos:	set __endpos+1
0001087B =0000001F                M 	__pos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'%<')
0001087B                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
0001087B 2020                     M 	dc.b	"  "
0001087D =00000025                M 	__endpos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'>')
0001087D =00000029                M 	__midpos:	set instr(__pos+5,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",' ')
0001087D =00000025                M 	__midpos:	= __endpos
0001087D                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
0001087D                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
0001087D E8                       M 	dc.b	pal0
0001087E =00000026                M 	__lpos:	set __endpos+1
0001087E =0000002A                M 	__pos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'%<')
0001087E                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
0001087E 6133 3A20                M 	dc.b	"a3: "
00010882 =00000030                M 	__endpos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'>')
00010882 =00000035                M 	__midpos:	set instr(__pos+5,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",' ')
00010882 =00000030                M 	__midpos:	= __endpos
00010882                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
00010882                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
00010882 EC                       M 	dc.b	pal2
00010883 =00000031                M 	__lpos:	set __endpos+1
00010883 =00000031                M 	__pos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'%<')
00010883                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
00010883                          M 	dc.b	""
00010883 =00000038                M 	__endpos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'>')
00010883 =00000000                M 	__midpos:	set instr(__pos+5,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",' ')
00010883 =00000038                M 	__midpos:	= __endpos
00010883                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
00010883                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
00010883                          M 	__param:	substr ,,"hex"
00010883 83                       M 	dc.b	hex|3
00010884 =00000039                M 	__lpos:	set __endpos+1
00010884 =00000000                M 	__pos:	set instr(__pos+1,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>",'%<')
00010884                          M 	__substr:	substr __lpos,,"  %<pal0>d3: %<pal2>%<.l d3>  %<pal0>a3: %<pal2>%<.l a3>"
00010884                          M 	dc.b	""
00010884 00                       M 	dc.b	0
00010886 00                       M 	even
00010886                          M 	.instr_end_254:
00010886                            	Console.WriteLine "  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
00010886 40E7                     M 	move.w	sr,-(sp)
00010888                          M 	__fstring_generateargumentscode	"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
00010888 =00000003                M 	__pos:	set instr("  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'%<')
00010888 =00000000                M 	__stack:set	0
00010888 =00000000                M 	__sp:	set 0
00010888                          M 	while	(__pos)
00010888 =00000009                M 	__endpos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'>')
00010888 =0000000D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",' ')
00010888 =00000009                M 	__midpos:	= __endpos
00010888                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
00010888                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
00010888 =0000000E                M 	__pos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'%<')
00010888 =00000014                M 	__endpos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'>')
00010888 =00000019                M 	__midpos:	set instr(__pos+5,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",' ')
00010888 =00000014                M 	__midpos:	= __endpos
00010888                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
00010888                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
00010888 =00000015                M 	__pos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'%<')
00010888 =0000001C                M 	__endpos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'>')
00010888 =0000001D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",' ')
00010888 =0000001C                M 	__midpos:	= __endpos
00010888                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
00010888                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
00010888                          M 	__operand:	substr __pos+1+1,__midpos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
00010888                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
00010888                          M 	pushp	"move.l d4,-(sp)"
00010888 =00000001                M 	__stack:	= __stack+1
00010888 =00000004                M 	__sp:	= __sp+4
00010888 =0000001F                M 	__pos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'%<')
00010888 =00000025                M 	__endpos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'>')
00010888 =00000029                M 	__midpos:	set instr(__pos+5,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",' ')
00010888 =00000025                M 	__midpos:	= __endpos
00010888                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
00010888                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
00010888 =0000002A                M 	__pos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'%<')
00010888 =00000030                M 	__endpos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'>')
00010888 =00000035                M 	__midpos:	set instr(__pos+5,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",' ')
00010888 =00000030                M 	__midpos:	= __endpos
00010888                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
00010888                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
00010888 =00000031                M 	__pos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'%<')
00010888 =00000038                M 	__endpos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'>')
00010888 =00000000                M 	__midpos:	set instr(__pos+5,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",' ')
00010888 =00000038                M 	__midpos:	= __endpos
00010888                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
00010888                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
00010888                          M 	__operand:	substr __pos+1+1,__midpos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
00010888                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
00010888                          M 	pushp	"move.l a4,-(sp)"
00010888 =00000002                M 	__stack:	= __stack+1
00010888 =00000008                M 	__sp:	= __sp+4
00010888 =00000000                M 	__pos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'%<')
00010888                          M 	rept	__stack
00010888                          M 	popp	__command
00010888 2F0C                     M 	move.l	a4,-(sp)
0001088A                          M 	popp	__command
0001088A 2F04                     M 	move.l	d4,-(sp)
0001088C 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
00010890 45EF 0010                M 	lea	4*4(sp),a2
00010894 43FA 0000                M 	lea	.str_257(pc),a1
00010898 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_writeline_formatted
0001089E 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
000108A2 504F                     M 	addq.w	#__sp,sp
000108A4 46DF                     M 	move.w	(sp)+,sr
000108A6 6000 0000                M 	bra.w	.instr_end_257
000108AA                          M 	.str_257:
000108AA                          M 	__fstring_generatedecodedstring	"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
000108AA =00000001                M 	__lpos:	set 1
000108AA =00000003                M 	__pos:	set instr("  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'%<')
000108AA                          M 	while	(__pos)
000108AA                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
000108AA 2020                     M 	dc.b	"  "
000108AC =00000009                M 	__endpos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'>')
000108AC =0000000D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",' ')
000108AC =00000009                M 	__midpos:	= __endpos
000108AC                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
000108AC                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
000108AC E8                       M 	dc.b	pal0
000108AD =0000000A                M 	__lpos:	set __endpos+1
000108AD =0000000E                M 	__pos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'%<')
000108AD                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
000108AD 6434 3A20                M 	dc.b	"d4: "
000108B1 =00000014                M 	__endpos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'>')
000108B1 =00000019                M 	__midpos:	set instr(__pos+5,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",' ')
000108B1 =00000014                M 	__midpos:	= __endpos
000108B1                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
000108B1                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
000108B1 EC                       M 	dc.b	pal2
000108B2 =00000015                M 	__lpos:	set __endpos+1
000108B2 =00000015                M 	__pos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'%<')
000108B2                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
000108B2                          M 	dc.b	""
000108B2 =0000001C                M 	__endpos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'>')
000108B2 =0000001D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",' ')
000108B2 =0000001C                M 	__midpos:	= __endpos
000108B2                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
000108B2                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
000108B2                          M 	__param:	substr ,,"hex"
000108B2 83                       M 	dc.b	hex|3
000108B3 =0000001D                M 	__lpos:	set __endpos+1
000108B3 =0000001F                M 	__pos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'%<')
000108B3                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
000108B3 2020                     M 	dc.b	"  "
000108B5 =00000025                M 	__endpos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'>')
000108B5 =00000029                M 	__midpos:	set instr(__pos+5,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",' ')
000108B5 =00000025                M 	__midpos:	= __endpos
000108B5                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
000108B5                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
000108B5 E8                       M 	dc.b	pal0
000108B6 =00000026                M 	__lpos:	set __endpos+1
000108B6 =0000002A                M 	__pos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'%<')
000108B6                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
000108B6 6134 3A20                M 	dc.b	"a4: "
000108BA =00000030                M 	__endpos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'>')
000108BA =00000035                M 	__midpos:	set instr(__pos+5,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",' ')
000108BA =00000030                M 	__midpos:	= __endpos
000108BA                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
000108BA                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
000108BA EC                       M 	dc.b	pal2
000108BB =00000031                M 	__lpos:	set __endpos+1
000108BB =00000031                M 	__pos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'%<')
000108BB                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
000108BB                          M 	dc.b	""
000108BB =00000038                M 	__endpos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'>')
000108BB =00000000                M 	__midpos:	set instr(__pos+5,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",' ')
000108BB =00000038                M 	__midpos:	= __endpos
000108BB                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
000108BB                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
000108BB                          M 	__param:	substr ,,"hex"
000108BB 83                       M 	dc.b	hex|3
000108BC =00000039                M 	__lpos:	set __endpos+1
000108BC =00000000                M 	__pos:	set instr(__pos+1,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>",'%<')
000108BC                          M 	__substr:	substr __lpos,,"  %<pal0>d4: %<pal2>%<.l d4>  %<pal0>a4: %<pal2>%<.l a4>"
000108BC                          M 	dc.b	""
000108BC 00                       M 	dc.b	0
000108BE 00                       M 	even
000108BE                          M 	.instr_end_257:
000108BE                            	Console.WriteLine "  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
000108BE 40E7                     M 	move.w	sr,-(sp)
000108C0                          M 	__fstring_generateargumentscode	"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
000108C0 =00000003                M 	__pos:	set instr("  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'%<')
000108C0 =00000000                M 	__stack:set	0
000108C0 =00000000                M 	__sp:	set 0
000108C0                          M 	while	(__pos)
000108C0 =00000009                M 	__endpos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'>')
000108C0 =0000000D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",' ')
000108C0 =00000009                M 	__midpos:	= __endpos
000108C0                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
000108C0                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
000108C0 =0000000E                M 	__pos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'%<')
000108C0 =00000014                M 	__endpos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'>')
000108C0 =00000019                M 	__midpos:	set instr(__pos+5,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",' ')
000108C0 =00000014                M 	__midpos:	= __endpos
000108C0                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
000108C0                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
000108C0 =00000015                M 	__pos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'%<')
000108C0 =0000001C                M 	__endpos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'>')
000108C0 =0000001D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",' ')
000108C0 =0000001C                M 	__midpos:	= __endpos
000108C0                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
000108C0                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
000108C0                          M 	__operand:	substr __pos+1+1,__midpos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
000108C0                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
000108C0                          M 	pushp	"move.l d5,-(sp)"
000108C0 =00000001                M 	__stack:	= __stack+1
000108C0 =00000004                M 	__sp:	= __sp+4
000108C0 =0000001F                M 	__pos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'%<')
000108C0 =00000025                M 	__endpos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'>')
000108C0 =00000029                M 	__midpos:	set instr(__pos+5,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",' ')
000108C0 =00000025                M 	__midpos:	= __endpos
000108C0                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
000108C0                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
000108C0 =0000002A                M 	__pos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'%<')
000108C0 =00000030                M 	__endpos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'>')
000108C0 =00000035                M 	__midpos:	set instr(__pos+5,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",' ')
000108C0 =00000030                M 	__midpos:	= __endpos
000108C0                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
000108C0                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
000108C0 =00000031                M 	__pos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'%<')
000108C0 =00000038                M 	__endpos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'>')
000108C0 =00000000                M 	__midpos:	set instr(__pos+5,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",' ')
000108C0 =00000038                M 	__midpos:	= __endpos
000108C0                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
000108C0                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
000108C0                          M 	__operand:	substr __pos+1+1,__midpos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
000108C0                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
000108C0                          M 	pushp	"move.l a5,-(sp)"
000108C0 =00000002                M 	__stack:	= __stack+1
000108C0 =00000008                M 	__sp:	= __sp+4
000108C0 =00000000                M 	__pos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'%<')
000108C0                          M 	rept	__stack
000108C0                          M 	popp	__command
000108C0 2F0D                     M 	move.l	a5,-(sp)
000108C2                          M 	popp	__command
000108C2 2F05                     M 	move.l	d5,-(sp)
000108C4 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
000108C8 45EF 0010                M 	lea	4*4(sp),a2
000108CC 43FA 0000                M 	lea	.str_260(pc),a1
000108D0 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_writeline_formatted
000108D6 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
000108DA 504F                     M 	addq.w	#__sp,sp
000108DC 46DF                     M 	move.w	(sp)+,sr
000108DE 6000 0000                M 	bra.w	.instr_end_260
000108E2                          M 	.str_260:
000108E2                          M 	__fstring_generatedecodedstring	"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
000108E2 =00000001                M 	__lpos:	set 1
000108E2 =00000003                M 	__pos:	set instr("  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'%<')
000108E2                          M 	while	(__pos)
000108E2                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
000108E2 2020                     M 	dc.b	"  "
000108E4 =00000009                M 	__endpos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'>')
000108E4 =0000000D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",' ')
000108E4 =00000009                M 	__midpos:	= __endpos
000108E4                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
000108E4                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
000108E4 E8                       M 	dc.b	pal0
000108E5 =0000000A                M 	__lpos:	set __endpos+1
000108E5 =0000000E                M 	__pos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'%<')
000108E5                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
000108E5 6435 3A20                M 	dc.b	"d5: "
000108E9 =00000014                M 	__endpos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'>')
000108E9 =00000019                M 	__midpos:	set instr(__pos+5,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",' ')
000108E9 =00000014                M 	__midpos:	= __endpos
000108E9                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
000108E9                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
000108E9 EC                       M 	dc.b	pal2
000108EA =00000015                M 	__lpos:	set __endpos+1
000108EA =00000015                M 	__pos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'%<')
000108EA                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
000108EA                          M 	dc.b	""
000108EA =0000001C                M 	__endpos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'>')
000108EA =0000001D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",' ')
000108EA =0000001C                M 	__midpos:	= __endpos
000108EA                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
000108EA                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
000108EA                          M 	__param:	substr ,,"hex"
000108EA 83                       M 	dc.b	hex|3
000108EB =0000001D                M 	__lpos:	set __endpos+1
000108EB =0000001F                M 	__pos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'%<')
000108EB                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
000108EB 2020                     M 	dc.b	"  "
000108ED =00000025                M 	__endpos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'>')
000108ED =00000029                M 	__midpos:	set instr(__pos+5,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",' ')
000108ED =00000025                M 	__midpos:	= __endpos
000108ED                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
000108ED                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
000108ED E8                       M 	dc.b	pal0
000108EE =00000026                M 	__lpos:	set __endpos+1
000108EE =0000002A                M 	__pos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'%<')
000108EE                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
000108EE 6135 3A20                M 	dc.b	"a5: "
000108F2 =00000030                M 	__endpos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'>')
000108F2 =00000035                M 	__midpos:	set instr(__pos+5,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",' ')
000108F2 =00000030                M 	__midpos:	= __endpos
000108F2                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
000108F2                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
000108F2 EC                       M 	dc.b	pal2
000108F3 =00000031                M 	__lpos:	set __endpos+1
000108F3 =00000031                M 	__pos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'%<')
000108F3                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
000108F3                          M 	dc.b	""
000108F3 =00000038                M 	__endpos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'>')
000108F3 =00000000                M 	__midpos:	set instr(__pos+5,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",' ')
000108F3 =00000038                M 	__midpos:	= __endpos
000108F3                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
000108F3                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
000108F3                          M 	__param:	substr ,,"hex"
000108F3 83                       M 	dc.b	hex|3
000108F4 =00000039                M 	__lpos:	set __endpos+1
000108F4 =00000000                M 	__pos:	set instr(__pos+1,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>",'%<')
000108F4                          M 	__substr:	substr __lpos,,"  %<pal0>d5: %<pal2>%<.l d5>  %<pal0>a5: %<pal2>%<.l a5>"
000108F4                          M 	dc.b	""
000108F4 00                       M 	dc.b	0
000108F6 00                       M 	even
000108F6                          M 	.instr_end_260:
000108F6                            	Console.WriteLine "  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
000108F6 40E7                     M 	move.w	sr,-(sp)
000108F8                          M 	__fstring_generateargumentscode	"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
000108F8 =00000003                M 	__pos:	set instr("  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'%<')
000108F8 =00000000                M 	__stack:set	0
000108F8 =00000000                M 	__sp:	set 0
000108F8                          M 	while	(__pos)
000108F8 =00000009                M 	__endpos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'>')
000108F8 =0000000D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",' ')
000108F8 =00000009                M 	__midpos:	= __endpos
000108F8                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
000108F8                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
000108F8 =0000000E                M 	__pos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'%<')
000108F8 =00000014                M 	__endpos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'>')
000108F8 =00000019                M 	__midpos:	set instr(__pos+5,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",' ')
000108F8 =00000014                M 	__midpos:	= __endpos
000108F8                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
000108F8                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
000108F8 =00000015                M 	__pos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'%<')
000108F8 =0000001C                M 	__endpos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'>')
000108F8 =0000001D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",' ')
000108F8 =0000001C                M 	__midpos:	= __endpos
000108F8                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
000108F8                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
000108F8                          M 	__operand:	substr __pos+1+1,__midpos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
000108F8                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
000108F8                          M 	pushp	"move.l d6,-(sp)"
000108F8 =00000001                M 	__stack:	= __stack+1
000108F8 =00000004                M 	__sp:	= __sp+4
000108F8 =0000001F                M 	__pos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'%<')
000108F8 =00000025                M 	__endpos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'>')
000108F8 =00000029                M 	__midpos:	set instr(__pos+5,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",' ')
000108F8 =00000025                M 	__midpos:	= __endpos
000108F8                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
000108F8                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
000108F8 =0000002A                M 	__pos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'%<')
000108F8 =00000030                M 	__endpos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'>')
000108F8 =00000035                M 	__midpos:	set instr(__pos+5,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",' ')
000108F8 =00000030                M 	__midpos:	= __endpos
000108F8                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
000108F8                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
000108F8 =00000031                M 	__pos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'%<')
000108F8 =00000038                M 	__endpos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'>')
000108F8 =00000000                M 	__midpos:	set instr(__pos+5,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",' ')
000108F8 =00000038                M 	__midpos:	= __endpos
000108F8                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
000108F8                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
000108F8                          M 	__operand:	substr __pos+1+1,__midpos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
000108F8                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
000108F8                          M 	pushp	"move.l a6,-(sp)"
000108F8 =00000002                M 	__stack:	= __stack+1
000108F8 =00000008                M 	__sp:	= __sp+4
000108F8 =00000000                M 	__pos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'%<')
000108F8                          M 	rept	__stack
000108F8                          M 	popp	__command
000108F8 2F0E                     M 	move.l	a6,-(sp)
000108FA                          M 	popp	__command
000108FA 2F06                     M 	move.l	d6,-(sp)
000108FC 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
00010900 45EF 0010                M 	lea	4*4(sp),a2
00010904 43FA 0000                M 	lea	.str_263(pc),a1
00010908 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_writeline_formatted
0001090E 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
00010912 504F                     M 	addq.w	#__sp,sp
00010914 46DF                     M 	move.w	(sp)+,sr
00010916 6000 0000                M 	bra.w	.instr_end_263
0001091A                          M 	.str_263:
0001091A                          M 	__fstring_generatedecodedstring	"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
0001091A =00000001                M 	__lpos:	set 1
0001091A =00000003                M 	__pos:	set instr("  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'%<')
0001091A                          M 	while	(__pos)
0001091A                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
0001091A 2020                     M 	dc.b	"  "
0001091C =00000009                M 	__endpos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'>')
0001091C =0000000D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",' ')
0001091C =00000009                M 	__midpos:	= __endpos
0001091C                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
0001091C                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
0001091C E8                       M 	dc.b	pal0
0001091D =0000000A                M 	__lpos:	set __endpos+1
0001091D =0000000E                M 	__pos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'%<')
0001091D                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
0001091D 6436 3A20                M 	dc.b	"d6: "
00010921 =00000014                M 	__endpos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'>')
00010921 =00000019                M 	__midpos:	set instr(__pos+5,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",' ')
00010921 =00000014                M 	__midpos:	= __endpos
00010921                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
00010921                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
00010921 EC                       M 	dc.b	pal2
00010922 =00000015                M 	__lpos:	set __endpos+1
00010922 =00000015                M 	__pos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'%<')
00010922                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
00010922                          M 	dc.b	""
00010922 =0000001C                M 	__endpos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'>')
00010922 =0000001D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",' ')
00010922 =0000001C                M 	__midpos:	= __endpos
00010922                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
00010922                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
00010922                          M 	__param:	substr ,,"hex"
00010922 83                       M 	dc.b	hex|3
00010923 =0000001D                M 	__lpos:	set __endpos+1
00010923 =0000001F                M 	__pos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'%<')
00010923                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
00010923 2020                     M 	dc.b	"  "
00010925 =00000025                M 	__endpos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'>')
00010925 =00000029                M 	__midpos:	set instr(__pos+5,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",' ')
00010925 =00000025                M 	__midpos:	= __endpos
00010925                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
00010925                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
00010925 E8                       M 	dc.b	pal0
00010926 =00000026                M 	__lpos:	set __endpos+1
00010926 =0000002A                M 	__pos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'%<')
00010926                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
00010926 6136 3A20                M 	dc.b	"a6: "
0001092A =00000030                M 	__endpos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'>')
0001092A =00000035                M 	__midpos:	set instr(__pos+5,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",' ')
0001092A =00000030                M 	__midpos:	= __endpos
0001092A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
0001092A                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
0001092A EC                       M 	dc.b	pal2
0001092B =00000031                M 	__lpos:	set __endpos+1
0001092B =00000031                M 	__pos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'%<')
0001092B                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
0001092B                          M 	dc.b	""
0001092B =00000038                M 	__endpos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'>')
0001092B =00000000                M 	__midpos:	set instr(__pos+5,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",' ')
0001092B =00000038                M 	__midpos:	= __endpos
0001092B                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
0001092B                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
0001092B                          M 	__param:	substr ,,"hex"
0001092B 83                       M 	dc.b	hex|3
0001092C =00000039                M 	__lpos:	set __endpos+1
0001092C =00000000                M 	__pos:	set instr(__pos+1,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>",'%<')
0001092C                          M 	__substr:	substr __lpos,,"  %<pal0>d6: %<pal2>%<.l d6>  %<pal0>a6: %<pal2>%<.l a6>"
0001092C                          M 	dc.b	""
0001092C 00                       M 	dc.b	0
0001092E 00                       M 	even
0001092E                          M 	.instr_end_263:
0001092E                            	Console.WriteLine "  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
0001092E 40E7                     M 	move.w	sr,-(sp)
00010930                          M 	__fstring_generateargumentscode	"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
00010930 =00000003                M 	__pos:	set instr("  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'%<')
00010930 =00000000                M 	__stack:set	0
00010930 =00000000                M 	__sp:	set 0
00010930                          M 	while	(__pos)
00010930 =00000009                M 	__endpos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'>')
00010930 =0000000D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",' ')
00010930 =00000009                M 	__midpos:	= __endpos
00010930                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
00010930                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
00010930 =0000000E                M 	__pos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'%<')
00010930 =00000014                M 	__endpos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'>')
00010930 =00000019                M 	__midpos:	set instr(__pos+5,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",' ')
00010930 =00000014                M 	__midpos:	= __endpos
00010930                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
00010930                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
00010930 =00000015                M 	__pos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'%<')
00010930 =0000001C                M 	__endpos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'>')
00010930 =0000001D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",' ')
00010930 =0000001C                M 	__midpos:	= __endpos
00010930                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
00010930                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
00010930                          M 	__operand:	substr __pos+1+1,__midpos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
00010930                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
00010930                          M 	pushp	"move.l d7,-(sp)"
00010930 =00000001                M 	__stack:	= __stack+1
00010930 =00000004                M 	__sp:	= __sp+4
00010930 =0000001F                M 	__pos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'%<')
00010930 =00000025                M 	__endpos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'>')
00010930 =00000029                M 	__midpos:	set instr(__pos+5,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",' ')
00010930 =00000025                M 	__midpos:	= __endpos
00010930                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
00010930                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
00010930 =0000002A                M 	__pos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'%<')
00010930 =00000030                M 	__endpos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'>')
00010930 =00000035                M 	__midpos:	set instr(__pos+5,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",' ')
00010930 =00000030                M 	__midpos:	= __endpos
00010930                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
00010930                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
00010930 =00000031                M 	__pos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'%<')
00010930 =00000038                M 	__endpos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'>')
00010930 =00000000                M 	__midpos:	set instr(__pos+5,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",' ')
00010930 =00000038                M 	__midpos:	= __endpos
00010930                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
00010930                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
00010930                          M 	__operand:	substr __pos+1+1,__midpos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
00010930                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
00010930                          M 	pushp	"move.l a7,-(sp)"
00010930 =00000002                M 	__stack:	= __stack+1
00010930 =00000008                M 	__sp:	= __sp+4
00010930 =00000000                M 	__pos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'%<')
00010930                          M 	rept	__stack
00010930                          M 	popp	__command
00010930 2F0F                     M 	move.l	a7,-(sp)
00010932                          M 	popp	__command
00010932 2F07                     M 	move.l	d7,-(sp)
00010934 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
00010938 45EF 0010                M 	lea	4*4(sp),a2
0001093C 43FA 0000                M 	lea	.str_266(pc),a1
00010940 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_writeline_formatted
00010946 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
0001094A 504F                     M 	addq.w	#__sp,sp
0001094C 46DF                     M 	move.w	(sp)+,sr
0001094E 6000 0000                M 	bra.w	.instr_end_266
00010952                          M 	.str_266:
00010952                          M 	__fstring_generatedecodedstring	"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
00010952 =00000001                M 	__lpos:	set 1
00010952 =00000003                M 	__pos:	set instr("  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'%<')
00010952                          M 	while	(__pos)
00010952                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
00010952 2020                     M 	dc.b	"  "
00010954 =00000009                M 	__endpos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'>')
00010954 =0000000D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",' ')
00010954 =00000009                M 	__midpos:	= __endpos
00010954                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
00010954                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
00010954 E8                       M 	dc.b	pal0
00010955 =0000000A                M 	__lpos:	set __endpos+1
00010955 =0000000E                M 	__pos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'%<')
00010955                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
00010955 6437 3A20                M 	dc.b	"d7: "
00010959 =00000014                M 	__endpos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'>')
00010959 =00000019                M 	__midpos:	set instr(__pos+5,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",' ')
00010959 =00000014                M 	__midpos:	= __endpos
00010959                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
00010959                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
00010959 EC                       M 	dc.b	pal2
0001095A =00000015                M 	__lpos:	set __endpos+1
0001095A =00000015                M 	__pos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'%<')
0001095A                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
0001095A                          M 	dc.b	""
0001095A =0000001C                M 	__endpos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'>')
0001095A =0000001D                M 	__midpos:	set instr(__pos+5,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",' ')
0001095A =0000001C                M 	__midpos:	= __endpos
0001095A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
0001095A                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
0001095A                          M 	__param:	substr ,,"hex"
0001095A 83                       M 	dc.b	hex|3
0001095B =0000001D                M 	__lpos:	set __endpos+1
0001095B =0000001F                M 	__pos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'%<')
0001095B                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
0001095B 2020                     M 	dc.b	"  "
0001095D =00000025                M 	__endpos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'>')
0001095D =00000029                M 	__midpos:	set instr(__pos+5,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",' ')
0001095D =00000025                M 	__midpos:	= __endpos
0001095D                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
0001095D                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
0001095D E8                       M 	dc.b	pal0
0001095E =00000026                M 	__lpos:	set __endpos+1
0001095E =0000002A                M 	__pos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'%<')
0001095E                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
0001095E 7370 3A20                M 	dc.b	"sp: "
00010962 =00000030                M 	__endpos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'>')
00010962 =00000035                M 	__midpos:	set instr(__pos+5,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",' ')
00010962 =00000030                M 	__midpos:	= __endpos
00010962                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
00010962                          M 	__substr:	substr __pos+1+1,__endpos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
00010962 EC                       M 	dc.b	pal2
00010963 =00000031                M 	__lpos:	set __endpos+1
00010963 =00000031                M 	__pos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'%<')
00010963                          M 	__substr:	substr __lpos,__pos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
00010963                          M 	dc.b	""
00010963 =00000038                M 	__endpos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'>')
00010963 =00000000                M 	__midpos:	set instr(__pos+5,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",' ')
00010963 =00000038                M 	__midpos:	= __endpos
00010963                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
00010963                          M 	__param:	substr __midpos+1,__endpos-1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
00010963                          M 	__param:	substr ,,"hex"
00010963 83                       M 	dc.b	hex|3
00010964 =00000039                M 	__lpos:	set __endpos+1
00010964 =00000000                M 	__pos:	set instr(__pos+1,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>",'%<')
00010964                          M 	__substr:	substr __lpos,,"  %<pal0>d7: %<pal2>%<.l d7>  %<pal0>sp: %<pal2>%<.l a7>"
00010964                          M 	dc.b	""
00010964 00                       M 	dc.b	0
00010966 00                       M 	even
00010966                          M 	.instr_end_266:
00010966                            	Console.BreakLine
00010966 40E7                     M 	move.w	sr,-(sp)
00010968 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_startnewline
0001096E 46DF                     M 	move.w	(sp)+,sr
00010970                            
00010970                            	Console.WriteLine "%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>"
00010970 40E7                     M 	move.w	sr,-(sp)
00010972                          M 	__fstring_generateargumentscode	"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>"
00010972 =00000001                M 	__pos:	set instr("%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>",'%<')
00010972 =00000000                M 	__stack:set	0
00010972 =00000000                M 	__sp:	set 0
00010972                          M 	while	(__pos)
00010972 =00000007                M 	__endpos:	set instr(__pos+1,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>",'>')
00010972 =0000000F                M 	__midpos:	set instr(__pos+5,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>",' ')
00010972 =00000007                M 	__midpos:	= __endpos
00010972                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>"
00010972                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>"
00010972 =00000010                M 	__pos:	set instr(__pos+1,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>",'%<')
00010972 =00000016                M 	__endpos:	set instr(__pos+1,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>",'>')
00010972 =0000001B                M 	__midpos:	set instr(__pos+5,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>",' ')
00010972 =00000016                M 	__midpos:	= __endpos
00010972                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>"
00010972                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>"
00010972 =00000017                M 	__pos:	set instr(__pos+1,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>",'%<')
00010972 =0000002F                M 	__endpos:	set instr(__pos+1,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>",'>')
00010972 =00000025                M 	__midpos:	set instr(__pos+5,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>",' ')
00010972                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>"
00010972                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>"
00010972                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>"
00010972                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>"
00010972                          M 	pushp	"move.l mVctMus.w,-(sp)"
00010972 =00000001                M 	__stack:	= __stack+1
00010972 =00000004                M 	__sp:	= __sp+4
00010972 =00000030                M 	__pos:	set instr(__pos+1,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>",'%<')
00010972 =0000003E                M 	__endpos:	set instr(__pos+1,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>",'>')
00010972 =00000000                M 	__midpos:	set instr(__pos+5,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>",' ')
00010972 =0000003E                M 	__midpos:	= __endpos
00010972                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>"
00010972                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>"
00010972 =00000000                M 	__pos:	set instr(__pos+1,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>",'%<')
00010972                          M 	rept	__stack
00010972                          M 	popp	__command
00010972 2F38 8102                M 	move.l	mvctmus.w,-(sp)
00010976 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
0001097A 45EF 0010                M 	lea	4*4(sp),a2
0001097E 43FA 0000                M 	lea	.str_270(pc),a1
00010982 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_writeline_formatted
00010988 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
0001098C 584F                     M 	addq.w	#__sp,sp
0001098E 46DF                     M 	move.w	(sp)+,sr
00010990 6000 0000                M 	bra.w	.instr_end_270
00010994                          M 	.str_270:
00010994                          M 	__fstring_generatedecodedstring	"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>"
00010994 =00000001                M 	__lpos:	set 1
00010994 =00000001                M 	__pos:	set instr("%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>",'%<')
00010994                          M 	while	(__pos)
00010994                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>"
00010994                          M 	dc.b	""
00010994 =00000007                M 	__endpos:	set instr(__pos+1,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>",'>')
00010994 =0000000F                M 	__midpos:	set instr(__pos+5,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>",' ')
00010994 =00000007                M 	__midpos:	= __endpos
00010994                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>"
00010994                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>"
00010994 EA                       M 	dc.b	pal1
00010995 =00000008                M 	__lpos:	set __endpos+1
00010995 =00000010                M 	__pos:	set instr(__pos+1,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>",'%<')
00010995                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>"
00010995 5061 744D 7573 3A20      M 	dc.b	"PatMus: "
0001099D =00000016                M 	__endpos:	set instr(__pos+1,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>",'>')
0001099D =0000001B                M 	__midpos:	set instr(__pos+5,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>",' ')
0001099D =00000016                M 	__midpos:	= __endpos
0001099D                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>"
0001099D                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>"
0001099D E8                       M 	dc.b	pal0
0001099E =00000017                M 	__lpos:	set __endpos+1
0001099E =00000017                M 	__pos:	set instr(__pos+1,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>",'%<')
0001099E                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>"
0001099E                          M 	dc.b	""
0001099E =0000002F                M 	__endpos:	set instr(__pos+1,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>",'>')
0001099E =00000025                M 	__midpos:	set instr(__pos+5,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>",' ')
0001099E                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>"
0001099E                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>"
0001099E BB                       M 	dc.b	sym|split|3
0001099F =00000030                M 	__lpos:	set __endpos+1
0001099F =00000030                M 	__pos:	set instr(__pos+1,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>",'%<')
0001099F                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>"
0001099F                          M 	dc.b	""
0001099F =0000003E                M 	__endpos:	set instr(__pos+1,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>",'>')
0001099F =00000000                M 	__midpos:	set instr(__pos+5,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>",' ')
0001099F =0000003E                M 	__midpos:	= __endpos
0001099F                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>"
0001099F                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>"
0001099F ECC0                     M 	dc.b	pal2,symdisp
000109A1 =0000003F                M 	__lpos:	set __endpos+1
000109A1 =00000000                M 	__pos:	set instr(__pos+1,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>",'%<')
000109A1                          M 	__substr:	substr __lpos,,"%<pal1>PatMus: %<pal0>%<.l mVctMus.w sym|split>%<pal2,symdisp>"
000109A1                          M 	dc.b	""
000109A1 00                       M 	dc.b	0
000109A2                          M 	even
000109A2                          M 	.instr_end_270:
000109A2                            	Console.Write	  "%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> "
000109A2 40E7                     M 	move.w	sr,-(sp)
000109A4                          M 	__fstring_generateargumentscode	"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> "
000109A4 =00000001                M 	__pos:	set instr("%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> ",'%<')
000109A4 =00000000                M 	__stack:set	0
000109A4 =00000000                M 	__sp:	set 0
000109A4                          M 	while	(__pos)
000109A4 =00000007                M 	__endpos:	set instr(__pos+1,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> ",'>')
000109A4 =0000000D                M 	__midpos:	set instr(__pos+5,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> ",' ')
000109A4 =00000007                M 	__midpos:	= __endpos
000109A4                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> "
000109A4                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> "
000109A4 =00000010                M 	__pos:	set instr(__pos+1,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> ",'%<')
000109A4 =00000016                M 	__endpos:	set instr(__pos+1,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> ",'>')
000109A4 =0000001B                M 	__midpos:	set instr(__pos+5,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> ",' ')
000109A4 =00000016                M 	__midpos:	= __endpos
000109A4                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> "
000109A4                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> "
000109A4 =00000017                M 	__pos:	set instr(__pos+1,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> ",'%<')
000109A4 =00000024                M 	__endpos:	set instr(__pos+1,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> ",'>')
000109A4 =00000025                M 	__midpos:	set instr(__pos+5,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> ",' ')
000109A4 =00000024                M 	__midpos:	= __endpos
000109A4                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> "
000109A4                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> "
000109A4                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> "
000109A4                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> "
000109A4                          M 	pushp	"move.b mFlags.w,1(sp)"
000109A4                          M 	pushp	"subq.w	#2, sp"
000109A4 =00000002                M 	__stack:	= __stack+2
000109A4 =00000002                M 	__sp:	= __sp+2
000109A4 =00000026                M 	__pos:	set instr(__pos+1,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> ",'%<')
000109A4 =00000034                M 	__endpos:	set instr(__pos+1,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> ",'>')
000109A4 =00000035                M 	__midpos:	set instr(__pos+5,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> ",' ')
000109A4 =00000034                M 	__midpos:	= __endpos
000109A4                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> "
000109A4                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> "
000109A4                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> "
000109A4                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> "
000109A4                          M 	pushp	"move.b mCtrPal.w,1(sp)"
000109A4                          M 	pushp	"subq.w	#2, sp"
000109A4 =00000004                M 	__stack:	= __stack+2
000109A4 =00000004                M 	__sp:	= __sp+2
000109A4 =00000000                M 	__pos:	set instr(__pos+1,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> ",'%<')
000109A4                          M 	rept	__stack
000109A4                          M 	popp	__command
000109A4 554F                     M 	subq.w	#2,sp
000109A6                          M 	popp	__command
000109A6 1F78 8101 0001           M 	move.b	mctrpal.w,1(sp)
000109AC                          M 	popp	__command
000109AC 554F                     M 	subq.w	#2,sp
000109AE                          M 	popp	__command
000109AE 1F78 8100 0001           M 	move.b	mflags.w,1(sp)
000109B4 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
000109B8 45EF 0010                M 	lea	4*4(sp),a2
000109BC 43FA 0000                M 	lea	.str_273(pc),a1
000109C0 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_write_formatted
000109C6 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
000109CA 584F                     M 	addq.w	#__sp,sp
000109CC 46DF                     M 	move.w	(sp)+,sr
000109CE 6000 0000                M 	bra.w	.instr_end_273
000109D2                          M 	.str_273:
000109D2                          M 	__fstring_generatedecodedstring	"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> "
000109D2 =00000001                M 	__lpos:	set 1
000109D2 =00000001                M 	__pos:	set instr("%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> ",'%<')
000109D2                          M 	while	(__pos)
000109D2                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> "
000109D2                          M 	dc.b	""
000109D2 =00000007                M 	__endpos:	set instr(__pos+1,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> ",'>')
000109D2 =0000000D                M 	__midpos:	set instr(__pos+5,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> ",' ')
000109D2 =00000007                M 	__midpos:	= __endpos
000109D2                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> "
000109D2                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> "
000109D2 EA                       M 	dc.b	pal1
000109D3 =00000008                M 	__lpos:	set __endpos+1
000109D3 =00000010                M 	__pos:	set instr(__pos+1,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> ",'%<')
000109D3                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> "
000109D3 4D69 7363 3A20 2020      M 	dc.b	"Misc:   "
000109DB =00000016                M 	__endpos:	set instr(__pos+1,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> ",'>')
000109DB =0000001B                M 	__midpos:	set instr(__pos+5,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> ",' ')
000109DB =00000016                M 	__midpos:	= __endpos
000109DB                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> "
000109DB                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> "
000109DB EC                       M 	dc.b	pal2
000109DC =00000017                M 	__lpos:	set __endpos+1
000109DC =00000017                M 	__pos:	set instr(__pos+1,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> ",'%<')
000109DC                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> "
000109DC                          M 	dc.b	""
000109DC =00000024                M 	__endpos:	set instr(__pos+1,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> ",'>')
000109DC =00000025                M 	__midpos:	set instr(__pos+5,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> ",' ')
000109DC =00000024                M 	__midpos:	= __endpos
000109DC                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> "
000109DC                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> "
000109DC                          M 	__param:	substr ,,"hex"
000109DC 80                       M 	dc.b	hex
000109DD =00000025                M 	__lpos:	set __endpos+1
000109DD =00000026                M 	__pos:	set instr(__pos+1,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> ",'%<')
000109DD                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> "
000109DD 20                       M 	dc.b	" "
000109DE =00000034                M 	__endpos:	set instr(__pos+1,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> ",'>')
000109DE =00000035                M 	__midpos:	set instr(__pos+5,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> ",' ')
000109DE =00000034                M 	__midpos:	= __endpos
000109DE                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> "
000109DE                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> "
000109DE                          M 	__param:	substr ,,"hex"
000109DE 80                       M 	dc.b	hex
000109DF =00000035                M 	__lpos:	set __endpos+1
000109DF =00000000                M 	__pos:	set instr(__pos+1,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> ",'%<')
000109DF                          M 	__substr:	substr __lpos,,"%<pal1>Misc:   %<pal2>%<.b mFlags.w> %<.b mCtrPal.w> "
000109DF 20                       M 	dc.b	" "
000109E0 00                       M 	dc.b	0
000109E2 00                       M 	even
000109E2                          M 	.instr_end_273:
000109E2                            	Console.WriteLine "%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>"
000109E2 40E7                     M 	move.w	sr,-(sp)
000109E4                          M 	__fstring_generateargumentscode	"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>"
000109E4 =00000001                M 	__pos:	set instr("%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>",'%<')
000109E4 =00000000                M 	__stack:set	0
000109E4 =00000000                M 	__sp:	set 0
000109E4                          M 	while	(__pos)
000109E4 =00000011                M 	__endpos:	set instr(__pos+1,"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>",'>')
000109E4 =00000012                M 	__midpos:	set instr(__pos+5,"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>",' ')
000109E4 =00000011                M 	__midpos:	= __endpos
000109E4                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>"
000109E4                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>"
000109E4                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>"
000109E4                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>"
000109E4                          M 	pushp	"move.b mSpindash.w,1(sp)"
000109E4                          M 	pushp	"subq.w	#2, sp"
000109E4 =00000002                M 	__stack:	= __stack+2
000109E4 =00000002                M 	__sp:	= __sp+2
000109E4 =00000013                M 	__pos:	set instr(__pos+1,"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>",'%<')
000109E4 =00000022                M 	__endpos:	set instr(__pos+1,"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>",'>')
000109E4 =00000023                M 	__midpos:	set instr(__pos+5,"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>",' ')
000109E4 =00000022                M 	__midpos:	= __endpos
000109E4                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>"
000109E4                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>"
000109E4                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>"
000109E4                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>"
000109E4                          M 	pushp	"move.b mContCtr.w,1(sp)"
000109E4                          M 	pushp	"subq.w	#2, sp"
000109E4 =00000004                M 	__stack:	= __stack+2
000109E4 =00000004                M 	__sp:	= __sp+2
000109E4 =00000024                M 	__pos:	set instr(__pos+1,"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>",'%<')
000109E4 =00000034                M 	__endpos:	set instr(__pos+1,"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>",'>')
000109E4 =00000000                M 	__midpos:	set instr(__pos+5,"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>",' ')
000109E4 =00000034                M 	__midpos:	= __endpos
000109E4                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>"
000109E4                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>"
000109E4                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>"
000109E4                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>"
000109E4                          M 	pushp	"move.b mContLast.w,1(sp)"
000109E4                          M 	pushp	"subq.w	#2, sp"
000109E4 =00000006                M 	__stack:	= __stack+2
000109E4 =00000006                M 	__sp:	= __sp+2
000109E4 =00000000                M 	__pos:	set instr(__pos+1,"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>",'%<')
000109E4                          M 	rept	__stack
000109E4                          M 	popp	__command
000109E4 554F                     M 	subq.w	#2,sp
000109E6                          M 	popp	__command
000109E6 1F78 811D 0001           M 	move.b	mcontlast.w,1(sp)
000109EC                          M 	popp	__command
000109EC 554F                     M 	subq.w	#2,sp
000109EE                          M 	popp	__command
000109EE 1F78 811C 0001           M 	move.b	mcontctr.w,1(sp)
000109F4                          M 	popp	__command
000109F4 554F                     M 	subq.w	#2,sp
000109F6                          M 	popp	__command
000109F6 1F78 811B 0001           M 	move.b	mspindash.w,1(sp)
000109FC 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
00010A00 45EF 0010                M 	lea	4*4(sp),a2
00010A04 43FA 0000                M 	lea	.str_276(pc),a1
00010A08 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_writeline_formatted
00010A0E 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
00010A12 5C4F                     M 	addq.w	#__sp,sp
00010A14 46DF                     M 	move.w	(sp)+,sr
00010A16 6000 0000                M 	bra.w	.instr_end_276
00010A1A                          M 	.str_276:
00010A1A                          M 	__fstring_generatedecodedstring	"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>"
00010A1A =00000001                M 	__lpos:	set 1
00010A1A =00000001                M 	__pos:	set instr("%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>",'%<')
00010A1A                          M 	while	(__pos)
00010A1A                          M 	__substr:	substr __lpos,__pos-1,"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>"
00010A1A                          M 	dc.b	""
00010A1A =00000011                M 	__endpos:	set instr(__pos+1,"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>",'>')
00010A1A =00000012                M 	__midpos:	set instr(__pos+5,"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>",' ')
00010A1A =00000011                M 	__midpos:	= __endpos
00010A1A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>"
00010A1A                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>"
00010A1A                          M 	__param:	substr ,,"hex"
00010A1A 80                       M 	dc.b	hex
00010A1B =00000012                M 	__lpos:	set __endpos+1
00010A1B =00000013                M 	__pos:	set instr(__pos+1,"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>",'%<')
00010A1B                          M 	__substr:	substr __lpos,__pos-1,"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>"
00010A1B 20                       M 	dc.b	" "
00010A1C =00000022                M 	__endpos:	set instr(__pos+1,"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>",'>')
00010A1C =00000023                M 	__midpos:	set instr(__pos+5,"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>",' ')
00010A1C =00000022                M 	__midpos:	= __endpos
00010A1C                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>"
00010A1C                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>"
00010A1C                          M 	__param:	substr ,,"hex"
00010A1C 80                       M 	dc.b	hex
00010A1D =00000023                M 	__lpos:	set __endpos+1
00010A1D =00000024                M 	__pos:	set instr(__pos+1,"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>",'%<')
00010A1D                          M 	__substr:	substr __lpos,__pos-1,"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>"
00010A1D 20                       M 	dc.b	" "
00010A1E =00000034                M 	__endpos:	set instr(__pos+1,"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>",'>')
00010A1E =00000000                M 	__midpos:	set instr(__pos+5,"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>",' ')
00010A1E =00000034                M 	__midpos:	= __endpos
00010A1E                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>"
00010A1E                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>"
00010A1E                          M 	__param:	substr ,,"hex"
00010A1E 80                       M 	dc.b	hex
00010A1F =00000035                M 	__lpos:	set __endpos+1
00010A1F =00000000                M 	__pos:	set instr(__pos+1,"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>",'%<')
00010A1F                          M 	__substr:	substr __lpos,,"%<.b mSpindash.w> %<.b mContCtr.w> %<.b mContLast.w>"
00010A1F                          M 	dc.b	""
00010A1F 00                       M 	dc.b	0
00010A20                          M 	even
00010A20                          M 	.instr_end_276:
00010A20                            	Console.Write	  "%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> "
00010A20 40E7                     M 	move.w	sr,-(sp)
00010A22                          M 	__fstring_generateargumentscode	"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> "
00010A22 =00000001                M 	__pos:	set instr("%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> ",'%<')
00010A22 =00000000                M 	__stack:set	0
00010A22 =00000000                M 	__sp:	set 0
00010A22                          M 	while	(__pos)
00010A22 =00000007                M 	__endpos:	set instr(__pos+1,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> ",'>')
00010A22 =0000000E                M 	__midpos:	set instr(__pos+5,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> ",' ')
00010A22 =00000007                M 	__midpos:	= __endpos
00010A22                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> "
00010A22                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> "
00010A22 =00000010                M 	__pos:	set instr(__pos+1,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> ",'%<')
00010A22 =00000016                M 	__endpos:	set instr(__pos+1,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> ",'>')
00010A22 =0000001B                M 	__midpos:	set instr(__pos+5,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> ",' ')
00010A22 =00000016                M 	__midpos:	= __endpos
00010A22                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> "
00010A22                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> "
00010A22 =00000017                M 	__pos:	set instr(__pos+1,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> ",'%<')
00010A22 =00000028                M 	__endpos:	set instr(__pos+1,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> ",'>')
00010A22 =00000029                M 	__midpos:	set instr(__pos+5,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> ",' ')
00010A22 =00000028                M 	__midpos:	= __endpos
00010A22                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> "
00010A22                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> "
00010A22                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> "
00010A22                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> "
00010A22                          M 	pushp	"move.b mTempoMain.w,1(sp)"
00010A22                          M 	pushp	"subq.w	#2, sp"
00010A22 =00000002                M 	__stack:	= __stack+2
00010A22 =00000002                M 	__sp:	= __sp+2
00010A22 =0000002A                M 	__pos:	set instr(__pos+1,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> ",'%<')
00010A22 =0000003C                M 	__endpos:	set instr(__pos+1,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> ",'>')
00010A22 =0000003D                M 	__midpos:	set instr(__pos+5,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> ",' ')
00010A22 =0000003C                M 	__midpos:	= __endpos
00010A22                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> "
00010A22                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> "
00010A22                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> "
00010A22                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> "
00010A22                          M 	pushp	"move.b mTempoSpeed.w,1(sp)"
00010A22                          M 	pushp	"subq.w	#2, sp"
00010A22 =00000004                M 	__stack:	= __stack+2
00010A22 =00000004                M 	__sp:	= __sp+2
00010A22 =00000000                M 	__pos:	set instr(__pos+1,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> ",'%<')
00010A22                          M 	rept	__stack
00010A22                          M 	popp	__command
00010A22 554F                     M 	subq.w	#2,sp
00010A24                          M 	popp	__command
00010A24 1F78 8113 0001           M 	move.b	mtempospeed.w,1(sp)
00010A2A                          M 	popp	__command
00010A2A 554F                     M 	subq.w	#2,sp
00010A2C                          M 	popp	__command
00010A2C 1F78 8112 0001           M 	move.b	mtempomain.w,1(sp)
00010A32 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
00010A36 45EF 0010                M 	lea	4*4(sp),a2
00010A3A 43FA 0000                M 	lea	.str_279(pc),a1
00010A3E 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_write_formatted
00010A44 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
00010A48 584F                     M 	addq.w	#__sp,sp
00010A4A 46DF                     M 	move.w	(sp)+,sr
00010A4C 6000 0000                M 	bra.w	.instr_end_279
00010A50                          M 	.str_279:
00010A50                          M 	__fstring_generatedecodedstring	"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> "
00010A50 =00000001                M 	__lpos:	set 1
00010A50 =00000001                M 	__pos:	set instr("%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> ",'%<')
00010A50                          M 	while	(__pos)
00010A50                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> "
00010A50                          M 	dc.b	""
00010A50 =00000007                M 	__endpos:	set instr(__pos+1,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> ",'>')
00010A50 =0000000E                M 	__midpos:	set instr(__pos+5,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> ",' ')
00010A50 =00000007                M 	__midpos:	= __endpos
00010A50                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> "
00010A50                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> "
00010A50 EA                       M 	dc.b	pal1
00010A51 =00000008                M 	__lpos:	set __endpos+1
00010A51 =00000010                M 	__pos:	set instr(__pos+1,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> ",'%<')
00010A51                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> "
00010A51 5465 6D70 6F3A 2020      M 	dc.b	"Tempo:  "
00010A59 =00000016                M 	__endpos:	set instr(__pos+1,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> ",'>')
00010A59 =0000001B                M 	__midpos:	set instr(__pos+5,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> ",' ')
00010A59 =00000016                M 	__midpos:	= __endpos
00010A59                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> "
00010A59                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> "
00010A59 EC                       M 	dc.b	pal2
00010A5A =00000017                M 	__lpos:	set __endpos+1
00010A5A =00000017                M 	__pos:	set instr(__pos+1,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> ",'%<')
00010A5A                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> "
00010A5A                          M 	dc.b	""
00010A5A =00000028                M 	__endpos:	set instr(__pos+1,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> ",'>')
00010A5A =00000029                M 	__midpos:	set instr(__pos+5,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> ",' ')
00010A5A =00000028                M 	__midpos:	= __endpos
00010A5A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> "
00010A5A                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> "
00010A5A                          M 	__param:	substr ,,"hex"
00010A5A 80                       M 	dc.b	hex
00010A5B =00000029                M 	__lpos:	set __endpos+1
00010A5B =0000002A                M 	__pos:	set instr(__pos+1,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> ",'%<')
00010A5B                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> "
00010A5B 20                       M 	dc.b	" "
00010A5C =0000003C                M 	__endpos:	set instr(__pos+1,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> ",'>')
00010A5C =0000003D                M 	__midpos:	set instr(__pos+5,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> ",' ')
00010A5C =0000003C                M 	__midpos:	= __endpos
00010A5C                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> "
00010A5C                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> "
00010A5C                          M 	__param:	substr ,,"hex"
00010A5C 80                       M 	dc.b	hex
00010A5D =0000003D                M 	__lpos:	set __endpos+1
00010A5D =00000000                M 	__pos:	set instr(__pos+1,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> ",'%<')
00010A5D                          M 	__substr:	substr __lpos,,"%<pal1>Tempo:  %<pal2>%<.b mTempoMain.w> %<.b mTempoSpeed.w> "
00010A5D 20                       M 	dc.b	" "
00010A5E 00                       M 	dc.b	0
00010A60 00                       M 	even
00010A60                          M 	.instr_end_279:
00010A60                            	Console.WriteLine "%<.b mTempo.w> %<.b mTempoCur.w>"
00010A60 40E7                     M 	move.w	sr,-(sp)
00010A62                          M 	__fstring_generateargumentscode	"%<.b mTempo.w> %<.b mTempoCur.w>"
00010A62 =00000001                M 	__pos:	set instr("%<.b mTempo.w> %<.b mTempoCur.w>",'%<')
00010A62 =00000000                M 	__stack:set	0
00010A62 =00000000                M 	__sp:	set 0
00010A62                          M 	while	(__pos)
00010A62 =0000000E                M 	__endpos:	set instr(__pos+1,"%<.b mTempo.w> %<.b mTempoCur.w>",'>')
00010A62 =0000000F                M 	__midpos:	set instr(__pos+5,"%<.b mTempo.w> %<.b mTempoCur.w>",' ')
00010A62 =0000000E                M 	__midpos:	= __endpos
00010A62                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<.b mTempo.w> %<.b mTempoCur.w>"
00010A62                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b mTempo.w> %<.b mTempoCur.w>"
00010A62                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<.b mTempo.w> %<.b mTempoCur.w>"
00010A62                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b mTempo.w> %<.b mTempoCur.w>"
00010A62                          M 	pushp	"move.b mTempo.w,1(sp)"
00010A62                          M 	pushp	"subq.w	#2, sp"
00010A62 =00000002                M 	__stack:	= __stack+2
00010A62 =00000002                M 	__sp:	= __sp+2
00010A62 =00000010                M 	__pos:	set instr(__pos+1,"%<.b mTempo.w> %<.b mTempoCur.w>",'%<')
00010A62 =00000020                M 	__endpos:	set instr(__pos+1,"%<.b mTempo.w> %<.b mTempoCur.w>",'>')
00010A62 =00000000                M 	__midpos:	set instr(__pos+5,"%<.b mTempo.w> %<.b mTempoCur.w>",' ')
00010A62 =00000020                M 	__midpos:	= __endpos
00010A62                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<.b mTempo.w> %<.b mTempoCur.w>"
00010A62                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b mTempo.w> %<.b mTempoCur.w>"
00010A62                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<.b mTempo.w> %<.b mTempoCur.w>"
00010A62                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b mTempo.w> %<.b mTempoCur.w>"
00010A62                          M 	pushp	"move.b mTempoCur.w,1(sp)"
00010A62                          M 	pushp	"subq.w	#2, sp"
00010A62 =00000004                M 	__stack:	= __stack+2
00010A62 =00000004                M 	__sp:	= __sp+2
00010A62 =00000000                M 	__pos:	set instr(__pos+1,"%<.b mTempo.w> %<.b mTempoCur.w>",'%<')
00010A62                          M 	rept	__stack
00010A62                          M 	popp	__command
00010A62 554F                     M 	subq.w	#2,sp
00010A64                          M 	popp	__command
00010A64 1F78 8115 0001           M 	move.b	mtempocur.w,1(sp)
00010A6A                          M 	popp	__command
00010A6A 554F                     M 	subq.w	#2,sp
00010A6C                          M 	popp	__command
00010A6C 1F78 8114 0001           M 	move.b	mtempo.w,1(sp)
00010A72 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
00010A76 45EF 0010                M 	lea	4*4(sp),a2
00010A7A 43FA 0000                M 	lea	.str_282(pc),a1
00010A7E 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_writeline_formatted
00010A84 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
00010A88 584F                     M 	addq.w	#__sp,sp
00010A8A 46DF                     M 	move.w	(sp)+,sr
00010A8C 6000 0000                M 	bra.w	.instr_end_282
00010A90                          M 	.str_282:
00010A90                          M 	__fstring_generatedecodedstring	"%<.b mTempo.w> %<.b mTempoCur.w>"
00010A90 =00000001                M 	__lpos:	set 1
00010A90 =00000001                M 	__pos:	set instr("%<.b mTempo.w> %<.b mTempoCur.w>",'%<')
00010A90                          M 	while	(__pos)
00010A90                          M 	__substr:	substr __lpos,__pos-1,"%<.b mTempo.w> %<.b mTempoCur.w>"
00010A90                          M 	dc.b	""
00010A90 =0000000E                M 	__endpos:	set instr(__pos+1,"%<.b mTempo.w> %<.b mTempoCur.w>",'>')
00010A90 =0000000F                M 	__midpos:	set instr(__pos+5,"%<.b mTempo.w> %<.b mTempoCur.w>",' ')
00010A90 =0000000E                M 	__midpos:	= __endpos
00010A90                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b mTempo.w> %<.b mTempoCur.w>"
00010A90                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b mTempo.w> %<.b mTempoCur.w>"
00010A90                          M 	__param:	substr ,,"hex"
00010A90 80                       M 	dc.b	hex
00010A91 =0000000F                M 	__lpos:	set __endpos+1
00010A91 =00000010                M 	__pos:	set instr(__pos+1,"%<.b mTempo.w> %<.b mTempoCur.w>",'%<')
00010A91                          M 	__substr:	substr __lpos,__pos-1,"%<.b mTempo.w> %<.b mTempoCur.w>"
00010A91 20                       M 	dc.b	" "
00010A92 =00000020                M 	__endpos:	set instr(__pos+1,"%<.b mTempo.w> %<.b mTempoCur.w>",'>')
00010A92 =00000000                M 	__midpos:	set instr(__pos+5,"%<.b mTempo.w> %<.b mTempoCur.w>",' ')
00010A92 =00000020                M 	__midpos:	= __endpos
00010A92                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b mTempo.w> %<.b mTempoCur.w>"
00010A92                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b mTempo.w> %<.b mTempoCur.w>"
00010A92                          M 	__param:	substr ,,"hex"
00010A92 80                       M 	dc.b	hex
00010A93 =00000021                M 	__lpos:	set __endpos+1
00010A93 =00000000                M 	__pos:	set instr(__pos+1,"%<.b mTempo.w> %<.b mTempoCur.w>",'%<')
00010A93                          M 	__substr:	substr __lpos,,"%<.b mTempo.w> %<.b mTempoCur.w>"
00010A93                          M 	dc.b	""
00010A93 00                       M 	dc.b	0
00010A94                          M 	even
00010A94                          M 	.instr_end_282:
00010A94                            	Console.Write	  "%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> "
00010A94 40E7                     M 	move.w	sr,-(sp)
00010A96                          M 	__fstring_generateargumentscode	"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> "
00010A96 =00000001                M 	__pos:	set instr("%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> ",'%<')
00010A96 =00000000                M 	__stack:set	0
00010A96 =00000000                M 	__sp:	set 0
00010A96                          M 	while	(__pos)
00010A96 =00000007                M 	__endpos:	set instr(__pos+1,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> ",'>')
00010A96 =0000000F                M 	__midpos:	set instr(__pos+5,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> ",' ')
00010A96 =00000007                M 	__midpos:	= __endpos
00010A96                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> "
00010A96                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> "
00010A96 =00000010                M 	__pos:	set instr(__pos+1,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> ",'%<')
00010A96 =00000016                M 	__endpos:	set instr(__pos+1,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> ",'>')
00010A96 =0000001B                M 	__midpos:	set instr(__pos+5,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> ",' ')
00010A96 =00000016                M 	__midpos:	= __endpos
00010A96                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> "
00010A96                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> "
00010A96 =00000017                M 	__pos:	set instr(__pos+1,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> ",'%<')
00010A96 =0000002A                M 	__endpos:	set instr(__pos+1,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> ",'>')
00010A96 =0000002B                M 	__midpos:	set instr(__pos+5,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> ",' ')
00010A96 =0000002A                M 	__midpos:	= __endpos
00010A96                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> "
00010A96                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> "
00010A96                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> "
00010A96                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> "
00010A96                          M 	pushp	"move.b mMasterVolFM.w,1(sp)"
00010A96                          M 	pushp	"subq.w	#2, sp"
00010A96 =00000002                M 	__stack:	= __stack+2
00010A96 =00000002                M 	__sp:	= __sp+2
00010A96 =0000002C                M 	__pos:	set instr(__pos+1,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> ",'%<')
00010A96 =00000040                M 	__endpos:	set instr(__pos+1,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> ",'>')
00010A96 =00000041                M 	__midpos:	set instr(__pos+5,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> ",' ')
00010A96 =00000040                M 	__midpos:	= __endpos
00010A96                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> "
00010A96                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> "
00010A96                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> "
00010A96                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> "
00010A96                          M 	pushp	"move.b mMasterVolDAC.w,1(sp)"
00010A96                          M 	pushp	"subq.w	#2, sp"
00010A96 =00000004                M 	__stack:	= __stack+2
00010A96 =00000004                M 	__sp:	= __sp+2
00010A96 =00000000                M 	__pos:	set instr(__pos+1,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> ",'%<')
00010A96                          M 	rept	__stack
00010A96                          M 	popp	__command
00010A96 554F                     M 	subq.w	#2,sp
00010A98                          M 	popp	__command
00010A98 1F78 811A 0001           M 	move.b	mmastervoldac.w,1(sp)
00010A9E                          M 	popp	__command
00010A9E 554F                     M 	subq.w	#2,sp
00010AA0                          M 	popp	__command
00010AA0 1F78 810E 0001           M 	move.b	mmastervolfm.w,1(sp)
00010AA6 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
00010AAA 45EF 0010                M 	lea	4*4(sp),a2
00010AAE 43FA 0000                M 	lea	.str_285(pc),a1
00010AB2 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_write_formatted
00010AB8 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
00010ABC 584F                     M 	addq.w	#__sp,sp
00010ABE 46DF                     M 	move.w	(sp)+,sr
00010AC0 6000 0000                M 	bra.w	.instr_end_285
00010AC4                          M 	.str_285:
00010AC4                          M 	__fstring_generatedecodedstring	"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> "
00010AC4 =00000001                M 	__lpos:	set 1
00010AC4 =00000001                M 	__pos:	set instr("%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> ",'%<')
00010AC4                          M 	while	(__pos)
00010AC4                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> "
00010AC4                          M 	dc.b	""
00010AC4 =00000007                M 	__endpos:	set instr(__pos+1,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> ",'>')
00010AC4 =0000000F                M 	__midpos:	set instr(__pos+5,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> ",' ')
00010AC4 =00000007                M 	__midpos:	= __endpos
00010AC4                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> "
00010AC4                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> "
00010AC4 EA                       M 	dc.b	pal1
00010AC5 =00000008                M 	__lpos:	set __endpos+1
00010AC5 =00000010                M 	__pos:	set instr(__pos+1,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> ",'%<')
00010AC5                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> "
00010AC5 566F 6C75 6D65 3A20      M 	dc.b	"Volume: "
00010ACD =00000016                M 	__endpos:	set instr(__pos+1,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> ",'>')
00010ACD =0000001B                M 	__midpos:	set instr(__pos+5,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> ",' ')
00010ACD =00000016                M 	__midpos:	= __endpos
00010ACD                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> "
00010ACD                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> "
00010ACD EC                       M 	dc.b	pal2
00010ACE =00000017                M 	__lpos:	set __endpos+1
00010ACE =00000017                M 	__pos:	set instr(__pos+1,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> ",'%<')
00010ACE                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> "
00010ACE                          M 	dc.b	""
00010ACE =0000002A                M 	__endpos:	set instr(__pos+1,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> ",'>')
00010ACE =0000002B                M 	__midpos:	set instr(__pos+5,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> ",' ')
00010ACE =0000002A                M 	__midpos:	= __endpos
00010ACE                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> "
00010ACE                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> "
00010ACE                          M 	__param:	substr ,,"hex"
00010ACE 80                       M 	dc.b	hex
00010ACF =0000002B                M 	__lpos:	set __endpos+1
00010ACF =0000002C                M 	__pos:	set instr(__pos+1,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> ",'%<')
00010ACF                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> "
00010ACF 20                       M 	dc.b	" "
00010AD0 =00000040                M 	__endpos:	set instr(__pos+1,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> ",'>')
00010AD0 =00000041                M 	__midpos:	set instr(__pos+5,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> ",' ')
00010AD0 =00000040                M 	__midpos:	= __endpos
00010AD0                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> "
00010AD0                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> "
00010AD0                          M 	__param:	substr ,,"hex"
00010AD0 80                       M 	dc.b	hex
00010AD1 =00000041                M 	__lpos:	set __endpos+1
00010AD1 =00000000                M 	__pos:	set instr(__pos+1,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> ",'%<')
00010AD1                          M 	__substr:	substr __lpos,,"%<pal1>Volume: %<pal2>%<.b mMasterVolFM.w> %<.b mMasterVolDAC.w> "
00010AD1 20                       M 	dc.b	" "
00010AD2 00                       M 	dc.b	0
00010AD4 00                       M 	even
00010AD4                          M 	.instr_end_285:
00010AD4                            	Console.WriteLine "%<.b mMasterVolPSG.w>"
00010AD4 40E7                     M 	move.w	sr,-(sp)
00010AD6                          M 	__fstring_generateargumentscode	"%<.b mMasterVolPSG.w>"
00010AD6 =00000001                M 	__pos:	set instr("%<.b mMasterVolPSG.w>",'%<')
00010AD6 =00000000                M 	__stack:set	0
00010AD6 =00000000                M 	__sp:	set 0
00010AD6                          M 	while	(__pos)
00010AD6 =00000015                M 	__endpos:	set instr(__pos+1,"%<.b mMasterVolPSG.w>",'>')
00010AD6 =00000000                M 	__midpos:	set instr(__pos+5,"%<.b mMasterVolPSG.w>",' ')
00010AD6 =00000015                M 	__midpos:	= __endpos
00010AD6                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<.b mMasterVolPSG.w>"
00010AD6                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b mMasterVolPSG.w>"
00010AD6                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<.b mMasterVolPSG.w>"
00010AD6                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b mMasterVolPSG.w>"
00010AD6                          M 	pushp	"move.b mMasterVolPSG.w,1(sp)"
00010AD6                          M 	pushp	"subq.w	#2, sp"
00010AD6 =00000002                M 	__stack:	= __stack+2
00010AD6 =00000002                M 	__sp:	= __sp+2
00010AD6 =00000000                M 	__pos:	set instr(__pos+1,"%<.b mMasterVolPSG.w>",'%<')
00010AD6                          M 	rept	__stack
00010AD6                          M 	popp	__command
00010AD6 554F                     M 	subq.w	#2,sp
00010AD8                          M 	popp	__command
00010AD8 1F78 8119 0001           M 	move.b	mmastervolpsg.w,1(sp)
00010ADE 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
00010AE2 45EF 0010                M 	lea	4*4(sp),a2
00010AE6 43FA 0000                M 	lea	.str_288(pc),a1
00010AEA 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_writeline_formatted
00010AF0 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
00010AF4 544F                     M 	addq.w	#__sp,sp
00010AF6 46DF                     M 	move.w	(sp)+,sr
00010AF8 6000 0000                M 	bra.w	.instr_end_288
00010AFC                          M 	.str_288:
00010AFC                          M 	__fstring_generatedecodedstring	"%<.b mMasterVolPSG.w>"
00010AFC =00000001                M 	__lpos:	set 1
00010AFC =00000001                M 	__pos:	set instr("%<.b mMasterVolPSG.w>",'%<')
00010AFC                          M 	while	(__pos)
00010AFC                          M 	__substr:	substr __lpos,__pos-1,"%<.b mMasterVolPSG.w>"
00010AFC                          M 	dc.b	""
00010AFC =00000015                M 	__endpos:	set instr(__pos+1,"%<.b mMasterVolPSG.w>",'>')
00010AFC =00000000                M 	__midpos:	set instr(__pos+5,"%<.b mMasterVolPSG.w>",' ')
00010AFC =00000015                M 	__midpos:	= __endpos
00010AFC                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b mMasterVolPSG.w>"
00010AFC                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b mMasterVolPSG.w>"
00010AFC                          M 	__param:	substr ,,"hex"
00010AFC 80                       M 	dc.b	hex
00010AFD =00000016                M 	__lpos:	set __endpos+1
00010AFD =00000000                M 	__pos:	set instr(__pos+1,"%<.b mMasterVolPSG.w>",'%<')
00010AFD                          M 	__substr:	substr __lpos,,"%<.b mMasterVolPSG.w>"
00010AFD                          M 	dc.b	""
00010AFD 00                       M 	dc.b	0
00010AFE                          M 	even
00010AFE                          M 	.instr_end_288:
00010AFE                            	Console.WriteLine "%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>"
00010AFE 40E7                     M 	move.w	sr,-(sp)
00010B00                          M 	__fstring_generateargumentscode	"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>"
00010B00 =00000001                M 	__pos:	set instr("%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>",'%<')
00010B00 =00000000                M 	__stack:set	0
00010B00 =00000000                M 	__sp:	set 0
00010B00                          M 	while	(__pos)
00010B00 =00000007                M 	__endpos:	set instr(__pos+1,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>",'>')
00010B00 =0000000D                M 	__midpos:	set instr(__pos+5,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>",' ')
00010B00 =00000007                M 	__midpos:	= __endpos
00010B00                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>"
00010B00                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>"
00010B00 =00000010                M 	__pos:	set instr(__pos+1,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>",'%<')
00010B00 =00000016                M 	__endpos:	set instr(__pos+1,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>",'>')
00010B00 =0000001B                M 	__midpos:	set instr(__pos+5,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>",' ')
00010B00 =00000016                M 	__midpos:	= __endpos
00010B00                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>"
00010B00                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>"
00010B00 =00000017                M 	__pos:	set instr(__pos+1,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>",'%<')
00010B00 =00000031                M 	__endpos:	set instr(__pos+1,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>",'>')
00010B00 =00000027                M 	__midpos:	set instr(__pos+5,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>",' ')
00010B00                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>"
00010B00                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>"
00010B00                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>"
00010B00                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>"
00010B00                          M 	pushp	"move.l mFadeAddr.w,-(sp)"
00010B00 =00000001                M 	__stack:	= __stack+1
00010B00 =00000004                M 	__sp:	= __sp+4
00010B00 =00000032                M 	__pos:	set instr(__pos+1,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>",'%<')
00010B00 =00000040                M 	__endpos:	set instr(__pos+1,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>",'>')
00010B00 =00000000                M 	__midpos:	set instr(__pos+5,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>",' ')
00010B00 =00000040                M 	__midpos:	= __endpos
00010B00                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>"
00010B00                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>"
00010B00 =00000000                M 	__pos:	set instr(__pos+1,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>",'%<')
00010B00                          M 	rept	__stack
00010B00                          M 	popp	__command
00010B00 2F38 810E                M 	move.l	mfadeaddr.w,-(sp)
00010B04 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
00010B08 45EF 0010                M 	lea	4*4(sp),a2
00010B0C 43FA 0000                M 	lea	.str_291(pc),a1
00010B10 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_writeline_formatted
00010B16 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
00010B1A 584F                     M 	addq.w	#__sp,sp
00010B1C 46DF                     M 	move.w	(sp)+,sr
00010B1E 6000 0000                M 	bra.w	.instr_end_291
00010B22                          M 	.str_291:
00010B22                          M 	__fstring_generatedecodedstring	"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>"
00010B22 =00000001                M 	__lpos:	set 1
00010B22 =00000001                M 	__pos:	set instr("%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>",'%<')
00010B22                          M 	while	(__pos)
00010B22                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>"
00010B22                          M 	dc.b	""
00010B22 =00000007                M 	__endpos:	set instr(__pos+1,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>",'>')
00010B22 =0000000D                M 	__midpos:	set instr(__pos+5,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>",' ')
00010B22 =00000007                M 	__midpos:	= __endpos
00010B22                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>"
00010B22                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>"
00010B22 EA                       M 	dc.b	pal1
00010B23 =00000008                M 	__lpos:	set __endpos+1
00010B23 =00000010                M 	__pos:	set instr(__pos+1,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>",'%<')
00010B23                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>"
00010B23 4661 6465 3A20 2020      M 	dc.b	"Fade:   "
00010B2B =00000016                M 	__endpos:	set instr(__pos+1,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>",'>')
00010B2B =0000001B                M 	__midpos:	set instr(__pos+5,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>",' ')
00010B2B =00000016                M 	__midpos:	= __endpos
00010B2B                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>"
00010B2B                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>"
00010B2B E8                       M 	dc.b	pal0
00010B2C =00000017                M 	__lpos:	set __endpos+1
00010B2C =00000017                M 	__pos:	set instr(__pos+1,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>",'%<')
00010B2C                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>"
00010B2C                          M 	dc.b	""
00010B2C =00000031                M 	__endpos:	set instr(__pos+1,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>",'>')
00010B2C =00000027                M 	__midpos:	set instr(__pos+5,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>",' ')
00010B2C                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>"
00010B2C                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>"
00010B2C BB                       M 	dc.b	sym|split|3
00010B2D =00000032                M 	__lpos:	set __endpos+1
00010B2D =00000032                M 	__pos:	set instr(__pos+1,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>",'%<')
00010B2D                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>"
00010B2D                          M 	dc.b	""
00010B2D =00000040                M 	__endpos:	set instr(__pos+1,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>",'>')
00010B2D =00000000                M 	__midpos:	set instr(__pos+5,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>",' ')
00010B2D =00000040                M 	__midpos:	= __endpos
00010B2D                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>"
00010B2D                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>"
00010B2D ECC0                     M 	dc.b	pal2,symdisp
00010B2F =00000041                M 	__lpos:	set __endpos+1
00010B2F =00000000                M 	__pos:	set instr(__pos+1,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>",'%<')
00010B2F                          M 	__substr:	substr __lpos,,"%<pal1>Fade:   %<pal0>%<.l mFadeAddr.w sym|split>%<pal2,symdisp>"
00010B2F                          M 	dc.b	""
00010B2F 00                       M 	dc.b	0
00010B30                          M 	even
00010B30                          M 	.instr_end_291:
00010B30                            	Console.WriteLine "%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>"
00010B30 40E7                     M 	move.w	sr,-(sp)
00010B32                          M 	__fstring_generateargumentscode	"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>"
00010B32 =00000001                M 	__pos:	set instr("%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>",'%<')
00010B32 =00000000                M 	__stack:set	0
00010B32 =00000000                M 	__sp:	set 0
00010B32                          M 	while	(__pos)
00010B32 =00000007                M 	__endpos:	set instr(__pos+1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>",'>')
00010B32 =0000000E                M 	__midpos:	set instr(__pos+5,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>",' ')
00010B32 =00000007                M 	__midpos:	= __endpos
00010B32                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>"
00010B32                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>"
00010B32 =00000010                M 	__pos:	set instr(__pos+1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>",'%<')
00010B32 =00000016                M 	__endpos:	set instr(__pos+1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>",'>')
00010B32 =0000001B                M 	__midpos:	set instr(__pos+5,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>",' ')
00010B32 =00000016                M 	__midpos:	= __endpos
00010B32                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>"
00010B32                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>"
00010B32 =00000017                M 	__pos:	set instr(__pos+1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>",'%<')
00010B32 =00000024                M 	__endpos:	set instr(__pos+1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>",'>')
00010B32 =00000025                M 	__midpos:	set instr(__pos+5,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>",' ')
00010B32 =00000024                M 	__midpos:	= __endpos
00010B32                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>"
00010B32                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>"
00010B32                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>"
00010B32                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>"
00010B32                          M 	pushp	"move.b mQueue.w,1(sp)"
00010B32                          M 	pushp	"subq.w	#2, sp"
00010B32 =00000002                M 	__stack:	= __stack+2
00010B32 =00000002                M 	__sp:	= __sp+2
00010B32 =00000026                M 	__pos:	set instr(__pos+1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>",'%<')
00010B32 =00000035                M 	__endpos:	set instr(__pos+1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>",'>')
00010B32 =00000036                M 	__midpos:	set instr(__pos+5,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>",' ')
00010B32 =00000035                M 	__midpos:	= __endpos
00010B32                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>"
00010B32                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>"
00010B32                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>"
00010B32                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>"
00010B32                          M 	pushp	"move.b mQueue+1.w,1(sp)"
00010B32                          M 	pushp	"subq.w	#2, sp"
00010B32 =00000004                M 	__stack:	= __stack+2
00010B32 =00000004                M 	__sp:	= __sp+2
00010B32 =00000037                M 	__pos:	set instr(__pos+1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>",'%<')
00010B32 =00000046                M 	__endpos:	set instr(__pos+1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>",'>')
00010B32 =00000000                M 	__midpos:	set instr(__pos+5,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>",' ')
00010B32 =00000046                M 	__midpos:	= __endpos
00010B32                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>"
00010B32                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>"
00010B32                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>"
00010B32                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>"
00010B32                          M 	pushp	"move.b mQueue+2.w,1(sp)"
00010B32                          M 	pushp	"subq.w	#2, sp"
00010B32 =00000006                M 	__stack:	= __stack+2
00010B32 =00000006                M 	__sp:	= __sp+2
00010B32 =00000000                M 	__pos:	set instr(__pos+1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>",'%<')
00010B32                          M 	rept	__stack
00010B32                          M 	popp	__command
00010B32 554F                     M 	subq.w	#2,sp
00010B34                          M 	popp	__command
00010B34 1F78 8118 0001           M 	move.b	mqueue+2.w,1(sp)
00010B3A                          M 	popp	__command
00010B3A 554F                     M 	subq.w	#2,sp
00010B3C                          M 	popp	__command
00010B3C 1F78 8117 0001           M 	move.b	mqueue+1.w,1(sp)
00010B42                          M 	popp	__command
00010B42 554F                     M 	subq.w	#2,sp
00010B44                          M 	popp	__command
00010B44 1F78 8116 0001           M 	move.b	mqueue.w,1(sp)
00010B4A 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
00010B4E 45EF 0010                M 	lea	4*4(sp),a2
00010B52 43FA 0000                M 	lea	.str_294(pc),a1
00010B56 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_writeline_formatted
00010B5C 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
00010B60 5C4F                     M 	addq.w	#__sp,sp
00010B62 46DF                     M 	move.w	(sp)+,sr
00010B64 6000 0000                M 	bra.w	.instr_end_294
00010B68                          M 	.str_294:
00010B68                          M 	__fstring_generatedecodedstring	"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>"
00010B68 =00000001                M 	__lpos:	set 1
00010B68 =00000001                M 	__pos:	set instr("%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>",'%<')
00010B68                          M 	while	(__pos)
00010B68                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>"
00010B68                          M 	dc.b	""
00010B68 =00000007                M 	__endpos:	set instr(__pos+1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>",'>')
00010B68 =0000000E                M 	__midpos:	set instr(__pos+5,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>",' ')
00010B68 =00000007                M 	__midpos:	= __endpos
00010B68                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>"
00010B68                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>"
00010B68 EA                       M 	dc.b	pal1
00010B69 =00000008                M 	__lpos:	set __endpos+1
00010B69 =00000010                M 	__pos:	set instr(__pos+1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>",'%<')
00010B69                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>"
00010B69 5175 6575 653A 2020      M 	dc.b	"Queue:  "
00010B71 =00000016                M 	__endpos:	set instr(__pos+1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>",'>')
00010B71 =0000001B                M 	__midpos:	set instr(__pos+5,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>",' ')
00010B71 =00000016                M 	__midpos:	= __endpos
00010B71                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>"
00010B71                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>"
00010B71 EC                       M 	dc.b	pal2
00010B72 =00000017                M 	__lpos:	set __endpos+1
00010B72 =00000017                M 	__pos:	set instr(__pos+1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>",'%<')
00010B72                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>"
00010B72                          M 	dc.b	""
00010B72 =00000024                M 	__endpos:	set instr(__pos+1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>",'>')
00010B72 =00000025                M 	__midpos:	set instr(__pos+5,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>",' ')
00010B72 =00000024                M 	__midpos:	= __endpos
00010B72                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>"
00010B72                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>"
00010B72                          M 	__param:	substr ,,"hex"
00010B72 80                       M 	dc.b	hex
00010B73 =00000025                M 	__lpos:	set __endpos+1
00010B73 =00000026                M 	__pos:	set instr(__pos+1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>",'%<')
00010B73                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>"
00010B73 20                       M 	dc.b	" "
00010B74 =00000035                M 	__endpos:	set instr(__pos+1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>",'>')
00010B74 =00000036                M 	__midpos:	set instr(__pos+5,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>",' ')
00010B74 =00000035                M 	__midpos:	= __endpos
00010B74                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>"
00010B74                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>"
00010B74                          M 	__param:	substr ,,"hex"
00010B74 80                       M 	dc.b	hex
00010B75 =00000036                M 	__lpos:	set __endpos+1
00010B75 =00000037                M 	__pos:	set instr(__pos+1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>",'%<')
00010B75                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>"
00010B75 20                       M 	dc.b	" "
00010B76 =00000046                M 	__endpos:	set instr(__pos+1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>",'>')
00010B76 =00000000                M 	__midpos:	set instr(__pos+5,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>",' ')
00010B76 =00000046                M 	__midpos:	= __endpos
00010B76                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>"
00010B76                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>"
00010B76                          M 	__param:	substr ,,"hex"
00010B76 80                       M 	dc.b	hex
00010B77 =00000047                M 	__lpos:	set __endpos+1
00010B77 =00000000                M 	__pos:	set instr(__pos+1,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>",'%<')
00010B77                          M 	__substr:	substr __lpos,,"%<pal1>Queue:  %<pal2>%<.b mQueue.w> %<.b mQueue+1.w> %<.b mQueue+2.w>"
00010B77                          M 	dc.b	""
00010B77 00                       M 	dc.b	0
00010B78                          M 	even
00010B78                          M 	.instr_end_294:
00010B78                            	Console.Write	  "%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> "
00010B78 40E7                     M 	move.w	sr,-(sp)
00010B7A                          M 	__fstring_generateargumentscode	"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> "
00010B7A =00000001                M 	__pos:	set instr("%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> ",'%<')
00010B7A =00000000                M 	__stack:set	0
00010B7A =00000000                M 	__sp:	set 0
00010B7A                          M 	while	(__pos)
00010B7A =00000007                M 	__endpos:	set instr(__pos+1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> ",'>')
00010B7A =0000000D                M 	__midpos:	set instr(__pos+5,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> ",' ')
00010B7A =00000007                M 	__midpos:	= __endpos
00010B7A                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> "
00010B7A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> "
00010B7A =00000010                M 	__pos:	set instr(__pos+1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> ",'%<')
00010B7A =00000016                M 	__endpos:	set instr(__pos+1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> ",'>')
00010B7A =0000001B                M 	__midpos:	set instr(__pos+5,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> ",' ')
00010B7A =00000016                M 	__midpos:	= __endpos
00010B7A                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> "
00010B7A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> "
00010B7A =00000017                M 	__pos:	set instr(__pos+1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> ",'%<')
00010B7A =00000023                M 	__endpos:	set instr(__pos+1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> ",'>')
00010B7A =00000024                M 	__midpos:	set instr(__pos+5,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> ",' ')
00010B7A =00000023                M 	__midpos:	= __endpos
00010B7A                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> "
00010B7A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> "
00010B7A                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> "
00010B7A                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> "
00010B7A                          M 	pushp	"move.b mComm.w,1(sp)"
00010B7A                          M 	pushp	"subq.w	#2, sp"
00010B7A =00000002                M 	__stack:	= __stack+2
00010B7A =00000002                M 	__sp:	= __sp+2
00010B7A =00000025                M 	__pos:	set instr(__pos+1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> ",'%<')
00010B7A =00000033                M 	__endpos:	set instr(__pos+1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> ",'>')
00010B7A =00000034                M 	__midpos:	set instr(__pos+5,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> ",' ')
00010B7A =00000033                M 	__midpos:	= __endpos
00010B7A                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> "
00010B7A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> "
00010B7A                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> "
00010B7A                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> "
00010B7A                          M 	pushp	"move.b mComm+1.w,1(sp)"
00010B7A                          M 	pushp	"subq.w	#2, sp"
00010B7A =00000004                M 	__stack:	= __stack+2
00010B7A =00000004                M 	__sp:	= __sp+2
00010B7A =00000035                M 	__pos:	set instr(__pos+1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> ",'%<')
00010B7A =00000043                M 	__endpos:	set instr(__pos+1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> ",'>')
00010B7A =00000044                M 	__midpos:	set instr(__pos+5,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> ",' ')
00010B7A =00000043                M 	__midpos:	= __endpos
00010B7A                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> "
00010B7A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> "
00010B7A                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> "
00010B7A                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> "
00010B7A                          M 	pushp	"move.b mComm+2.w,1(sp)"
00010B7A                          M 	pushp	"subq.w	#2, sp"
00010B7A =00000006                M 	__stack:	= __stack+2
00010B7A =00000006                M 	__sp:	= __sp+2
00010B7A =00000000                M 	__pos:	set instr(__pos+1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> ",'%<')
00010B7A                          M 	rept	__stack
00010B7A                          M 	popp	__command
00010B7A 554F                     M 	subq.w	#2,sp
00010B7C                          M 	popp	__command
00010B7C 1F78 8108 0001           M 	move.b	mcomm+2.w,1(sp)
00010B82                          M 	popp	__command
00010B82 554F                     M 	subq.w	#2,sp
00010B84                          M 	popp	__command
00010B84 1F78 8107 0001           M 	move.b	mcomm+1.w,1(sp)
00010B8A                          M 	popp	__command
00010B8A 554F                     M 	subq.w	#2,sp
00010B8C                          M 	popp	__command
00010B8C 1F78 8106 0001           M 	move.b	mcomm.w,1(sp)
00010B92 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
00010B96 45EF 0010                M 	lea	4*4(sp),a2
00010B9A 43FA 0000                M 	lea	.str_297(pc),a1
00010B9E 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_write_formatted
00010BA4 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
00010BA8 5C4F                     M 	addq.w	#__sp,sp
00010BAA 46DF                     M 	move.w	(sp)+,sr
00010BAC 6000 0000                M 	bra.w	.instr_end_297
00010BB0                          M 	.str_297:
00010BB0                          M 	__fstring_generatedecodedstring	"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> "
00010BB0 =00000001                M 	__lpos:	set 1
00010BB0 =00000001                M 	__pos:	set instr("%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> ",'%<')
00010BB0                          M 	while	(__pos)
00010BB0                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> "
00010BB0                          M 	dc.b	""
00010BB0 =00000007                M 	__endpos:	set instr(__pos+1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> ",'>')
00010BB0 =0000000D                M 	__midpos:	set instr(__pos+5,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> ",' ')
00010BB0 =00000007                M 	__midpos:	= __endpos
00010BB0                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> "
00010BB0                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> "
00010BB0 EA                       M 	dc.b	pal1
00010BB1 =00000008                M 	__lpos:	set __endpos+1
00010BB1 =00000010                M 	__pos:	set instr(__pos+1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> ",'%<')
00010BB1                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> "
00010BB1 436F 6D6D 3A20 2020      M 	dc.b	"Comm:   "
00010BB9 =00000016                M 	__endpos:	set instr(__pos+1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> ",'>')
00010BB9 =0000001B                M 	__midpos:	set instr(__pos+5,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> ",' ')
00010BB9 =00000016                M 	__midpos:	= __endpos
00010BB9                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> "
00010BB9                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> "
00010BB9 EC                       M 	dc.b	pal2
00010BBA =00000017                M 	__lpos:	set __endpos+1
00010BBA =00000017                M 	__pos:	set instr(__pos+1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> ",'%<')
00010BBA                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> "
00010BBA                          M 	dc.b	""
00010BBA =00000023                M 	__endpos:	set instr(__pos+1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> ",'>')
00010BBA =00000024                M 	__midpos:	set instr(__pos+5,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> ",' ')
00010BBA =00000023                M 	__midpos:	= __endpos
00010BBA                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> "
00010BBA                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> "
00010BBA                          M 	__param:	substr ,,"hex"
00010BBA 80                       M 	dc.b	hex
00010BBB =00000024                M 	__lpos:	set __endpos+1
00010BBB =00000025                M 	__pos:	set instr(__pos+1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> ",'%<')
00010BBB                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> "
00010BBB 20                       M 	dc.b	" "
00010BBC =00000033                M 	__endpos:	set instr(__pos+1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> ",'>')
00010BBC =00000034                M 	__midpos:	set instr(__pos+5,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> ",' ')
00010BBC =00000033                M 	__midpos:	= __endpos
00010BBC                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> "
00010BBC                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> "
00010BBC                          M 	__param:	substr ,,"hex"
00010BBC 80                       M 	dc.b	hex
00010BBD =00000034                M 	__lpos:	set __endpos+1
00010BBD =00000035                M 	__pos:	set instr(__pos+1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> ",'%<')
00010BBD                          M 	__substr:	substr __lpos,__pos-1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> "
00010BBD 20                       M 	dc.b	" "
00010BBE =00000043                M 	__endpos:	set instr(__pos+1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> ",'>')
00010BBE =00000044                M 	__midpos:	set instr(__pos+5,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> ",' ')
00010BBE =00000043                M 	__midpos:	= __endpos
00010BBE                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> "
00010BBE                          M 	__param:	substr __midpos+1,__endpos-1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> "
00010BBE                          M 	__param:	substr ,,"hex"
00010BBE 80                       M 	dc.b	hex
00010BBF =00000044                M 	__lpos:	set __endpos+1
00010BBF =00000000                M 	__pos:	set instr(__pos+1,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> ",'%<')
00010BBF                          M 	__substr:	substr __lpos,,"%<pal1>Comm:   %<pal2>%<.b mComm.w> %<.b mComm+1.w> %<.b mComm+2.w> "
00010BBF 20                       M 	dc.b	" "
00010BC0 00                       M 	dc.b	0
00010BC2 00                       M 	even
00010BC2                          M 	.instr_end_297:
00010BC2                            	Console.Write	  "%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> "
00010BC2 40E7                     M 	move.w	sr,-(sp)
00010BC4                          M 	__fstring_generateargumentscode	"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> "
00010BC4 =00000001                M 	__pos:	set instr("%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> ",'%<')
00010BC4 =00000000                M 	__stack:set	0
00010BC4 =00000000                M 	__sp:	set 0
00010BC4                          M 	while	(__pos)
00010BC4 =0000000F                M 	__endpos:	set instr(__pos+1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> ",'>')
00010BC4 =00000010                M 	__midpos:	set instr(__pos+5,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> ",' ')
00010BC4 =0000000F                M 	__midpos:	= __endpos
00010BC4                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> "
00010BC4                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> "
00010BC4                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> "
00010BC4                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> "
00010BC4                          M 	pushp	"move.b mComm+3.w,1(sp)"
00010BC4                          M 	pushp	"subq.w	#2, sp"
00010BC4 =00000002                M 	__stack:	= __stack+2
00010BC4 =00000002                M 	__sp:	= __sp+2
00010BC4 =00000011                M 	__pos:	set instr(__pos+1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> ",'%<')
00010BC4 =0000001F                M 	__endpos:	set instr(__pos+1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> ",'>')
00010BC4 =00000020                M 	__midpos:	set instr(__pos+5,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> ",' ')
00010BC4 =0000001F                M 	__midpos:	= __endpos
00010BC4                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> "
00010BC4                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> "
00010BC4                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> "
00010BC4                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> "
00010BC4                          M 	pushp	"move.b mComm+4.w,1(sp)"
00010BC4                          M 	pushp	"subq.w	#2, sp"
00010BC4 =00000004                M 	__stack:	= __stack+2
00010BC4 =00000004                M 	__sp:	= __sp+2
00010BC4 =00000021                M 	__pos:	set instr(__pos+1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> ",'%<')
00010BC4 =0000002F                M 	__endpos:	set instr(__pos+1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> ",'>')
00010BC4 =00000030                M 	__midpos:	set instr(__pos+5,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> ",' ')
00010BC4 =0000002F                M 	__midpos:	= __endpos
00010BC4                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> "
00010BC4                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> "
00010BC4                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> "
00010BC4                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> "
00010BC4                          M 	pushp	"move.b mComm+5.w,1(sp)"
00010BC4                          M 	pushp	"subq.w	#2, sp"
00010BC4 =00000006                M 	__stack:	= __stack+2
00010BC4 =00000006                M 	__sp:	= __sp+2
00010BC4 =00000031                M 	__pos:	set instr(__pos+1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> ",'%<')
00010BC4 =0000003F                M 	__endpos:	set instr(__pos+1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> ",'>')
00010BC4 =00000040                M 	__midpos:	set instr(__pos+5,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> ",' ')
00010BC4 =0000003F                M 	__midpos:	= __endpos
00010BC4                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> "
00010BC4                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> "
00010BC4                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> "
00010BC4                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> "
00010BC4                          M 	pushp	"move.b mComm+6.w,1(sp)"
00010BC4                          M 	pushp	"subq.w	#2, sp"
00010BC4 =00000008                M 	__stack:	= __stack+2
00010BC4 =00000008                M 	__sp:	= __sp+2
00010BC4 =00000000                M 	__pos:	set instr(__pos+1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> ",'%<')
00010BC4                          M 	rept	__stack
00010BC4                          M 	popp	__command
00010BC4 554F                     M 	subq.w	#2,sp
00010BC6                          M 	popp	__command
00010BC6 1F78 810C 0001           M 	move.b	mcomm+6.w,1(sp)
00010BCC                          M 	popp	__command
00010BCC 554F                     M 	subq.w	#2,sp
00010BCE                          M 	popp	__command
00010BCE 1F78 810B 0001           M 	move.b	mcomm+5.w,1(sp)
00010BD4                          M 	popp	__command
00010BD4 554F                     M 	subq.w	#2,sp
00010BD6                          M 	popp	__command
00010BD6 1F78 810A 0001           M 	move.b	mcomm+4.w,1(sp)
00010BDC                          M 	popp	__command
00010BDC 554F                     M 	subq.w	#2,sp
00010BDE                          M 	popp	__command
00010BDE 1F78 8109 0001           M 	move.b	mcomm+3.w,1(sp)
00010BE4 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
00010BE8 45EF 0010                M 	lea	4*4(sp),a2
00010BEC 43FA 0000                M 	lea	.str_300(pc),a1
00010BF0 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_write_formatted
00010BF6 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
00010BFA 504F                     M 	addq.w	#__sp,sp
00010BFC 46DF                     M 	move.w	(sp)+,sr
00010BFE 6000 0000                M 	bra.w	.instr_end_300
00010C02                          M 	.str_300:
00010C02                          M 	__fstring_generatedecodedstring	"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> "
00010C02 =00000001                M 	__lpos:	set 1
00010C02 =00000001                M 	__pos:	set instr("%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> ",'%<')
00010C02                          M 	while	(__pos)
00010C02                          M 	__substr:	substr __lpos,__pos-1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> "
00010C02                          M 	dc.b	""
00010C02 =0000000F                M 	__endpos:	set instr(__pos+1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> ",'>')
00010C02 =00000010                M 	__midpos:	set instr(__pos+5,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> ",' ')
00010C02 =0000000F                M 	__midpos:	= __endpos
00010C02                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> "
00010C02                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> "
00010C02                          M 	__param:	substr ,,"hex"
00010C02 80                       M 	dc.b	hex
00010C03 =00000010                M 	__lpos:	set __endpos+1
00010C03 =00000011                M 	__pos:	set instr(__pos+1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> ",'%<')
00010C03                          M 	__substr:	substr __lpos,__pos-1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> "
00010C03 20                       M 	dc.b	" "
00010C04 =0000001F                M 	__endpos:	set instr(__pos+1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> ",'>')
00010C04 =00000020                M 	__midpos:	set instr(__pos+5,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> ",' ')
00010C04 =0000001F                M 	__midpos:	= __endpos
00010C04                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> "
00010C04                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> "
00010C04                          M 	__param:	substr ,,"hex"
00010C04 80                       M 	dc.b	hex
00010C05 =00000020                M 	__lpos:	set __endpos+1
00010C05 =00000021                M 	__pos:	set instr(__pos+1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> ",'%<')
00010C05                          M 	__substr:	substr __lpos,__pos-1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> "
00010C05 20                       M 	dc.b	" "
00010C06 =0000002F                M 	__endpos:	set instr(__pos+1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> ",'>')
00010C06 =00000030                M 	__midpos:	set instr(__pos+5,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> ",' ')
00010C06 =0000002F                M 	__midpos:	= __endpos
00010C06                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> "
00010C06                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> "
00010C06                          M 	__param:	substr ,,"hex"
00010C06 80                       M 	dc.b	hex
00010C07 =00000030                M 	__lpos:	set __endpos+1
00010C07 =00000031                M 	__pos:	set instr(__pos+1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> ",'%<')
00010C07                          M 	__substr:	substr __lpos,__pos-1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> "
00010C07 20                       M 	dc.b	" "
00010C08 =0000003F                M 	__endpos:	set instr(__pos+1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> ",'>')
00010C08 =00000040                M 	__midpos:	set instr(__pos+5,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> ",' ')
00010C08 =0000003F                M 	__midpos:	= __endpos
00010C08                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> "
00010C08                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> "
00010C08                          M 	__param:	substr ,,"hex"
00010C08 80                       M 	dc.b	hex
00010C09 =00000040                M 	__lpos:	set __endpos+1
00010C09 =00000000                M 	__pos:	set instr(__pos+1,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> ",'%<')
00010C09                          M 	__substr:	substr __lpos,,"%<.b mComm+3.w> %<.b mComm+4.w> %<.b mComm+5.w> %<.b mComm+6.w> "
00010C09 20                       M 	dc.b	" "
00010C0A 00                       M 	dc.b	0
00010C0C 00                       M 	even
00010C0C                          M 	.instr_end_300:
00010C0C                            	Console.WriteLine "%<.b mComm+7.w>"
00010C0C 40E7                     M 	move.w	sr,-(sp)
00010C0E                          M 	__fstring_generateargumentscode	"%<.b mComm+7.w>"
00010C0E =00000001                M 	__pos:	set instr("%<.b mComm+7.w>",'%<')
00010C0E =00000000                M 	__stack:set	0
00010C0E =00000000                M 	__sp:	set 0
00010C0E                          M 	while	(__pos)
00010C0E =0000000F                M 	__endpos:	set instr(__pos+1,"%<.b mComm+7.w>",'>')
00010C0E =00000000                M 	__midpos:	set instr(__pos+5,"%<.b mComm+7.w>",' ')
00010C0E =0000000F                M 	__midpos:	= __endpos
00010C0E                          M 	__substr:	substr __pos+1+1,__endpos-1,"%<.b mComm+7.w>"
00010C0E                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b mComm+7.w>"
00010C0E                          M 	__operand:	substr __pos+1+1,__midpos-1,"%<.b mComm+7.w>"
00010C0E                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b mComm+7.w>"
00010C0E                          M 	pushp	"move.b mComm+7.w,1(sp)"
00010C0E                          M 	pushp	"subq.w	#2, sp"
00010C0E =00000002                M 	__stack:	= __stack+2
00010C0E =00000002                M 	__sp:	= __sp+2
00010C0E =00000000                M 	__pos:	set instr(__pos+1,"%<.b mComm+7.w>",'%<')
00010C0E                          M 	rept	__stack
00010C0E                          M 	popp	__command
00010C0E 554F                     M 	subq.w	#2,sp
00010C10                          M 	popp	__command
00010C10 1F78 810D 0001           M 	move.b	mcomm+7.w,1(sp)
00010C16 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
00010C1A 45EF 0010                M 	lea	4*4(sp),a2
00010C1E 43FA 0000                M 	lea	.str_303(pc),a1
00010C22 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_writeline_formatted
00010C28 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
00010C2C 544F                     M 	addq.w	#__sp,sp
00010C2E 46DF                     M 	move.w	(sp)+,sr
00010C30 6000 0000                M 	bra.w	.instr_end_303
00010C34                          M 	.str_303:
00010C34                          M 	__fstring_generatedecodedstring	"%<.b mComm+7.w>"
00010C34 =00000001                M 	__lpos:	set 1
00010C34 =00000001                M 	__pos:	set instr("%<.b mComm+7.w>",'%<')
00010C34                          M 	while	(__pos)
00010C34                          M 	__substr:	substr __lpos,__pos-1,"%<.b mComm+7.w>"
00010C34                          M 	dc.b	""
00010C34 =0000000F                M 	__endpos:	set instr(__pos+1,"%<.b mComm+7.w>",'>')
00010C34 =00000000                M 	__midpos:	set instr(__pos+5,"%<.b mComm+7.w>",' ')
00010C34 =0000000F                M 	__midpos:	= __endpos
00010C34                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"%<.b mComm+7.w>"
00010C34                          M 	__param:	substr __midpos+1,__endpos-1,"%<.b mComm+7.w>"
00010C34                          M 	__param:	substr ,,"hex"
00010C34 80                       M 	dc.b	hex
00010C35 =00000010                M 	__lpos:	set __endpos+1
00010C35 =00000000                M 	__pos:	set instr(__pos+1,"%<.b mComm+7.w>",'%<')
00010C35                          M 	__substr:	substr __lpos,,"%<.b mComm+7.w>"
00010C35                          M 	dc.b	""
00010C35 00                       M 	dc.b	0
00010C36                          M 	even
00010C36                          M 	.instr_end_303:
00010C36                            
00010C36                            .rts
00010C36 4E75                       	rts
00010C38                            ; ===========================================================================
00010C38                            ; ---------------------------------------------------------------------------
00010C38                            ; Invalid fade command handler
00010C38                            ; ---------------------------------------------------------------------------
00010C38                            
00010C38                            AMPS_Debug_FadeCmd	macro
00010C38                            	cmp.b	#fLast,d0	; check against max
00010C38                            	bhs.s	.fail		; if in range, branch
00010C38                            	cmp.b	#$80,d0		; check against min
00010C38                            	blo.s	.fail		; if too little, bra
00010C38                            	btst	#1,d0		; check if bit1 set
00010C38                            	bne.s	.fail		; if is, branch
00010C38                            	btst	#0,d0		; check if even
00010C38                            	beq.s	.ok		; if is, branch
00010C38                            
00010C38                            .fail
00010C38                            	if def(RaiseError)	; check if Vladik's debugger is active
00010C38                            		jsr	AMPS_DebugR_FadeCmd
00010C38                            	else
00010C38                            		bra.w	*
00010C38                            	endif
00010C38                            
00010C38                            .ok
00010C38                                endm
00010C38                            
00010C38                            AMPS_DebugR_FadeCmd:
00010C38                            		RaiseError2 "Invalid Fade command: %<.b d0>", AMPS_Debug_Console_Main
00010C38 40E7                     M 	move.w	sr,-(sp)
00010C3A                          M 	__fstring_generateargumentscode	"Invalid Fade command: %<.b d0>"
00010C3A =00000017                M 	__pos:	set instr("Invalid Fade command: %<.b d0>",'%<')
00010C3A =00000000                M 	__stack:set	0
00010C3A =00000000                M 	__sp:	set 0
00010C3A                          M 	while	(__pos)
00010C3A =0000001E                M 	__endpos:	set instr(__pos+1,"Invalid Fade command: %<.b d0>",'>')
00010C3A =00000000                M 	__midpos:	set instr(__pos+5,"Invalid Fade command: %<.b d0>",' ')
00010C3A =0000001E                M 	__midpos:	= __endpos
00010C3A                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid Fade command: %<.b d0>"
00010C3A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid Fade command: %<.b d0>"
00010C3A                          M 	__operand:	substr __pos+1+1,__midpos-1,"Invalid Fade command: %<.b d0>"
00010C3A                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid Fade command: %<.b d0>"
00010C3A                          M 	pushp	"move.b d0,1(sp)"
00010C3A                          M 	pushp	"subq.w	#2, sp"
00010C3A =00000002                M 	__stack:	= __stack+2
00010C3A =00000002                M 	__sp:	= __sp+2
00010C3A =00000000                M 	__pos:	set instr(__pos+1,"Invalid Fade command: %<.b d0>",'%<')
00010C3A                          M 	rept	__stack
00010C3A                          M 	popp	__command
00010C3A 554F                     M 	subq.w	#2,sp
00010C3C                          M 	popp	__command
00010C3C 1F40 0001                M 	move.b	d0,1(sp)
00010C40 4EB9 0000 0000           M 	jsr	errorhandler
00010C46                          M 	__fstring_generatedecodedstring	"Invalid Fade command: %<.b d0>"
00010C46 =00000001                M 	__lpos:	set 1
00010C46 =00000017                M 	__pos:	set instr("Invalid Fade command: %<.b d0>",'%<')
00010C46                          M 	while	(__pos)
00010C46                          M 	__substr:	substr __lpos,__pos-1,"Invalid Fade command: %<.b d0>"
00010C46 496E 7661 6C69 6420 4661+M 	dc.b	"Invalid Fade command: "
00010C5C =0000001E                M 	__endpos:	set instr(__pos+1,"Invalid Fade command: %<.b d0>",'>')
00010C5C =00000000                M 	__midpos:	set instr(__pos+5,"Invalid Fade command: %<.b d0>",' ')
00010C5C =0000001E                M 	__midpos:	= __endpos
00010C5C                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid Fade command: %<.b d0>"
00010C5C                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid Fade command: %<.b d0>"
00010C5C                          M 	__param:	substr ,,"hex"
00010C5C 80                       M 	dc.b	hex
00010C5D =0000001F                M 	__lpos:	set __endpos+1
00010C5D =00000000                M 	__pos:	set instr(__pos+1,"Invalid Fade command: %<.b d0>",'%<')
00010C5D                          M 	__substr:	substr __lpos,,"Invalid Fade command: %<.b d0>"
00010C5D                          M 	dc.b	""
00010C5D 00                       M 	dc.b	0
00010C5E 00                       M 	dc.b	+_eh_enter_console|(((*&1)^1)*_eh_align_offset)
00010C60 00                       M 	even
00010C60 4EF9 0001 07A6           M 	jmp	amps_debug_console_main
00010C66                          M 	even
00010C66                            ; ===========================================================================
00010C66                            ; ---------------------------------------------------------------------------
00010C66                            ; Invalid volume envelope handler
00010C66                            ; ---------------------------------------------------------------------------
00010C66                            
00010C66                            AMPS_Debug_VolEnvID	macro
00010C66                            	cmp.b	#(VolEnvs_End-VolEnvs)/4,d4	; check against max
00010C66                            	bls.s	.ok			; if in range, branch
00010C66                            
00010C66                            	if def(RaiseError)	; check if Vladik's debugger is active
00010C66                            		jsr	AMPS_DebugR_VolEnvID
00010C66                            	else
00010C66                            		bra.w	*
00010C66                            	endif
00010C66                            
00010C66                            .ok
00010C66                                endm
00010C66                            
00010C66                            AMPS_DebugR_VolEnvID:
00010C66                            		RaiseError2 "Volume envelope ID out of range: %<.b d4>", AMPS_Debug_Console_Channel
00010C66 40E7                     M 	move.w	sr,-(sp)
00010C68                          M 	__fstring_generateargumentscode	"Volume envelope ID out of range: %<.b d4>"
00010C68 =00000022                M 	__pos:	set instr("Volume envelope ID out of range: %<.b d4>",'%<')
00010C68 =00000000                M 	__stack:set	0
00010C68 =00000000                M 	__sp:	set 0
00010C68                          M 	while	(__pos)
00010C68 =00000029                M 	__endpos:	set instr(__pos+1,"Volume envelope ID out of range: %<.b d4>",'>')
00010C68 =00000000                M 	__midpos:	set instr(__pos+5,"Volume envelope ID out of range: %<.b d4>",' ')
00010C68 =00000029                M 	__midpos:	= __endpos
00010C68                          M 	__substr:	substr __pos+1+1,__endpos-1,"Volume envelope ID out of range: %<.b d4>"
00010C68                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Volume envelope ID out of range: %<.b d4>"
00010C68                          M 	__operand:	substr __pos+1+1,__midpos-1,"Volume envelope ID out of range: %<.b d4>"
00010C68                          M 	__param:	substr __midpos+1,__endpos-1,"Volume envelope ID out of range: %<.b d4>"
00010C68                          M 	pushp	"move.b d4,1(sp)"
00010C68                          M 	pushp	"subq.w	#2, sp"
00010C68 =00000002                M 	__stack:	= __stack+2
00010C68 =00000002                M 	__sp:	= __sp+2
00010C68 =00000000                M 	__pos:	set instr(__pos+1,"Volume envelope ID out of range: %<.b d4>",'%<')
00010C68                          M 	rept	__stack
00010C68                          M 	popp	__command
00010C68 554F                     M 	subq.w	#2,sp
00010C6A                          M 	popp	__command
00010C6A 1F44 0001                M 	move.b	d4,1(sp)
00010C6E 4EB9 0000 0000           M 	jsr	errorhandler
00010C74                          M 	__fstring_generatedecodedstring	"Volume envelope ID out of range: %<.b d4>"
00010C74 =00000001                M 	__lpos:	set 1
00010C74 =00000022                M 	__pos:	set instr("Volume envelope ID out of range: %<.b d4>",'%<')
00010C74                          M 	while	(__pos)
00010C74                          M 	__substr:	substr __lpos,__pos-1,"Volume envelope ID out of range: %<.b d4>"
00010C74 566F 6C75 6D65 2065 6E76+M 	dc.b	"Volume envelope ID out of range: "
00010C95 =00000029                M 	__endpos:	set instr(__pos+1,"Volume envelope ID out of range: %<.b d4>",'>')
00010C95 =00000000                M 	__midpos:	set instr(__pos+5,"Volume envelope ID out of range: %<.b d4>",' ')
00010C95 =00000029                M 	__midpos:	= __endpos
00010C95                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Volume envelope ID out of range: %<.b d4>"
00010C95                          M 	__param:	substr __midpos+1,__endpos-1,"Volume envelope ID out of range: %<.b d4>"
00010C95                          M 	__param:	substr ,,"hex"
00010C95 80                       M 	dc.b	hex
00010C96 =0000002A                M 	__lpos:	set __endpos+1
00010C96 =00000000                M 	__pos:	set instr(__pos+1,"Volume envelope ID out of range: %<.b d4>",'%<')
00010C96                          M 	__substr:	substr __lpos,,"Volume envelope ID out of range: %<.b d4>"
00010C96                          M 	dc.b	""
00010C96 00                       M 	dc.b	0
00010C97 00                       M 	dc.b	+_eh_enter_console|(((*&1)^1)*_eh_align_offset)
00010C98                          M 	even
00010C98 4EF9 0001 0000           M 	jmp	amps_debug_console_channel
00010C9E                          M 	even
00010C9E                            ; ===========================================================================
00010C9E                            ; ---------------------------------------------------------------------------
00010C9E                            ; Invalid volume envelope command handler
00010C9E                            ; ---------------------------------------------------------------------------
00010C9E                            
00010C9E                            AMPS_Debug_VolEnvCmd	macro
00010C9E                            	cmp.b	#eLast,d0	; check against max
00010C9E                            	bhs.s	.fail		; if too much, bra
00010C9E                            	cmp.b	#$80,d0		; check against min
00010C9E                            	blo.s	.fail		; if too little, bra
00010C9E                            	btst	#0,d0		; check if even
00010C9E                            	beq.s	.ok		; if is, branch
00010C9E                            
00010C9E                            .fail
00010C9E                            	if def(RaiseError)	; check if Vladik's debugger is active
00010C9E                            		RaiseError2 "Volume envelope command invalid: %<.b d0>", AMPS_Debug_Console_Channel
00010C9E                            	else
00010C9E                            		bra.w	*
00010C9E                            	endif
00010C9E                            
00010C9E                            .ok
00010C9E                                endm
00010C9E                            ; ===========================================================================
00010C9E                            ; ---------------------------------------------------------------------------
00010C9E                            ; PSG note check
00010C9E                            ; ---------------------------------------------------------------------------
00010C9E                            
00010C9E                            AMPS_Debug_NotePSG	macro
00010C9E                            	cmp.b	#dFreqPSG_-dFreqPSG,d5; check against max
00010C9E                            	blo.s	.ok		; if too little, bra
00010C9E                            
00010C9E                            .fail
00010C9E                            	if def(RaiseError)	; check if Vladik's debugger is active
00010C9E                            		jsr	AMPS_DebugR_NotePSG
00010C9E                            	else
00010C9E                            		bra.w	*
00010C9E                            	endif
00010C9E                            
00010C9E                            .ok
00010C9E                                endm
00010C9E                            
00010C9E                            AMPS_DebugR_NotePSG:
00010C9E E24D                       		lsr.w	#1,d5	; get real note
00010CA0                            		RaiseError2 "Invalid PSG note: %<.b d5>", AMPS_Debug_Console_Channel
00010CA0 40E7                     M 	move.w	sr,-(sp)
00010CA2                          M 	__fstring_generateargumentscode	"Invalid PSG note: %<.b d5>"
00010CA2 =00000013                M 	__pos:	set instr("Invalid PSG note: %<.b d5>",'%<')
00010CA2 =00000000                M 	__stack:set	0
00010CA2 =00000000                M 	__sp:	set 0
00010CA2                          M 	while	(__pos)
00010CA2 =0000001A                M 	__endpos:	set instr(__pos+1,"Invalid PSG note: %<.b d5>",'>')
00010CA2 =00000000                M 	__midpos:	set instr(__pos+5,"Invalid PSG note: %<.b d5>",' ')
00010CA2 =0000001A                M 	__midpos:	= __endpos
00010CA2                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid PSG note: %<.b d5>"
00010CA2                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid PSG note: %<.b d5>"
00010CA2                          M 	__operand:	substr __pos+1+1,__midpos-1,"Invalid PSG note: %<.b d5>"
00010CA2                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid PSG note: %<.b d5>"
00010CA2                          M 	pushp	"move.b d5,1(sp)"
00010CA2                          M 	pushp	"subq.w	#2, sp"
00010CA2 =00000002                M 	__stack:	= __stack+2
00010CA2 =00000002                M 	__sp:	= __sp+2
00010CA2 =00000000                M 	__pos:	set instr(__pos+1,"Invalid PSG note: %<.b d5>",'%<')
00010CA2                          M 	rept	__stack
00010CA2                          M 	popp	__command
00010CA2 554F                     M 	subq.w	#2,sp
00010CA4                          M 	popp	__command
00010CA4 1F45 0001                M 	move.b	d5,1(sp)
00010CA8 4EB9 0000 0000           M 	jsr	errorhandler
00010CAE                          M 	__fstring_generatedecodedstring	"Invalid PSG note: %<.b d5>"
00010CAE =00000001                M 	__lpos:	set 1
00010CAE =00000013                M 	__pos:	set instr("Invalid PSG note: %<.b d5>",'%<')
00010CAE                          M 	while	(__pos)
00010CAE                          M 	__substr:	substr __lpos,__pos-1,"Invalid PSG note: %<.b d5>"
00010CAE 496E 7661 6C69 6420 5053+M 	dc.b	"Invalid PSG note: "
00010CC0 =0000001A                M 	__endpos:	set instr(__pos+1,"Invalid PSG note: %<.b d5>",'>')
00010CC0 =00000000                M 	__midpos:	set instr(__pos+5,"Invalid PSG note: %<.b d5>",' ')
00010CC0 =0000001A                M 	__midpos:	= __endpos
00010CC0                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid PSG note: %<.b d5>"
00010CC0                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid PSG note: %<.b d5>"
00010CC0                          M 	__param:	substr ,,"hex"
00010CC0 80                       M 	dc.b	hex
00010CC1 =0000001B                M 	__lpos:	set __endpos+1
00010CC1 =00000000                M 	__pos:	set instr(__pos+1,"Invalid PSG note: %<.b d5>",'%<')
00010CC1                          M 	__substr:	substr __lpos,,"Invalid PSG note: %<.b d5>"
00010CC1                          M 	dc.b	""
00010CC1 00                       M 	dc.b	0
00010CC2 00                       M 	dc.b	+_eh_enter_console|(((*&1)^1)*_eh_align_offset)
00010CC4 00                       M 	even
00010CC4 4EF9 0001 0000           M 	jmp	amps_debug_console_channel
00010CCA                          M 	even
00010CCA                            ; ===========================================================================
00010CCA                            ; ---------------------------------------------------------------------------
00010CCA                            ; FM note check
00010CCA                            ; ---------------------------------------------------------------------------
00010CCA                            
00010CCA                            AMPS_Debug_NoteFM	macro
00010CCA                            	cmp.b	#dFreqFM_-dFreqFM,d5; check against max
00010CCA                            	blo.s	.ok		; if too little, bra
00010CCA                            
00010CCA                            .fail
00010CCA                            	if def(RaiseError)	; check if Vladik's debugger is active
00010CCA                            		jsr	AMPS_DebugR_NoteFM
00010CCA                            	else
00010CCA                            		bra.w	*
00010CCA                            	endif
00010CCA                            
00010CCA                            .ok
00010CCA                                endm
00010CCA                            
00010CCA                            AMPS_DebugR_NoteFM:
00010CCA E24D                       		lsr.w	#1,d5	; get real note
00010CCC                            		RaiseError2 "Invalid FM note: %<.b d5>", AMPS_Debug_Console_Channel
00010CCC 40E7                     M 	move.w	sr,-(sp)
00010CCE                          M 	__fstring_generateargumentscode	"Invalid FM note: %<.b d5>"
00010CCE =00000012                M 	__pos:	set instr("Invalid FM note: %<.b d5>",'%<')
00010CCE =00000000                M 	__stack:set	0
00010CCE =00000000                M 	__sp:	set 0
00010CCE                          M 	while	(__pos)
00010CCE =00000019                M 	__endpos:	set instr(__pos+1,"Invalid FM note: %<.b d5>",'>')
00010CCE =00000000                M 	__midpos:	set instr(__pos+5,"Invalid FM note: %<.b d5>",' ')
00010CCE =00000019                M 	__midpos:	= __endpos
00010CCE                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid FM note: %<.b d5>"
00010CCE                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid FM note: %<.b d5>"
00010CCE                          M 	__operand:	substr __pos+1+1,__midpos-1,"Invalid FM note: %<.b d5>"
00010CCE                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid FM note: %<.b d5>"
00010CCE                          M 	pushp	"move.b d5,1(sp)"
00010CCE                          M 	pushp	"subq.w	#2, sp"
00010CCE =00000002                M 	__stack:	= __stack+2
00010CCE =00000002                M 	__sp:	= __sp+2
00010CCE =00000000                M 	__pos:	set instr(__pos+1,"Invalid FM note: %<.b d5>",'%<')
00010CCE                          M 	rept	__stack
00010CCE                          M 	popp	__command
00010CCE 554F                     M 	subq.w	#2,sp
00010CD0                          M 	popp	__command
00010CD0 1F45 0001                M 	move.b	d5,1(sp)
00010CD4 4EB9 0000 0000           M 	jsr	errorhandler
00010CDA                          M 	__fstring_generatedecodedstring	"Invalid FM note: %<.b d5>"
00010CDA =00000001                M 	__lpos:	set 1
00010CDA =00000012                M 	__pos:	set instr("Invalid FM note: %<.b d5>",'%<')
00010CDA                          M 	while	(__pos)
00010CDA                          M 	__substr:	substr __lpos,__pos-1,"Invalid FM note: %<.b d5>"
00010CDA 496E 7661 6C69 6420 464D+M 	dc.b	"Invalid FM note: "
00010CEB =00000019                M 	__endpos:	set instr(__pos+1,"Invalid FM note: %<.b d5>",'>')
00010CEB =00000000                M 	__midpos:	set instr(__pos+5,"Invalid FM note: %<.b d5>",' ')
00010CEB =00000019                M 	__midpos:	= __endpos
00010CEB                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid FM note: %<.b d5>"
00010CEB                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid FM note: %<.b d5>"
00010CEB                          M 	__param:	substr ,,"hex"
00010CEB 80                       M 	dc.b	hex
00010CEC =0000001A                M 	__lpos:	set __endpos+1
00010CEC =00000000                M 	__pos:	set instr(__pos+1,"Invalid FM note: %<.b d5>",'%<')
00010CEC                          M 	__substr:	substr __lpos,,"Invalid FM note: %<.b d5>"
00010CEC                          M 	dc.b	""
00010CEC 00                       M 	dc.b	0
00010CED 00                       M 	dc.b	+_eh_enter_console|(((*&1)^1)*_eh_align_offset)
00010CEE                          M 	even
00010CEE 4EF9 0001 0000           M 	jmp	amps_debug_console_channel
00010CF4                          M 	even
00010CF4                            ; ===========================================================================
00010CF4                            ; ---------------------------------------------------------------------------
00010CF4                            ; DAC frequency check
00010CF4                            ; ---------------------------------------------------------------------------
00010CF4                            
00010CF4                            AMPS_Debug_FreqDAC	macro
00010CF4                            	cmp.w	#MaxPitch,d6	; check if frequency is too large
00010CF4                            	bgt.s	.fail		; if so, branch
00010CF4                            	cmp.w	#-MaxPitch,d6	; check if frequency is too small
00010CF4                            	bge.s	.ok		; if not, branch
00010CF4                            
00010CF4                            .fail
00010CF4                            	if def(RaiseError)	; check if Vladik's debugger is active
00010CF4                            		jsr	AMPS_DebugR_FreqDAC
00010CF4                            	else
00010CF4                            		bra.w	*
00010CF4                            	endif
00010CF4                            
00010CF4                            .ok
00010CF4                                endm
00010CF4                            
00010CF4                            
00010CF4                            AMPS_DebugR_FreqDAC:
00010CF4                            		RaiseError "Out of range DAC frequency: %<.w d6>", AMPS_Debug_Console_Channel
00010CF4 487A FFFE                M 	pea	*(pc)
00010CF8                          M 	raiseerror2	"Out of range DAC frequency: %<.w d6>",amps_debug_console_channel
00010CF8 40E7                     M 	move.w	sr,-(sp)
00010CFA                          M 	__fstring_generateargumentscode	"Out of range DAC frequency: %<.w d6>"
00010CFA =0000001D                M 	__pos:	set instr("Out of range DAC frequency: %<.w d6>",'%<')
00010CFA =00000000                M 	__stack:set	0
00010CFA =00000000                M 	__sp:	set 0
00010CFA                          M 	while	(__pos)
00010CFA =00000024                M 	__endpos:	set instr(__pos+1,"Out of range DAC frequency: %<.w d6>",'>')
00010CFA =00000000                M 	__midpos:	set instr(__pos+5,"Out of range DAC frequency: %<.w d6>",' ')
00010CFA =00000024                M 	__midpos:	= __endpos
00010CFA                          M 	__substr:	substr __pos+1+1,__endpos-1,"Out of range DAC frequency: %<.w d6>"
00010CFA                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Out of range DAC frequency: %<.w d6>"
00010CFA                          M 	__operand:	substr __pos+1+1,__midpos-1,"Out of range DAC frequency: %<.w d6>"
00010CFA                          M 	__param:	substr __midpos+1,__endpos-1,"Out of range DAC frequency: %<.w d6>"
00010CFA                          M 	pushp	"move.w d6,-(sp)"
00010CFA =00000001                M 	__stack:	= __stack+1
00010CFA =00000002                M 	__sp:	= __sp+2
00010CFA =00000000                M 	__pos:	set instr(__pos+1,"Out of range DAC frequency: %<.w d6>",'%<')
00010CFA                          M 	rept	__stack
00010CFA                          M 	popp	__command
00010CFA 3F06                     M 	move.w	d6,-(sp)
00010CFC 4EB9 0000 0000           M 	jsr	errorhandler
00010D02                          M 	__fstring_generatedecodedstring	"Out of range DAC frequency: %<.w d6>"
00010D02 =00000001                M 	__lpos:	set 1
00010D02 =0000001D                M 	__pos:	set instr("Out of range DAC frequency: %<.w d6>",'%<')
00010D02                          M 	while	(__pos)
00010D02                          M 	__substr:	substr __lpos,__pos-1,"Out of range DAC frequency: %<.w d6>"
00010D02 4F75 7420 6F66 2072 616E+M 	dc.b	"Out of range DAC frequency: "
00010D1E =00000024                M 	__endpos:	set instr(__pos+1,"Out of range DAC frequency: %<.w d6>",'>')
00010D1E =00000000                M 	__midpos:	set instr(__pos+5,"Out of range DAC frequency: %<.w d6>",' ')
00010D1E =00000024                M 	__midpos:	= __endpos
00010D1E                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Out of range DAC frequency: %<.w d6>"
00010D1E                          M 	__param:	substr __midpos+1,__endpos-1,"Out of range DAC frequency: %<.w d6>"
00010D1E                          M 	__param:	substr ,,"hex"
00010D1E 81                       M 	dc.b	hex|1
00010D1F =00000025                M 	__lpos:	set __endpos+1
00010D1F =00000000                M 	__pos:	set instr(__pos+1,"Out of range DAC frequency: %<.w d6>",'%<')
00010D1F                          M 	__substr:	substr __lpos,,"Out of range DAC frequency: %<.w d6>"
00010D1F                          M 	dc.b	""
00010D1F 00                       M 	dc.b	0
00010D20 00                       M 	dc.b	+_eh_enter_console|(((*&1)^1)*_eh_align_offset)
00010D22 00                       M 	even
00010D22 4EF9 0001 0000           M 	jmp	amps_debug_console_channel
00010D28                          M 	even
00010D28                            ; ===========================================================================
00010D28                            ; ---------------------------------------------------------------------------
00010D28                            ; Invalid tracker command handlers
00010D28                            ; ---------------------------------------------------------------------------
00010D28                            
00010D28                            AMPS_Debug_dcInvalid	macro
00010D28                            	if def(RaiseError)	; check if Vladik's debugger is active
00010D28                            		RaiseError "Invalid command detected!", AMPS_Debug_Console_Channel
00010D28                            	else
00010D28                            		bra.w	*
00010D28                            	endif
00010D28                                endm
00010D28                            ; ===========================================================================
00010D28                            ; ---------------------------------------------------------------------------
00010D28                            ; PSG on sPan handler
00010D28                            ; ---------------------------------------------------------------------------
00010D28                            
00010D28                            AMPS_Debug_dcPan	macro
00010D28                            	tst.b	cType(a5)	; check for PSG channel
00010D28                            	bpl.s	.ok		; if no, branch
00010D28                            
00010D28                            	if def(RaiseError)	; check if Vladik's debugger is active
00010D28                            		RaiseError "sPan on a PSG channel!", AMPS_Debug_Console_Channel
00010D28                            	else
00010D28                            		bra.w	*
00010D28                            	endif
00010D28                            
00010D28                            .ok
00010D28                                endm
00010D28                            ; ===========================================================================
00010D28                            ; ---------------------------------------------------------------------------
00010D28                            ; Timeout command on SFX channel handler
00010D28                            ; ---------------------------------------------------------------------------
00010D28                            
00010D28                            AMPS_Debug_dcTimeout	macro
00010D28                            	cmp.w	#mSFXDAC1,a5	; check for SFX channel
00010D28                            	blo.s	.ok		; if no, branch
00010D28                            
00010D28                            	if def(RaiseError)	; check if Vladik's debugger is active
00010D28                            		RaiseError "sNoteTimeOut on a SFX channel!", AMPS_Debug_Console_Channel
00010D28                            	else
00010D28                            		bra.w	*
00010D28                            	endif
00010D28                            
00010D28                            .ok
00010D28                                endm
00010D28                            ; ===========================================================================
00010D28                            ; ---------------------------------------------------------------------------
00010D28                            ; Call command handlers
00010D28                            ; ---------------------------------------------------------------------------
00010D28                            
00010D28                            AMPS_Debug_dcCall1	macro
00010D28                            	cmp.w	#mSFXDAC1,a5	; check for SFX channel
00010D28                            	blo.s	.ok1		; if no, branch
00010D28                            
00010D28                            	if def(RaiseError)	; check if Vladik's debugger is active
00010D28                            		RaiseError "sCall on a SFX channel!", AMPS_Debug_Console_Channel
00010D28                            	else
00010D28                            		bra.w	*
00010D28                            	endif
00010D28                            
00010D28                            .ok1
00010D28                                endm
00010D28                            
00010D28                            AMPS_Debug_dcCall2	macro
00010D28                            	cmp.b	#cNoteTimeCur,d0; check for invalid stack address
00010D28                            	bhi.s	.ok2		; if no, branch
00010D28                            
00010D28                            	if def(RaiseError)	; check if Vladik's debugger is active
00010D28                            		RaiseError "sCall stack too deep!", AMPS_Debug_Console_Channel
00010D28                            	else
00010D28                            		bra.w	*
00010D28                            	endif
00010D28                            
00010D28                            .ok2
00010D28                                endm
00010D28                            ; ===========================================================================
00010D28                            ; ---------------------------------------------------------------------------
00010D28                            ; Loop command handler
00010D28                            ; ---------------------------------------------------------------------------
00010D28                            
00010D28                            AMPS_Debug_dcLoop	macro
00010D28                            	cmp.b	#3,d0		; check for invalid call number
00010D28                            	bhi.s	.fail		; if is, branch
00010D28                            	cmp.w	#mSFXDAC1,a5	; check for SFX channel
00010D28                            	blo.s	.nosfx		; if no, branch
00010D28                            	cmp.b	#1,d0		; check if cPrio
00010D28                            	beq.s	.fail		; if so, branch
00010D28                            
00010D28                            .nosfx
00010D28                            	cmp.b	#$C0,cType(a5)	; check if PSG3 or PSG4
00010D28                            	blo.s	.ok		; if no, branch
00010D28                            	cmp.b	#2,d0		; check if cStatPSG4
00010D28                            	bne.s	.ok		; if no, branch
00010D28                            
00010D28                            .fail
00010D28                            	if def(RaiseError)	; check if Vladik's debugger is active
00010D28                            		RaiseError "sLoop ID is invalid!", AMPS_Debug_Console_Channel
00010D28                            	else
00010D28                            		bra.w	*
00010D28                            	endif
00010D28                            
00010D28                            .ok
00010D28                                endm
00010D28                            ; ===========================================================================
00010D28                            ; ---------------------------------------------------------------------------
00010D28                            ; Return command handlers
00010D28                            ; ---------------------------------------------------------------------------
00010D28                            
00010D28                            AMPS_Debug_dcReturn1	macro
00010D28                            	cmp.w	#mSFXDAC1,a5	; check for SFX channel
00010D28                            	blo.s	.ok1		; if no, branch
00010D28                            
00010D28                            	if def(RaiseError)	; check if Vladik's debugger is active
00010D28                            		RaiseError "sRet on a SFX channel!", AMPS_Debug_Console_Channel
00010D28                            	else
00010D28                            		bra.w	*
00010D28                            	endif
00010D28                            
00010D28                            .ok1
00010D28                                endm
00010D28                            
00010D28                            AMPS_Debug_dcReturn2	macro
00010D28                            	cmp.b	#cSize,d0	; check for invalid stack address
00010D28                            	bls.s	.ok2		; if no, branch
00010D28                            
00010D28                            	if def(RaiseError)	; check if Vladik's debugger is active
00010D28                            		RaiseError "sRet stack too shallow!", AMPS_Debug_Console_Channel
00010D28                            	else
00010D28                            		bra.w	*
00010D28                            	endif
00010D28                            
00010D28                            .ok2
00010D28                                endm
00010D28                            ; ===========================================================================
00010D28                            ; ---------------------------------------------------------------------------
00010D28                            ; Update FM voice handler
00010D28                            ; ---------------------------------------------------------------------------
00010D28                            
00010D28                            AMPS_Debug_UpdVoiceFM	macro
00010D28                            	cmp.b	#'N',(a1)+	; check if this is valid voice
00010D28                            	bne.s	.fail		; if not, branch
00010D28                            	cmp.w	#'AT',(a1)+	; check if this is valid voice
00010D28                            	beq.s	.ok		; if is, branch
00010D28                            
00010D28                            .fail
00010D28                            	if def(RaiseError)	; check if Vladik's debugger is active
00010D28                            		RaiseError "FM voice Update invalid voice: %<.b cVoice(a5)>", AMPS_Debug_Console_Channel
00010D28                            	else
00010D28                            		bra.w	*
00010D28                            	endif
00010D28                            
00010D28                            .ok
00010D28                                endm
00010D28                            ; ===========================================================================
00010D28                            ; ---------------------------------------------------------------------------
00010D28                            ; Update FM Volume handler
00010D28                            ; ---------------------------------------------------------------------------
00010D28                            
00010D28                            AMPS_Debug_UpdVolFM	macro
00010D28                            	cmp.b	#'N',(a1)+	; check if this is valid voice
00010D28                            	bne.s	.fail		; if not, branch
00010D28                            	cmp.w	#'AT',(a1)+	; check if this is valid voice
00010D28                            	beq.s	.ok		; if is, branch
00010D28                            
00010D28                            .fail
00010D28                            	if def(RaiseError)	; check if Vladik's debugger is active
00010D28                            		jsr	AMPS_DebugR_UpdVolFM
00010D28                            	else
00010D28                            		bra.w	*
00010D28                            	endif
00010D28                            
00010D28                            .ok
00010D28                                endm
00010D28                            
00010D28                            AMPS_DebugR_UpdVolFM:
00010D28                            	RaiseError2 "FM Volume Update invalid voice: %<.b cVoice(a5)>", AMPS_Debug_Console_Channel
00010D28 40E7                     M 	move.w	sr,-(sp)
00010D2A                          M 	__fstring_generateargumentscode	"FM Volume Update invalid voice: %<.b cVoice(a5)>"
00010D2A =00000021                M 	__pos:	set instr("FM Volume Update invalid voice: %<.b cVoice(a5)>",'%<')
00010D2A =00000000                M 	__stack:set	0
00010D2A =00000000                M 	__sp:	set 0
00010D2A                          M 	while	(__pos)
00010D2A =00000030                M 	__endpos:	set instr(__pos+1,"FM Volume Update invalid voice: %<.b cVoice(a5)>",'>')
00010D2A =00000000                M 	__midpos:	set instr(__pos+5,"FM Volume Update invalid voice: %<.b cVoice(a5)>",' ')
00010D2A =00000030                M 	__midpos:	= __endpos
00010D2A                          M 	__substr:	substr __pos+1+1,__endpos-1,"FM Volume Update invalid voice: %<.b cVoice(a5)>"
00010D2A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"FM Volume Update invalid voice: %<.b cVoice(a5)>"
00010D2A                          M 	__operand:	substr __pos+1+1,__midpos-1,"FM Volume Update invalid voice: %<.b cVoice(a5)>"
00010D2A                          M 	__param:	substr __midpos+1,__endpos-1,"FM Volume Update invalid voice: %<.b cVoice(a5)>"
00010D2A                          M 	pushp	"move.b cVoice(a5),1(sp)"
00010D2A                          M 	pushp	"subq.w	#2, sp"
00010D2A =00000002                M 	__stack:	= __stack+2
00010D2A =00000002                M 	__sp:	= __sp+2
00010D2A =00000000                M 	__pos:	set instr(__pos+1,"FM Volume Update invalid voice: %<.b cVoice(a5)>",'%<')
00010D2A                          M 	rept	__stack
00010D2A                          M 	popp	__command
00010D2A 554F                     M 	subq.w	#2,sp
00010D2C                          M 	popp	__command
00010D2C 1F6D 000B 0001           M 	move.b	cvoice(a5),1(sp)
00010D32 4EB9 0000 0000           M 	jsr	errorhandler
00010D38                          M 	__fstring_generatedecodedstring	"FM Volume Update invalid voice: %<.b cVoice(a5)>"
00010D38 =00000001                M 	__lpos:	set 1
00010D38 =00000021                M 	__pos:	set instr("FM Volume Update invalid voice: %<.b cVoice(a5)>",'%<')
00010D38                          M 	while	(__pos)
00010D38                          M 	__substr:	substr __lpos,__pos-1,"FM Volume Update invalid voice: %<.b cVoice(a5)>"
00010D38 464D 2056 6F6C 756D 6520+M 	dc.b	"FM Volume Update invalid voice: "
00010D58 =00000030                M 	__endpos:	set instr(__pos+1,"FM Volume Update invalid voice: %<.b cVoice(a5)>",'>')
00010D58 =00000000                M 	__midpos:	set instr(__pos+5,"FM Volume Update invalid voice: %<.b cVoice(a5)>",' ')
00010D58 =00000030                M 	__midpos:	= __endpos
00010D58                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"FM Volume Update invalid voice: %<.b cVoice(a5)>"
00010D58                          M 	__param:	substr __midpos+1,__endpos-1,"FM Volume Update invalid voice: %<.b cVoice(a5)>"
00010D58                          M 	__param:	substr ,,"hex"
00010D58 80                       M 	dc.b	hex
00010D59 =00000031                M 	__lpos:	set __endpos+1
00010D59 =00000000                M 	__pos:	set instr(__pos+1,"FM Volume Update invalid voice: %<.b cVoice(a5)>",'%<')
00010D59                          M 	__substr:	substr __lpos,,"FM Volume Update invalid voice: %<.b cVoice(a5)>"
00010D59                          M 	dc.b	""
00010D59 00                       M 	dc.b	0
00010D5A 00                       M 	dc.b	+_eh_enter_console|(((*&1)^1)*_eh_align_offset)
00010D5C 00                       M 	even
00010D5C 4EF9 0001 0000           M 	jmp	amps_debug_console_channel
00010D62                          M 	even
00010D62                            ; ===========================================================================
00010D62                            ; ---------------------------------------------------------------------------
00010D62                            ; Invalid cue handler
00010D62                            ; ---------------------------------------------------------------------------
00010D62                            
00010D62                            AMPS_Debug_CuePtr	macro id
00010D62                            	cmp.l	#$A00000+YM_Buffer1,a0	; check against min
00010D62                            	blo.s	.fail\@			; if not in range, branch
00010D62                            	cmp.l	#$A00000+YM_Buffer2+$400,a0; check against max
00010D62                            	blo.s	.ok\@			; if in range, branch
00010D62                            
00010D62                            .fail\@
00010D62                            	if def(RaiseError)	; check if Vladik's debugger is active
00010D62                            		jsr	AMPS_Debug_CuePtr\id
00010D62                            	else
00010D62                            		bra.w	*
00010D62                            	endif
00010D62                            
00010D62                            .ok\@
00010D62                                endm
00010D62                            
00010D62                            AMPS_Debug_CuePtr1:
00010D62                            		RaiseError2 "CUE invalid at WriteYM_Pt1: %<.l a0>", AMPS_Debug_Console_Channel
00010D62 40E7                     M 	move.w	sr,-(sp)
00010D64                          M 	__fstring_generateargumentscode	"CUE invalid at WriteYM_Pt1: %<.l a0>"
00010D64 =0000001D                M 	__pos:	set instr("CUE invalid at WriteYM_Pt1: %<.l a0>",'%<')
00010D64 =00000000                M 	__stack:set	0
00010D64 =00000000                M 	__sp:	set 0
00010D64                          M 	while	(__pos)
00010D64 =00000024                M 	__endpos:	set instr(__pos+1,"CUE invalid at WriteYM_Pt1: %<.l a0>",'>')
00010D64 =00000000                M 	__midpos:	set instr(__pos+5,"CUE invalid at WriteYM_Pt1: %<.l a0>",' ')
00010D64 =00000024                M 	__midpos:	= __endpos
00010D64                          M 	__substr:	substr __pos+1+1,__endpos-1,"CUE invalid at WriteYM_Pt1: %<.l a0>"
00010D64                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"CUE invalid at WriteYM_Pt1: %<.l a0>"
00010D64                          M 	__operand:	substr __pos+1+1,__midpos-1,"CUE invalid at WriteYM_Pt1: %<.l a0>"
00010D64                          M 	__param:	substr __midpos+1,__endpos-1,"CUE invalid at WriteYM_Pt1: %<.l a0>"
00010D64                          M 	pushp	"move.l a0,-(sp)"
00010D64 =00000001                M 	__stack:	= __stack+1
00010D64 =00000004                M 	__sp:	= __sp+4
00010D64 =00000000                M 	__pos:	set instr(__pos+1,"CUE invalid at WriteYM_Pt1: %<.l a0>",'%<')
00010D64                          M 	rept	__stack
00010D64                          M 	popp	__command
00010D64 2F08                     M 	move.l	a0,-(sp)
00010D66 4EB9 0000 0000           M 	jsr	errorhandler
00010D6C                          M 	__fstring_generatedecodedstring	"CUE invalid at WriteYM_Pt1: %<.l a0>"
00010D6C =00000001                M 	__lpos:	set 1
00010D6C =0000001D                M 	__pos:	set instr("CUE invalid at WriteYM_Pt1: %<.l a0>",'%<')
00010D6C                          M 	while	(__pos)
00010D6C                          M 	__substr:	substr __lpos,__pos-1,"CUE invalid at WriteYM_Pt1: %<.l a0>"
00010D6C 4355 4520 696E 7661 6C69+M 	dc.b	"CUE invalid at WriteYM_Pt1: "
00010D88 =00000024                M 	__endpos:	set instr(__pos+1,"CUE invalid at WriteYM_Pt1: %<.l a0>",'>')
00010D88 =00000000                M 	__midpos:	set instr(__pos+5,"CUE invalid at WriteYM_Pt1: %<.l a0>",' ')
00010D88 =00000024                M 	__midpos:	= __endpos
00010D88                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"CUE invalid at WriteYM_Pt1: %<.l a0>"
00010D88                          M 	__param:	substr __midpos+1,__endpos-1,"CUE invalid at WriteYM_Pt1: %<.l a0>"
00010D88                          M 	__param:	substr ,,"hex"
00010D88 83                       M 	dc.b	hex|3
00010D89 =00000025                M 	__lpos:	set __endpos+1
00010D89 =00000000                M 	__pos:	set instr(__pos+1,"CUE invalid at WriteYM_Pt1: %<.l a0>",'%<')
00010D89                          M 	__substr:	substr __lpos,,"CUE invalid at WriteYM_Pt1: %<.l a0>"
00010D89                          M 	dc.b	""
00010D89 00                       M 	dc.b	0
00010D8A 00                       M 	dc.b	+_eh_enter_console|(((*&1)^1)*_eh_align_offset)
00010D8C 00                       M 	even
00010D8C 4EF9 0001 0000           M 	jmp	amps_debug_console_channel
00010D92                          M 	even
00010D92                            AMPS_Debug_CuePtr2:
00010D92                            		RaiseError2 "CUE invalid at WriteYM_Pt2: %<.l a0>", AMPS_Debug_Console_Channel
00010D92 40E7                     M 	move.w	sr,-(sp)
00010D94                          M 	__fstring_generateargumentscode	"CUE invalid at WriteYM_Pt2: %<.l a0>"
00010D94 =0000001D                M 	__pos:	set instr("CUE invalid at WriteYM_Pt2: %<.l a0>",'%<')
00010D94 =00000000                M 	__stack:set	0
00010D94 =00000000                M 	__sp:	set 0
00010D94                          M 	while	(__pos)
00010D94 =00000024                M 	__endpos:	set instr(__pos+1,"CUE invalid at WriteYM_Pt2: %<.l a0>",'>')
00010D94 =00000000                M 	__midpos:	set instr(__pos+5,"CUE invalid at WriteYM_Pt2: %<.l a0>",' ')
00010D94 =00000024                M 	__midpos:	= __endpos
00010D94                          M 	__substr:	substr __pos+1+1,__endpos-1,"CUE invalid at WriteYM_Pt2: %<.l a0>"
00010D94                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"CUE invalid at WriteYM_Pt2: %<.l a0>"
00010D94                          M 	__operand:	substr __pos+1+1,__midpos-1,"CUE invalid at WriteYM_Pt2: %<.l a0>"
00010D94                          M 	__param:	substr __midpos+1,__endpos-1,"CUE invalid at WriteYM_Pt2: %<.l a0>"
00010D94                          M 	pushp	"move.l a0,-(sp)"
00010D94 =00000001                M 	__stack:	= __stack+1
00010D94 =00000004                M 	__sp:	= __sp+4
00010D94 =00000000                M 	__pos:	set instr(__pos+1,"CUE invalid at WriteYM_Pt2: %<.l a0>",'%<')
00010D94                          M 	rept	__stack
00010D94                          M 	popp	__command
00010D94 2F08                     M 	move.l	a0,-(sp)
00010D96 4EB9 0000 0000           M 	jsr	errorhandler
00010D9C                          M 	__fstring_generatedecodedstring	"CUE invalid at WriteYM_Pt2: %<.l a0>"
00010D9C =00000001                M 	__lpos:	set 1
00010D9C =0000001D                M 	__pos:	set instr("CUE invalid at WriteYM_Pt2: %<.l a0>",'%<')
00010D9C                          M 	while	(__pos)
00010D9C                          M 	__substr:	substr __lpos,__pos-1,"CUE invalid at WriteYM_Pt2: %<.l a0>"
00010D9C 4355 4520 696E 7661 6C69+M 	dc.b	"CUE invalid at WriteYM_Pt2: "
00010DB8 =00000024                M 	__endpos:	set instr(__pos+1,"CUE invalid at WriteYM_Pt2: %<.l a0>",'>')
00010DB8 =00000000                M 	__midpos:	set instr(__pos+5,"CUE invalid at WriteYM_Pt2: %<.l a0>",' ')
00010DB8 =00000024                M 	__midpos:	= __endpos
00010DB8                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"CUE invalid at WriteYM_Pt2: %<.l a0>"
00010DB8                          M 	__param:	substr __midpos+1,__endpos-1,"CUE invalid at WriteYM_Pt2: %<.l a0>"
00010DB8                          M 	__param:	substr ,,"hex"
00010DB8 83                       M 	dc.b	hex|3
00010DB9 =00000025                M 	__lpos:	set __endpos+1
00010DB9 =00000000                M 	__pos:	set instr(__pos+1,"CUE invalid at WriteYM_Pt2: %<.l a0>",'%<')
00010DB9                          M 	__substr:	substr __lpos,,"CUE invalid at WriteYM_Pt2: %<.l a0>"
00010DB9                          M 	dc.b	""
00010DB9 00                       M 	dc.b	0
00010DBA 00                       M 	dc.b	+_eh_enter_console|(((*&1)^1)*_eh_align_offset)
00010DBC 00                       M 	even
00010DBC 4EF9 0001 0000           M 	jmp	amps_debug_console_channel
00010DC2                          M 	even
00010DC2                            AMPS_Debug_CuePtr0:
00010DC2                            		RaiseError2 "CUE invalid at dUpdateVoiceFM: %<.l a0>", AMPS_Debug_Console_Channel
00010DC2 40E7                     M 	move.w	sr,-(sp)
00010DC4                          M 	__fstring_generateargumentscode	"CUE invalid at dUpdateVoiceFM: %<.l a0>"
00010DC4 =00000020                M 	__pos:	set instr("CUE invalid at dUpdateVoiceFM: %<.l a0>",'%<')
00010DC4 =00000000                M 	__stack:set	0
00010DC4 =00000000                M 	__sp:	set 0
00010DC4                          M 	while	(__pos)
00010DC4 =00000027                M 	__endpos:	set instr(__pos+1,"CUE invalid at dUpdateVoiceFM: %<.l a0>",'>')
00010DC4 =00000000                M 	__midpos:	set instr(__pos+5,"CUE invalid at dUpdateVoiceFM: %<.l a0>",' ')
00010DC4 =00000027                M 	__midpos:	= __endpos
00010DC4                          M 	__substr:	substr __pos+1+1,__endpos-1,"CUE invalid at dUpdateVoiceFM: %<.l a0>"
00010DC4                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"CUE invalid at dUpdateVoiceFM: %<.l a0>"
00010DC4                          M 	__operand:	substr __pos+1+1,__midpos-1,"CUE invalid at dUpdateVoiceFM: %<.l a0>"
00010DC4                          M 	__param:	substr __midpos+1,__endpos-1,"CUE invalid at dUpdateVoiceFM: %<.l a0>"
00010DC4                          M 	pushp	"move.l a0,-(sp)"
00010DC4 =00000001                M 	__stack:	= __stack+1
00010DC4 =00000004                M 	__sp:	= __sp+4
00010DC4 =00000000                M 	__pos:	set instr(__pos+1,"CUE invalid at dUpdateVoiceFM: %<.l a0>",'%<')
00010DC4                          M 	rept	__stack
00010DC4                          M 	popp	__command
00010DC4 2F08                     M 	move.l	a0,-(sp)
00010DC6 4EB9 0000 0000           M 	jsr	errorhandler
00010DCC                          M 	__fstring_generatedecodedstring	"CUE invalid at dUpdateVoiceFM: %<.l a0>"
00010DCC =00000001                M 	__lpos:	set 1
00010DCC =00000020                M 	__pos:	set instr("CUE invalid at dUpdateVoiceFM: %<.l a0>",'%<')
00010DCC                          M 	while	(__pos)
00010DCC                          M 	__substr:	substr __lpos,__pos-1,"CUE invalid at dUpdateVoiceFM: %<.l a0>"
00010DCC 4355 4520 696E 7661 6C69+M 	dc.b	"CUE invalid at dUpdateVoiceFM: "
00010DEB =00000027                M 	__endpos:	set instr(__pos+1,"CUE invalid at dUpdateVoiceFM: %<.l a0>",'>')
00010DEB =00000000                M 	__midpos:	set instr(__pos+5,"CUE invalid at dUpdateVoiceFM: %<.l a0>",' ')
00010DEB =00000027                M 	__midpos:	= __endpos
00010DEB                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"CUE invalid at dUpdateVoiceFM: %<.l a0>"
00010DEB                          M 	__param:	substr __midpos+1,__endpos-1,"CUE invalid at dUpdateVoiceFM: %<.l a0>"
00010DEB                          M 	__param:	substr ,,"hex"
00010DEB 83                       M 	dc.b	hex|3
00010DEC =00000028                M 	__lpos:	set __endpos+1
00010DEC =00000000                M 	__pos:	set instr(__pos+1,"CUE invalid at dUpdateVoiceFM: %<.l a0>",'%<')
00010DEC                          M 	__substr:	substr __lpos,,"CUE invalid at dUpdateVoiceFM: %<.l a0>"
00010DEC                          M 	dc.b	""
00010DEC 00                       M 	dc.b	0
00010DED 00                       M 	dc.b	+_eh_enter_console|(((*&1)^1)*_eh_align_offset)
00010DEE                          M 	even
00010DEE 4EF9 0001 0000           M 	jmp	amps_debug_console_channel
00010DF4                          M 	even
00010DF4                            AMPS_Debug_CuePtr3:
00010DF4                            		RaiseError2 "CUE invalid at dAMPSend: %<.l a0>", AMPS_Debug_Console_Channel
00010DF4 40E7                     M 	move.w	sr,-(sp)
00010DF6                          M 	__fstring_generateargumentscode	"CUE invalid at dAMPSend: %<.l a0>"
00010DF6 =0000001A                M 	__pos:	set instr("CUE invalid at dAMPSend: %<.l a0>",'%<')
00010DF6 =00000000                M 	__stack:set	0
00010DF6 =00000000                M 	__sp:	set 0
00010DF6                          M 	while	(__pos)
00010DF6 =00000021                M 	__endpos:	set instr(__pos+1,"CUE invalid at dAMPSend: %<.l a0>",'>')
00010DF6 =00000000                M 	__midpos:	set instr(__pos+5,"CUE invalid at dAMPSend: %<.l a0>",' ')
00010DF6 =00000021                M 	__midpos:	= __endpos
00010DF6                          M 	__substr:	substr __pos+1+1,__endpos-1,"CUE invalid at dAMPSend: %<.l a0>"
00010DF6                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"CUE invalid at dAMPSend: %<.l a0>"
00010DF6                          M 	__operand:	substr __pos+1+1,__midpos-1,"CUE invalid at dAMPSend: %<.l a0>"
00010DF6                          M 	__param:	substr __midpos+1,__endpos-1,"CUE invalid at dAMPSend: %<.l a0>"
00010DF6                          M 	pushp	"move.l a0,-(sp)"
00010DF6 =00000001                M 	__stack:	= __stack+1
00010DF6 =00000004                M 	__sp:	= __sp+4
00010DF6 =00000000                M 	__pos:	set instr(__pos+1,"CUE invalid at dAMPSend: %<.l a0>",'%<')
00010DF6                          M 	rept	__stack
00010DF6                          M 	popp	__command
00010DF6 2F08                     M 	move.l	a0,-(sp)
00010DF8 4EB9 0000 0000           M 	jsr	errorhandler
00010DFE                          M 	__fstring_generatedecodedstring	"CUE invalid at dAMPSend: %<.l a0>"
00010DFE =00000001                M 	__lpos:	set 1
00010DFE =0000001A                M 	__pos:	set instr("CUE invalid at dAMPSend: %<.l a0>",'%<')
00010DFE                          M 	while	(__pos)
00010DFE                          M 	__substr:	substr __lpos,__pos-1,"CUE invalid at dAMPSend: %<.l a0>"
00010DFE 4355 4520 696E 7661 6C69+M 	dc.b	"CUE invalid at dAMPSend: "
00010E17 =00000021                M 	__endpos:	set instr(__pos+1,"CUE invalid at dAMPSend: %<.l a0>",'>')
00010E17 =00000000                M 	__midpos:	set instr(__pos+5,"CUE invalid at dAMPSend: %<.l a0>",' ')
00010E17 =00000021                M 	__midpos:	= __endpos
00010E17                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"CUE invalid at dAMPSend: %<.l a0>"
00010E17                          M 	__param:	substr __midpos+1,__endpos-1,"CUE invalid at dAMPSend: %<.l a0>"
00010E17                          M 	__param:	substr ,,"hex"
00010E17 83                       M 	dc.b	hex|3
00010E18 =00000022                M 	__lpos:	set __endpos+1
00010E18 =00000000                M 	__pos:	set instr(__pos+1,"CUE invalid at dAMPSend: %<.l a0>",'%<')
00010E18                          M 	__substr:	substr __lpos,,"CUE invalid at dAMPSend: %<.l a0>"
00010E18                          M 	dc.b	""
00010E18 00                       M 	dc.b	0
00010E19 00                       M 	dc.b	+_eh_enter_console|(((*&1)^1)*_eh_align_offset)
00010E1A                          M 	even
00010E1A 4EF9 0001 0000           M 	jmp	amps_debug_console_channel
00010E20                          M 	even
00010E20                            ; ===========================================================================
00010E20                            ; ---------------------------------------------------------------------------
00010E20                            ; Play Command handler
00010E20                            ; ---------------------------------------------------------------------------
00010E20                            
00010E20                            AMPS_Debug_PlayCmd	macro
00010E20                            	cmp.b	#(dSoundCommands_End-dSoundCommands)/4,d7; check if this is valid command
00010E20                            	bls.s	.ok		; if is, branch
00010E20                            
00010E20                            	if def(RaiseError)	; check if Vladik's debugger is active
00010E20                            		RaiseError "Invalid command in queue: %<.b d7>", AMPS_Debug_Console_Channel
00010E20                            	else
00010E20                            		bra.w	*
00010E20                            	endif
00010E20                            
00010E20                            .ok
00010E20                                endm
00010E20                            ; ===========================================================================
00010E20                            ; ---------------------------------------------------------------------------
00010E20                            ; Tracker address handlers
00010E20                            ; ---------------------------------------------------------------------------
00010E20                            
00010E20                            AMPS_Debug_PlayTrackMus	macro
00010E20                            	cmp.l	#musaddr,d0	; check if this is valid tracker
00010E20                            	blo.s	.fail\@		; if no, branch
00010E20                            	cmp.l	#musend,d0	; check if this is valid tracker
00010E20                            	blo.s	.ok\@		; if is, branch
00010E20                            
00010E20                            .fail\@
00010E20                            	if def(RaiseError)	; check if Vladik's debugger is active
00010E20                            		lsr.w	#2,d7	; get actual ID
00010E20                            		RaiseError "Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>", AMPS_Debug_Console_Main
00010E20                            	else
00010E20                            		bra.w	*
00010E20                            	endif
00010E20                            
00010E20                            .ok\@
00010E20                                endm
00010E20                            
00010E20                            AMPS_Debug_PlayTrackMus2	macro ch
00010E20                            	and.l	#$FFFFFF,d0	; remove high byte
00010E20                            	cmp.l	#musaddr,d0	; check if this is valid tracker
00010E20                            	blo.s	.fail\@		; if no, branch
00010E20                            	cmp.l	#dacaddr,d0	; check if this is valid tracker
00010E20                            	blo.s	.ok\@		; if is, branch
00010E20                            
00010E20                            .fail\@
00010E20                            	if def(RaiseError)	; check if Vladik's debugger is active
00010E20                            		RaiseError "Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>", AMPS_Debug_Console_Main
00010E20                            	else
00010E20                            		bra.w	*
00010E20                            	endif
00010E20                            
00010E20                            .ok\@
00010E20                                endm
00010E20                            
00010E20                            AMPS_Debug_PlayTrackSFX	macro
00010E20                            	cmp.l	#sfxaddr,d0	; check if this is valid tracker
00010E20                            	blo.s	.fail\@		; if no, branch
00010E20                            	cmp.l	#musaddr,d0	; check if this is valid tracker
00010E20                            	blo.s	.ok\@		; if is, branch
00010E20                            
00010E20                            .fail\@
00010E20                            	if def(RaiseError)	; check if Vladik's debugger is active
00010E20                            		RaiseError "Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>", AMPS_Debug_Console_Main
00010E20                            	else
00010E20                            		bra.w	*
00010E20                            	endif
00010E20                            
00010E20                            .ok\@
00010E20                                endm
00010E20                            
00010E20                            AMPS_Debug_PlayTrackSFX2	macro
00010E20                            	cmp.l	#sfxaddr,d0	; check if this is valid tracker
00010E20                            	blo.s	.fail\@		; if no, branch
00010E20                            	cmp.l	#musaddr,d0	; check if this is valid tracker
00010E20                            	blo.s	.ok\@		; if is, branch
00010E20                            
00010E20                            .fail\@
00010E20                            	if def(RaiseError)	; check if Vladik's debugger is active
00010E20                            		RaiseError "Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>", AMPS_Debug_Console_Main
00010E20                            	else
00010E20                            		bra.w	*
00010E20                            	endif
00010E20                            
00010E20                            .ok\@
00010E20                                endm
00010E20                            
00010E20                            AMPS_Debug_TrackUpd	macro
00010E20                            	move.l	a4,d1		; copy to d1
00010E20                            	and.l	#$FFFFFF,d1	; remove high byte
00010E20                            	cmp.l	#sfxaddr,d1	; check if this is valid tracker
00010E20                            	blo.s	.fail2		; if no, branch
00010E20                            	cmp.l	#dacaddr,d1	; check if this is valid tracker
00010E20                            	blo.s	.data		; if is, branch
00010E20                            
00010E20                            .fail2
00010E20                            	if def(RaiseError)	; check if Vladik's debugger is active
00010E20                            		RaiseError "Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>", AMPS_Debug_Console_Channel
00010E20                            	else
00010E20                            		bra.w	*
00010E20                            	endif
00010E20                                endm
00010E20                            ; ===========================================================================
00010E20                            ; ---------------------------------------------------------------------------
00010E20                            ; Tracker debugger handler and console code
00010E20                            ; ---------------------------------------------------------------------------
00010E20                            
00010E20                            AMPS_Debug_ChkTracker	macro
00010E20                            .fail
00010E20                            	if def(RaiseError)	; check if Vladik's debugger is active
00010E20                            		jsr	AMPS_DebugR_ChkTracker
00010E20                            	else
00010E20                            		bra.w	*
00010E20                            	endif
00010E20                                endm
00010E20                            
00010E20                            AMPS_DebugR_ChkTracker:
00010E20 4EBA 0000                  		jsr	AMPS_Debug_CalcMax(pc)
00010E24 4847                       		swap	d7			; swap d7 words
00010E26                            
00010E26                            .loop
00010E26 23C7 00FF 0000             		move.l	d7,$FF0000		; save stuff in RAM
00010E2C                            		Console.Run AMPS_DebugR_ChkTracker2, "NAT"
00010E2C 4EB9 0000 0000           M 	jsr	errorhandler.__extern__console_only
00010E32 4EB9 0000 0000           M 	jsr	amps_debugr_chktracker2
00010E38 2E39 00FF 0000             		move.l	$FF0000,d7		; get stuff back
00010E3E                            
00010E3E                            .nodraw
00010E3E 7CFF                       		moveq	#-1,d6
00010E40 51CE FFFE                  		dbf	d6,*			; delay a lot
00010E44                            
00010E44                            	; implement reading control data
00010E44 43F9 00A1 0003             		lea	$A10003,a1
00010E4A 12BC 0000                  		move.b	#0,(a1)			; set TH low
00010E4E 8080                       		or.l	d0,d0			; delay
00010E50 12BC 0040                  		move.b	#$40,(a1)		; set TH high
00010E54 8080                       		or.l	d0,d0			; delay
00010E56 1011                       		move.b	(a1),d0			; get dpad stat
00010E58                            
00010E58 3A07                       		move.w	d7,d5			; copy to d5
00010E5A 0800 0000                  		btst	#0,d0			; check if up held
00010E5E 6600                       		bne.s	.ckd			; if not ,branch
00010E60                            
00010E60 5347                       		subq.w	#1,d7			; move up
00010E62 6A00                       		bpl.s	.ckd			; if positive, branch
00010E64 4247                       		clr.w	d7			; else force to 0
00010E66                            
00010E66                            .ckd
00010E66 0800 0001                  		btst	#1,d0			; check if down held
00010E6A 6600                       		bne.s	.ckdraw			; if not ,branch
00010E6C                            
00010E6C 4847                       		swap	d7
00010E6E 3C07                       		move.w	d7,d6			; copy high word to d6
00010E70 4847                       		swap	d7
00010E72                            
00010E72 BE46                       		cmp.w	d6,d7			; check if we can move up
00010E74 6C00                       		bge.s	.ckdraw			; if not, branch
00010E76 5247                       		addq.w	#1,d7			; move down
00010E78                            
00010E78                            .ckdraw
00010E78 BA47                       		cmp.w	d7,d5			; check if we need to redraw
00010E7A 67C2                       		beq.s	.nodraw			; if not, branch
00010E7C 6000 FFA8                  		bra.w	.loop
00010E80                            
00010E80                            AMPS_Debug_CalcMax:
00010E80 7C1C                       		moveq	#28,d6	; max lines count
00010E82 7E09                       		moveq	#10-1,d7	; run for 10 chs
00010E84 7A2C                       		moveq	#cSize,d5	; prepare size
00010E86 4BF8 82AA                  		lea	mPSG3.w,a5	; start at PSG3
00010E8A                            
00010E8A                            .chkloop
00010E8A 4A46                       		tst.w	d6		; check if we have no lines left
00010E8C                            	;	ble.s	.rts		; if so, we found it
00010E8C 5746                       		subq.w	#3,d6		; we need at least 3 lines
00010E8E 6B00                       		bmi.s	.add		; if not enough lines, branch
00010E90                            
00010E90 320D                       		move.w	a5,d1		; copy ch to d1
00010E92 0641 002C                  		add.w	#cSize,d1	; go to end of it
00010E96                            
00010E96 7000                       		moveq	#0,d0
00010E98 102D 001E                  		move.b	cStack(a5),d0	; get stack to d0
00010E9C 4DF5 0000                  		lea	(a5,d0.w),a6	; and get first element to a6
00010EA0                            
00010EA0                            .stack
00010EA0 B24E                       		cmp.w	a6,d1		; check if stack is dry now
00010EA2 6200                       		bhi.s	.inc		; if not, branch
00010EA4                            
00010EA4 9AC5                       		sub.w	d5,a5		; sub ch size
00010EA6 51CF FFE2                  		dbf	d7,.chkloop	; loop for all chans
00010EAA 6000                       		bra.s	.add
00010EAC                            
00010EAC                            .inc
00010EAC 584E                       		addq.w	#4,a6		; go to next long
00010EAE 5346                       		subq.w	#1,d6		; sub 1 line
00010EB0 6AEE                       		bpl.s	.stack		; if lines left, branch
00010EB2                            
00010EB2                            .add
00010EB2 5247                       		addq.w	#1,d7		; increase ch by 1
00010EB4                            .rts
00010EB4 4E75                       		rts
00010EB6                            
00010EB6                            AMPS_DebugR_ChkTracker_Ch:
00010EB6 5347                       		subq.w	#1,d7		; sub 1 from offset
00010EB8 6A00 0000                  		bpl.w	.n		; branch if positive
00010EBC 4A46                       		tst.w	d6		; check if we need to render anymore
00010EBE 6B00 0000                  		bmi.w	.n		; if not, branch
00010EC2                            
00010EC2                            ; fmt: <addr> lstdur, dur, freq, sample, loop0, loop1, loop2
00010EC2 4E90                       		jsr	(a0)
00010EC4                            	Console.Write	  ": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>"
00010EC4 40E7                     M 	move.w	sr,-(sp)
00010EC6                          M 	__fstring_generateargumentscode	": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>"
00010EC6 =00000003                M 	__pos:	set instr(": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>",'%<')
00010EC6 =00000000                M 	__stack:set	0
00010EC6 =00000000                M 	__sp:	set 0
00010EC6                          M 	while	(__pos)
00010EC6 =00000009                M 	__endpos:	set instr(__pos+1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>",'>')
00010EC6 =0000000E                M 	__midpos:	set instr(__pos+5,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>",' ')
00010EC6 =00000009                M 	__midpos:	= __endpos
00010EC6                          M 	__substr:	substr __pos+1+1,__endpos-1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>"
00010EC6                          M 	__type:	substr __pos+1+1,__pos+1+1+1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>"
00010EC6 =0000000A                M 	__pos:	set instr(__pos+1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>",'%<')
00010EC6 =00000011                M 	__endpos:	set instr(__pos+1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>",'>')
00010EC6 =00000012                M 	__midpos:	set instr(__pos+5,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>",' ')
00010EC6 =00000011                M 	__midpos:	= __endpos
00010EC6                          M 	__substr:	substr __pos+1+1,__endpos-1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>"
00010EC6                          M 	__type:	substr __pos+1+1,__pos+1+1+1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>"
00010EC6                          M 	__operand:	substr __pos+1+1,__midpos-1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>"
00010EC6                          M 	__param:	substr __midpos+1,__endpos-1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>"
00010EC6                          M 	pushp	"move.w a5,-(sp)"
00010EC6 =00000001                M 	__stack:	= __stack+1
00010EC6 =00000002                M 	__sp:	= __sp+2
00010EC6 =00000013                M 	__pos:	set instr(__pos+1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>",'%<')
00010EC6 =00000024                M 	__endpos:	set instr(__pos+1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>",'>')
00010EC6 =00000025                M 	__midpos:	set instr(__pos+5,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>",' ')
00010EC6 =00000024                M 	__midpos:	= __endpos
00010EC6                          M 	__substr:	substr __pos+1+1,__endpos-1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>"
00010EC6                          M 	__type:	substr __pos+1+1,__pos+1+1+1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>"
00010EC6                          M 	__operand:	substr __pos+1+1,__midpos-1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>"
00010EC6                          M 	__param:	substr __midpos+1,__endpos-1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>"
00010EC6                          M 	pushp	"move.b cLastDur(a5),1(sp)"
00010EC6                          M 	pushp	"subq.w	#2, sp"
00010EC6 =00000003                M 	__stack:	= __stack+2
00010EC6 =00000004                M 	__sp:	= __sp+2
00010EC6 =00000026                M 	__pos:	set instr(__pos+1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>",'%<')
00010EC6 =00000038                M 	__endpos:	set instr(__pos+1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>",'>')
00010EC6 =00000039                M 	__midpos:	set instr(__pos+5,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>",' ')
00010EC6 =00000038                M 	__midpos:	= __endpos
00010EC6                          M 	__substr:	substr __pos+1+1,__endpos-1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>"
00010EC6                          M 	__type:	substr __pos+1+1,__pos+1+1+1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>"
00010EC6                          M 	__operand:	substr __pos+1+1,__midpos-1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>"
00010EC6                          M 	__param:	substr __midpos+1,__endpos-1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>"
00010EC6                          M 	pushp	"move.b cDuration(a5),1(sp)"
00010EC6                          M 	pushp	"subq.w	#2, sp"
00010EC6 =00000005                M 	__stack:	= __stack+2
00010EC6 =00000006                M 	__sp:	= __sp+2
00010EC6 =0000003A                M 	__pos:	set instr(__pos+1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>",'%<')
00010EC6 =00000048                M 	__endpos:	set instr(__pos+1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>",'>')
00010EC6 =00000000                M 	__midpos:	set instr(__pos+5,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>",' ')
00010EC6 =00000048                M 	__midpos:	= __endpos
00010EC6                          M 	__substr:	substr __pos+1+1,__endpos-1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>"
00010EC6                          M 	__type:	substr __pos+1+1,__pos+1+1+1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>"
00010EC6                          M 	__operand:	substr __pos+1+1,__midpos-1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>"
00010EC6                          M 	__param:	substr __midpos+1,__endpos-1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>"
00010EC6                          M 	pushp	"move.w cFreq(a5),-(sp)"
00010EC6 =00000006                M 	__stack:	= __stack+1
00010EC6 =00000008                M 	__sp:	= __sp+2
00010EC6 =00000000                M 	__pos:	set instr(__pos+1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>",'%<')
00010EC6                          M 	rept	__stack
00010EC6                          M 	popp	__command
00010EC6 3F2D 000E                M 	move.w	cfreq(a5),-(sp)
00010ECA                          M 	popp	__command
00010ECA 554F                     M 	subq.w	#2,sp
00010ECC                          M 	popp	__command
00010ECC 1F6D 000C 0001           M 	move.b	cduration(a5),1(sp)
00010ED2                          M 	popp	__command
00010ED2 554F                     M 	subq.w	#2,sp
00010ED4                          M 	popp	__command
00010ED4 1F6D 000D 0001           M 	move.b	clastdur(a5),1(sp)
00010EDA                          M 	popp	__command
00010EDA 3F0D                     M 	move.w	a5,-(sp)
00010EDC 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
00010EE0 45EF 0010                M 	lea	4*4(sp),a2
00010EE4 43FA 0000                M 	lea	.str_338(pc),a1
00010EE8 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_write_formatted
00010EEE 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
00010EF2 504F                     M 	addq.w	#__sp,sp
00010EF4 46DF                     M 	move.w	(sp)+,sr
00010EF6 6000 0000                M 	bra.w	.instr_end_338
00010EFA                          M 	.str_338:
00010EFA                          M 	__fstring_generatedecodedstring	": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>"
00010EFA =00000001                M 	__lpos:	set 1
00010EFA =00000003                M 	__pos:	set instr(": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>",'%<')
00010EFA                          M 	while	(__pos)
00010EFA                          M 	__substr:	substr __lpos,__pos-1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>"
00010EFA 3A20                     M 	dc.b	": "
00010EFC =00000009                M 	__endpos:	set instr(__pos+1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>",'>')
00010EFC =0000000E                M 	__midpos:	set instr(__pos+5,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>",' ')
00010EFC =00000009                M 	__midpos:	= __endpos
00010EFC                          M 	__type:	substr __pos+1+1,__pos+1+1+1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>"
00010EFC                          M 	__substr:	substr __pos+1+1,__endpos-1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>"
00010EFC EC                       M 	dc.b	pal2
00010EFD =0000000A                M 	__lpos:	set __endpos+1
00010EFD =0000000A                M 	__pos:	set instr(__pos+1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>",'%<')
00010EFD                          M 	__substr:	substr __lpos,__pos-1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>"
00010EFD                          M 	dc.b	""
00010EFD =00000011                M 	__endpos:	set instr(__pos+1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>",'>')
00010EFD =00000012                M 	__midpos:	set instr(__pos+5,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>",' ')
00010EFD =00000011                M 	__midpos:	= __endpos
00010EFD                          M 	__type:	substr __pos+1+1,__pos+1+1+1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>"
00010EFD                          M 	__param:	substr __midpos+1,__endpos-1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>"
00010EFD                          M 	__param:	substr ,,"hex"
00010EFD 81                       M 	dc.b	hex|1
00010EFE =00000012                M 	__lpos:	set __endpos+1
00010EFE =00000013                M 	__pos:	set instr(__pos+1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>",'%<')
00010EFE                          M 	__substr:	substr __lpos,__pos-1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>"
00010EFE 20                       M 	dc.b	" "
00010EFF =00000024                M 	__endpos:	set instr(__pos+1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>",'>')
00010EFF =00000025                M 	__midpos:	set instr(__pos+5,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>",' ')
00010EFF =00000024                M 	__midpos:	= __endpos
00010EFF                          M 	__type:	substr __pos+1+1,__pos+1+1+1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>"
00010EFF                          M 	__param:	substr __midpos+1,__endpos-1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>"
00010EFF                          M 	__param:	substr ,,"hex"
00010EFF 80                       M 	dc.b	hex
00010F00 =00000025                M 	__lpos:	set __endpos+1
00010F00 =00000026                M 	__pos:	set instr(__pos+1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>",'%<')
00010F00                          M 	__substr:	substr __lpos,__pos-1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>"
00010F00 20                       M 	dc.b	" "
00010F01 =00000038                M 	__endpos:	set instr(__pos+1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>",'>')
00010F01 =00000039                M 	__midpos:	set instr(__pos+5,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>",' ')
00010F01 =00000038                M 	__midpos:	= __endpos
00010F01                          M 	__type:	substr __pos+1+1,__pos+1+1+1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>"
00010F01                          M 	__param:	substr __midpos+1,__endpos-1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>"
00010F01                          M 	__param:	substr ,,"hex"
00010F01 80                       M 	dc.b	hex
00010F02 =00000039                M 	__lpos:	set __endpos+1
00010F02 =0000003A                M 	__pos:	set instr(__pos+1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>",'%<')
00010F02                          M 	__substr:	substr __lpos,__pos-1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>"
00010F02 20                       M 	dc.b	" "
00010F03 =00000048                M 	__endpos:	set instr(__pos+1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>",'>')
00010F03 =00000000                M 	__midpos:	set instr(__pos+5,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>",' ')
00010F03 =00000048                M 	__midpos:	= __endpos
00010F03                          M 	__type:	substr __pos+1+1,__pos+1+1+1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>"
00010F03                          M 	__param:	substr __midpos+1,__endpos-1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>"
00010F03                          M 	__param:	substr ,,"hex"
00010F03 81                       M 	dc.b	hex|1
00010F04 =00000049                M 	__lpos:	set __endpos+1
00010F04 =00000000                M 	__pos:	set instr(__pos+1,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>",'%<')
00010F04                          M 	__substr:	substr __lpos,,": %<pal2>%<.w a5> %<.b cLastDur(a5)> %<.b cDuration(a5)> %<.w cFreq(a5)>"
00010F04                          M 	dc.b	""
00010F04 00                       M 	dc.b	0
00010F06 00                       M 	even
00010F06                          M 	.instr_end_338:
00010F06                            	Console.WriteLine " %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>"
00010F06 40E7                     M 	move.w	sr,-(sp)
00010F08                          M 	__fstring_generateargumentscode	" %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>"
00010F08 =00000002                M 	__pos:	set instr(" %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>",'%<')
00010F08 =00000000                M 	__stack:set	0
00010F08 =00000000                M 	__sp:	set 0
00010F08                          M 	while	(__pos)
00010F08 =00000012                M 	__endpos:	set instr(__pos+1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>",'>')
00010F08 =00000013                M 	__midpos:	set instr(__pos+5," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>",' ')
00010F08 =00000012                M 	__midpos:	= __endpos
00010F08                          M 	__substr:	substr __pos+1+1,__endpos-1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>"
00010F08                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>"
00010F08                          M 	__operand:	substr __pos+1+1,__midpos-1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>"
00010F08                          M 	__param:	substr __midpos+1,__endpos-1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>"
00010F08                          M 	pushp	"move.b cSample(a5),1(sp)"
00010F08                          M 	pushp	"subq.w	#2, sp"
00010F08 =00000002                M 	__stack:	= __stack+2
00010F08 =00000002                M 	__sp:	= __sp+2
00010F08 =00000014                M 	__pos:	set instr(__pos+1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>",'%<')
00010F08 =00000022                M 	__endpos:	set instr(__pos+1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>",'>')
00010F08 =00000023                M 	__midpos:	set instr(__pos+5," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>",' ')
00010F08 =00000022                M 	__midpos:	= __endpos
00010F08                          M 	__substr:	substr __pos+1+1,__endpos-1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>"
00010F08                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>"
00010F08                          M 	__operand:	substr __pos+1+1,__midpos-1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>"
00010F08                          M 	__param:	substr __midpos+1,__endpos-1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>"
00010F08                          M 	pushp	"move.b cLoop(a5),1(sp)"
00010F08                          M 	pushp	"subq.w	#2, sp"
00010F08 =00000004                M 	__stack:	= __stack+2
00010F08 =00000004                M 	__sp:	= __sp+2
00010F08 =00000024                M 	__pos:	set instr(__pos+1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>",'%<')
00010F08 =00000034                M 	__endpos:	set instr(__pos+1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>",'>')
00010F08 =00000035                M 	__midpos:	set instr(__pos+5," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>",' ')
00010F08 =00000034                M 	__midpos:	= __endpos
00010F08                          M 	__substr:	substr __pos+1+1,__endpos-1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>"
00010F08                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>"
00010F08                          M 	__operand:	substr __pos+1+1,__midpos-1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>"
00010F08                          M 	__param:	substr __midpos+1,__endpos-1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>"
00010F08                          M 	pushp	"move.b cLoop+1(a5),1(sp)"
00010F08                          M 	pushp	"subq.w	#2, sp"
00010F08 =00000006                M 	__stack:	= __stack+2
00010F08 =00000006                M 	__sp:	= __sp+2
00010F08 =00000036                M 	__pos:	set instr(__pos+1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>",'%<')
00010F08 =00000046                M 	__endpos:	set instr(__pos+1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>",'>')
00010F08 =00000000                M 	__midpos:	set instr(__pos+5," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>",' ')
00010F08 =00000046                M 	__midpos:	= __endpos
00010F08                          M 	__substr:	substr __pos+1+1,__endpos-1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>"
00010F08                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>"
00010F08                          M 	__operand:	substr __pos+1+1,__midpos-1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>"
00010F08                          M 	__param:	substr __midpos+1,__endpos-1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>"
00010F08                          M 	pushp	"move.b cLoop+2(a5),1(sp)"
00010F08                          M 	pushp	"subq.w	#2, sp"
00010F08 =00000008                M 	__stack:	= __stack+2
00010F08 =00000008                M 	__sp:	= __sp+2
00010F08 =00000000                M 	__pos:	set instr(__pos+1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>",'%<')
00010F08                          M 	rept	__stack
00010F08                          M 	popp	__command
00010F08 554F                     M 	subq.w	#2,sp
00010F0A                          M 	popp	__command
00010F0A 1F6D 001B 0001           M 	move.b	cloop+2(a5),1(sp)
00010F10                          M 	popp	__command
00010F10 554F                     M 	subq.w	#2,sp
00010F12                          M 	popp	__command
00010F12 1F6D 001A 0001           M 	move.b	cloop+1(a5),1(sp)
00010F18                          M 	popp	__command
00010F18 554F                     M 	subq.w	#2,sp
00010F1A                          M 	popp	__command
00010F1A 1F6D 0019 0001           M 	move.b	cloop(a5),1(sp)
00010F20                          M 	popp	__command
00010F20 554F                     M 	subq.w	#2,sp
00010F22                          M 	popp	__command
00010F22 1F6D 000B 0001           M 	move.b	csample(a5),1(sp)
00010F28 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
00010F2C 45EF 0010                M 	lea	4*4(sp),a2
00010F30 43FA 0000                M 	lea	.str_341(pc),a1
00010F34 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_writeline_formatted
00010F3A 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
00010F3E 504F                     M 	addq.w	#__sp,sp
00010F40 46DF                     M 	move.w	(sp)+,sr
00010F42 6000 0000                M 	bra.w	.instr_end_341
00010F46                          M 	.str_341:
00010F46                          M 	__fstring_generatedecodedstring	" %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>"
00010F46 =00000001                M 	__lpos:	set 1
00010F46 =00000002                M 	__pos:	set instr(" %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>",'%<')
00010F46                          M 	while	(__pos)
00010F46                          M 	__substr:	substr __lpos,__pos-1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>"
00010F46 20                       M 	dc.b	" "
00010F47 =00000012                M 	__endpos:	set instr(__pos+1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>",'>')
00010F47 =00000013                M 	__midpos:	set instr(__pos+5," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>",' ')
00010F47 =00000012                M 	__midpos:	= __endpos
00010F47                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>"
00010F47                          M 	__param:	substr __midpos+1,__endpos-1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>"
00010F47                          M 	__param:	substr ,,"hex"
00010F47 80                       M 	dc.b	hex
00010F48 =00000013                M 	__lpos:	set __endpos+1
00010F48 =00000014                M 	__pos:	set instr(__pos+1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>",'%<')
00010F48                          M 	__substr:	substr __lpos,__pos-1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>"
00010F48 20                       M 	dc.b	" "
00010F49 =00000022                M 	__endpos:	set instr(__pos+1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>",'>')
00010F49 =00000023                M 	__midpos:	set instr(__pos+5," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>",' ')
00010F49 =00000022                M 	__midpos:	= __endpos
00010F49                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>"
00010F49                          M 	__param:	substr __midpos+1,__endpos-1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>"
00010F49                          M 	__param:	substr ,,"hex"
00010F49 80                       M 	dc.b	hex
00010F4A =00000023                M 	__lpos:	set __endpos+1
00010F4A =00000024                M 	__pos:	set instr(__pos+1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>",'%<')
00010F4A                          M 	__substr:	substr __lpos,__pos-1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>"
00010F4A 20                       M 	dc.b	" "
00010F4B =00000034                M 	__endpos:	set instr(__pos+1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>",'>')
00010F4B =00000035                M 	__midpos:	set instr(__pos+5," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>",' ')
00010F4B =00000034                M 	__midpos:	= __endpos
00010F4B                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>"
00010F4B                          M 	__param:	substr __midpos+1,__endpos-1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>"
00010F4B                          M 	__param:	substr ,,"hex"
00010F4B 80                       M 	dc.b	hex
00010F4C =00000035                M 	__lpos:	set __endpos+1
00010F4C =00000036                M 	__pos:	set instr(__pos+1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>",'%<')
00010F4C                          M 	__substr:	substr __lpos,__pos-1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>"
00010F4C 20                       M 	dc.b	" "
00010F4D =00000046                M 	__endpos:	set instr(__pos+1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>",'>')
00010F4D =00000000                M 	__midpos:	set instr(__pos+5," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>",' ')
00010F4D =00000046                M 	__midpos:	= __endpos
00010F4D                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>"
00010F4D                          M 	__param:	substr __midpos+1,__endpos-1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>"
00010F4D                          M 	__param:	substr ,,"hex"
00010F4D 80                       M 	dc.b	hex
00010F4E =00000047                M 	__lpos:	set __endpos+1
00010F4E =00000000                M 	__pos:	set instr(__pos+1," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>",'%<')
00010F4E                          M 	__substr:	substr __lpos,," %<.b cSample(a5)> %<.b cLoop(a5)> %<.b cLoop+1(a5)> %<.b cLoop+2(a5)>"
00010F4E                          M 	dc.b	""
00010F4E 00                       M 	dc.b	0
00010F50 00                       M 	even
00010F50                          M 	.instr_end_341:
00010F50                            	Console.WriteLine " %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>"
00010F50 40E7                     M 	move.w	sr,-(sp)
00010F52                          M 	__fstring_generateargumentscode	" %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>"
00010F52 =00000002                M 	__pos:	set instr(" %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>",'%<')
00010F52 =00000000                M 	__stack:set	0
00010F52 =00000000                M 	__sp:	set 0
00010F52                          M 	while	(__pos)
00010F52 =00000008                M 	__endpos:	set instr(__pos+1," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>",'>')
00010F52 =0000000E                M 	__midpos:	set instr(__pos+5," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>",' ')
00010F52 =00000008                M 	__midpos:	= __endpos
00010F52                          M 	__substr:	substr __pos+1+1,__endpos-1," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>"
00010F52                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>"
00010F52 =0000000F                M 	__pos:	set instr(__pos+1," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>",'%<')
00010F52 =00000015                M 	__endpos:	set instr(__pos+1," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>",'>')
00010F52 =0000001A                M 	__midpos:	set instr(__pos+5," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>",' ')
00010F52 =00000015                M 	__midpos:	= __endpos
00010F52                          M 	__substr:	substr __pos+1+1,__endpos-1," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>"
00010F52                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>"
00010F52 =00000016                M 	__pos:	set instr(__pos+1," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>",'%<')
00010F52 =0000002E                M 	__endpos:	set instr(__pos+1," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>",'>')
00010F52 =00000024                M 	__midpos:	set instr(__pos+5," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>",' ')
00010F52                          M 	__substr:	substr __pos+1+1,__endpos-1," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>"
00010F52                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>"
00010F52                          M 	__operand:	substr __pos+1+1,__midpos-1," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>"
00010F52                          M 	__param:	substr __midpos+1,__endpos-1," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>"
00010F52                          M 	pushp	"move.l cData(a5),-(sp)"
00010F52 =00000001                M 	__stack:	= __stack+1
00010F52 =00000004                M 	__sp:	= __sp+4
00010F52 =0000002F                M 	__pos:	set instr(__pos+1," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>",'%<')
00010F52 =0000003D                M 	__endpos:	set instr(__pos+1," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>",'>')
00010F52 =00000000                M 	__midpos:	set instr(__pos+5," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>",' ')
00010F52 =0000003D                M 	__midpos:	= __endpos
00010F52                          M 	__substr:	substr __pos+1+1,__endpos-1," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>"
00010F52                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>"
00010F52 =00000000                M 	__pos:	set instr(__pos+1," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>",'%<')
00010F52                          M 	rept	__stack
00010F52                          M 	popp	__command
00010F52 2F2D 0002                M 	move.l	cdata(a5),-(sp)
00010F56 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
00010F5A 45EF 0010                M 	lea	4*4(sp),a2
00010F5E 43FA 0000                M 	lea	.str_344(pc),a1
00010F62 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_writeline_formatted
00010F68 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
00010F6C 584F                     M 	addq.w	#__sp,sp
00010F6E 46DF                     M 	move.w	(sp)+,sr
00010F70 6000 0000                M 	bra.w	.instr_end_344
00010F74                          M 	.str_344:
00010F74                          M 	__fstring_generatedecodedstring	" %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>"
00010F74 =00000001                M 	__lpos:	set 1
00010F74 =00000002                M 	__pos:	set instr(" %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>",'%<')
00010F74                          M 	while	(__pos)
00010F74                          M 	__substr:	substr __lpos,__pos-1," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>"
00010F74 20                       M 	dc.b	" "
00010F75 =00000008                M 	__endpos:	set instr(__pos+1," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>",'>')
00010F75 =0000000E                M 	__midpos:	set instr(__pos+5," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>",' ')
00010F75 =00000008                M 	__midpos:	= __endpos
00010F75                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>"
00010F75                          M 	__substr:	substr __pos+1+1,__endpos-1," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>"
00010F75 EA                       M 	dc.b	pal1
00010F76 =00000009                M 	__lpos:	set __endpos+1
00010F76 =0000000F                M 	__pos:	set instr(__pos+1," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>",'%<')
00010F76                          M 	__substr:	substr __lpos,__pos-1," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>"
00010F76 4164 6472 3A20           M 	dc.b	"Addr: "
00010F7C =00000015                M 	__endpos:	set instr(__pos+1," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>",'>')
00010F7C =0000001A                M 	__midpos:	set instr(__pos+5," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>",' ')
00010F7C =00000015                M 	__midpos:	= __endpos
00010F7C                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>"
00010F7C                          M 	__substr:	substr __pos+1+1,__endpos-1," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>"
00010F7C E8                       M 	dc.b	pal0
00010F7D =00000016                M 	__lpos:	set __endpos+1
00010F7D =00000016                M 	__pos:	set instr(__pos+1," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>",'%<')
00010F7D                          M 	__substr:	substr __lpos,__pos-1," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>"
00010F7D                          M 	dc.b	""
00010F7D =0000002E                M 	__endpos:	set instr(__pos+1," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>",'>')
00010F7D =00000024                M 	__midpos:	set instr(__pos+5," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>",' ')
00010F7D                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>"
00010F7D                          M 	__param:	substr __midpos+1,__endpos-1," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>"
00010F7D BB                       M 	dc.b	sym|split|3
00010F7E =0000002F                M 	__lpos:	set __endpos+1
00010F7E =0000002F                M 	__pos:	set instr(__pos+1," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>",'%<')
00010F7E                          M 	__substr:	substr __lpos,__pos-1," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>"
00010F7E                          M 	dc.b	""
00010F7E =0000003D                M 	__endpos:	set instr(__pos+1," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>",'>')
00010F7E =00000000                M 	__midpos:	set instr(__pos+5," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>",' ')
00010F7E =0000003D                M 	__midpos:	= __endpos
00010F7E                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>"
00010F7E                          M 	__substr:	substr __pos+1+1,__endpos-1," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>"
00010F7E ECC0                     M 	dc.b	pal2,symdisp
00010F80 =0000003E                M 	__lpos:	set __endpos+1
00010F80 =00000000                M 	__pos:	set instr(__pos+1," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>",'%<')
00010F80                          M 	__substr:	substr __lpos,," %<pal1>Addr: %<pal0>%<.l cData(a5) sym|split>%<pal2,symdisp>"
00010F80                          M 	dc.b	""
00010F80 00                       M 	dc.b	0
00010F82 00                       M 	even
00010F82                          M 	.instr_end_344:
00010F82                            
00010F82 5546                       		subq.w	#2,d6		; sub those 2 lines from stuff
00010F84 6B00 0000                  		bmi.w	.n		; if drawn all, branch
00010F88 320D                       		move.w	a5,d1		; copy ch to d1
00010F8A D245                       		add.w	d5,d1		; go to end of it
00010F8C                            
00010F8C 7000                       		moveq	#0,d0
00010F8E 102D 001E                  		move.b	cStack(a5),d0	; get stack to d0
00010F92 4DF5 0000                  		lea	(a5,d0.w),a6	; and get first element to a6
00010F96                            
00010F96 B24E                       		cmp.w	a6,d1		; check if stack is dry
00010F98 6300                       		bls.s	.c		; if is, branch
00010F9A                            	Console.WriteLine " %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010F9A 40E7                     M 	move.w	sr,-(sp)
00010F9C                          M 	__fstring_generateargumentscode	" %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010F9C =00000002                M 	__pos:	set instr(" %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",'%<')
00010F9C =00000000                M 	__stack:set	0
00010F9C =00000000                M 	__sp:	set 0
00010F9C                          M 	while	(__pos)
00010F9C =00000008                M 	__endpos:	set instr(__pos+1," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",'>')
00010F9C =0000001A                M 	__midpos:	set instr(__pos+5," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",' ')
00010F9C =00000008                M 	__midpos:	= __endpos
00010F9C                          M 	__substr:	substr __pos+1+1,__endpos-1," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010F9C                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010F9C =0000000F                M 	__pos:	set instr(__pos+1," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",'%<')
00010F9C =00000015                M 	__endpos:	set instr(__pos+1," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",'>')
00010F9C =0000001A                M 	__midpos:	set instr(__pos+5," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",' ')
00010F9C =00000015                M 	__midpos:	= __endpos
00010F9C                          M 	__substr:	substr __pos+1+1,__endpos-1," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010F9C                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010F9C =00000016                M 	__pos:	set instr(__pos+1," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",'%<')
00010F9C =0000002A                M 	__endpos:	set instr(__pos+1," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",'>')
00010F9C =00000020                M 	__midpos:	set instr(__pos+5," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",' ')
00010F9C                          M 	__substr:	substr __pos+1+1,__endpos-1," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010F9C                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010F9C                          M 	__operand:	substr __pos+1+1,__midpos-1," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010F9C                          M 	__param:	substr __midpos+1,__endpos-1," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010F9C                          M 	pushp	"move.l (a6)+,-(sp)"
00010F9C =00000001                M 	__stack:	= __stack+1
00010F9C =00000004                M 	__sp:	= __sp+4
00010F9C =0000002B                M 	__pos:	set instr(__pos+1," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",'%<')
00010F9C =00000039                M 	__endpos:	set instr(__pos+1," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",'>')
00010F9C =00000000                M 	__midpos:	set instr(__pos+5," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",' ')
00010F9C =00000039                M 	__midpos:	= __endpos
00010F9C                          M 	__substr:	substr __pos+1+1,__endpos-1," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010F9C                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010F9C =00000000                M 	__pos:	set instr(__pos+1," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",'%<')
00010F9C                          M 	rept	__stack
00010F9C                          M 	popp	__command
00010F9C 2F1E                     M 	move.l	(a6)+,-(sp)
00010F9E 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
00010FA2 45EF 0010                M 	lea	4*4(sp),a2
00010FA6 43FA 0000                M 	lea	.str_347(pc),a1
00010FAA 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_writeline_formatted
00010FB0 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
00010FB4 584F                     M 	addq.w	#__sp,sp
00010FB6 46DF                     M 	move.w	(sp)+,sr
00010FB8 6000 0000                M 	bra.w	.instr_end_347
00010FBC                          M 	.str_347:
00010FBC                          M 	__fstring_generatedecodedstring	" %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010FBC =00000001                M 	__lpos:	set 1
00010FBC =00000002                M 	__pos:	set instr(" %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",'%<')
00010FBC                          M 	while	(__pos)
00010FBC                          M 	__substr:	substr __lpos,__pos-1," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010FBC 20                       M 	dc.b	" "
00010FBD =00000008                M 	__endpos:	set instr(__pos+1," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",'>')
00010FBD =0000001A                M 	__midpos:	set instr(__pos+5," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",' ')
00010FBD =00000008                M 	__midpos:	= __endpos
00010FBD                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010FBD                          M 	__substr:	substr __pos+1+1,__endpos-1," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010FBD EA                       M 	dc.b	pal1
00010FBE =00000009                M 	__lpos:	set __endpos+1
00010FBE =0000000F                M 	__pos:	set instr(__pos+1," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",'%<')
00010FBE                          M 	__substr:	substr __lpos,__pos-1," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010FBE 5374 6163 6B3A           M 	dc.b	"Stack:"
00010FC4 =00000015                M 	__endpos:	set instr(__pos+1," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",'>')
00010FC4 =0000001A                M 	__midpos:	set instr(__pos+5," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",' ')
00010FC4 =00000015                M 	__midpos:	= __endpos
00010FC4                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010FC4                          M 	__substr:	substr __pos+1+1,__endpos-1," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010FC4 E8                       M 	dc.b	pal0
00010FC5 =00000016                M 	__lpos:	set __endpos+1
00010FC5 =00000016                M 	__pos:	set instr(__pos+1," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",'%<')
00010FC5                          M 	__substr:	substr __lpos,__pos-1," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010FC5                          M 	dc.b	""
00010FC5 =0000002A                M 	__endpos:	set instr(__pos+1," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",'>')
00010FC5 =00000020                M 	__midpos:	set instr(__pos+5," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",' ')
00010FC5                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010FC5                          M 	__param:	substr __midpos+1,__endpos-1," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010FC5 BB                       M 	dc.b	sym|split|3
00010FC6 =0000002B                M 	__lpos:	set __endpos+1
00010FC6 =0000002B                M 	__pos:	set instr(__pos+1," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",'%<')
00010FC6                          M 	__substr:	substr __lpos,__pos-1," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010FC6                          M 	dc.b	""
00010FC6 =00000039                M 	__endpos:	set instr(__pos+1," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",'>')
00010FC6 =00000000                M 	__midpos:	set instr(__pos+5," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",' ')
00010FC6 =00000039                M 	__midpos:	= __endpos
00010FC6                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010FC6                          M 	__substr:	substr __pos+1+1,__endpos-1," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010FC6 ECC0                     M 	dc.b	pal2,symdisp
00010FC8 =0000003A                M 	__lpos:	set __endpos+1
00010FC8 =00000000                M 	__pos:	set instr(__pos+1," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",'%<')
00010FC8                          M 	__substr:	substr __lpos,," %<pal1>Stack:%<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010FC8                          M 	dc.b	""
00010FC8 00                       M 	dc.b	0
00010FCA 00                       M 	even
00010FCA                          M 	.instr_end_347:
00010FCA 5346                       		subq.w	#1,d6		; sub a line
00010FCC 6B00                       		bmi.s	.n		; if drawn all, branch
00010FCE                            
00010FCE                            .loop
00010FCE B24E                       		cmp.w	a6,d1		; check if we printed full stack
00010FD0 6300                       		bls.s	.c		; if not though, branch
00010FD2                            	Console.WriteLine "   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010FD2 40E7                     M 	move.w	sr,-(sp)
00010FD4                          M 	__fstring_generateargumentscode	"   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010FD4 =00000004                M 	__pos:	set instr("   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",'%<')
00010FD4 =00000000                M 	__stack:set	0
00010FD4 =00000000                M 	__sp:	set 0
00010FD4                          M 	while	(__pos)
00010FD4 =0000000A                M 	__endpos:	set instr(__pos+1,"   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",'>')
00010FD4 =0000000F                M 	__midpos:	set instr(__pos+5,"   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",' ')
00010FD4 =0000000A                M 	__midpos:	= __endpos
00010FD4                          M 	__substr:	substr __pos+1+1,__endpos-1,"   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010FD4                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010FD4 =0000000B                M 	__pos:	set instr(__pos+1,"   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",'%<')
00010FD4 =0000001F                M 	__endpos:	set instr(__pos+1,"   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",'>')
00010FD4 =00000015                M 	__midpos:	set instr(__pos+5,"   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",' ')
00010FD4                          M 	__substr:	substr __pos+1+1,__endpos-1,"   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010FD4                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010FD4                          M 	__operand:	substr __pos+1+1,__midpos-1,"   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010FD4                          M 	__param:	substr __midpos+1,__endpos-1,"   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010FD4                          M 	pushp	"move.l (a6)+,-(sp)"
00010FD4 =00000001                M 	__stack:	= __stack+1
00010FD4 =00000004                M 	__sp:	= __sp+4
00010FD4 =00000020                M 	__pos:	set instr(__pos+1,"   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",'%<')
00010FD4 =0000002E                M 	__endpos:	set instr(__pos+1,"   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",'>')
00010FD4 =00000000                M 	__midpos:	set instr(__pos+5,"   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",' ')
00010FD4 =0000002E                M 	__midpos:	= __endpos
00010FD4                          M 	__substr:	substr __pos+1+1,__endpos-1,"   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010FD4                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010FD4 =00000000                M 	__pos:	set instr(__pos+1,"   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",'%<')
00010FD4                          M 	rept	__stack
00010FD4                          M 	popp	__command
00010FD4 2F1E                     M 	move.l	(a6)+,-(sp)
00010FD6 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
00010FDA 45EF 0010                M 	lea	4*4(sp),a2
00010FDE 43FA 0000                M 	lea	.str_350(pc),a1
00010FE2 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_writeline_formatted
00010FE8 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
00010FEC 584F                     M 	addq.w	#__sp,sp
00010FEE 46DF                     M 	move.w	(sp)+,sr
00010FF0 6000 0000                M 	bra.w	.instr_end_350
00010FF4                          M 	.str_350:
00010FF4                          M 	__fstring_generatedecodedstring	"   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010FF4 =00000001                M 	__lpos:	set 1
00010FF4 =00000004                M 	__pos:	set instr("   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",'%<')
00010FF4                          M 	while	(__pos)
00010FF4                          M 	__substr:	substr __lpos,__pos-1,"   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010FF4 2020 20                  M 	dc.b	"   "
00010FF7 =0000000A                M 	__endpos:	set instr(__pos+1,"   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",'>')
00010FF7 =0000000F                M 	__midpos:	set instr(__pos+5,"   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",' ')
00010FF7 =0000000A                M 	__midpos:	= __endpos
00010FF7                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010FF7                          M 	__substr:	substr __pos+1+1,__endpos-1,"   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010FF7 E8                       M 	dc.b	pal0
00010FF8 =0000000B                M 	__lpos:	set __endpos+1
00010FF8 =0000000B                M 	__pos:	set instr(__pos+1,"   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",'%<')
00010FF8                          M 	__substr:	substr __lpos,__pos-1,"   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010FF8                          M 	dc.b	""
00010FF8 =0000001F                M 	__endpos:	set instr(__pos+1,"   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",'>')
00010FF8 =00000015                M 	__midpos:	set instr(__pos+5,"   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",' ')
00010FF8                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010FF8                          M 	__param:	substr __midpos+1,__endpos-1,"   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010FF8 BB                       M 	dc.b	sym|split|3
00010FF9 =00000020                M 	__lpos:	set __endpos+1
00010FF9 =00000020                M 	__pos:	set instr(__pos+1,"   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",'%<')
00010FF9                          M 	__substr:	substr __lpos,__pos-1,"   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010FF9                          M 	dc.b	""
00010FF9 =0000002E                M 	__endpos:	set instr(__pos+1,"   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",'>')
00010FF9 =00000000                M 	__midpos:	set instr(__pos+5,"   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",' ')
00010FF9 =0000002E                M 	__midpos:	= __endpos
00010FF9                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010FF9                          M 	__substr:	substr __pos+1+1,__endpos-1,"   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010FF9 ECC0                     M 	dc.b	pal2,symdisp
00010FFB =0000002F                M 	__lpos:	set __endpos+1
00010FFB =00000000                M 	__pos:	set instr(__pos+1,"   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>",'%<')
00010FFB                          M 	__substr:	substr __lpos,,"   %<pal0>%<.l (a6)+ sym|split>%<pal2,symdisp>"
00010FFB                          M 	dc.b	""
00010FFB 00                       M 	dc.b	0
00010FFC                          M 	even
00010FFC                          M 	.instr_end_350:
00010FFC 5346                       		subq.w	#1,d6		; sub a line
00010FFE 6ACE                       		bpl.s	.loop		; if we havent drawn all, branch
00011000                            
00011000                            .c
00011000                            	Console.BreakLine
00011000 40E7                     M 	move.w	sr,-(sp)
00011002 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_startnewline
00011008 46DF                     M 	move.w	(sp)+,sr
0001100A 5346                       		subq.w	#1,d6		; sub a line
0001100C                            .n
0001100C DAC5                       		add.w	d5,a5		; go to next ch
0001100E 4E75                       		rts
00011010                            
00011010                            AMPS_DebugR_ChkTracker2:
00011010 7C27                       		moveq	#40-1,d6
00011012 7A2C                       		moveq	#cSize,d5
00011014 4BF8 811E                  		lea	mDAC1.w,a5
00011018                            
00011018                            
00011018 41FA 0000                  		lea	.dac1(pc),a0
0001101C 4EBA FE98                  		jsr	AMPS_DebugR_ChkTracker_Ch(pc)
00011020 41FA 0000                  		lea	.dac2(pc),a0
00011024 4EBA FE90                  		jsr	AMPS_DebugR_ChkTracker_Ch(pc)
00011028                            
00011028 41FA 0000                  		lea	.fm1(pc),a0
0001102C 4EBA FE88                  		jsr	AMPS_DebugR_ChkTracker_Ch(pc)
00011030 41FA 0000                  		lea	.fm2(pc),a0
00011034 4EBA FE80                  		jsr	AMPS_DebugR_ChkTracker_Ch(pc)
00011038 41FA 0000                  		lea	.fm3(pc),a0
0001103C 4EBA FE78                  		jsr	AMPS_DebugR_ChkTracker_Ch(pc)
00011040 41FA 0000                  		lea	.fm4(pc),a0
00011044 4EBA FE70                  		jsr	AMPS_DebugR_ChkTracker_Ch(pc)
00011048 41FA 0000                  		lea	.fm5(pc),a0
0001104C 4EBA FE68                  		jsr	AMPS_DebugR_ChkTracker_Ch(pc)
00011050                            
00011050 41FA 0000                  		lea	.psg1(pc),a0
00011054 4EBA FE60                  		jsr	AMPS_DebugR_ChkTracker_Ch(pc)
00011058 41FA 0000                  		lea	.psg2(pc),a0
0001105C 4EBA FE58                  		jsr	AMPS_DebugR_ChkTracker_Ch(pc)
00011060 41FA 0000                  		lea	.psg3(pc),a0
00011064 4EFA FE50                  		jmp	AMPS_DebugR_ChkTracker_Ch(pc)
00011068                            
00011068                            .dac1
00011068                            	Console.Write " %<pal0>DAC1"
00011068 40E7                     M 	move.w	sr,-(sp)
0001106A                          M 	__fstring_generateargumentscode	" %<pal0>DAC1"
0001106A =00000002                M 	__pos:	set instr(" %<pal0>DAC1",'%<')
0001106A =00000000                M 	__stack:set	0
0001106A =00000000                M 	__sp:	set 0
0001106A                          M 	while	(__pos)
0001106A =00000008                M 	__endpos:	set instr(__pos+1," %<pal0>DAC1",'>')
0001106A =00000000                M 	__midpos:	set instr(__pos+5," %<pal0>DAC1",' ')
0001106A =00000008                M 	__midpos:	= __endpos
0001106A                          M 	__substr:	substr __pos+1+1,__endpos-1," %<pal0>DAC1"
0001106A                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<pal0>DAC1"
0001106A =00000000                M 	__pos:	set instr(__pos+1," %<pal0>DAC1",'%<')
0001106A                          M 	rept	__stack
0001106A 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
0001106E 43FA 0000                M 	lea	.str_354(pc),a1
00011072 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_write_formatted
00011078 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
0001107C 46DF                     M 	move.w	(sp)+,sr
0001107E 6000 0000                M 	bra.w	.instr_end_354
00011082                          M 	.str_354:
00011082                          M 	__fstring_generatedecodedstring	" %<pal0>DAC1"
00011082 =00000001                M 	__lpos:	set 1
00011082 =00000002                M 	__pos:	set instr(" %<pal0>DAC1",'%<')
00011082                          M 	while	(__pos)
00011082                          M 	__substr:	substr __lpos,__pos-1," %<pal0>DAC1"
00011082 20                       M 	dc.b	" "
00011083 =00000008                M 	__endpos:	set instr(__pos+1," %<pal0>DAC1",'>')
00011083 =00000000                M 	__midpos:	set instr(__pos+5," %<pal0>DAC1",' ')
00011083 =00000008                M 	__midpos:	= __endpos
00011083                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<pal0>DAC1"
00011083                          M 	__substr:	substr __pos+1+1,__endpos-1," %<pal0>DAC1"
00011083 E8                       M 	dc.b	pal0
00011084 =00000009                M 	__lpos:	set __endpos+1
00011084 =00000000                M 	__pos:	set instr(__pos+1," %<pal0>DAC1",'%<')
00011084                          M 	__substr:	substr __lpos,," %<pal0>DAC1"
00011084 4441 4331                M 	dc.b	"DAC1"
00011088 00                       M 	dc.b	0
0001108A 00                       M 	even
0001108A                          M 	.instr_end_354:
0001108A 4E75                       		rts
0001108C                            
0001108C                            .dac2
0001108C                            	Console.Write " %<pal0>DAC2"
0001108C 40E7                     M 	move.w	sr,-(sp)
0001108E                          M 	__fstring_generateargumentscode	" %<pal0>DAC2"
0001108E =00000002                M 	__pos:	set instr(" %<pal0>DAC2",'%<')
0001108E =00000000                M 	__stack:set	0
0001108E =00000000                M 	__sp:	set 0
0001108E                          M 	while	(__pos)
0001108E =00000008                M 	__endpos:	set instr(__pos+1," %<pal0>DAC2",'>')
0001108E =00000000                M 	__midpos:	set instr(__pos+5," %<pal0>DAC2",' ')
0001108E =00000008                M 	__midpos:	= __endpos
0001108E                          M 	__substr:	substr __pos+1+1,__endpos-1," %<pal0>DAC2"
0001108E                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<pal0>DAC2"
0001108E =00000000                M 	__pos:	set instr(__pos+1," %<pal0>DAC2",'%<')
0001108E                          M 	rept	__stack
0001108E 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
00011092 43FA 0000                M 	lea	.str_357(pc),a1
00011096 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_write_formatted
0001109C 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
000110A0 46DF                     M 	move.w	(sp)+,sr
000110A2 6000 0000                M 	bra.w	.instr_end_357
000110A6                          M 	.str_357:
000110A6                          M 	__fstring_generatedecodedstring	" %<pal0>DAC2"
000110A6 =00000001                M 	__lpos:	set 1
000110A6 =00000002                M 	__pos:	set instr(" %<pal0>DAC2",'%<')
000110A6                          M 	while	(__pos)
000110A6                          M 	__substr:	substr __lpos,__pos-1," %<pal0>DAC2"
000110A6 20                       M 	dc.b	" "
000110A7 =00000008                M 	__endpos:	set instr(__pos+1," %<pal0>DAC2",'>')
000110A7 =00000000                M 	__midpos:	set instr(__pos+5," %<pal0>DAC2",' ')
000110A7 =00000008                M 	__midpos:	= __endpos
000110A7                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<pal0>DAC2"
000110A7                          M 	__substr:	substr __pos+1+1,__endpos-1," %<pal0>DAC2"
000110A7 E8                       M 	dc.b	pal0
000110A8 =00000009                M 	__lpos:	set __endpos+1
000110A8 =00000000                M 	__pos:	set instr(__pos+1," %<pal0>DAC2",'%<')
000110A8                          M 	__substr:	substr __lpos,," %<pal0>DAC2"
000110A8 4441 4332                M 	dc.b	"DAC2"
000110AC 00                       M 	dc.b	0
000110AE 00                       M 	even
000110AE                          M 	.instr_end_357:
000110AE 4E75                       		rts
000110B0                            
000110B0                            .fm1
000110B0                            	Console.Write " %<pal0> FM1"
000110B0 40E7                     M 	move.w	sr,-(sp)
000110B2                          M 	__fstring_generateargumentscode	" %<pal0> FM1"
000110B2 =00000002                M 	__pos:	set instr(" %<pal0> FM1",'%<')
000110B2 =00000000                M 	__stack:set	0
000110B2 =00000000                M 	__sp:	set 0
000110B2                          M 	while	(__pos)
000110B2 =00000008                M 	__endpos:	set instr(__pos+1," %<pal0> FM1",'>')
000110B2 =00000009                M 	__midpos:	set instr(__pos+5," %<pal0> FM1",' ')
000110B2 =00000008                M 	__midpos:	= __endpos
000110B2                          M 	__substr:	substr __pos+1+1,__endpos-1," %<pal0> FM1"
000110B2                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<pal0> FM1"
000110B2 =00000000                M 	__pos:	set instr(__pos+1," %<pal0> FM1",'%<')
000110B2                          M 	rept	__stack
000110B2 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
000110B6 43FA 0000                M 	lea	.str_360(pc),a1
000110BA 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_write_formatted
000110C0 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
000110C4 46DF                     M 	move.w	(sp)+,sr
000110C6 6000 0000                M 	bra.w	.instr_end_360
000110CA                          M 	.str_360:
000110CA                          M 	__fstring_generatedecodedstring	" %<pal0> FM1"
000110CA =00000001                M 	__lpos:	set 1
000110CA =00000002                M 	__pos:	set instr(" %<pal0> FM1",'%<')
000110CA                          M 	while	(__pos)
000110CA                          M 	__substr:	substr __lpos,__pos-1," %<pal0> FM1"
000110CA 20                       M 	dc.b	" "
000110CB =00000008                M 	__endpos:	set instr(__pos+1," %<pal0> FM1",'>')
000110CB =00000009                M 	__midpos:	set instr(__pos+5," %<pal0> FM1",' ')
000110CB =00000008                M 	__midpos:	= __endpos
000110CB                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<pal0> FM1"
000110CB                          M 	__substr:	substr __pos+1+1,__endpos-1," %<pal0> FM1"
000110CB E8                       M 	dc.b	pal0
000110CC =00000009                M 	__lpos:	set __endpos+1
000110CC =00000000                M 	__pos:	set instr(__pos+1," %<pal0> FM1",'%<')
000110CC                          M 	__substr:	substr __lpos,," %<pal0> FM1"
000110CC 2046 4D31                M 	dc.b	" FM1"
000110D0 00                       M 	dc.b	0
000110D2 00                       M 	even
000110D2                          M 	.instr_end_360:
000110D2 4E75                       		rts
000110D4                            
000110D4                            .fm2
000110D4                            	Console.Write " %<pal0> FM2"
000110D4 40E7                     M 	move.w	sr,-(sp)
000110D6                          M 	__fstring_generateargumentscode	" %<pal0> FM2"
000110D6 =00000002                M 	__pos:	set instr(" %<pal0> FM2",'%<')
000110D6 =00000000                M 	__stack:set	0
000110D6 =00000000                M 	__sp:	set 0
000110D6                          M 	while	(__pos)
000110D6 =00000008                M 	__endpos:	set instr(__pos+1," %<pal0> FM2",'>')
000110D6 =00000009                M 	__midpos:	set instr(__pos+5," %<pal0> FM2",' ')
000110D6 =00000008                M 	__midpos:	= __endpos
000110D6                          M 	__substr:	substr __pos+1+1,__endpos-1," %<pal0> FM2"
000110D6                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<pal0> FM2"
000110D6 =00000000                M 	__pos:	set instr(__pos+1," %<pal0> FM2",'%<')
000110D6                          M 	rept	__stack
000110D6 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
000110DA 43FA 0000                M 	lea	.str_363(pc),a1
000110DE 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_write_formatted
000110E4 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
000110E8 46DF                     M 	move.w	(sp)+,sr
000110EA 6000 0000                M 	bra.w	.instr_end_363
000110EE                          M 	.str_363:
000110EE                          M 	__fstring_generatedecodedstring	" %<pal0> FM2"
000110EE =00000001                M 	__lpos:	set 1
000110EE =00000002                M 	__pos:	set instr(" %<pal0> FM2",'%<')
000110EE                          M 	while	(__pos)
000110EE                          M 	__substr:	substr __lpos,__pos-1," %<pal0> FM2"
000110EE 20                       M 	dc.b	" "
000110EF =00000008                M 	__endpos:	set instr(__pos+1," %<pal0> FM2",'>')
000110EF =00000009                M 	__midpos:	set instr(__pos+5," %<pal0> FM2",' ')
000110EF =00000008                M 	__midpos:	= __endpos
000110EF                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<pal0> FM2"
000110EF                          M 	__substr:	substr __pos+1+1,__endpos-1," %<pal0> FM2"
000110EF E8                       M 	dc.b	pal0
000110F0 =00000009                M 	__lpos:	set __endpos+1
000110F0 =00000000                M 	__pos:	set instr(__pos+1," %<pal0> FM2",'%<')
000110F0                          M 	__substr:	substr __lpos,," %<pal0> FM2"
000110F0 2046 4D32                M 	dc.b	" FM2"
000110F4 00                       M 	dc.b	0
000110F6 00                       M 	even
000110F6                          M 	.instr_end_363:
000110F6 4E75                       		rts
000110F8                            
000110F8                            .fm3
000110F8                            	Console.Write " %<pal0> FM3"
000110F8 40E7                     M 	move.w	sr,-(sp)
000110FA                          M 	__fstring_generateargumentscode	" %<pal0> FM3"
000110FA =00000002                M 	__pos:	set instr(" %<pal0> FM3",'%<')
000110FA =00000000                M 	__stack:set	0
000110FA =00000000                M 	__sp:	set 0
000110FA                          M 	while	(__pos)
000110FA =00000008                M 	__endpos:	set instr(__pos+1," %<pal0> FM3",'>')
000110FA =00000009                M 	__midpos:	set instr(__pos+5," %<pal0> FM3",' ')
000110FA =00000008                M 	__midpos:	= __endpos
000110FA                          M 	__substr:	substr __pos+1+1,__endpos-1," %<pal0> FM3"
000110FA                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<pal0> FM3"
000110FA =00000000                M 	__pos:	set instr(__pos+1," %<pal0> FM3",'%<')
000110FA                          M 	rept	__stack
000110FA 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
000110FE 43FA 0000                M 	lea	.str_366(pc),a1
00011102 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_write_formatted
00011108 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
0001110C 46DF                     M 	move.w	(sp)+,sr
0001110E 6000 0000                M 	bra.w	.instr_end_366
00011112                          M 	.str_366:
00011112                          M 	__fstring_generatedecodedstring	" %<pal0> FM3"
00011112 =00000001                M 	__lpos:	set 1
00011112 =00000002                M 	__pos:	set instr(" %<pal0> FM3",'%<')
00011112                          M 	while	(__pos)
00011112                          M 	__substr:	substr __lpos,__pos-1," %<pal0> FM3"
00011112 20                       M 	dc.b	" "
00011113 =00000008                M 	__endpos:	set instr(__pos+1," %<pal0> FM3",'>')
00011113 =00000009                M 	__midpos:	set instr(__pos+5," %<pal0> FM3",' ')
00011113 =00000008                M 	__midpos:	= __endpos
00011113                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<pal0> FM3"
00011113                          M 	__substr:	substr __pos+1+1,__endpos-1," %<pal0> FM3"
00011113 E8                       M 	dc.b	pal0
00011114 =00000009                M 	__lpos:	set __endpos+1
00011114 =00000000                M 	__pos:	set instr(__pos+1," %<pal0> FM3",'%<')
00011114                          M 	__substr:	substr __lpos,," %<pal0> FM3"
00011114 2046 4D33                M 	dc.b	" FM3"
00011118 00                       M 	dc.b	0
0001111A 00                       M 	even
0001111A                          M 	.instr_end_366:
0001111A 4E75                       		rts
0001111C                            
0001111C                            .fm4
0001111C                            	Console.Write " %<pal0> FM4"
0001111C 40E7                     M 	move.w	sr,-(sp)
0001111E                          M 	__fstring_generateargumentscode	" %<pal0> FM4"
0001111E =00000002                M 	__pos:	set instr(" %<pal0> FM4",'%<')
0001111E =00000000                M 	__stack:set	0
0001111E =00000000                M 	__sp:	set 0
0001111E                          M 	while	(__pos)
0001111E =00000008                M 	__endpos:	set instr(__pos+1," %<pal0> FM4",'>')
0001111E =00000009                M 	__midpos:	set instr(__pos+5," %<pal0> FM4",' ')
0001111E =00000008                M 	__midpos:	= __endpos
0001111E                          M 	__substr:	substr __pos+1+1,__endpos-1," %<pal0> FM4"
0001111E                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<pal0> FM4"
0001111E =00000000                M 	__pos:	set instr(__pos+1," %<pal0> FM4",'%<')
0001111E                          M 	rept	__stack
0001111E 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
00011122 43FA 0000                M 	lea	.str_369(pc),a1
00011126 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_write_formatted
0001112C 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
00011130 46DF                     M 	move.w	(sp)+,sr
00011132 6000 0000                M 	bra.w	.instr_end_369
00011136                          M 	.str_369:
00011136                          M 	__fstring_generatedecodedstring	" %<pal0> FM4"
00011136 =00000001                M 	__lpos:	set 1
00011136 =00000002                M 	__pos:	set instr(" %<pal0> FM4",'%<')
00011136                          M 	while	(__pos)
00011136                          M 	__substr:	substr __lpos,__pos-1," %<pal0> FM4"
00011136 20                       M 	dc.b	" "
00011137 =00000008                M 	__endpos:	set instr(__pos+1," %<pal0> FM4",'>')
00011137 =00000009                M 	__midpos:	set instr(__pos+5," %<pal0> FM4",' ')
00011137 =00000008                M 	__midpos:	= __endpos
00011137                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<pal0> FM4"
00011137                          M 	__substr:	substr __pos+1+1,__endpos-1," %<pal0> FM4"
00011137 E8                       M 	dc.b	pal0
00011138 =00000009                M 	__lpos:	set __endpos+1
00011138 =00000000                M 	__pos:	set instr(__pos+1," %<pal0> FM4",'%<')
00011138                          M 	__substr:	substr __lpos,," %<pal0> FM4"
00011138 2046 4D34                M 	dc.b	" FM4"
0001113C 00                       M 	dc.b	0
0001113E 00                       M 	even
0001113E                          M 	.instr_end_369:
0001113E 4E75                       		rts
00011140                            
00011140                            .fm5
00011140                            	Console.Write " %<pal0> FM5"
00011140 40E7                     M 	move.w	sr,-(sp)
00011142                          M 	__fstring_generateargumentscode	" %<pal0> FM5"
00011142 =00000002                M 	__pos:	set instr(" %<pal0> FM5",'%<')
00011142 =00000000                M 	__stack:set	0
00011142 =00000000                M 	__sp:	set 0
00011142                          M 	while	(__pos)
00011142 =00000008                M 	__endpos:	set instr(__pos+1," %<pal0> FM5",'>')
00011142 =00000009                M 	__midpos:	set instr(__pos+5," %<pal0> FM5",' ')
00011142 =00000008                M 	__midpos:	= __endpos
00011142                          M 	__substr:	substr __pos+1+1,__endpos-1," %<pal0> FM5"
00011142                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<pal0> FM5"
00011142 =00000000                M 	__pos:	set instr(__pos+1," %<pal0> FM5",'%<')
00011142                          M 	rept	__stack
00011142 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
00011146 43FA 0000                M 	lea	.str_372(pc),a1
0001114A 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_write_formatted
00011150 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
00011154 46DF                     M 	move.w	(sp)+,sr
00011156 6000 0000                M 	bra.w	.instr_end_372
0001115A                          M 	.str_372:
0001115A                          M 	__fstring_generatedecodedstring	" %<pal0> FM5"
0001115A =00000001                M 	__lpos:	set 1
0001115A =00000002                M 	__pos:	set instr(" %<pal0> FM5",'%<')
0001115A                          M 	while	(__pos)
0001115A                          M 	__substr:	substr __lpos,__pos-1," %<pal0> FM5"
0001115A 20                       M 	dc.b	" "
0001115B =00000008                M 	__endpos:	set instr(__pos+1," %<pal0> FM5",'>')
0001115B =00000009                M 	__midpos:	set instr(__pos+5," %<pal0> FM5",' ')
0001115B =00000008                M 	__midpos:	= __endpos
0001115B                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<pal0> FM5"
0001115B                          M 	__substr:	substr __pos+1+1,__endpos-1," %<pal0> FM5"
0001115B E8                       M 	dc.b	pal0
0001115C =00000009                M 	__lpos:	set __endpos+1
0001115C =00000000                M 	__pos:	set instr(__pos+1," %<pal0> FM5",'%<')
0001115C                          M 	__substr:	substr __lpos,," %<pal0> FM5"
0001115C 2046 4D35                M 	dc.b	" FM5"
00011160 00                       M 	dc.b	0
00011162 00                       M 	even
00011162                          M 	.instr_end_372:
00011162 4E75                       		rts
00011164                            
00011164                            .psg1
00011164                            	Console.Write " %<pal0>PSG1"
00011164 40E7                     M 	move.w	sr,-(sp)
00011166                          M 	__fstring_generateargumentscode	" %<pal0>PSG1"
00011166 =00000002                M 	__pos:	set instr(" %<pal0>PSG1",'%<')
00011166 =00000000                M 	__stack:set	0
00011166 =00000000                M 	__sp:	set 0
00011166                          M 	while	(__pos)
00011166 =00000008                M 	__endpos:	set instr(__pos+1," %<pal0>PSG1",'>')
00011166 =00000000                M 	__midpos:	set instr(__pos+5," %<pal0>PSG1",' ')
00011166 =00000008                M 	__midpos:	= __endpos
00011166                          M 	__substr:	substr __pos+1+1,__endpos-1," %<pal0>PSG1"
00011166                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<pal0>PSG1"
00011166 =00000000                M 	__pos:	set instr(__pos+1," %<pal0>PSG1",'%<')
00011166                          M 	rept	__stack
00011166 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
0001116A 43FA 0000                M 	lea	.str_375(pc),a1
0001116E 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_write_formatted
00011174 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
00011178 46DF                     M 	move.w	(sp)+,sr
0001117A 6000 0000                M 	bra.w	.instr_end_375
0001117E                          M 	.str_375:
0001117E                          M 	__fstring_generatedecodedstring	" %<pal0>PSG1"
0001117E =00000001                M 	__lpos:	set 1
0001117E =00000002                M 	__pos:	set instr(" %<pal0>PSG1",'%<')
0001117E                          M 	while	(__pos)
0001117E                          M 	__substr:	substr __lpos,__pos-1," %<pal0>PSG1"
0001117E 20                       M 	dc.b	" "
0001117F =00000008                M 	__endpos:	set instr(__pos+1," %<pal0>PSG1",'>')
0001117F =00000000                M 	__midpos:	set instr(__pos+5," %<pal0>PSG1",' ')
0001117F =00000008                M 	__midpos:	= __endpos
0001117F                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<pal0>PSG1"
0001117F                          M 	__substr:	substr __pos+1+1,__endpos-1," %<pal0>PSG1"
0001117F E8                       M 	dc.b	pal0
00011180 =00000009                M 	__lpos:	set __endpos+1
00011180 =00000000                M 	__pos:	set instr(__pos+1," %<pal0>PSG1",'%<')
00011180                          M 	__substr:	substr __lpos,," %<pal0>PSG1"
00011180 5053 4731                M 	dc.b	"PSG1"
00011184 00                       M 	dc.b	0
00011186 00                       M 	even
00011186                          M 	.instr_end_375:
00011186 4E75                       		rts
00011188                            
00011188                            .psg2
00011188                            	Console.Write " %<pal0>PSG2"
00011188 40E7                     M 	move.w	sr,-(sp)
0001118A                          M 	__fstring_generateargumentscode	" %<pal0>PSG2"
0001118A =00000002                M 	__pos:	set instr(" %<pal0>PSG2",'%<')
0001118A =00000000                M 	__stack:set	0
0001118A =00000000                M 	__sp:	set 0
0001118A                          M 	while	(__pos)
0001118A =00000008                M 	__endpos:	set instr(__pos+1," %<pal0>PSG2",'>')
0001118A =00000000                M 	__midpos:	set instr(__pos+5," %<pal0>PSG2",' ')
0001118A =00000008                M 	__midpos:	= __endpos
0001118A                          M 	__substr:	substr __pos+1+1,__endpos-1," %<pal0>PSG2"
0001118A                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<pal0>PSG2"
0001118A =00000000                M 	__pos:	set instr(__pos+1," %<pal0>PSG2",'%<')
0001118A                          M 	rept	__stack
0001118A 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
0001118E 43FA 0000                M 	lea	.str_378(pc),a1
00011192 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_write_formatted
00011198 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
0001119C 46DF                     M 	move.w	(sp)+,sr
0001119E 6000 0000                M 	bra.w	.instr_end_378
000111A2                          M 	.str_378:
000111A2                          M 	__fstring_generatedecodedstring	" %<pal0>PSG2"
000111A2 =00000001                M 	__lpos:	set 1
000111A2 =00000002                M 	__pos:	set instr(" %<pal0>PSG2",'%<')
000111A2                          M 	while	(__pos)
000111A2                          M 	__substr:	substr __lpos,__pos-1," %<pal0>PSG2"
000111A2 20                       M 	dc.b	" "
000111A3 =00000008                M 	__endpos:	set instr(__pos+1," %<pal0>PSG2",'>')
000111A3 =00000000                M 	__midpos:	set instr(__pos+5," %<pal0>PSG2",' ')
000111A3 =00000008                M 	__midpos:	= __endpos
000111A3                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<pal0>PSG2"
000111A3                          M 	__substr:	substr __pos+1+1,__endpos-1," %<pal0>PSG2"
000111A3 E8                       M 	dc.b	pal0
000111A4 =00000009                M 	__lpos:	set __endpos+1
000111A4 =00000000                M 	__pos:	set instr(__pos+1," %<pal0>PSG2",'%<')
000111A4                          M 	__substr:	substr __lpos,," %<pal0>PSG2"
000111A4 5053 4732                M 	dc.b	"PSG2"
000111A8 00                       M 	dc.b	0
000111AA 00                       M 	even
000111AA                          M 	.instr_end_378:
000111AA 4E75                       		rts
000111AC                            
000111AC                            .psg3
000111AC                            	Console.Write " %<pal0>PSG3"
000111AC 40E7                     M 	move.w	sr,-(sp)
000111AE                          M 	__fstring_generateargumentscode	" %<pal0>PSG3"
000111AE =00000002                M 	__pos:	set instr(" %<pal0>PSG3",'%<')
000111AE =00000000                M 	__stack:set	0
000111AE =00000000                M 	__sp:	set 0
000111AE                          M 	while	(__pos)
000111AE =00000008                M 	__endpos:	set instr(__pos+1," %<pal0>PSG3",'>')
000111AE =00000000                M 	__midpos:	set instr(__pos+5," %<pal0>PSG3",' ')
000111AE =00000008                M 	__midpos:	= __endpos
000111AE                          M 	__substr:	substr __pos+1+1,__endpos-1," %<pal0>PSG3"
000111AE                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<pal0>PSG3"
000111AE =00000000                M 	__pos:	set instr(__pos+1," %<pal0>PSG3",'%<')
000111AE                          M 	rept	__stack
000111AE 48E7 01E0                M 	movem.l	a0-a2/d7,-(sp)
000111B2 43FA 0000                M 	lea	.str_381(pc),a1
000111B6 4EB9 0000 0000           M 	jsr	errorhandler.__global__console_write_formatted
000111BC 4CDF 0780                M 	movem.l	(sp)+,a0-a2/d7
000111C0 46DF                     M 	move.w	(sp)+,sr
000111C2 6000 0000                M 	bra.w	.instr_end_381
000111C6                          M 	.str_381:
000111C6                          M 	__fstring_generatedecodedstring	" %<pal0>PSG3"
000111C6 =00000001                M 	__lpos:	set 1
000111C6 =00000002                M 	__pos:	set instr(" %<pal0>PSG3",'%<')
000111C6                          M 	while	(__pos)
000111C6                          M 	__substr:	substr __lpos,__pos-1," %<pal0>PSG3"
000111C6 20                       M 	dc.b	" "
000111C7 =00000008                M 	__endpos:	set instr(__pos+1," %<pal0>PSG3",'>')
000111C7 =00000000                M 	__midpos:	set instr(__pos+5," %<pal0>PSG3",' ')
000111C7 =00000008                M 	__midpos:	= __endpos
000111C7                          M 	__type:	substr __pos+1+1,__pos+1+1+1," %<pal0>PSG3"
000111C7                          M 	__substr:	substr __pos+1+1,__endpos-1," %<pal0>PSG3"
000111C7 E8                       M 	dc.b	pal0
000111C8 =00000009                M 	__lpos:	set __endpos+1
000111C8 =00000000                M 	__pos:	set instr(__pos+1," %<pal0>PSG3",'%<')
000111C8                          M 	__substr:	substr __lpos,," %<pal0>PSG3"
000111C8 5053 4733                M 	dc.b	"PSG3"
000111CC 00                       M 	dc.b	0
000111CE 00                       M 	even
000111CE                          M 	.instr_end_381:
000111CE 4E75                       		rts
000111D0                            ; ===========================================================================
000111D0                            ; ---------------------------------------------------------------------------
000111D0                            ; Routine for loading the Dual PCM driver into Z80 RAM
000111D0                            ; ---------------------------------------------------------------------------
000111D0                            
000111D0                            LoadDualPCM:
000111D0 46FC 2700                  		move	#$2700,sr		; disable interrupts
000111D4 33FC 0100 00A1 1100        		move.w	#$0100,$A11100		; request Z80 stop
000111DC 33FC 0100 00A1 1200        		move.w	#$0100,$A11200		; Z80 reset off
000111E4                            
000111E4 41F9 0000 0000             		lea	DualPCM,a0		; load Dual PCM address into a0
000111EA 43F9 00A0 0000             		lea	dZ80,a1			; load Z80 RAM address into a1
000111F0 323C 0000                  		move.w	#DualPCM_sz-1,d1	; get lenght counter for dbf into d1
000111F4                            
000111F4                            .z80
000111F4 0839 0000 00A1 1100        		btst	#$00,$A11100		; check if Z80 has stopped
000111FC 66F6                       		bne.s	.z80			; if not, wait more
000111FE                            
000111FE                            .load
000111FE 12D8                       		move.b	(a0)+,(a1)+		; copy the Dual PCM driver into Z80 RAM
00011200 51C9 FFFC                  		dbf	d1,.load		; write every single byte
00011204                            
00011204 41FA 0000                  		lea	SampleList(pc),a0	; load address for the stop sample data into a0
00011208 43F9 0000 0000             		lea	dZ80+MuteSample,a1	; load address in Dual PCM to write into a1
0001120E                            
0001120E                            	rept 6
0001120E                            		move.b	(a0)+,(a1)+		; copy all required data
0001120E                            	endr
0001120E 12D8                     M 	move.b	(a0)+,(a1)+
00011210 12D8                     M 	move.b	(a0)+,(a1)+
00011212 12D8                     M 	move.b	(a0)+,(a1)+
00011214 12D8                     M 	move.b	(a0)+,(a1)+
00011216 12D8                     M 	move.b	(a0)+,(a1)+
00011218 12D8                     M 	move.b	(a0)+,(a1)+
0001121A                            
0001121A 7002                       		moveq	#2,d0			; set flush timer for 60hz systems
0001121C 0838 0006 898A             		btst	#6,Region.w		; is this a PAL Mega Drive?
00011222 6700                       		beq.s	.ntsc			; if not, branch
00011224 7003                       		moveq	#3,d0			; set flush timer for 50hz systems
00011226                            .ntsc
00011226 13C0 0000 0000             		move.b	d0,dZ80+YM_FlushTimer+2	; save flush timer
0001122C                            
0001122C 33FC 0000 00A1 1200        		move.w	#$0000,$A11200		; request Z80 reset
00011234 727F                       		moveq	#$7F,d1			; wait for a little bit
00011236 51C9 FFFE                  		dbf	d1,*			; we can't check for reset, so we need to delay
0001123A                            
0001123A 33FC 0000 00A1 1100        		move.w	#$0000,$A11100		; enable Z80
00011242 33FC 0100 00A1 1200        		move.w	#$0100,$A11200		; Z80 reset off
0001124A 46FC 2300                  		move	#$2300,sr		; enable interrupts
0001124E 4E75                       		rts
00011250                            ; ===========================================================================
00011250                            ; ---------------------------------------------------------------------------
00011250                            ; Handle Dual PCM YM Cue correctly
00011250                            ; ---------------------------------------------------------------------------
00011250                            
00011250                            UpdateAMPS:
00011250                            	StopZ80					; wait for Z80 to stop
00011250 33FC 0100 00A1 1100      M 	move.w	#$100,$a11100
00011258                          M .loop_384
00011258 0839 0000 00A1 1100      M 	btst	#0,$a11100
00011260 66F6                     M 	bne.s	.loop_384
00011262 1039 0000 0000             		move.b	dZ80+YM_Buffer,d0	; load current cue buffer in use
00011268                            	StartZ80				; enable Z80 execution
00011268 33FC 0000 00A1 1100      M 	move.w	#0,$a11100
00011270                            
00011270 207C 0000 0000             		move.l	#dZ80+YM_Buffer1,a0	; set the cue address to buffer 1
00011276 4A00                       		tst.b	d0			; check buffer to use
00011278 6600                       		bne.s	.gotbuffer		; if Z80 is reading buffer 2, branch
0001127A D0FC 0000                  		add.w	#YM_Buffer2-YM_Buffer1,a0; set the cue address to buffer 2
0001127E                            
0001127E                            .gotbuffer
0001127E 6100                       		bsr.s	dUpdateAllAMPS		; process the driver
00011280                            		AMPS_Debug_CuePtr 3		; check if the cue is still valid
00011280 B1FC 0000 0000           M 	cmp.l	#$a00000+ym_buffer1,a0
00011286 6500                     M 	blo.s	.fail_386
00011288 B1FC 0000 0000           M 	cmp.l	#$a00000+ym_buffer2+$400,a0
0001128E 6500                     M 	blo.s	.ok_386
00011290                          M .fail_386
00011290 4EB9 0001 0DF4           M 	jsr	amps_debug_cueptr3
00011296                          M .ok_386
00011296                            
00011296                            	StopZ80					; wait for Z80 to stop
00011296 33FC 0100 00A1 1100      M 	move.w	#$100,$a11100
0001129E                          M .loop_387
0001129E 0839 0000 00A1 1100      M 	btst	#0,$a11100
000112A6 66F6                     M 	bne.s	.loop_387
000112A8 50D0                       		st	(a0)			; make sure cue is marked as completed
000112AA                            	StartZ80				; enable Z80 execution
000112AA 33FC 0000 00A1 1100      M 	move.w	#0,$a11100
000112B2                            
000112B2                            dPaused:
000112B2 4E75                       		rts
000112B4                            ; ===========================================================================
000112B4                            ; ---------------------------------------------------------------------------
000112B4                            ; Main routine for updating the AMPS driver
000112B4                            ; ---------------------------------------------------------------------------
000112B4                            
000112B4                            dUpdateAllAMPS:
000112B4 4EBA 0000                  		jsr	dPlaySnd(pc)		; check if any music needs playing
000112B8 4A38 8100                  		tst.b	mFlags.w		; is music paused?
000112BC 6BF4                       		bmi.s	dPaused			; if yes, branch
000112BE                            ; ---------------------------------------------------------------------------
000112BE                            ; This is the new fading feature I created, to make custom fading
000112BE                            ; types easier to program. You can define series of 3 bytes, each
000112BE                            ; representing FM, PSG and DAC volumes. Each group of 3 is executed
000112BE                            ; once per frame. If the first value in a frame is a command flag,
000112BE                            ; instead its code is executed. Additionally, no fade program may
000112BE                            ; appear before ROM offset $10000, or else it will never be executed.
000112BE                            ; ---------------------------------------------------------------------------
000112BE                            
000112BE 4A38 810F                  .notempo	tst.b	mFadeAddr+1.w		; check if a fade program is already executing
000112C2 6700 0000                  		beq.w	.chkregion		; branch if not
000112C6                            
000112C6 2278 810E                  		move.l	mFadeAddr.w,a1		; get the fade porogram address to a1
000112CA 56B8 810E                  		addq.l	#3,mFadeAddr.w		; set the fade address to next group
000112CE                            
000112CE 7220                       		moveq	#(1<<cfbVol),d1		; prepare volume update to d1
000112D0 7000                       		moveq	#0,d0
000112D2 1019                       		move.b	(a1)+,d0		; get FM/command byte from fade data
000112D4 6A00                       		bpl.s	.nofadeend		; branch if this is not a command
000112D6                            
000112D6                            		AMPS_Debug_FadeCmd		; check if this command is valid
000112D6 0C00 0090                M 	cmp.b	#flast,d0
000112DA 6400                     M 	bhs.s	.fail
000112DC 0C00 0080                M 	cmp.b	#$80,d0
000112E0 6500                     M 	blo.s	.fail
000112E2 0800 0001                M 	btst	#1,d0
000112E6 6600                     M 	bne.s	.fail
000112E8 0800 0000                M 	btst	#0,d0
000112EC 6700                     M 	beq.s	.ok
000112EE                          M .fail
000112EE 4EB9 0001 0C38           M 	jsr	amps_debugr_fadecmd
000112F4                          M .ok
000112F4 45FA 0000                  		lea	dFadeCommands-$80(pc),a2; load fade commands pointer table to a2
000112F8 4EB2 0000                  		jsr	(a2,d0.w)		; run the fade command code
000112FC 4238 810F                  		clr.b	mFadeAddr+1.w		; mark the fade program as completed
00011300 6000                       		bra.s	.chkregion		; go check the region
00011302                            
00011302                            .nofadeend
00011302 B038 810E                  		cmp.b	mMasterVolFM.w,d0	; check if volume did not change
00011306 6700                       		beq.s	.fadedac		; if did not, branch
00011308 11C0 810E                  		move.b	d0,mMasterVolFM.w	; save the new volume
0001130C 4EBA 0000                  		jsr	dReqVolUpFM(pc)		; go request volume update for FM
00011310                            
00011310                            .fadedac
00011310 1019                       		move.b	(a1)+,d0		; get DAC volume byte from fade data
00011312 B038 811A                  		cmp.b	mMasterVolDAC.w,d0	; check if volume did not change
00011316 6700                       		beq.s	.fadepsg		; if did not, branch
00011318 11C0 811A                  		move.b	d0,mMasterVolDAC.w	; save new volume
0001131C                            
0001131C =FFFF811E                  .ch =	mDAC1					; start at DAC1
0001131C                            	rept Mus_DAC				; do for all music DAC channels
0001131C                            		or.b	d1,.ch.w		; tell the channel to update its volume
0001131C                            .ch =		.ch+cSize			; go to next channel
0001131C                            	endr
0001131C 8338 811E                M 	or.b	d1,.ch.w
00011320 =FFFF814A                M .ch	=	.ch+csize
00011320 8338 814A                M 	or.b	d1,.ch.w
00011324 =FFFF8176                M .ch	=	.ch+csize
00011324 8338 82D6                  		or.b	d1,mSFXDAC1.w		; tell SFX DAC1 to update its volume
00011328                            
00011328                            .fadepsg
00011328 1019                       		move.b	(a1)+,d0		; get PSG volume byte from fade data
0001132A B038 8119                  		cmp.b	mMasterVolPSG.w,d0	; check if volume did not change
0001132E 6700                       		beq.s	.chkregion		; if did not, branch
00011330 11C0 8119                  		move.b	d0,mMasterVolPSG.w	; save new volume
00011334                            
00011334 =FFFF8252                  .ch =	mPSG1					; start at PSG1
00011334                            	rept Mus_PSG				; do for all music PSG channels
00011334                            		or.b	d1,.ch.w		; tell the channel to update its volume
00011334                            .ch =		.ch+cSize			; go to next channel
00011334                            	endr
00011334 8338 8252                M 	or.b	d1,.ch.w
00011338 =FFFF827E                M .ch	=	.ch+csize
00011338 8338 827E                M 	or.b	d1,.ch.w
0001133C =FFFF82AA                M .ch	=	.ch+csize
0001133C 8338 82AA                M 	or.b	d1,.ch.w
00011340 =FFFF82D6                M .ch	=	.ch+csize
00011340                            
00011340 =FFFF8346                  .ch =	mSFXPSG1				; start at SFX PSG1
00011340                            	rept SFX_PSG				; do for all SFX PSG channels
00011340                            		or.b	d1,.ch.w		; tell the channel to update its volume
00011340                            .ch =		.ch+cSizeSFX			; go to next channel
00011340                            	endr
00011340 8338 8346                M 	or.b	d1,.ch.w
00011344 =FFFF8362                M .ch	=	.ch+csizesfx
00011344 8338 8362                M 	or.b	d1,.ch.w
00011348 =FFFF837E                M .ch	=	.ch+csizesfx
00011348 8338 837E                M 	or.b	d1,.ch.w
0001134C =FFFF839A                M .ch	=	.ch+csizesfx
0001134C                            ; ---------------------------------------------------------------------------
0001134C                            ; Since PAL Mega Drive's run slower than NTSC, if we want the music to
0001134C                            ; sound consistent, we need to run the sound driver 1.2 times as fast
0001134C                            ; on PAL systems. This will cause issues with some songs that rely on
0001134C                            ; game engine to seem "in sync". Because of that, I added a flag to
0001134C                            ; disable the PAL fix (much like in Sonic 2's driver). Unlike the fix
0001134C                            ; in SMPS drivers (and Sonic 3 and above), this fix will make the music
0001134C                            ; play at the exact right speed, instead of slightly too slow.
0001134C                            ; ---------------------------------------------------------------------------
0001134C                            
0001134C 0838 0006 898A             .chkregion	btst	#6,Region.w		; is this PAL system?
00011352 6700                       		beq.s	.driver			; if not, branch
00011354 5338 8101                  		subq.b	#1,mCtrPal.w		; decrease PAL frame counter
00011358 6E00                       		bgt.s	.driver			; if hasn't become 0 (or lower!), branch
0001135A                            
0001135A 0838 0003 8100             		btst	#mfbNoPAL,mFlags.w	; check if we have disabled the PAL fix
00011360 6600                       		bne.s	.nofix			; if yes, run music and SFX
00011362 6100                       		bsr.s	.nosfx			; run the sound driver
00011364                            
00011364                            .nofix
00011364 11FC 0005 8101             		move.b	#6-1,mCtrPal.w		; reset counter
0001136A                            .driver
0001136A 6100 0000                  		bsr.w	dAMPSdoSFX		; run SFX this time
0001136E                            
0001136E                            .nosfx		; continue to run sound driver again
0001136E                            ; ---------------------------------------------------------------------------
0001136E                            ; There are 2 methods of handling tempo adjustments in SMPS,
0001136E                            ; overflow (where a value is added to the accumulator, and when it
0001136E                            ; range overflows, tick of delay is added), and counter (where a
0001136E                            ; counter is copied to the tempo, which is then decreased each frame,
0001136E                            ; until it becomes 0, after which a tick of delay is added). AMPS
0001136E                            ; supports these both too, because there is no single right answer,
0001136E                            ; and users may prefer one over the other. The overflow method is
0001136E                            ; really good for low values, as it provides very fine control over
0001136E                            ; the tempo, but at high ranges it gets worse. Meanwhile the counter
0001136E                            ; method isn't as good for small values, but for large value it works
0001136E                            ; better. You may choose this setting in the macro.asm file,
0001136E                            ; ---------------------------------------------------------------------------
0001136E                            
0001136E 1038 8114                  		move.b	mTempo.w,d0		; get tempo to d0
00011372 D138 8115                  		add.b	d0,mTempoCur.w		; add to accumulator
00011376 6400                       		bcc.s	dAMPSdoAll		; if carry clear, branch
00011378                            
00011378                            
00011378 =FFFF812A                  .ch =	mDAC1+cDuration				; start at DAC1 duration
00011378                            	rept Mus_Ch				; loop through all music channels
00011378                            		addq.b	#1,.ch.w		; add 1 to duration
00011378                            .ch =		.ch+cSize			; go to next channel
00011378                            	endr
00011378 5238 812A                M 	addq.b	#1,.ch.w
0001137C =FFFF8156                M .ch	=	.ch+csize
0001137C 5238 8156                M 	addq.b	#1,.ch.w
00011380 =FFFF8182                M .ch	=	.ch+csize
00011380 5238 8182                M 	addq.b	#1,.ch.w
00011384 =FFFF81AE                M .ch	=	.ch+csize
00011384 5238 81AE                M 	addq.b	#1,.ch.w
00011388 =FFFF81DA                M .ch	=	.ch+csize
00011388 5238 81DA                M 	addq.b	#1,.ch.w
0001138C =FFFF8206                M .ch	=	.ch+csize
0001138C 5238 8206                M 	addq.b	#1,.ch.w
00011390 =FFFF8232                M .ch	=	.ch+csize
00011390 5238 8232                M 	addq.b	#1,.ch.w
00011394 =FFFF825E                M .ch	=	.ch+csize
00011394 5238 825E                M 	addq.b	#1,.ch.w
00011398 =FFFF828A                M .ch	=	.ch+csize
00011398 5238 828A                M 	addq.b	#1,.ch.w
0001139C =FFFF82B6                M .ch	=	.ch+csize
0001139C 5238 82B6                M 	addq.b	#1,.ch.w
000113A0 =FFFF82E2                M .ch	=	.ch+csize
000113A0                            ; ===========================================================================
000113A0                            ; ---------------------------------------------------------------------------
000113A0                            ; Process music DAC channels
000113A0                            ; ---------------------------------------------------------------------------
000113A0                            
000113A0                            dAMPSdoAll:
000113A0 4DFA 0000                  		lea	SampleList(pc),a6	; get SampleList to a6 for quick access
000113A4 4BF8 80F2                  		lea	mDAC1-cSize.w,a5	; get DAC1 channel RAM address into a5
000113A8 7E01                       		moveq	#Mus_DAC-1,d7		; get total number of DAC channels to d7
000113AA                            
000113AA                            dAMPSdoDAC:
000113AA DAFC 002C                  		add.w	#cSize,a5		; go to the next channel (first time its mDAC1!)
000113AE 4A15                       		tst.b	(a5)			; check if channel is running a tracker
000113B0 6A00 0000                  		bpl.w	.next			; if not, branch
000113B4 532D 000C                  		subq.b	#1,cDuration(a5)	; decrease note duration
000113B8 6700 0000                  		beq.w	.update			; if timed out, update channel
000113BC                            	dNoteToutDAC	 			; handle DAC-specific note timeout behavior
000113BC                          M 	dnotetouthandler
000113BC 4A2D 001C                M 	tst.b	cnotetimecur(a5)
000113C0 6700                     M 	beq.s	.endt
000113C2 532D 001C                M 	subq.b	#1,cnotetimecur(a5)
000113C6 6600                     M 	bne.s	.endt
000113C8 7000                     M 	moveq	#0,d0
000113CA 6000 0000                M 	bra.w	dnoteondac2
000113CE                          M .endt
000113CE                            
000113CE                            	dCalcFreq				; calculate channel base frequency
000113CE 1C2D 0007                M 	move.b	cdetune(a5),d6
000113D2 4886                     M 	ext.w	d6
000113D4 DC6D 000E                M 	add.w	cfreq(a5),d6
000113D8                            	dModulate dAMPSdoFM, dAMPSdoDAC, 4	; run modulation code
000113D8 0815 0003                M 	btst	#cfbmod,(a5)
000113DC 6700                     M 	beq.s	.noret
000113DE 4A2D 0010                M 	tst.b	cmoddelay(a5)
000113E2 6700                     M 	beq.s	.started
000113E4 532D 0010                M 	subq.b	#1,cmoddelay(a5)
000113E8                          M .noret
000113E8 0895 0005                M 	bclr	#cfbvol,(a5)
000113EC 6700                     M 	beq.s	.noupdatevol
000113EE 4EBA 0000                M 	jsr	dupdatevoldac(pc)
000113F2                          M 	.noupdatevol:
000113F2 51CF FFB6                M 	dbf	d7,dampsdodac
000113F6 6000 0000                M 	bra.w	dampsdofm
000113FA                          M .started
000113FA 532D 0016                M 	subq.b	#1,cmodspeed(a5)
000113FE 66E8                     M 	bne.s	.noret
00011400 226D 0010                M 	movea.l	cmod(a5),a1
00011404 1B69 0001 0016           M 	move.b	1(a1),cmodspeed(a5)
0001140A 4A2D 0018                M 	tst.b	cmodcount(a5)
0001140E 6600                     M 	bne.s	.norev
00011410 1B69 0003 0018           M 	move.b	3(a1),cmodcount(a5)
00011416 442D 0017                M 	neg.b	cmodstep(a5)
0001141A                          M .norev
0001141A 532D 0018                M 	subq.b	#1,cmodcount(a5)
0001141E 1A2D 0017                M 	move.b	cmodstep(a5),d5
00011422 4885                     M 	ext.w	d5
00011424 DA6D 0014                M 	add.w	cmodfreq(a5),d5
00011428 3B45 0014                M 	move.w	d5,cmodfreq(a5)
0001142C DC45                     M 	add.w	d5,d6
0001142E 6100 0000                  		bsr.w	dUpdateFreqDAC		; if frequency needs changing, do it
00011432                            
00011432 0895 0005                  		bclr	#cfbVol,(a5)		; check if volume update is needed and clear bit
00011436 6700                       		beq.s	.next			; if not, skip
00011438 6100 0000                  		bsr.w	dUpdateVolDAC		; update DAC volume
0001143C                            
0001143C                            .next
0001143C 51CF FF6C                  		dbf	d7,dAMPSdoDAC		; make sure to run all the channels
00011440 4EFA 0000                  		jmp	dAMPSdoFM(pc)		; after that, process music FM channels
00011444                            
00011444                            .update
00011444 0215 00FB                  		and.b	#$FF-(1<<cfbHold),(a5)	; clear hold flag
00011448                            	dDoTracker				; process tracker
00011448 286D 0002                M 	movea.l	cdata(a5),a4
0001144C                          M 	amps_debug_trackupd
0001144C 220C                     M 	move.l	a4,d1
0001144E 0281 00FF FFFF           M 	and.l	#$ffffff,d1
00011454 0C81 0000 0000           M 	cmp.l	#sfxaddr,d1
0001145A 6500                     M 	blo.s	.fail2
0001145C 0C81 0000 0000           M 	cmp.l	#dacaddr,d1
00011462 6500                     M 	blo.s	.data
00011464                          M .fail2
00011464                          M 	raiseerror	"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",amps_debug_console_channel
00011464 487A FFFE                M 	pea	*(pc)
00011468                          M 	raiseerror2	"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",amps_debug_console_channel
00011468 40E7                     M 	move.w	sr,-(sp)
0001146A                          M 	__fstring_generateargumentscode	"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001146A =0000001A                M 	__pos:	set instr("Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
0001146A =00000000                M 	__stack:set	0
0001146A =00000000                M 	__sp:	set 0
0001146A                          M 	while	(__pos)
0001146A =00000021                M 	__endpos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'>')
0001146A =0000002D                M 	__midpos:	set instr(__pos+5,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",' ')
0001146A =00000021                M 	__midpos:	= __endpos
0001146A                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001146A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001146A                          M 	__operand:	substr __pos+1+1,__midpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001146A                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001146A                          M 	pushp	"move.l a4,-(sp)"
0001146A =00000001                M 	__stack:	= __stack+1
0001146A =00000004                M 	__sp:	= __sp+4
0001146A =00000022                M 	__pos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
0001146A =00000028                M 	__endpos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'>')
0001146A =0000002D                M 	__midpos:	set instr(__pos+5,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",' ')
0001146A =00000028                M 	__midpos:	= __endpos
0001146A                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001146A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001146A =00000029                M 	__pos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
0001146A =00000034                M 	__endpos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'>')
0001146A =00000030                M 	__midpos:	set instr(__pos+5,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",' ')
0001146A                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001146A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001146A                          M 	__operand:	substr __pos+1+1,__midpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001146A                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001146A                          M 	pushp	"move.l a4,-(sp)"
0001146A =00000002                M 	__stack:	= __stack+1
0001146A =00000008                M 	__sp:	= __sp+4
0001146A =00000000                M 	__pos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
0001146A                          M 	rept	__stack
0001146A                          M 	popp	__command
0001146A 2F0C                     M 	move.l	a4,-(sp)
0001146C                          M 	popp	__command
0001146C 2F0C                     M 	move.l	a4,-(sp)
0001146E 4EB9 0000 0000           M 	jsr	errorhandler
00011474                          M 	__fstring_generatedecodedstring	"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00011474 =00000001                M 	__lpos:	set 1
00011474 =0000001A                M 	__pos:	set instr("Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
00011474                          M 	while	(__pos)
00011474                          M 	__substr:	substr __lpos,__pos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00011474 496E 7661 6C69 6420 7472+M 	dc.b	"Invalid tracker address: "
0001148D =00000021                M 	__endpos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'>')
0001148D =0000002D                M 	__midpos:	set instr(__pos+5,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",' ')
0001148D =00000021                M 	__midpos:	= __endpos
0001148D                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001148D                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001148D                          M 	__param:	substr ,,"hex"
0001148D 83                       M 	dc.b	hex|3
0001148E =00000022                M 	__lpos:	set __endpos+1
0001148E =00000022                M 	__pos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
0001148E                          M 	__substr:	substr __lpos,__pos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001148E                          M 	dc.b	""
0001148E =00000028                M 	__endpos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'>')
0001148E =0000002D                M 	__midpos:	set instr(__pos+5,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",' ')
0001148E =00000028                M 	__midpos:	= __endpos
0001148E                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001148E                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001148E E0                       M 	dc.b	endl
0001148F =00000029                M 	__lpos:	set __endpos+1
0001148F =00000029                M 	__pos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
0001148F                          M 	__substr:	substr __lpos,__pos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001148F                          M 	dc.b	""
0001148F =00000034                M 	__endpos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'>')
0001148F =00000030                M 	__midpos:	set instr(__pos+5,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",' ')
0001148F                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001148F                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001148F B3                       M 	dc.b	sym|3
00011490 =00000035                M 	__lpos:	set __endpos+1
00011490 =00000000                M 	__pos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
00011490                          M 	__substr:	substr __lpos,,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00011490                          M 	dc.b	""
00011490 00                       M 	dc.b	0
00011491 00                       M 	dc.b	+_eh_enter_console|(((*&1)^1)*_eh_align_offset)
00011492                          M 	even
00011492 4EF9 0001 0000           M 	jmp	amps_debug_console_channel
00011498                          M 	even
00011498                          M .data
00011498 7A00                     M 	moveq	#0,d5
0001149A 1A1C                     M 	move.b	(a4)+,d5
0001149C 0C05 00E0                M 	cmpi.b	#$e0,d5
000114A0 6500                     M 	blo.s	.notcomm
000114A2 4EBA 0000                M 	jsr	dcommands(pc)
000114A6 60F0                     M 	bra.s	.data
000114A8 6092                     M 	bra.s	.next
000114AA                          M .notcomm
000114AA 7C00                       		moveq	#0,d6			; clear rest flag
000114AC 4A05                       		tst.b	d5			; check if note is being played
000114AE 6A00                       		bpl.s	.timer			; if not, it must be a timer. Branch
000114B0                            
000114B0                            	dTrackNoteDAC				; calculate frequency or update sample
000114B0 0815 0000                M 	btst	#cfbmode,(a5)
000114B4 6600                     M 	bne.s	.pitch
000114B6 1B45 000B                M 	move.b	d5,csample(a5)
000114BA 6000                     M 	bra.s	.cont
000114BC                          M .pitch
000114BC 0405 0080                M 	subi.b	#$80,d5
000114C0 6600                     M 	bne.s	.noprest
000114C2 7000                     M 	moveq	#0,d0
000114C4 6100 0000                M 	bsr.w	dnoteondac2
000114C8 7C80                     M 	moveq	#-$80,d6
000114CA 6000                     M 	bra.s	.cont
000114CC                          M .noprest
000114CC DA2D 0008                M 	add.b	cpitch(a5),d5
000114D0 DA45                     M 	add.w	d5,d5
000114D2 43FA 0000                M 	lea	dfreqdac(pc),a1
000114D6 3B71 5000 000E           M 	move.w	(a1,d5.w),cfreq(a5)
000114DC                          M .cont
000114DC 1A1C                       		move.b	(a4)+,d5		; check if next note is a timer
000114DE 6A00                       		bpl.s	.timer			; if yes, handle timer
000114E0 534C                       		subq.w	#1,a4			; else, undo the increment
000114E2 6000                       		bra.s	.pcnote			; do not calculate duration
000114E4                            
000114E4                            .timer
000114E4 4EBA 0000                  		jsr	dCalcDuration(pc)	; calculate duration
000114E8                            .pcnote
000114E8                            	dProcNote 0, 0				; reset necessary channel memory
000114E8 2B4C 0002                M 	move.l	a4,cdata(a5)
000114EC 1B6D 000D 000C           M 	move.b	clastdur(a5),cduration(a5)
000114F2 0815 0002                M 	btst	#cfbhold,(a5)
000114F6 6600                     M 	bne.s	.endpn
000114F8 1B6D 001D 001C           M 	move.b	cnotetimemain(a5),cnotetimecur(a5)
000114FE 0815 0003                M 	btst	#cfbmod,(a5)
00011502 6700                     M 	beq.s	.endpn
00011504 226D 0010                M 	movea.l	cmod(a5),a1
00011508 1B59 0010                M 	move.b	(a1)+,cmoddelay(a5)
0001150C 1B59 0016                M 	move.b	(a1)+,cmodspeed(a5)
00011510 1B59 0017                M 	move.b	(a1)+,cmodstep(a5)
00011514 1011                     M 	move.b	(a1),d0
00011516 E208                     M 	lsr.b	#1,d0
00011518 1B40 0018                M 	move.b	d0,cmodcount(a5)
0001151C 426D 0014                M 	clr.w	cmodfreq(a5)
00011520                          M .endpn
00011520                            
00011520 4A06                       		tst.b	d6			; check if channel was resting
00011522 6B00                       		bmi.s	.noplay			; if yes, we do not want to note on anymore
00011524 6100                       		bsr.s	dNoteOnDAC		; do hardware note-on behavior
00011526                            
00011526 51CF FE82                  .noplay		dbf	d7,dAMPSdoDAC		; make sure to run all the channels
0001152A 4EFA 0000                  		jmp	dAMPSdoFM(pc)		; after that, process FM channels
0001152E                            ; ===========================================================================
0001152E                            ; ---------------------------------------------------------------------------
0001152E                            ; Write DAC sample information to Dual PCM
0001152E                            ; ---------------------------------------------------------------------------
0001152E                            
0001152E                            dNoteOnDAC2:
0001152E 0815 0001                  		btst	#cfbInt,(a5)		; is the channel interrupted by SFX?
00011532 6700                       		beq.s	dNoteOnDAC3		; if not, process note
00011534 4E75                       		rts
00011536                            
00011536                            dNoteOnDAC:
00011536 0815 0001                  		btst	#cfbInt,(a5)		; is the channel interrupted by SFX?
0001153A 6600                       		bne.s	locret_dNoteOnDAC4	; if so, do not note on or update frequency
0001153C                            
0001153C 7000                       		moveq	#0,d0			; make sure the upper byte is clear
0001153E 102D 000B                  		move.b	cSample(a5),d0		; get sample ID to d0
00011542 0A00 0080                  		eor.b	#$80,d0			; this allows us to have the full $100 range safely
00011546 0815 0002                  		btst	#cfbHold,(a5)		; check if note is held
0001154A 6600 0000                  		bne.w	dUpdateFreqOffDAC2	; if so, only update frequency
0001154E                            
0001154E                            dNoteOnDAC3:
0001154E E948                       		lsl.w	#4,d0			; multiply sample ID by $10 (size of each entry)
00011550 47F6 0000                  		lea	(a6,d0.w),a3		; get sample data to a3
00011554                            
00011554 487A 0000                  		pea	dUpdateFreqOffDAC(pc)	; update frequency after loading sample
00011558 082D 0002 0001             		btst	#ctbPt2,cType(a5)	; check if this channel is DAC1
0001155E 6700                       		beq.s	dNoteWriteDAC1		; if is, branch
00011560                            ; ---------------------------------------------------------------------------
00011560                            ; This code is for updating the note to Dual PCM. We have tracker commands
00011560                            ; for also playing notes on DAC channels, which is why the code seems a
00011560                            ; little weird.
00011560                            ; ---------------------------------------------------------------------------
00011560                            
00011560                            dNoteWriteDAC2:
00011560 43F9 0000 0000             		lea	dZ80+PCM2_Sample,a1	; load addresses for PCM 1
00011566 45F9 0000 0000             		lea	dZ80+PCM2_NewRET,a2	; ''
0001156C 6000                       		bra.s	dNoteOnDAC4
0001156E                            
0001156E                            dNoteWriteDAC1:
0001156E                            
0001156E 43F9 0000 0000             		lea	dZ80+PCM1_Sample,a1	; load addresses for PCM 2
00011574 45F9 0000 0000             		lea	dZ80+PCM1_NewRET,a2	; ''
0001157A                            
0001157A                            dNoteOnDAC4:
0001157A                            	StopZ80					; wait for Z80 to stop
0001157A 33FC 0100 00A1 1100      M 	move.w	#$100,$a11100
00011582                          M .loop_402
00011582 0839 0000 00A1 1100      M 	btst	#0,$a11100
0001158A 66F6                     M 	bne.s	.loop_402
0001158C                            	rept 12
0001158C                            		move.b	(a3)+,(a1)+		; send sample data to Dual PCM
0001158C                            	endr
0001158C 12DB                     M 	move.b	(a3)+,(a1)+
0001158E 12DB                     M 	move.b	(a3)+,(a1)+
00011590 12DB                     M 	move.b	(a3)+,(a1)+
00011592 12DB                     M 	move.b	(a3)+,(a1)+
00011594 12DB                     M 	move.b	(a3)+,(a1)+
00011596 12DB                     M 	move.b	(a3)+,(a1)+
00011598 12DB                     M 	move.b	(a3)+,(a1)+
0001159A 12DB                     M 	move.b	(a3)+,(a1)+
0001159C 12DB                     M 	move.b	(a3)+,(a1)+
0001159E 12DB                     M 	move.b	(a3)+,(a1)+
000115A0 12DB                     M 	move.b	(a3)+,(a1)+
000115A2 12DB                     M 	move.b	(a3)+,(a1)+
000115A4                            
000115A4 14BC 00DA                  		move.b	#$DA,(a2)		; activate sample switch (change instruction)
000115A8                            	StartZ80				; enable Z80 execution
000115A8 33FC 0000 00A1 1100      M 	move.w	#0,$a11100
000115B0                            
000115B0                            locret_dNoteOnDAC4:
000115B0 4E75                       		rts
000115B2                            ; ===========================================================================
000115B2                            ; ---------------------------------------------------------------------------
000115B2                            ; Write DAC frequency to Dual PCM
000115B2                            ; ---------------------------------------------------------------------------
000115B2                            
000115B2                            dUpdateFreqOffDAC2:
000115B2 E948                       		lsl.w	#4,d0			; multiply sample ID by $10 (size of each entry)
000115B4 47F6 000C                  		lea	$0C(a6,d0.w),a3		; get sample pitch to a3
000115B8                            
000115B8                            dUpdateFreqOffDAC:
000115B8 3C2D 000E                  		move.w	cFreq(a5),d6		; get channel base frequency to d6
000115BC DC5B                       		add.w	(a3)+,d6		; add sample frequency offset to d6
000115BE                            
000115BE 102D 0007                  		move.b	cDetune(a5),d0		; get detune value
000115C2 4880                       		ext.w	d0			; extend to word
000115C4 DC40                       		add.w	d0,d6			; add it to d6
000115C6                            
000115C6 0815 0003                  		btst	#cfbMod,(a5)		; check if channel is modulating
000115CA 6700                       		beq.s	dUpdateFreqDAC3		; if not, branch
000115CC DC6D 0014                  		add.w	cModFreq(a5),d6		; add modulation frequency offset to d6
000115D0 6000                       		bra.s	dUpdateFreqDAC3
000115D2                            
000115D2                            dUpdateFreqDAC:
000115D2 0815 0001                  		btst	#cfbInt,(a5)		; is the channel interrupted by SFX?
000115D6 6600                       		bne.s	locret_UpdFreqDAC	; if so, branch
000115D8                            
000115D8                            dUpdateFreqDAC2:
000115D8 7000                       		moveq	#0,d0			; make sure the upper byte is clear
000115DA 102D 000B                  		move.b	cSample(a5),d0		; get sample ID to d0
000115DE 0A00 0080                  		eor.b	#$80,d0			; this allows us to have the full $100 range safely
000115E2 E948                       		lsl.w	#4,d0			; multiply ID by $10 (size of each entry)
000115E4 DC76 000C                  		add.w	$0C(a6,d0.w),d6		; add sample frequency offset to d6
000115E8                            
000115E8                            dUpdateFreqDAC3:
000115E8                            		AMPS_Debug_FreqDAC		; check if DAC frequency is in bounds
000115E8 0C46 1000                M 	cmp.w	#maxpitch,d6
000115EC 6E00                     M 	bgt.s	.fail
000115EE 0C46 F000                M 	cmp.w	#-maxpitch,d6
000115F2 6C00                     M 	bge.s	.ok
000115F4                          M .fail
000115F4 4EB9 0001 0CF4           M 	jsr	amps_debugr_freqdac
000115FA                          M .ok
000115FA 1006                       		move.b	d6,d0			; copy the frequency to d0
000115FC E04E                       		lsr.w	#8,d6			; get the upper byte to the lower byte
000115FE 082D 0002 0001             		btst	#ctbPt2,cType(a5)	; check if DAC1
00011604 6700                       		beq.s	dFreqDAC1		; if is, branch
00011606                            
00011606                            	StopZ80					; wait for Z80 to stop
00011606 33FC 0100 00A1 1100      M 	move.w	#$100,$a11100
0001160E                          M .loop_405
0001160E 0839 0000 00A1 1100      M 	btst	#0,$a11100
00011616 66F6                     M 	bne.s	.loop_405
00011618 13C6 0000 0000             		move.b	d6,dZ80+PCM2_PitchHigh+1
0001161E 13C0 0000 0000             		move.b	d0,dZ80+PCM2_PitchLow+1
00011624 13FC 00D2 0000 0000        		move.b	#$D2,dZ80+PCM2_ChangePitch; change "JP C" to "JP NC"
0001162C                            	StartZ80				; enable Z80 execution
0001162C 33FC 0000 00A1 1100      M 	move.w	#0,$a11100
00011634                            
00011634                            locret_UpdFreqDAC;
00011634 4E75                       		rts
00011636                            
00011636                            dFreqDAC1:
00011636                            	StopZ80					; wait for Z80 to stop
00011636 33FC 0100 00A1 1100      M 	move.w	#$100,$a11100
0001163E                          M .loop_407
0001163E 0839 0000 00A1 1100      M 	btst	#0,$a11100
00011646 66F6                     M 	bne.s	.loop_407
00011648 13C6 0000 0000             		move.b	d6,dZ80+PCM1_PitchHigh+1
0001164E 13C0 0000 0000             		move.b	d0,dZ80+PCM1_PitchLow+1
00011654 13FC 00D2 0000 0000        		move.b	#$D2,dZ80+PCM1_ChangePitch; change "JP C" to "JP NC"
0001165C                            	StartZ80				; enable Z80 execution
0001165C 33FC 0000 00A1 1100      M 	move.w	#0,$a11100
00011664 4E75                       		rts
00011666                            ; ===========================================================================
00011666                            ; ---------------------------------------------------------------------------
00011666                            ; Routine to multiply duration by tick rate
00011666                            ; We actually use a dbf loop instead of mulu, because 2 rounds
00011666                            ; around the loop will be faster than a single mulu instruction
00011666                            ; ---------------------------------------------------------------------------
00011666                            
00011666                            dCalcDuration:
00011666 7000                       		moveq	#0,d0			; clear duration
00011668 7200                       		moveq	#0,d1			; clear upper bytes (for dbf)
0001166A 122D 000A                  		move.b	cTick(a5),d1		; get tick multiplier to d1
0001166E                            
0001166E D005                       .multiply	add.b	d5,d0			; add duration value to d0
00011670 51C9 FFFC                  		dbf	d1,.multiply		; multiply by tick rate
00011674                            
00011674 1B40 000D                  		move.b	d0,cLastDur(a5)		; save as the new duration
00011678 4E75                       		rts				; get copied to duration by later code
0001167A                            ; ===========================================================================
0001167A                            ; ---------------------------------------------------------------------------
0001167A                            ; Process SFX DAC channels
0001167A                            ; ---------------------------------------------------------------------------
0001167A                            
0001167A                            dAMPSdoSFX:
0001167A 4BF8 82BA                  		lea	mSFXDAC1-cSizeSFX.w,a5	; get SFX DAC1 channel RAM address into a5
0001167E                            
0001167E                            dAMPSdoDACSFX:
0001167E DAFC 001C                  		add.w	#cSizeSFX,a5		; go to the next channel
00011682 4A15                       		tst.b	(a5)			; check if channel is running a tracker
00011684 6A00                       		bpl.s	.next			; if not, branch
00011686                            
00011686 4DFA 0000                  		lea	SampleList(pc),a6	; get SampleList to a6 for quick access
0001168A 532D 000C                  		subq.b	#1,cDuration(a5)	; decrease note duration
0001168E 6700 0000                  		beq.w	.update			; if timed out, update channel
00011692                            
00011692                            	dCalcFreq				; calculate channel base frequency
00011692 1C2D 0007                M 	move.b	cdetune(a5),d6
00011696 4886                     M 	ext.w	d6
00011698 DC6D 000E                M 	add.w	cfreq(a5),d6
0001169C                            	dModulate dAMPSdoFMSFX, dAMPSdoDAC, 5	; run modulation code
0001169C 0815 0003                M 	btst	#cfbmod,(a5)
000116A0 6700                     M 	beq.s	.noret
000116A2 4A2D 0010                M 	tst.b	cmoddelay(a5)
000116A6 6700                     M 	beq.s	.started
000116A8 532D 0010                M 	subq.b	#1,cmoddelay(a5)
000116AC                          M .noret
000116AC 0895 0005                M 	bclr	#cfbvol,(a5)
000116B0 6700                     M 	beq.s	.noupdatevol
000116B2 4EBA 0000                M 	jsr	dupdatevoldac(pc)
000116B6                          M 	.noupdatevol:
000116B6 6000 0000                M 	bra.w	dampsdofmsfx
000116BA                          M .started
000116BA 532D 0016                M 	subq.b	#1,cmodspeed(a5)
000116BE 66EC                     M 	bne.s	.noret
000116C0 226D 0010                M 	movea.l	cmod(a5),a1
000116C4 1B69 0001 0016           M 	move.b	1(a1),cmodspeed(a5)
000116CA 4A2D 0018                M 	tst.b	cmodcount(a5)
000116CE 6600                     M 	bne.s	.norev
000116D0 1B69 0003 0018           M 	move.b	3(a1),cmodcount(a5)
000116D6 442D 0017                M 	neg.b	cmodstep(a5)
000116DA                          M .norev
000116DA 532D 0018                M 	subq.b	#1,cmodcount(a5)
000116DE 1A2D 0017                M 	move.b	cmodstep(a5),d5
000116E2 4885                     M 	ext.w	d5
000116E4 DA6D 0014                M 	add.w	cmodfreq(a5),d5
000116E8 3B45 0014                M 	move.w	d5,cmodfreq(a5)
000116EC DC45                     M 	add.w	d5,d6
000116EE 6100 FEE8                  		bsr.w	dUpdateFreqDAC2		; if frequency needs changing, do it
000116F2                            
000116F2 0895 0005                  		bclr	#cfbVol,(a5)		; check if volume update is needed and clear bit
000116F6 6700                       		beq.s	.next			; if not, skip
000116F8 6100 0000                  		bsr.w	dUpdateVolDAC2		; update DAC volume
000116FC                            
000116FC                            .next
000116FC 4EFA 0000                  		jmp	dAMPSdoFMSFX(pc)	; after that, process SFX FM channels
00011700                            
00011700                            .update
00011700 0215 00FB                  		and.b	#$FF-(1<<cfbHold),(a5)	; clear hold flag
00011704                            	dDoTracker				; process tracker
00011704 286D 0002                M 	movea.l	cdata(a5),a4
00011708                          M 	amps_debug_trackupd
00011708 220C                     M 	move.l	a4,d1
0001170A 0281 00FF FFFF           M 	and.l	#$ffffff,d1
00011710 0C81 0000 0000           M 	cmp.l	#sfxaddr,d1
00011716 6500                     M 	blo.s	.fail2
00011718 0C81 0000 0000           M 	cmp.l	#dacaddr,d1
0001171E 6500                     M 	blo.s	.data
00011720                          M .fail2
00011720                          M 	raiseerror	"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",amps_debug_console_channel
00011720 487A FFFE                M 	pea	*(pc)
00011724                          M 	raiseerror2	"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",amps_debug_console_channel
00011724 40E7                     M 	move.w	sr,-(sp)
00011726                          M 	__fstring_generateargumentscode	"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00011726 =0000001A                M 	__pos:	set instr("Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
00011726 =00000000                M 	__stack:set	0
00011726 =00000000                M 	__sp:	set 0
00011726                          M 	while	(__pos)
00011726 =00000021                M 	__endpos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'>')
00011726 =0000002D                M 	__midpos:	set instr(__pos+5,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",' ')
00011726 =00000021                M 	__midpos:	= __endpos
00011726                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00011726                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00011726                          M 	__operand:	substr __pos+1+1,__midpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00011726                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00011726                          M 	pushp	"move.l a4,-(sp)"
00011726 =00000001                M 	__stack:	= __stack+1
00011726 =00000004                M 	__sp:	= __sp+4
00011726 =00000022                M 	__pos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
00011726 =00000028                M 	__endpos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'>')
00011726 =0000002D                M 	__midpos:	set instr(__pos+5,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",' ')
00011726 =00000028                M 	__midpos:	= __endpos
00011726                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00011726                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00011726 =00000029                M 	__pos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
00011726 =00000034                M 	__endpos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'>')
00011726 =00000030                M 	__midpos:	set instr(__pos+5,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",' ')
00011726                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00011726                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00011726                          M 	__operand:	substr __pos+1+1,__midpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00011726                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00011726                          M 	pushp	"move.l a4,-(sp)"
00011726 =00000002                M 	__stack:	= __stack+1
00011726 =00000008                M 	__sp:	= __sp+4
00011726 =00000000                M 	__pos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
00011726                          M 	rept	__stack
00011726                          M 	popp	__command
00011726 2F0C                     M 	move.l	a4,-(sp)
00011728                          M 	popp	__command
00011728 2F0C                     M 	move.l	a4,-(sp)
0001172A 4EB9 0000 0000           M 	jsr	errorhandler
00011730                          M 	__fstring_generatedecodedstring	"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00011730 =00000001                M 	__lpos:	set 1
00011730 =0000001A                M 	__pos:	set instr("Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
00011730                          M 	while	(__pos)
00011730                          M 	__substr:	substr __lpos,__pos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00011730 496E 7661 6C69 6420 7472+M 	dc.b	"Invalid tracker address: "
00011749 =00000021                M 	__endpos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'>')
00011749 =0000002D                M 	__midpos:	set instr(__pos+5,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",' ')
00011749 =00000021                M 	__midpos:	= __endpos
00011749                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00011749                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00011749                          M 	__param:	substr ,,"hex"
00011749 83                       M 	dc.b	hex|3
0001174A =00000022                M 	__lpos:	set __endpos+1
0001174A =00000022                M 	__pos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
0001174A                          M 	__substr:	substr __lpos,__pos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001174A                          M 	dc.b	""
0001174A =00000028                M 	__endpos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'>')
0001174A =0000002D                M 	__midpos:	set instr(__pos+5,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",' ')
0001174A =00000028                M 	__midpos:	= __endpos
0001174A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001174A                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001174A E0                       M 	dc.b	endl
0001174B =00000029                M 	__lpos:	set __endpos+1
0001174B =00000029                M 	__pos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
0001174B                          M 	__substr:	substr __lpos,__pos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001174B                          M 	dc.b	""
0001174B =00000034                M 	__endpos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'>')
0001174B =00000030                M 	__midpos:	set instr(__pos+5,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",' ')
0001174B                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001174B                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001174B B3                       M 	dc.b	sym|3
0001174C =00000035                M 	__lpos:	set __endpos+1
0001174C =00000000                M 	__pos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
0001174C                          M 	__substr:	substr __lpos,,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001174C                          M 	dc.b	""
0001174C 00                       M 	dc.b	0
0001174D 00                       M 	dc.b	+_eh_enter_console|(((*&1)^1)*_eh_align_offset)
0001174E                          M 	even
0001174E 4EF9 0001 0000           M 	jmp	amps_debug_console_channel
00011754                          M 	even
00011754                          M .data
00011754 7A00                     M 	moveq	#0,d5
00011756 1A1C                     M 	move.b	(a4)+,d5
00011758 0C05 00E0                M 	cmpi.b	#$e0,d5
0001175C 6500                     M 	blo.s	.notcomm
0001175E 4EBA 0000                M 	jsr	dcommands(pc)
00011762 60F0                     M 	bra.s	.data
00011764 6096                     M 	bra.s	.next
00011766                          M .notcomm
00011766 7C00                       		moveq	#0,d6			; clear rest flag
00011768 4A05                       		tst.b	d5			; check if note is being played
0001176A 6A00                       		bpl.s	.timer			; if not, it must be a timer. Branch
0001176C                            
0001176C                            	dTrackNoteDAC				; calculate frequency or update sample
0001176C 0815 0000                M 	btst	#cfbmode,(a5)
00011770 6600                     M 	bne.s	.pitch
00011772 1B45 000B                M 	move.b	d5,csample(a5)
00011776 6000                     M 	bra.s	.cont
00011778                          M .pitch
00011778 0405 0080                M 	subi.b	#$80,d5
0001177C 6600                     M 	bne.s	.noprest
0001177E 7000                     M 	moveq	#0,d0
00011780 6100 FDAC                M 	bsr.w	dnoteondac2
00011784 7C80                     M 	moveq	#-$80,d6
00011786 6000                     M 	bra.s	.cont
00011788                          M .noprest
00011788 DA2D 0008                M 	add.b	cpitch(a5),d5
0001178C DA45                     M 	add.w	d5,d5
0001178E 43FA 0000                M 	lea	dfreqdac(pc),a1
00011792 3B71 5000 000E           M 	move.w	(a1,d5.w),cfreq(a5)
00011798                          M .cont
00011798 1A1C                       		move.b	(a4)+,d5		; check if next note is a timer
0001179A 6A00                       		bpl.s	.timer			; if yes, handle timer
0001179C 534C                       		subq.w	#1,a4			; else, undo the increment
0001179E 6000                       		bra.s	.pcnote			; do not calculate duration
000117A0                            
000117A0                            .timer
000117A0 4EBA FEC4                  		jsr	dCalcDuration(pc)	; calculate duration
000117A4                            .pcnote
000117A4                            	dProcNote 1, 0				; reset necessary channel memory
000117A4 2B4C 0002                M 	move.l	a4,cdata(a5)
000117A8 1B6D 000D 000C           M 	move.b	clastdur(a5),cduration(a5)
000117AE 0815 0002                M 	btst	#cfbhold,(a5)
000117B2 6600                     M 	bne.s	.endpn
000117B4 0815 0003                M 	btst	#cfbmod,(a5)
000117B8 6700                     M 	beq.s	.endpn
000117BA 226D 0010                M 	movea.l	cmod(a5),a1
000117BE 1B59 0010                M 	move.b	(a1)+,cmoddelay(a5)
000117C2 1B59 0016                M 	move.b	(a1)+,cmodspeed(a5)
000117C6 1B59 0017                M 	move.b	(a1)+,cmodstep(a5)
000117CA 1011                     M 	move.b	(a1),d0
000117CC E208                     M 	lsr.b	#1,d0
000117CE 1B40 0018                M 	move.b	d0,cmodcount(a5)
000117D2 426D 0014                M 	clr.w	cmodfreq(a5)
000117D6                          M .endpn
000117D6 4A06                       		tst.b	d6			; check if channel was resting
000117D8 6B00                       		bmi.s	.noplay			; if yes, we do not want to note on anymore
000117DA 6100 FD5A                  		bsr.w	dNoteOnDAC		; do hardware note-on behavior
000117DE                            
000117DE                            .noplay
000117DE 4EFA 0000                  		jmp	dAMPSdoFMSFX(pc)	; after that, process SFX FM channels
000117E2                            ; ===========================================================================
000117E2                            ; ---------------------------------------------------------------------------
000117E2                            ; Write DAC volume to Dual PCM
000117E2                            ; ---------------------------------------------------------------------------
000117E2                            
000117E2                            dUpdateVolDAC:
000117E2 0815 0001                  		btst	#cfbInt,(a5)		; is the channel interrupted by SFX?
000117E6 6600                       		bne.s	locret_VolDAC		; if yes, do not update
000117E8                            
000117E8                            dUpdateVolDAC2:
000117E8 162D 0009                  		move.b	cVolume(a5),d3		; get channel volume to d3
000117EC D638 811A                  		add.b	mMasterVolDAC.w,d3	; add master volume to it
000117F0 6A00                       		bpl.s	.gotvol			; if positive (in range), branch
000117F2 7680                       		moveq	#$FFFFFF80,d3		; force volume to mute ($80 is the last valid volume)
000117F4                            
000117F4                            .gotvol
000117F4                            	StopZ80					; wait for Z80 to stop
000117F4 33FC 0100 00A1 1100      M 	move.w	#$100,$a11100
000117FC                          M .loop_419
000117FC 0839 0000 00A1 1100      M 	btst	#0,$a11100
00011804 66F6                     M 	bne.s	.loop_419
00011806 13FC 00D2 0000 0000        		move.b	#$D2,dZ80+PCM_ChangeVolume; set volume change flag
0001180E                            
0001180E 082D 0002 0001             		btst	#ctbPt2,cType(a5)	; check if this channel is DAC1
00011814 6700                       		beq.s	.dac1			; if is, branch
00011816 13C3 0000 0000             		move.b	d3,dZ80+PCM2_Volume+1	; save volume for PCM 1
0001181C                            	StartZ80				; enable Z80 execution
0001181C 33FC 0000 00A1 1100      M 	move.w	#0,$a11100
00011824 4E75                       		rts
00011826                            
00011826                            .dac1
00011826 13C3 0000 0000             		move.b	d3,dZ80+PCM1_Volume+1	; save volume for PCM 2
0001182C                            	StartZ80				; enable Z80 execution
0001182C 33FC 0000 00A1 1100      M 	move.w	#0,$a11100
00011834                            
00011834                            locret_VolDAC:
00011834 4E75                       		rts
00011836                            ; ===========================================================================
00011836                            ; ---------------------------------------------------------------------------
00011836                            ; Routine for unpausing the sound driver
00011836                            ; ---------------------------------------------------------------------------
00011836                            
00011836                            dPlaySnd_Unpause:
00011836 08B8 0007 8100             		bclr	#mfbPaused,mFlags.w	; unpause music
0001183C 67F6                       		beq.s	locret_VolDAC		; if was already unpaused, skip
0001183E                            ; ---------------------------------------------------------------------------
0001183E                            ; The following code will reset the panning values for each running
0001183E                            ; channel. It also makes sure that the channel is not interrupted
0001183E                            ; by sound effects, and that each running sound effect channel gets
0001183E                            ; updated. We do not handle key on's, since that could potentially
0001183E                            ; cause issues if notes are half-done. The next time tracker plays
0001183E                            ; notes, they start being audible again.
0001183E                            ; ---------------------------------------------------------------------------
0001183E                            
0001183E 4BF8 8176                  		lea	mFM1.w,a5		; start from FM1 channel
00011842 7804                       		moveq	#Mus_FM-1,d4		; load the number of music FM channels to d4
00011844 762C                       		moveq	#cSize,d3		; get the size of each music channel to d3
00011846                            
00011846                            .musloop
00011846 4A15                       		tst.b	(a5)			; check if the channel is running a tracker
00011848 6A00                       		bpl.s	.skipmus		; if not, do not update
0001184A 0815 0001                  		btst	#cfbInt,(a5)		; is the channel interrupted by SFX?
0001184E 6600                       		bne.s	.skipmus		; if is, do not update
00011850                            
00011850 70B4                       		moveq	#$FFFFFFB4,d0		; YM address: Panning and LFO
00011852 122D 0006                  		move.b	cPanning(a5),d1		; read panning and LFO value from channel
00011856 4EBA 0000                  		jsr	WriteChYM(pc)		; write to appropriate YM register
0001185A                            
0001185A                            .skipmus
0001185A DAC3                       		adda.w	d3,a5			; go to next channel
0001185C 51CC FFE8                  		dbf	d4,.musloop		; repeat for all music FM channels
00011860                            
00011860 4BF8 82F2                  		lea	mSFXFM3.w,a5		; start from SFX FM1 channel
00011864 7802                       		moveq	#SFX_FM-1,d4		; load the number of SFX FM channels to d4
00011866 761C                       		moveq	#cSizeSFX,d3		; get the size of each SFX channel to d3
00011868                            
00011868                            .sfxloop
00011868 4A15                       		tst.b	(a5)			; check if the channel is running a tracker
0001186A 6A00                       		bpl.s	.skipsfx		; if not, do not update
0001186C                            
0001186C 70B4                       		moveq	#$FFFFFFB4,d0		; YM address: Panning and LFO
0001186E 122D 0006                  		move.b	cPanning(a5),d1		; read panning and LFO value from channel
00011872 4EBA 0000                  		jsr	WriteChYM(pc)		; write to appropriate YM register
00011876                            
00011876                            .skipsfx
00011876 DAC3                       		adda.w  d3,a5			; go to next channel
00011878 51CC FFEE                  		dbf     d4,.sfxloop		; repeat for all SFX FM channels
0001187C                            ; ---------------------------------------------------------------------------
0001187C                            ; Since the DAC channels have or based panning behavior, we need this
0001187C                            ; piece of code to update its panning
0001187C                            ; ---------------------------------------------------------------------------
0001187C                            
0001187C 1238 8124                  		move.b	mDAC1+cPanning.w,d1	; read panning value from music DAC1
00011880 0838 0001 811E             		btst	#cfbInt,mDAC1+cFlags.w	; check if music DAC1 is interrupted by SFX
00011886 6700                       		beq.s	.nodacsfx		; if not, use music DAC1 panning
00011888 1238 82DC                  		move.b	mSFXDAC1+cPanning.w,d1	; read panning value from SFX DAC1
0001188C                            
0001188C                            .nodacsfx
0001188C 8238 8150                  		or.b	mDAC2+cPanning.w,d1	; or the panning value from music DAC2
00011890 70B6                       		moveq	#$FFFFFFB4+2,d0		; YM address: Panning and LFO (FM3/6)
00011892 4EFA 0000                  		jmp	WriteYM_Pt2(pc)		; write to part 2 channel
00011896                            ; ===========================================================================
00011896                            ; ---------------------------------------------------------------------------
00011896                            ; Routine for pausing the sound driver
00011896                            ; ---------------------------------------------------------------------------
00011896                            
00011896                            dPlaySnd_Pause:
00011896 08F8 0007 8100             		bset	#mfbPaused,mFlags.w	; pause music
0001189C 6696                       		bne.s	locret_VolDAC		; if was already paused, skip
0001189E                            ; ---------------------------------------------------------------------------
0001189E                            ; The following code will set channel panning to none for all FM channels.
0001189E                            ; This will ensure they are muted while we are pausing.
0001189E                            ; ---------------------------------------------------------------------------
0001189E                            
0001189E 7602                       		moveq	#3-1,d3			; 3 channels per YM2616 "part"
000118A0 70B4                       		moveq	#$FFFFFFB4,d0		; YM address: Panning and LFO
000118A2 7200                       		moveq	#0,d1			; pan to neither speaker and remove LFO
000118A4                            
000118A4                            .muteFM
000118A4 4EBA 0000                  		jsr	WriteYM_Pt1(pc)		; write to part 1 channel
000118A8 4EBA 0000                  		jsr	WriteYM_Pt2(pc)		; write to part 2 channel
000118AC 5200                       		addq.b	#1,d0			; go to next FM channel
000118AE 51CB FFF4                  		dbf	d3,.muteFM		; write each 3 channels per part
000118B2                            ; ---------------------------------------------------------------------------
000118B2                            ; The following code will key off all FM channels. There is a special
000118B2                            ; behavior in that, we must write all channels into part 1, and we
000118B2                            ; control the channel we are writing in the data portion.
000118B2                            ; 4 bits are reserved for which operators are active (in this case,
000118B2                            ; none), and 3 bits are reserved for the channel we want to affect.
000118B2                            ; ---------------------------------------------------------------------------
000118B2                            
000118B2 7028                       		moveq	#$28,d0			; YM address: Key on/off
000118B4 7602                       		moveq	#%00000010,d3		; turn keys off, and start from YM channel 3
000118B6                            
000118B6                            .note
000118B6 1203                       		move.b	d3,d1			; copy value into d1
000118B8 4EBA 0000                  		jsr	WriteYM_Pt1(pc)		; write to part 1 channel
000118BC 5801                       		addq.b	#4,d1			; set this to part 2 channel
000118BE 4EBA 0000                  		jsr	WriteYM_Pt1(pc)		; write to part 2 channel
000118C2 51CB FFF2                  		dbf	d3,.note		; loop for all 3 channel groups
000118C6                            
000118C6 4EBA 0000                  		jsr	dMutePSG(pc)		; mute all PSG channels
000118CA                            	; continue to mute all DAC channels
000118CA                            ; ===========================================================================
000118CA                            ; ---------------------------------------------------------------------------
000118CA                            ; Routine for muting all DAC channels
000118CA                            ; ---------------------------------------------------------------------------
000118CA                            
000118CA                            dMuteDAC:
000118CA                            	StopZ80					; wait for Z80 to stop
000118CA 33FC 0100 00A1 1100      M 	move.w	#$100,$a11100
000118D2                          M .loop_422
000118D2 0839 0000 00A1 1100      M 	btst	#0,$a11100
000118DA 66F6                     M 	bne.s	.loop_422
000118DC 45FA 0000                  		lea	SampleList(pc),a2	; load address for the stop sample data into a2
000118E0 43F9 0000 0000             		lea	dZ80+PCM1_Sample,a1	; load addresses for PCM 1 sample to a1
000118E6                            
000118E6                            	rept 12
000118E6                            		move.b	(a2)+,(a1)+		; send sample data to Dual PCM
000118E6                            	endr
000118E6 12DA                     M 	move.b	(a2)+,(a1)+
000118E8 12DA                     M 	move.b	(a2)+,(a1)+
000118EA 12DA                     M 	move.b	(a2)+,(a1)+
000118EC 12DA                     M 	move.b	(a2)+,(a1)+
000118EE 12DA                     M 	move.b	(a2)+,(a1)+
000118F0 12DA                     M 	move.b	(a2)+,(a1)+
000118F2 12DA                     M 	move.b	(a2)+,(a1)+
000118F4 12DA                     M 	move.b	(a2)+,(a1)+
000118F6 12DA                     M 	move.b	(a2)+,(a1)+
000118F8 12DA                     M 	move.b	(a2)+,(a1)+
000118FA 12DA                     M 	move.b	(a2)+,(a1)+
000118FC 12DA                     M 	move.b	(a2)+,(a1)+
000118FE                            
000118FE 13FC 00CA 0000 0000        		move.b	#$CA,dZ80+PCM1_NewRET	; activate sample switch (change instruction)
00011906                            
00011906 45FA 0000                  		lea	SampleList(pc),a2	; load address for the stop sample data into a2
0001190A 43F9 0000 0000             		lea	dZ80+PCM2_Sample,a1	; load addresses for PCM 2 sample to a1
00011910                            
00011910                            	rept 12
00011910                            		move.b	(a2)+,(a1)+		; send sample data to Dual PCM
00011910                            	endr
00011910 12DA                     M 	move.b	(a2)+,(a1)+
00011912 12DA                     M 	move.b	(a2)+,(a1)+
00011914 12DA                     M 	move.b	(a2)+,(a1)+
00011916 12DA                     M 	move.b	(a2)+,(a1)+
00011918 12DA                     M 	move.b	(a2)+,(a1)+
0001191A 12DA                     M 	move.b	(a2)+,(a1)+
0001191C 12DA                     M 	move.b	(a2)+,(a1)+
0001191E 12DA                     M 	move.b	(a2)+,(a1)+
00011920 12DA                     M 	move.b	(a2)+,(a1)+
00011922 12DA                     M 	move.b	(a2)+,(a1)+
00011924 12DA                     M 	move.b	(a2)+,(a1)+
00011926 12DA                     M 	move.b	(a2)+,(a1)+
00011928                            
00011928 13FC 00CA 0000 0000        		move.b	#$CA,dZ80+PCM2_NewRET	; activate sample switch (change instruction)
00011930                            	StartZ80				; enable Z80 execution
00011930 33FC 0000 00A1 1100      M 	move.w	#0,$a11100
00011938                            
00011938                            locret_MuteDAC:
00011938 4E75                       		rts
0001193A                            ; ===========================================================================
0001193A                            ; ---------------------------------------------------------------------------
0001193A                            ; Subroutine to play any queued music tracks, sound effects or commands
0001193A                            ; ---------------------------------------------------------------------------
0001193A                            
0001193A                            dPlaySnd:
0001193A 4DF8 8116                  		lea	mQueue.w,a6		; get address to the sound queue
0001193E 7E00                       		moveq	#0,d7
00011940 1E1E                       		move.b	(a6)+,d7		; get sound ID for this slot
00011942 6600                       		bne.s	.found			; if nonzero, a sound is queued
00011944 1E1E                       		move.b	(a6)+,d7		; get sound ID for this slot
00011946 6600                       		bne.s	.found			; if nonzero, a sound is queued
00011948 1E1E                       		move.b	(a6)+,d7		; get sound ID for this slot
0001194A 67EC                       		beq.s	locret_MuteDAC		; if 0, no sounds were queued, return
0001194C                            
0001194C                            .found
0001194C 422E FFFF                  		clr.b	-1(a6)			; clear the slot we are processing
00011950 0C07 00FA                  		cmpi.b	#SFXoff,d7		; check if this sound was a sound effect
00011954 6400 0000                  		bhs.w	dPlaySnd_SFX		; if so, handle it
00011958 0C07 000A                  		cmpi.b	#MusOff,d7		; check if this sound was a command
0001195C 6500 0000                  		blo.w	dPlaySnd_Comm		; if so, handle it
00011960                            	; it was music, handle it below
00011960                            ; ===========================================================================
00011960                            ; ---------------------------------------------------------------------------
00011960                            ; Subroutine to play a queued music track
00011960                            ; ---------------------------------------------------------------------------
00011960                            
00011960                            dPlaySnd_Music:
00011960 4EBA 0000                  		jsr	dStopMusic(pc)		; mute hardware and reset all driver memory
00011964 4EBA 0000                  		jsr	dResetVolume(pc)	; reset volumes and end any fades
00011968                            ; ---------------------------------------------------------------------------
00011968                            ; To save few cycles, we don't directly substract the music offset from
00011968                            ; the ID, and instead offset the table position. In practice this will
00011968                            ; have the same effect, but saves us 8 cycles overall.
00011968                            ; ---------------------------------------------------------------------------
00011968                            
00011968 49FA 0000                  		lea	MusicIndex-(MusOff*4)(pc),a4; get music pointer table with an offset
0001196C DE47                       		add.w	d7,d7			; quadruple music ID
0001196E DE47                       		add.w	d7,d7			; since each entry is 4 bytes in size
00011970 11F4 7000 8113             		move.b	(a4,d7.w),mTempoSpeed.w	; load speed shoes tempo from the unused 8 bits
00011976 2874 7000                  		movea.l	(a4,d7.w),a4		; get music header pointer from the table
0001197A                            
0001197A 200C                       		move.l	a4,d0			; copy pointer to d0
0001197C 0280 00FF FFFF             		and.l	#$FFFFFF,d0		; clearing the upper 8 bits allows the debugger
00011982 2840                       		move.l	d0,a4			; to show the address correctly. Move ptr back to a4
00011984                            		AMPS_Debug_PlayTrackMus		; check if this was valid music
00011984 0C80 0000 0000           M 	cmp.l	#musaddr,d0
0001198A 6500                     M 	blo.s	.fail_424
0001198C 0C80 0000 0000           M 	cmp.l	#musend,d0
00011992 6500                     M 	blo.s	.ok_424
00011994                          M .fail_424
00011994 E44F                     M 	lsr.w	#2,d7
00011996                          M 	raiseerror	"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>",amps_debug_console_main
00011996 487A FFFE                M 	pea	*(pc)
0001199A                          M 	raiseerror2	"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>",amps_debug_console_main
0001199A 40E7                     M 	move.w	sr,-(sp)
0001199C                          M 	__fstring_generateargumentscode	"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>"
0001199C =0000001A                M 	__pos:	set instr("Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>",'%<')
0001199C =00000000                M 	__stack:set	0
0001199C =00000000                M 	__sp:	set 0
0001199C                          M 	while	(__pos)
0001199C =00000021                M 	__endpos:	set instr(__pos+1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>",'>')
0001199C =00000023                M 	__midpos:	set instr(__pos+5,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>",' ')
0001199C =00000021                M 	__midpos:	= __endpos
0001199C                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>"
0001199C                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>"
0001199C                          M 	__operand:	substr __pos+1+1,__midpos-1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>"
0001199C                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>"
0001199C                          M 	pushp	"move.b d7,1(sp)"
0001199C                          M 	pushp	"subq.w	#2, sp"
0001199C =00000002                M 	__stack:	= __stack+2
0001199C =00000002                M 	__sp:	= __sp+2
0001199C =00000024                M 	__pos:	set instr(__pos+1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>",'%<')
0001199C =0000002B                M 	__endpos:	set instr(__pos+1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>",'>')
0001199C =00000037                M 	__midpos:	set instr(__pos+5,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>",' ')
0001199C =0000002B                M 	__midpos:	= __endpos
0001199C                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>"
0001199C                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>"
0001199C                          M 	__operand:	substr __pos+1+1,__midpos-1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>"
0001199C                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>"
0001199C                          M 	pushp	"move.l a4,-(sp)"
0001199C =00000003                M 	__stack:	= __stack+1
0001199C =00000006                M 	__sp:	= __sp+4
0001199C =0000002C                M 	__pos:	set instr(__pos+1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>",'%<')
0001199C =00000032                M 	__endpos:	set instr(__pos+1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>",'>')
0001199C =00000037                M 	__midpos:	set instr(__pos+5,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>",' ')
0001199C =00000032                M 	__midpos:	= __endpos
0001199C                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>"
0001199C                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>"
0001199C =00000033                M 	__pos:	set instr(__pos+1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>",'%<')
0001199C =0000003E                M 	__endpos:	set instr(__pos+1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>",'>')
0001199C =0000003A                M 	__midpos:	set instr(__pos+5,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>",' ')
0001199C                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>"
0001199C                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>"
0001199C                          M 	__operand:	substr __pos+1+1,__midpos-1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>"
0001199C                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>"
0001199C                          M 	pushp	"move.l a4,-(sp)"
0001199C =00000004                M 	__stack:	= __stack+1
0001199C =0000000A                M 	__sp:	= __sp+4
0001199C =00000000                M 	__pos:	set instr(__pos+1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>",'%<')
0001199C                          M 	rept	__stack
0001199C                          M 	popp	__command
0001199C 2F0C                     M 	move.l	a4,-(sp)
0001199E                          M 	popp	__command
0001199E 2F0C                     M 	move.l	a4,-(sp)
000119A0                          M 	popp	__command
000119A0 554F                     M 	subq.w	#2,sp
000119A2                          M 	popp	__command
000119A2 1F47 0001                M 	move.b	d7,1(sp)
000119A6 4EB9 0000 0000           M 	jsr	errorhandler
000119AC                          M 	__fstring_generatedecodedstring	"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>"
000119AC =00000001                M 	__lpos:	set 1
000119AC =0000001A                M 	__pos:	set instr("Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>",'%<')
000119AC                          M 	while	(__pos)
000119AC                          M 	__substr:	substr __lpos,__pos-1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>"
000119AC 496E 7661 6C69 6420 7472+M 	dc.b	"Invalid tracker at Music "
000119C5 =00000021                M 	__endpos:	set instr(__pos+1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>",'>')
000119C5 =00000023                M 	__midpos:	set instr(__pos+5,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>",' ')
000119C5 =00000021                M 	__midpos:	= __endpos
000119C5                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>"
000119C5                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>"
000119C5                          M 	__param:	substr ,,"hex"
000119C5 80                       M 	dc.b	hex
000119C6 =00000022                M 	__lpos:	set __endpos+1
000119C6 =00000024                M 	__pos:	set instr(__pos+1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>",'%<')
000119C6                          M 	__substr:	substr __lpos,__pos-1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>"
000119C6 3A20                     M 	dc.b	": "
000119C8 =0000002B                M 	__endpos:	set instr(__pos+1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>",'>')
000119C8 =00000037                M 	__midpos:	set instr(__pos+5,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>",' ')
000119C8 =0000002B                M 	__midpos:	= __endpos
000119C8                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>"
000119C8                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>"
000119C8                          M 	__param:	substr ,,"hex"
000119C8 83                       M 	dc.b	hex|3
000119C9 =0000002C                M 	__lpos:	set __endpos+1
000119C9 =0000002C                M 	__pos:	set instr(__pos+1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>",'%<')
000119C9                          M 	__substr:	substr __lpos,__pos-1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>"
000119C9                          M 	dc.b	""
000119C9 =00000032                M 	__endpos:	set instr(__pos+1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>",'>')
000119C9 =00000037                M 	__midpos:	set instr(__pos+5,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>",' ')
000119C9 =00000032                M 	__midpos:	= __endpos
000119C9                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>"
000119C9                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>"
000119C9 E0                       M 	dc.b	endl
000119CA =00000033                M 	__lpos:	set __endpos+1
000119CA =00000033                M 	__pos:	set instr(__pos+1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>",'%<')
000119CA                          M 	__substr:	substr __lpos,__pos-1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>"
000119CA                          M 	dc.b	""
000119CA =0000003E                M 	__endpos:	set instr(__pos+1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>",'>')
000119CA =0000003A                M 	__midpos:	set instr(__pos+5,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>",' ')
000119CA                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>"
000119CA                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>"
000119CA B3                       M 	dc.b	sym|3
000119CB =0000003F                M 	__lpos:	set __endpos+1
000119CB =00000000                M 	__pos:	set instr(__pos+1,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>",'%<')
000119CB                          M 	__substr:	substr __lpos,,"Invalid tracker at Music %<.b d7>: %<.l a4>%<endl>%<.l a4 sym>"
000119CB                          M 	dc.b	""
000119CB 00                       M 	dc.b	0
000119CC 00                       M 	dc.b	+_eh_enter_console|(((*&1)^1)*_eh_align_offset)
000119CE 00                       M 	even
000119CE 4EF9 0001 07A6           M 	jmp	amps_debug_console_main
000119D4                          M 	even
000119D4                          M .ok_424
000119D4                            
000119D4 264C                       		move.l	a4,a3			; copy pointer to a3
000119D6 584C                       		addq.w	#4,a4			; go to DAC1 data section
000119D8                            
000119D8 7000                       		moveq	#0,d0
000119DA 102B 0001                  		move.b	1(a3),d0		; load song tempo to d0
000119DE 11C0 8112                  		move.b	d0,mTempoMain.w		; save as regular tempo
000119E2 0838 0001 8100             		btst	#mfbSpeed,mFlags.w	; check if speed shoes flag was set
000119E8 6700                       		beq.s	.tempogot		; if not, use main tempo
000119EA 1038 8113                  		move.b	mTempoSpeed.w,d0	; load speed shoes tempo to d0 instead
000119EE                            
000119EE                            .tempogot
000119EE 11C0 8114                  		move.b	d0,mTempo.w		; save as the current tempo
000119F2 11C0 8115                  		move.b	d0,mTempoCur.w		; copy into the accumulator/counter
000119F6 0238 00F7 8100             		and.b	#$FF-(1<<mfbNoPAL),mFlags.w; enable PAL fix
000119FC                            ; ---------------------------------------------------------------------------
000119FC                            ; If the 7th bit (msb) of tick multiplier is set, PAL fix gets
000119FC                            ; disabled. I know, very weird place to put it, but we dont have
000119FC                            ; much free room in the song header
000119FC                            ; ---------------------------------------------------------------------------
000119FC                            
000119FC 1813                       		move.b	(a3),d4			; load the tick multiplier to d4
000119FE 6A00                       		bpl.s	.noPAL			; branch if the loaded value was positive
00011A00 0244 007F                  		and.w	#$7F,d4			; keep value in range
00011A04 0038 0008 8100             		or.b	#1<<mfbNoPAL,mFlags.w	; disable PAL fix
00011A0A                            
00011A0A                            .noPAL
00011A0A 74A0                       		moveq	#$FFFFFF00|(1<<cfbRun)|(1<<cfbVol),d2; prepare running tracker and volume flags into d2
00011A0C 72C0                       		moveq	#$FFFFFFC0,d1		; prepare panning value of centre to d1
00011A0E 7C2C                       		moveq	#cSize,d6		; prepare channel size to d6
00011A10 7A01                       		moveq	#1,d5			; prepare duration of 0 frames to d5
00011A12                            
00011A12 43F8 811E                  		lea	mDAC1.w,a1		; start from DAC1 channel
00011A16 45FA 0000                  		lea	dDACtypeVals(pc),a2	; prepare DAC (and FM) type value list into a2
00011A1A 7E01                       		moveq	#2-1,d7			; always run for 2 DAC channels
00011A1C 363C 0100                  		move.w	#$100,d3		; prepare default DAC frequency
00011A20                            
00011A20                            .loopDAC
00011A20 1282                       		move.b	d2,(a1)			; save channel flags
00011A22 135A 0001                  		move.b	(a2)+,cType(a1)		; load channel type from list
00011A26 1344 000A                  		move.b	d4,cTick(a1)		; set channel tick multiplier
00011A2A 1346 001E                  		move.b	d6,cStack(a1)		; reset channel stack pointer
00011A2E 1341 0006                  		move.b	d1,cPanning(a1)		; reset panning to centre
00011A32 1345 000C                  		move.b	d5,cDuration(a1)	; reset channel duration
00011A36 3343 000E                  		move.w	d3,cFreq(a1)		; reset channel base frequency
00011A3A                            
00011A3A 7000                       		moveq	#0,d0
00011A3C 301C                       		move.w	(a4)+,d0		; load tracker offset to d0
00011A3E D08B                       		add.l	a3,d0			; add music header offset to d0
00011A40 2340 0002                  		move.l	d0,cData(a1)		; save as the tracker address of the channel
00011A44                            		AMPS_Debug_PlayTrackMus2 DAC	; make sure the tracker address is valid
00011A44 0280 00FF FFFF           M 	and.l	#$ffffff,d0
00011A4A 0C80 0000 0000           M 	cmp.l	#musaddr,d0
00011A50 6500                     M 	blo.s	.fail_429
00011A52 0C80 0000 0000           M 	cmp.l	#dacaddr,d0
00011A58 6500                     M 	blo.s	.ok_429
00011A5A                          M .fail_429
00011A5A                          M 	raiseerror	"Invalid tracker at Music dac: %<.l d0>%<endl>%<.l d0 sym>",amps_debug_console_main
00011A5A 487A FFFE                M 	pea	*(pc)
00011A5E                          M 	raiseerror2	"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",amps_debug_console_main
00011A5E 40E7                     M 	move.w	sr,-(sp)
00011A60                          M 	__fstring_generateargumentscode	"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011A60 =00000020                M 	__pos:	set instr("Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'%<')
00011A60 =00000000                M 	__stack:set	0
00011A60 =00000000                M 	__sp:	set 0
00011A60                          M 	while	(__pos)
00011A60 =00000027                M 	__endpos:	set instr(__pos+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'>')
00011A60 =00000033                M 	__midpos:	set instr(__pos+5,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",' ')
00011A60 =00000027                M 	__midpos:	= __endpos
00011A60                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011A60                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011A60                          M 	__operand:	substr __pos+1+1,__midpos-1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011A60                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011A60                          M 	pushp	"move.l d0,-(sp)"
00011A60 =00000001                M 	__stack:	= __stack+1
00011A60 =00000004                M 	__sp:	= __sp+4
00011A60 =00000028                M 	__pos:	set instr(__pos+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'%<')
00011A60 =0000002E                M 	__endpos:	set instr(__pos+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'>')
00011A60 =00000033                M 	__midpos:	set instr(__pos+5,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",' ')
00011A60 =0000002E                M 	__midpos:	= __endpos
00011A60                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011A60                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011A60 =0000002F                M 	__pos:	set instr(__pos+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'%<')
00011A60 =0000003A                M 	__endpos:	set instr(__pos+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'>')
00011A60 =00000036                M 	__midpos:	set instr(__pos+5,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",' ')
00011A60                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011A60                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011A60                          M 	__operand:	substr __pos+1+1,__midpos-1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011A60                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011A60                          M 	pushp	"move.l d0,-(sp)"
00011A60 =00000002                M 	__stack:	= __stack+1
00011A60 =00000008                M 	__sp:	= __sp+4
00011A60 =00000000                M 	__pos:	set instr(__pos+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'%<')
00011A60                          M 	rept	__stack
00011A60                          M 	popp	__command
00011A60 2F00                     M 	move.l	d0,-(sp)
00011A62                          M 	popp	__command
00011A62 2F00                     M 	move.l	d0,-(sp)
00011A64 4EB9 0000 0000           M 	jsr	errorhandler
00011A6A                          M 	__fstring_generatedecodedstring	"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011A6A =00000001                M 	__lpos:	set 1
00011A6A =00000020                M 	__pos:	set instr("Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'%<')
00011A6A                          M 	while	(__pos)
00011A6A                          M 	__substr:	substr __lpos,__pos-1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011A6A 496E 7661 6C69 6420 7472+M 	dc.b	"Invalid tracker at Music \ch\: "
00011A89 =00000027                M 	__endpos:	set instr(__pos+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'>')
00011A89 =00000033                M 	__midpos:	set instr(__pos+5,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",' ')
00011A89 =00000027                M 	__midpos:	= __endpos
00011A89                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011A89                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011A89                          M 	__param:	substr ,,"hex"
00011A89 83                       M 	dc.b	hex|3
00011A8A =00000028                M 	__lpos:	set __endpos+1
00011A8A =00000028                M 	__pos:	set instr(__pos+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'%<')
00011A8A                          M 	__substr:	substr __lpos,__pos-1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011A8A                          M 	dc.b	""
00011A8A =0000002E                M 	__endpos:	set instr(__pos+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'>')
00011A8A =00000033                M 	__midpos:	set instr(__pos+5,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",' ')
00011A8A =0000002E                M 	__midpos:	= __endpos
00011A8A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011A8A                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011A8A E0                       M 	dc.b	endl
00011A8B =0000002F                M 	__lpos:	set __endpos+1
00011A8B =0000002F                M 	__pos:	set instr(__pos+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'%<')
00011A8B                          M 	__substr:	substr __lpos,__pos-1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011A8B                          M 	dc.b	""
00011A8B =0000003A                M 	__endpos:	set instr(__pos+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'>')
00011A8B =00000036                M 	__midpos:	set instr(__pos+5,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",' ')
00011A8B                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011A8B                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011A8B B3                       M 	dc.b	sym|3
00011A8C =0000003B                M 	__lpos:	set __endpos+1
00011A8C =00000000                M 	__pos:	set instr(__pos+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'%<')
00011A8C                          M 	__substr:	substr __lpos,,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011A8C                          M 	dc.b	""
00011A8C 00                       M 	dc.b	0
00011A8D 00                       M 	dc.b	+_eh_enter_console|(((*&1)^1)*_eh_align_offset)
00011A8E                          M 	even
00011A8E 4EF9 0001 07A6           M 	jmp	amps_debug_console_main
00011A94                          M 	even
00011A94                          M .ok_429
00011A94                            
00011A94 135C 0009                  		move.b	(a4)+,cVolume(a1)	; load channel volume
00011A98 135C 000B                  		move.b	(a4)+,cSample(a1)	; load channel sample ID
00011A9C 6700                       		beq.s	.sampmode		; if 0, we are in sample mode
00011A9E 08D1 0000                  		bset	#cfbMode,(a1)		; if not 0, enable pitch mode
00011AA2                            
00011AA2                            .sampmode
00011AA2 D2C6                       		add.w	d6,a1			; go to the next channel
00011AA4 51CF FF7A                  		dbf	d7,.loopDAC		; repeat for all DAC channels
00011AA8                            
00011AA8 7E00                       		moveq	#0,d7
00011AAA 7481                       		moveq	#$FFFFFF00|(1<<cfbRun)|(1<<cfbRest),d2; prepare running tracker and channel rest flags
00011AAC 1E2B 0002                  		move.b	2(a3),d7		; load the FM channel count to d7
00011AB0 6B00                       		bmi.s	.doPSG			; if no FM channels are loaded, branch
00011AB2                            
00011AB2                            .loopFM
00011AB2 1282                       		move.b	d2,(a1)			; save channel flags
00011AB4 135A 0001                  		move.b	(a2)+,cType(a1)		; load channel type from list
00011AB8 1344 000A                  		move.b	d4,cTick(a1)		; set channel tick multiplier
00011ABC 1346 001E                  		move.b	d6,cStack(a1)		; reset channel stack pointer
00011AC0 1341 0006                  		move.b	d1,cPanning(a1)		; reset panning to centre
00011AC4 1345 000C                  		move.b	d5,cDuration(a1)	; reset channel duration
00011AC8                            
00011AC8 7000                       		moveq	#0,d0
00011ACA 301C                       		move.w	(a4)+,d0		; load tracker offset to d0
00011ACC D08B                       		add.l	a3,d0			; add music header offset to d0
00011ACE 2340 0002                  		move.l	d0,cData(a1)		; save as the tracker address of the channel
00011AD2                            		AMPS_Debug_PlayTrackMus2 FM	; make sure the tracker address is valid
00011AD2 0280 00FF FFFF           M 	and.l	#$ffffff,d0
00011AD8 0C80 0000 0000           M 	cmp.l	#musaddr,d0
00011ADE 6500                     M 	blo.s	.fail_434
00011AE0 0C80 0000 0000           M 	cmp.l	#dacaddr,d0
00011AE6 6500                     M 	blo.s	.ok_434
00011AE8                          M .fail_434
00011AE8                          M 	raiseerror	"Invalid tracker at Music fm: %<.l d0>%<endl>%<.l d0 sym>",amps_debug_console_main
00011AE8 487A FFFE                M 	pea	*(pc)
00011AEC                          M 	raiseerror2	"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",amps_debug_console_main
00011AEC 40E7                     M 	move.w	sr,-(sp)
00011AEE                          M 	__fstring_generateargumentscode	"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011AEE =00000020                M 	__pos:	set instr("Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'%<')
00011AEE =00000000                M 	__stack:set	0
00011AEE =00000000                M 	__sp:	set 0
00011AEE                          M 	while	(__pos)
00011AEE =00000027                M 	__endpos:	set instr(__pos+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'>')
00011AEE =00000033                M 	__midpos:	set instr(__pos+5,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",' ')
00011AEE =00000027                M 	__midpos:	= __endpos
00011AEE                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011AEE                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011AEE                          M 	__operand:	substr __pos+1+1,__midpos-1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011AEE                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011AEE                          M 	pushp	"move.l d0,-(sp)"
00011AEE =00000001                M 	__stack:	= __stack+1
00011AEE =00000004                M 	__sp:	= __sp+4
00011AEE =00000028                M 	__pos:	set instr(__pos+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'%<')
00011AEE =0000002E                M 	__endpos:	set instr(__pos+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'>')
00011AEE =00000033                M 	__midpos:	set instr(__pos+5,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",' ')
00011AEE =0000002E                M 	__midpos:	= __endpos
00011AEE                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011AEE                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011AEE =0000002F                M 	__pos:	set instr(__pos+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'%<')
00011AEE =0000003A                M 	__endpos:	set instr(__pos+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'>')
00011AEE =00000036                M 	__midpos:	set instr(__pos+5,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",' ')
00011AEE                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011AEE                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011AEE                          M 	__operand:	substr __pos+1+1,__midpos-1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011AEE                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011AEE                          M 	pushp	"move.l d0,-(sp)"
00011AEE =00000002                M 	__stack:	= __stack+1
00011AEE =00000008                M 	__sp:	= __sp+4
00011AEE =00000000                M 	__pos:	set instr(__pos+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'%<')
00011AEE                          M 	rept	__stack
00011AEE                          M 	popp	__command
00011AEE 2F00                     M 	move.l	d0,-(sp)
00011AF0                          M 	popp	__command
00011AF0 2F00                     M 	move.l	d0,-(sp)
00011AF2 4EB9 0000 0000           M 	jsr	errorhandler
00011AF8                          M 	__fstring_generatedecodedstring	"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011AF8 =00000001                M 	__lpos:	set 1
00011AF8 =00000020                M 	__pos:	set instr("Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'%<')
00011AF8                          M 	while	(__pos)
00011AF8                          M 	__substr:	substr __lpos,__pos-1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011AF8 496E 7661 6C69 6420 7472+M 	dc.b	"Invalid tracker at Music \ch\: "
00011B17 =00000027                M 	__endpos:	set instr(__pos+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'>')
00011B17 =00000033                M 	__midpos:	set instr(__pos+5,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",' ')
00011B17 =00000027                M 	__midpos:	= __endpos
00011B17                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011B17                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011B17                          M 	__param:	substr ,,"hex"
00011B17 83                       M 	dc.b	hex|3
00011B18 =00000028                M 	__lpos:	set __endpos+1
00011B18 =00000028                M 	__pos:	set instr(__pos+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'%<')
00011B18                          M 	__substr:	substr __lpos,__pos-1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011B18                          M 	dc.b	""
00011B18 =0000002E                M 	__endpos:	set instr(__pos+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'>')
00011B18 =00000033                M 	__midpos:	set instr(__pos+5,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",' ')
00011B18 =0000002E                M 	__midpos:	= __endpos
00011B18                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011B18                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011B18 E0                       M 	dc.b	endl
00011B19 =0000002F                M 	__lpos:	set __endpos+1
00011B19 =0000002F                M 	__pos:	set instr(__pos+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'%<')
00011B19                          M 	__substr:	substr __lpos,__pos-1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011B19                          M 	dc.b	""
00011B19 =0000003A                M 	__endpos:	set instr(__pos+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'>')
00011B19 =00000036                M 	__midpos:	set instr(__pos+5,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",' ')
00011B19                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011B19                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011B19 B3                       M 	dc.b	sym|3
00011B1A =0000003B                M 	__lpos:	set __endpos+1
00011B1A =00000000                M 	__pos:	set instr(__pos+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'%<')
00011B1A                          M 	__substr:	substr __lpos,,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011B1A                          M 	dc.b	""
00011B1A 00                       M 	dc.b	0
00011B1B 00                       M 	dc.b	+_eh_enter_console|(((*&1)^1)*_eh_align_offset)
00011B1C                          M 	even
00011B1C 4EF9 0001 07A6           M 	jmp	amps_debug_console_main
00011B22                          M 	even
00011B22                          M .ok_434
00011B22                            
00011B22 335C 0008                  		move.w	(a4)+,cPitch(a1)	; load pitch offset and channel volume
00011B26 D2C6                       		adda.w	d6,a1			; go to the next channel
00011B28 51CF FF88                  		dbf	d7,.loopFM		; repeat for all FM channels
00011B2C                            
00011B2C                            .doPSG
00011B2C 7E00                       		moveq	#0,d7
00011B2E 1E2B 0003                  		move.b	3(a3),d7		; load the FM channel count to d7
00011B32 6B00 0000                  		bmi.w	.intSFX			; if no PSG channels are loaded, branch
00011B36                            ; ---------------------------------------------------------------------------
00011B36                            ; The reason why we delay PSG by 1 extra frame, is because of Dual PCM.
00011B36                            ; It adds a delay of 1 frame to DAC and FM due to the YMCue, and PCM
00011B36                            ; buffering to avoid quality loss from DMA's. This means that, since PSG
00011B36                            ; is controlled by the 68000, we would be off by a single frame without
00011B36                            ; this fix.
00011B36                            ; ---------------------------------------------------------------------------
00011B36                            
00011B36 7A02                       		moveq	#2,d5			; prepare duration of 1 frames to d5
00011B38 45FA 0000                  		lea	dPSGtypeVals(pc),a2	; prepare PSG type value list into a2
00011B3C 43F8 8252                  		lea	mPSG1.w,a1		; start from PSG1 channel
00011B40                            
00011B40                            .loopPSG
00011B40 1282                       		move.b	d2,(a1)			; save channel flags
00011B42 135A 0001                  		move.b	(a2)+,cType(a1)		; load channel type from list
00011B46 1344 000A                  		move.b	d4,cTick(a1)		; set channel tick multiplier
00011B4A 1346 001E                  		move.b	d6,cStack(a1)		; reset channel stack pointer
00011B4E 1345 000C                  		move.b	d5,cDuration(a1)	; reset channel duration
00011B52                            
00011B52 7000                       		moveq	#0,d0
00011B54 301C                       		move.w	(a4)+,d0		; load tracker offset to d0
00011B56 D08B                       		add.l	a3,d0			; add music header offset to d0
00011B58 2340 0002                  		move.l	d0,cData(a1)		; save as the tracker address of the channel
00011B5C                            		AMPS_Debug_PlayTrackMus2 PSG	; make sure the tracker address is valid
00011B5C 0280 00FF FFFF           M 	and.l	#$ffffff,d0
00011B62 0C80 0000 0000           M 	cmp.l	#musaddr,d0
00011B68 6500                     M 	blo.s	.fail_439
00011B6A 0C80 0000 0000           M 	cmp.l	#dacaddr,d0
00011B70 6500                     M 	blo.s	.ok_439
00011B72                          M .fail_439
00011B72                          M 	raiseerror	"Invalid tracker at Music psg: %<.l d0>%<endl>%<.l d0 sym>",amps_debug_console_main
00011B72 487A FFFE                M 	pea	*(pc)
00011B76                          M 	raiseerror2	"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",amps_debug_console_main
00011B76 40E7                     M 	move.w	sr,-(sp)
00011B78                          M 	__fstring_generateargumentscode	"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011B78 =00000020                M 	__pos:	set instr("Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'%<')
00011B78 =00000000                M 	__stack:set	0
00011B78 =00000000                M 	__sp:	set 0
00011B78                          M 	while	(__pos)
00011B78 =00000027                M 	__endpos:	set instr(__pos+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'>')
00011B78 =00000033                M 	__midpos:	set instr(__pos+5,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",' ')
00011B78 =00000027                M 	__midpos:	= __endpos
00011B78                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011B78                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011B78                          M 	__operand:	substr __pos+1+1,__midpos-1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011B78                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011B78                          M 	pushp	"move.l d0,-(sp)"
00011B78 =00000001                M 	__stack:	= __stack+1
00011B78 =00000004                M 	__sp:	= __sp+4
00011B78 =00000028                M 	__pos:	set instr(__pos+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'%<')
00011B78 =0000002E                M 	__endpos:	set instr(__pos+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'>')
00011B78 =00000033                M 	__midpos:	set instr(__pos+5,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",' ')
00011B78 =0000002E                M 	__midpos:	= __endpos
00011B78                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011B78                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011B78 =0000002F                M 	__pos:	set instr(__pos+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'%<')
00011B78 =0000003A                M 	__endpos:	set instr(__pos+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'>')
00011B78 =00000036                M 	__midpos:	set instr(__pos+5,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",' ')
00011B78                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011B78                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011B78                          M 	__operand:	substr __pos+1+1,__midpos-1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011B78                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011B78                          M 	pushp	"move.l d0,-(sp)"
00011B78 =00000002                M 	__stack:	= __stack+1
00011B78 =00000008                M 	__sp:	= __sp+4
00011B78 =00000000                M 	__pos:	set instr(__pos+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'%<')
00011B78                          M 	rept	__stack
00011B78                          M 	popp	__command
00011B78 2F00                     M 	move.l	d0,-(sp)
00011B7A                          M 	popp	__command
00011B7A 2F00                     M 	move.l	d0,-(sp)
00011B7C 4EB9 0000 0000           M 	jsr	errorhandler
00011B82                          M 	__fstring_generatedecodedstring	"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011B82 =00000001                M 	__lpos:	set 1
00011B82 =00000020                M 	__pos:	set instr("Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'%<')
00011B82                          M 	while	(__pos)
00011B82                          M 	__substr:	substr __lpos,__pos-1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011B82 496E 7661 6C69 6420 7472+M 	dc.b	"Invalid tracker at Music \ch\: "
00011BA1 =00000027                M 	__endpos:	set instr(__pos+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'>')
00011BA1 =00000033                M 	__midpos:	set instr(__pos+5,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",' ')
00011BA1 =00000027                M 	__midpos:	= __endpos
00011BA1                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011BA1                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011BA1                          M 	__param:	substr ,,"hex"
00011BA1 83                       M 	dc.b	hex|3
00011BA2 =00000028                M 	__lpos:	set __endpos+1
00011BA2 =00000028                M 	__pos:	set instr(__pos+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'%<')
00011BA2                          M 	__substr:	substr __lpos,__pos-1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011BA2                          M 	dc.b	""
00011BA2 =0000002E                M 	__endpos:	set instr(__pos+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'>')
00011BA2 =00000033                M 	__midpos:	set instr(__pos+5,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",' ')
00011BA2 =0000002E                M 	__midpos:	= __endpos
00011BA2                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011BA2                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011BA2 E0                       M 	dc.b	endl
00011BA3 =0000002F                M 	__lpos:	set __endpos+1
00011BA3 =0000002F                M 	__pos:	set instr(__pos+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'%<')
00011BA3                          M 	__substr:	substr __lpos,__pos-1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011BA3                          M 	dc.b	""
00011BA3 =0000003A                M 	__endpos:	set instr(__pos+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'>')
00011BA3 =00000036                M 	__midpos:	set instr(__pos+5,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",' ')
00011BA3                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011BA3                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011BA3 B3                       M 	dc.b	sym|3
00011BA4 =0000003B                M 	__lpos:	set __endpos+1
00011BA4 =00000000                M 	__pos:	set instr(__pos+1,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>",'%<')
00011BA4                          M 	__substr:	substr __lpos,,"Invalid tracker at Music \ch\: %<.l d0>%<endl>%<.l d0 sym>"
00011BA4                          M 	dc.b	""
00011BA4 00                       M 	dc.b	0
00011BA5 00                       M 	dc.b	+_eh_enter_console|(((*&1)^1)*_eh_align_offset)
00011BA6                          M 	even
00011BA6 4EF9 0001 07A6           M 	jmp	amps_debug_console_main
00011BAC                          M 	even
00011BAC                          M .ok_439
00011BAC                            
00011BAC 335C 0008                  		move.w	(a4)+,cPitch(a1)	; load pitch offset and channel volume
00011BB0 135C 0007                  		move.b	(a4)+,cDetune(a1)	; load detune offset
00011BB4 135C 000B                  		move.b	(a4)+,cVolEnv(a1)	; load volume envelope ID
00011BB8 D2C6                       		adda.w	d6,a1			; go to the next channel
00011BBA 51CF FF84                  		dbf	d7,.loopPSG		; repeat for all FM channels
00011BBE                            ; ---------------------------------------------------------------------------
00011BBE                            ; Unlike SMPS, AMPS does not have pointer to the voice table of
00011BBE                            ; a song. This may be limiting for some songs, but this allows AMPS
00011BBE                            ; to save 2 bytes for each music and sound effect file. This line
00011BBE                            ; of code sets the music voice table address at the end of the header.
00011BBE                            ; ---------------------------------------------------------------------------
00011BBE                            
00011BBE                            .intSFX
00011BBE 21CC 8102                  		move.l	a4,mVctMus.w		; set voice table address to a4
00011BC2                            ; ---------------------------------------------------------------------------
00011BC2                            ; Now follows initializing FM6 to be ready for PCM streaming,
00011BC2                            ; and resetting the PCM filter for Dual PCM. Simply, this just
00011BC2                            ; clears some YM registers.
00011BC2                            ; ---------------------------------------------------------------------------
00011BC2                            
00011BC2 7028                       		moveq	#$28,d0			; YM address: Key on/off
00011BC4 7206                       		moveq	#6,d1			; FM6, all operators off
00011BC6 4EBA 0000                  		jsr	WriteYM_Pt1(pc)		; write to part 2 channel
00011BCA                            
00011BCA 727F                       		moveq	#$7F,d1			; set total level to $7F (silent)
00011BCC 7042                       		moveq	#$42,d0			; YM address: Total Level Operator 1 (FM3/6)
00011BCE 4EBA 0000                  		jsr	WriteYM_Pt2(pc)		; write to part 2 channel
00011BD2 704A                       		moveq	#$4A,d0			; YM address: Total Level Operator 2 (FM3/6)
00011BD4 4EBA 0000                  		jsr	WriteYM_Pt2(pc)		; write to part 2 channel
00011BD8 7046                       		moveq	#$46,d0			; YM address: Total Level Operator 3 (FM3/6)
00011BDA 4EBA 0000                  		jsr	WriteYM_Pt2(pc)		; write to part 2 channel
00011BDE 704E                       		moveq	#$4E,d0			; YM address: Total Level Operator 4 (FM3/6)
00011BE0 4EBA 0000                  		jsr	WriteYM_Pt2(pc)		; write to part 2 channel
00011BE4                            
00011BE4 72C0                       		moveq	#$FFFFFFC0,d1		; set panning to centre
00011BE6 70B6                       		moveq	#$FFFFFFB4+2,d0		; YM address: Panning and LFO (FM3/6)
00011BE8 4EBA 0000                  		jsr	WriteYM_Pt2(pc)		; write to part 2 channel
00011BEC                            
00011BEC 303C 0000                  		move.w	#fLog>>$0F,d0		; use linear filter
00011BF0 4EBA 0000                  		jsr	dSetFilter(pc)		; set filter
00011BF4                            ; ---------------------------------------------------------------------------
00011BF4                            ; This piece of code here handles SFX overriding our newly loaded
00011BF4                            ; music channels. Since we did not do this at the initialization
00011BF4                            ; step, we will handle it here instead.
00011BF4                            ; ---------------------------------------------------------------------------
00011BF4                            
00011BF4 45FA 0000                  		lea	dSFXoverList(pc),a2	; load quick reference to the SFX override list
00011BF8 43F8 82D6                  		lea	mSFXDAC1.w,a1		; start from SFX DAC1 channel
00011BFC 7E06                       		moveq	#SFX_Ch-1,d7		; prepare total number of SFX channels into d7
00011BFE 7C1C                       		moveq	#cSizeSFX,d6		; prepare SFX channel size to d6
00011C00                            
00011C00                            .loopSFX
00011C00 4A11                       		tst.b	(a1)			; check if SFX channel is running a tracker
00011C02 6A00                       		bpl.s	.nextSFX		; if not, skip this channel
00011C04                            
00011C04 7000                       		moveq	#0,d0
00011C06 1029 0001                  		move.b	cType(a1),d0		; load SFX channel type to d0
00011C0A 6B00                       		bmi.s	.SFXPSG			; if negative, it is a PSG channel
00011C0C                            
00011C0C 0240 0007                  		and.w	#$07,d0			; get only the necessary bits to d3
00011C10 5540                       		subq.w	#2,d0			; since FM 1 and 2 are not used, skip over them
00011C12 D040                       		add.w	d0,d0			; double offset (each entry is 1 word in size)
00011C14 6000                       		bra.s	.override
00011C16                            ; ---------------------------------------------------------------------------
00011C16                            
00011C16                            .SFXPSG
00011C16 E808                       		lsr.b	#4,d0			; make it easier to reference the right offset in the table
00011C18                            .override
00011C18 3672 0000                  		move.w	(a2,d0.w),a3		; get music channel RAM address to a3
00011C1C 08D3 0001                  		bset	#cfbInt,(a3)		; set as interrupted
00011C20                            
00011C20                            .nextSFX
00011C20 D2C6                       		adda.w	d6,a1			; go to the next channel
00011C22 51CF FFDC                  		dbf	d7,.loopSFX		; repeat for all SFX channels
00011C26                            ; ---------------------------------------------------------------------------
00011C26                            ; Here we mute all non-interrupted FM and PSG channels
00011C26                            ; ---------------------------------------------------------------------------
00011C26                            
00011C26 4BF8 8176                  		lea	mFM1.w,a5		; start from FM1 channel
00011C2A 7804                       		moveq	#Mus_FM-1,d4		; prepare total number of FM channels into d7
00011C2C                            .stopFM
00011C2C 4EBA 0000                  		jsr	dKeyOffFM(pc)		; send key off even if not interrupted
00011C30 DAC6                       		adda.w	d6,a5			; go to the next channel
00011C32 51CC FFF8                  		dbf	d4,.stopFM		; repeat for all FM channels
00011C36                            
00011C36 7802                       		moveq	#Mus_PSG-1,d4		; start from PSG1 channel
00011C38                            .mutePSG
00011C38 4EBA 0000                  		jsr	dMutePSGmus(pc)		; mute PSG channel if not interrupted
00011C3C DAC6                       		adda.w	d6,a5			; go to the next channel
00011C3E 51CC FFF8                  		dbf	d4,.mutePSG		; repeat for all FM channels
00011C42 4E75                       		rts
00011C44                            
00011C44                            ; ===========================================================================
00011C44                            ; ---------------------------------------------------------------------------
00011C44                            ; Type values for different channels. Used for playing music
00011C44                            ; ---------------------------------------------------------------------------
00011C44 0B0E                       dDACtypeVals:	dc.b ctDAC1, ctDAC2
00011C46 0001 0204 05               dFMtypeVals:	dc.b ctFM1, ctFM2, ctFM3, ctFM4, ctFM5
00011C4B 80A0 C0                    dPSGtypeVals:	dc.b ctPSG1, ctPSG2, ctPSG3
00011C4E                            		even
00011C4E                            ; ===========================================================================
00011C4E                            ; ---------------------------------------------------------------------------
00011C4E                            ; Subroutine to play a queued sound effect
00011C4E                            ; ---------------------------------------------------------------------------
00011C4E                            
00011C4E                            dPlaySnd_SFX:
00011C4E                            ; ---------------------------------------------------------------------------
00011C4E                            ; This is a little special case with Sonic 1 - 3K, where the ring
00011C4E                            ; sound effect would change panning each time it is played. AMPS
00011C4E                            ; emulates this behavior like the original drivers did, by
00011C4E                            ; playing a different sound effect ID.
00011C4E                            ; ---------------------------------------------------------------------------
00011C4E                            
00011C4E 0C07 0000                  		cmpi.b	#sfx_RingRight,d7	; check if the sound effect was the ring sound effect
00011C52 6600                       		bne.s	.noring			; if not, skip
00011C54 0878 0000 8100             		bchg	#mfbRing,mFlags.w	; swap flag and check if it was set
00011C5A 6700                       		beq.s	.noring			; if was not, do not change sound effect
00011C5C 3E3C 0000                  		move.w	#sfx_RingLeft,d7	; switch to left panned sound effect instead
00011C60                            ; ---------------------------------------------------------------------------
00011C60                            ; To save few cycles, we don't directly substract the SFX offset from
00011C60                            ; the ID, and instead offset the table position. In practice this will
00011C60                            ; have the same effect, but saves us 8 cycles overall.
00011C60                            ; ---------------------------------------------------------------------------
00011C60                            
00011C60                            .noring
00011C60 43FA 0000                  		lea	SoundIndex-(SFXoff*4)(pc),a1; get sfx pointer table with an offset to a4
00011C64 1207                       		move.b	d7,d1			; copy sfx ID to d1 (used later)
00011C66 DE47                       		add.w	d7,d7			; quadruple sfx ID
00011C68 DE47                       		add.w	d7,d7			; since each entry is 4 bytes in size
00011C6A 2871 7000                  		movea.l	(a1,d7.w),a4		; get SFX header pointer from the table
00011C6E                            
00011C6E 200C                       		move.l	a4,d0			; copy pointer to d0
00011C70 0280 00FF FFFF             		and.l	#$FFFFFF,d0		; clearing the upper 8 bits allows the debugger
00011C76 2840                       		move.l	d0,a4			; to show the address correctly. Move ptr back to a4
00011C78                            		AMPS_Debug_PlayTrackSFX		; check if this was valid sound effect
00011C78 0C80 0000 0000           M 	cmp.l	#sfxaddr,d0
00011C7E 6500                     M 	blo.s	.fail_444
00011C80 0C80 0000 0000           M 	cmp.l	#musaddr,d0
00011C86 6500                     M 	blo.s	.ok_444
00011C88                          M .fail_444
00011C88                          M 	raiseerror	"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>",amps_debug_console_main
00011C88 487A FFFE                M 	pea	*(pc)
00011C8C                          M 	raiseerror2	"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>",amps_debug_console_main
00011C8C 40E7                     M 	move.w	sr,-(sp)
00011C8E                          M 	__fstring_generateargumentscode	"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>"
00011C8E =00000018                M 	__pos:	set instr("Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>",'%<')
00011C8E =00000000                M 	__stack:set	0
00011C8E =00000000                M 	__sp:	set 0
00011C8E                          M 	while	(__pos)
00011C8E =0000001F                M 	__endpos:	set instr(__pos+1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>",'>')
00011C8E =00000021                M 	__midpos:	set instr(__pos+5,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>",' ')
00011C8E =0000001F                M 	__midpos:	= __endpos
00011C8E                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>"
00011C8E                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>"
00011C8E                          M 	__operand:	substr __pos+1+1,__midpos-1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>"
00011C8E                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>"
00011C8E                          M 	pushp	"move.b d0,1(sp)"
00011C8E                          M 	pushp	"subq.w	#2, sp"
00011C8E =00000002                M 	__stack:	= __stack+2
00011C8E =00000002                M 	__sp:	= __sp+2
00011C8E =00000022                M 	__pos:	set instr(__pos+1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>",'%<')
00011C8E =00000029                M 	__endpos:	set instr(__pos+1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>",'>')
00011C8E =00000035                M 	__midpos:	set instr(__pos+5,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>",' ')
00011C8E =00000029                M 	__midpos:	= __endpos
00011C8E                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>"
00011C8E                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>"
00011C8E                          M 	__operand:	substr __pos+1+1,__midpos-1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>"
00011C8E                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>"
00011C8E                          M 	pushp	"move.l a4,-(sp)"
00011C8E =00000003                M 	__stack:	= __stack+1
00011C8E =00000006                M 	__sp:	= __sp+4
00011C8E =0000002A                M 	__pos:	set instr(__pos+1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>",'%<')
00011C8E =00000030                M 	__endpos:	set instr(__pos+1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>",'>')
00011C8E =00000035                M 	__midpos:	set instr(__pos+5,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>",' ')
00011C8E =00000030                M 	__midpos:	= __endpos
00011C8E                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>"
00011C8E                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>"
00011C8E =00000031                M 	__pos:	set instr(__pos+1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>",'%<')
00011C8E =0000003C                M 	__endpos:	set instr(__pos+1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>",'>')
00011C8E =00000038                M 	__midpos:	set instr(__pos+5,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>",' ')
00011C8E                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>"
00011C8E                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>"
00011C8E                          M 	__operand:	substr __pos+1+1,__midpos-1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>"
00011C8E                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>"
00011C8E                          M 	pushp	"move.l a4,-(sp)"
00011C8E =00000004                M 	__stack:	= __stack+1
00011C8E =0000000A                M 	__sp:	= __sp+4
00011C8E =00000000                M 	__pos:	set instr(__pos+1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>",'%<')
00011C8E                          M 	rept	__stack
00011C8E                          M 	popp	__command
00011C8E 2F0C                     M 	move.l	a4,-(sp)
00011C90                          M 	popp	__command
00011C90 2F0C                     M 	move.l	a4,-(sp)
00011C92                          M 	popp	__command
00011C92 554F                     M 	subq.w	#2,sp
00011C94                          M 	popp	__command
00011C94 1F40 0001                M 	move.b	d0,1(sp)
00011C98 4EB9 0000 0000           M 	jsr	errorhandler
00011C9E                          M 	__fstring_generatedecodedstring	"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>"
00011C9E =00000001                M 	__lpos:	set 1
00011C9E =00000018                M 	__pos:	set instr("Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>",'%<')
00011C9E                          M 	while	(__pos)
00011C9E                          M 	__substr:	substr __lpos,__pos-1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>"
00011C9E 496E 7661 6C69 6420 7472+M 	dc.b	"Invalid tracker at SFX "
00011CB5 =0000001F                M 	__endpos:	set instr(__pos+1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>",'>')
00011CB5 =00000021                M 	__midpos:	set instr(__pos+5,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>",' ')
00011CB5 =0000001F                M 	__midpos:	= __endpos
00011CB5                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>"
00011CB5                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>"
00011CB5                          M 	__param:	substr ,,"hex"
00011CB5 80                       M 	dc.b	hex
00011CB6 =00000020                M 	__lpos:	set __endpos+1
00011CB6 =00000022                M 	__pos:	set instr(__pos+1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>",'%<')
00011CB6                          M 	__substr:	substr __lpos,__pos-1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>"
00011CB6 3A20                     M 	dc.b	": "
00011CB8 =00000029                M 	__endpos:	set instr(__pos+1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>",'>')
00011CB8 =00000035                M 	__midpos:	set instr(__pos+5,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>",' ')
00011CB8 =00000029                M 	__midpos:	= __endpos
00011CB8                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>"
00011CB8                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>"
00011CB8                          M 	__param:	substr ,,"hex"
00011CB8 83                       M 	dc.b	hex|3
00011CB9 =0000002A                M 	__lpos:	set __endpos+1
00011CB9 =0000002A                M 	__pos:	set instr(__pos+1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>",'%<')
00011CB9                          M 	__substr:	substr __lpos,__pos-1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>"
00011CB9                          M 	dc.b	""
00011CB9 =00000030                M 	__endpos:	set instr(__pos+1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>",'>')
00011CB9 =00000035                M 	__midpos:	set instr(__pos+5,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>",' ')
00011CB9 =00000030                M 	__midpos:	= __endpos
00011CB9                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>"
00011CB9                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>"
00011CB9 E0                       M 	dc.b	endl
00011CBA =00000031                M 	__lpos:	set __endpos+1
00011CBA =00000031                M 	__pos:	set instr(__pos+1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>",'%<')
00011CBA                          M 	__substr:	substr __lpos,__pos-1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>"
00011CBA                          M 	dc.b	""
00011CBA =0000003C                M 	__endpos:	set instr(__pos+1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>",'>')
00011CBA =00000038                M 	__midpos:	set instr(__pos+5,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>",' ')
00011CBA                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>"
00011CBA                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>"
00011CBA B3                       M 	dc.b	sym|3
00011CBB =0000003D                M 	__lpos:	set __endpos+1
00011CBB =00000000                M 	__pos:	set instr(__pos+1,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>",'%<')
00011CBB                          M 	__substr:	substr __lpos,,"Invalid tracker at SFX %<.b d0>: %<.l a4>%<endl>%<.l a4 sym>"
00011CBB                          M 	dc.b	""
00011CBB 00                       M 	dc.b	0
00011CBC 00                       M 	dc.b	+_eh_enter_console|(((*&1)^1)*_eh_align_offset)
00011CBE 00                       M 	even
00011CBE 4EF9 0001 07A6           M 	jmp	amps_debug_console_main
00011CC4                          M 	even
00011CC4                          M .ok_444
00011CC4                            ; ---------------------------------------------------------------------------
00011CC4                            ; Continous SFX is a very special type of sound effect. Unlike other
00011CC4                            ; sound effects, when a continous SFX is played, it will run a loop
00011CC4                            ; again, until it is no longer queued. This is very useful for sound
00011CC4                            ; effects that need to be queued very often, but that really do not
00011CC4                            ; sound good when restarted (plus, it requires more CPU time, anyway).
00011CC4                            ; Even the Marble Zone block pushing sound effect had similar behavior,
00011CC4                            ; but the code was not quite as matured as this here. Only one continous
00011CC4                            ; SFX may be running at once, when other type is loaded, the earlier one
00011CC4                            ; is stopped and replaced.
00011CC4                            ; ---------------------------------------------------------------------------
00011CC4                            
00011CC4 4A31 7000                  		tst.b	(a1,d7.w)		; check if this sound effect is continously looping
00011CC8 6A00                       		bpl.s	.nocont			; if not, skip
00011CCA 11EC 0001 811C             		move.b	1(a4),mContCtr.w	; copy the number of channels as the new continous loop counter
00011CD0 B238 811D                  		cmp.b	mContLast.w,d1		; check if the last continous SFX had the same ID
00011CD4 6600                       		bne.s	.setcont		; if not, play as a new sound effect anyway
00011CD6 4E75                       		rts
00011CD8                            
00011CD8                            .setcont
00011CD8 11C1 811D                  		move.b	d1,mContLast.w		; save new continous SFX ID
00011CDC                            .nocont
00011CDC 224C                       		movea.l	a4,a1			; copy tracker header pointer to a1
00011CDE                            
00011CDE 7E00                       		moveq	#0,d7
00011CE0 47FA 0000                  		lea	dSFXoverList(pc),a3	; load quick reference to the SFX override list to a3
00011CE4 45FA 0000                  		lea	dSFXoffList(pc),a2	; load quick reference to the SFX channel list to a2
00011CE8 1A19                       		move.b	(a1)+,d5		; load sound effect priority to d5
00011CEA 1E19                       		move.b	(a1)+,d7		; load number of SFX channels to d7
00011CEC 7C1C                       		moveq	#cSizeSFX,d6		; prepare SFX channel size to d6
00011CEE                            ; ---------------------------------------------------------------------------
00011CEE                            ; The reason why we delay PSG by 1 extra frame, is because of Dual PCM.
00011CEE                            ; It adds a delay of 1 frame to DAC and FM due to the YMCue, and PCM
00011CEE                            ; buffering to avoid quality loss from DMA's. This means that, since PSG
00011CEE                            ; is controlled by the 68000, we would be off by a single frame without
00011CEE                            ; this fix.
00011CEE                            ; ---------------------------------------------------------------------------
00011CEE                            
00011CEE                            .loopSFX
00011CEE 7600                       		moveq	#0,d3
00011CF0 7402                       		moveq	#2,d2			; prepare duration of 1 frames to d5
00011CF2 1629 0001                  		move.b	1(a1),d3		; load sound effect channel type to d3
00011CF6 1803                       		move.b	d3,d4			; copy type to d4
00011CF8 6B00                       		bmi.s	.chPSG			; if channel is a PSG channel, branch
00011CFA                            
00011CFA 0243 0007                  		and.w	#$07,d3			; get only the necessary bits to d3
00011CFE 5543                       		subq.w	#2,d3			; since FM 1 and 2 are not used, skip over them
00011D00 D643                       		add.w	d3,d3			; double offset (each entry is 1 word in size)
00011D02                            
00011D02 3A72 3000                  		move.w	(a2,d3.w),a5		; get the SFX channel we are trying to load to
00011D06 BA2D 001A                  		cmp.b	cPrio(a5),d5		; check if this sound effect has higher priority
00011D0A 6500                       		blo.s	.skip			; if not, we can not override it
00011D0C                            
00011D0C 3C73 3000                  		move.w	(a3,d3.w),a6		; get the music channel we should override
00011D10 08D6 0001                  		bset	#cfbInt,(a6)		; override music channel with sound effect
00011D14 7401                       		moveq	#1,d2			; prepare duration of 0 frames to d5
00011D16 6000                       		bra.s	.clearCh
00011D18                            ; ---------------------------------------------------------------------------
00011D18                            
00011D18                            .skip
00011D18 5C89                       		addq.l	#6,a1			; skip this sound effect channel
00011D1A 51CF FFD2                  		dbf	d7,.loopSFX		; repeat for each requested channel
00011D1E 4E75                       		rts
00011D20                            ; ---------------------------------------------------------------------------
00011D20                            
00011D20                            .chPSG
00011D20 E84B                       		lsr.w	#4,d3			; make it easier to reference the right offset in the table
00011D22 3A72 3000                  		move.w	(a2,d3.w),a5		; get the SFX channel we are trying to load to
00011D26 BA2D 001A                  		cmp.b	cPrio(a5),d5		; check if this sound effect has higher priority
00011D2A 65EC                       		blo.s	.skip			; if not, we can not override it
00011D2C                            
00011D2C 3C73 3000                  		move.w	(a3,d3.w),a6		; get the music channel we should override
00011D30 08D6 0001                  		bset	#cfbInt,(a6)		; override music channel with sound effect
00011D34 0004 001F                  		ori.b	#$1F,d4			; add volume update and max volume to channel type
00011D38 13C4 00C0 0011             		move.b	d4,dPSG			; send volume mute command to PSG
00011D3E                            
00011D3E 0C04 00DF                  		cmpi.b	#ctPSG3|$1F,d4		; check if we sent command about PSG3
00011D42 6600                       		bne.s	.clearCh		; if not, skip
00011D44 13FC 00FF 00C0 0011        		move.b	#ctPSG4|$1F,dPSG	; send volume mute command for PSG4 to PSG
00011D4C                            
00011D4C                            .clearCh
00011D4C 3C4D                       		move.w	a5,a6			; copy sound effect channel RAM pointer to a6
00011D4E 7006                       		moveq	#cSizeSFX/4-1,d0	; prepare SFX channel size / 4 to d0
00011D50                            .clear
00011D50 429E                       		clr.l	(a6)+			; clear 4 bytes of channel data
00011D52 51C8 FFFC                  		dbf	d0,.clear		; clear the entire channel
00011D56                            
00011D56                            
00011D56 3A99                       		move.w	(a1)+,(a5)		; load channel flags and type
00011D58 1B45 001A                  		move.b	d5,cPrio(a5)		; set channel priority
00011D5C 1B42 000C                  		move.b	d2,cDuration(a5)	; reset channel duration
00011D60                            
00011D60 7000                       		moveq	#0,d0
00011D62 3019                       		move.w	(a1)+,d0		; load tracker offset to d0
00011D64 D08C                       		add.l	a4,d0			; add music header offset to d0
00011D66 2B40 0002                  		move.l	d0,cData(a5)		; save as the tracker address of the channel
00011D6A                            		AMPS_Debug_PlayTrackSFX2	; make sure the tracker address is valid
00011D6A 0C80 0000 0000           M 	cmp.l	#sfxaddr,d0
00011D70 6500                     M 	blo.s	.fail_449
00011D72 0C80 0000 0000           M 	cmp.l	#musaddr,d0
00011D78 6500                     M 	blo.s	.ok_449
00011D7A                          M .fail_449
00011D7A                          M 	raiseerror	"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>",amps_debug_console_main
00011D7A 487A FFFE                M 	pea	*(pc)
00011D7E                          M 	raiseerror2	"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>",amps_debug_console_main
00011D7E 40E7                     M 	move.w	sr,-(sp)
00011D80                          M 	__fstring_generateargumentscode	"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>"
00011D80 =0000001C                M 	__pos:	set instr("Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>",'%<')
00011D80 =00000000                M 	__stack:set	0
00011D80 =00000000                M 	__sp:	set 0
00011D80                          M 	while	(__pos)
00011D80 =00000023                M 	__endpos:	set instr(__pos+1,"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>",'>')
00011D80 =0000002F                M 	__midpos:	set instr(__pos+5,"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>",' ')
00011D80 =00000023                M 	__midpos:	= __endpos
00011D80                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>"
00011D80                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>"
00011D80                          M 	__operand:	substr __pos+1+1,__midpos-1,"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>"
00011D80                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>"
00011D80                          M 	pushp	"move.l d0,-(sp)"
00011D80 =00000001                M 	__stack:	= __stack+1
00011D80 =00000004                M 	__sp:	= __sp+4
00011D80 =00000024                M 	__pos:	set instr(__pos+1,"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>",'%<')
00011D80 =0000002A                M 	__endpos:	set instr(__pos+1,"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>",'>')
00011D80 =0000002F                M 	__midpos:	set instr(__pos+5,"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>",' ')
00011D80 =0000002A                M 	__midpos:	= __endpos
00011D80                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>"
00011D80                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>"
00011D80 =0000002B                M 	__pos:	set instr(__pos+1,"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>",'%<')
00011D80 =00000036                M 	__endpos:	set instr(__pos+1,"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>",'>')
00011D80 =00000032                M 	__midpos:	set instr(__pos+5,"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>",' ')
00011D80                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>"
00011D80                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>"
00011D80                          M 	__operand:	substr __pos+1+1,__midpos-1,"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>"
00011D80                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>"
00011D80                          M 	pushp	"move.l d0,-(sp)"
00011D80 =00000002                M 	__stack:	= __stack+1
00011D80 =00000008                M 	__sp:	= __sp+4
00011D80 =00000000                M 	__pos:	set instr(__pos+1,"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>",'%<')
00011D80                          M 	rept	__stack
00011D80                          M 	popp	__command
00011D80 2F00                     M 	move.l	d0,-(sp)
00011D82                          M 	popp	__command
00011D82 2F00                     M 	move.l	d0,-(sp)
00011D84 4EB9 0000 0000           M 	jsr	errorhandler
00011D8A                          M 	__fstring_generatedecodedstring	"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>"
00011D8A =00000001                M 	__lpos:	set 1
00011D8A =0000001C                M 	__pos:	set instr("Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>",'%<')
00011D8A                          M 	while	(__pos)
00011D8A                          M 	__substr:	substr __lpos,__pos-1,"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>"
00011D8A 496E 7661 6C69 6420 7472+M 	dc.b	"Invalid tracker at SFX ch: "
00011DA5 =00000023                M 	__endpos:	set instr(__pos+1,"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>",'>')
00011DA5 =0000002F                M 	__midpos:	set instr(__pos+5,"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>",' ')
00011DA5 =00000023                M 	__midpos:	= __endpos
00011DA5                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>"
00011DA5                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>"
00011DA5                          M 	__param:	substr ,,"hex"
00011DA5 83                       M 	dc.b	hex|3
00011DA6 =00000024                M 	__lpos:	set __endpos+1
00011DA6 =00000024                M 	__pos:	set instr(__pos+1,"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>",'%<')
00011DA6                          M 	__substr:	substr __lpos,__pos-1,"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>"
00011DA6                          M 	dc.b	""
00011DA6 =0000002A                M 	__endpos:	set instr(__pos+1,"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>",'>')
00011DA6 =0000002F                M 	__midpos:	set instr(__pos+5,"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>",' ')
00011DA6 =0000002A                M 	__midpos:	= __endpos
00011DA6                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>"
00011DA6                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>"
00011DA6 E0                       M 	dc.b	endl
00011DA7 =0000002B                M 	__lpos:	set __endpos+1
00011DA7 =0000002B                M 	__pos:	set instr(__pos+1,"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>",'%<')
00011DA7                          M 	__substr:	substr __lpos,__pos-1,"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>"
00011DA7                          M 	dc.b	""
00011DA7 =00000036                M 	__endpos:	set instr(__pos+1,"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>",'>')
00011DA7 =00000032                M 	__midpos:	set instr(__pos+5,"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>",' ')
00011DA7                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>"
00011DA7                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>"
00011DA7 B3                       M 	dc.b	sym|3
00011DA8 =00000037                M 	__lpos:	set __endpos+1
00011DA8 =00000000                M 	__pos:	set instr(__pos+1,"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>",'%<')
00011DA8                          M 	__substr:	substr __lpos,,"Invalid tracker at SFX ch: %<.l d0>%<endl>%<.l d0 sym>"
00011DA8                          M 	dc.b	""
00011DA8 00                       M 	dc.b	0
00011DA9 00                       M 	dc.b	+_eh_enter_console|(((*&1)^1)*_eh_align_offset)
00011DAA                          M 	even
00011DAA 4EF9 0001 07A6           M 	jmp	amps_debug_console_main
00011DB0                          M 	even
00011DB0                          M .ok_449
00011DB0                            
00011DB0 3B59 0008                  		move.w	(a1)+,cPitch(a5)	; load pitch offset and channel volume
00011DB4 4A04                       		tst.b	d4			; check if this channel is a PSG channel
00011DB6 6B00                       		bmi.s	.loop			; if is, skip over this
00011DB8                            
00011DB8 72C0                       		moveq	#$FFFFFFC0,d1		; set panning to centre
00011DBA 1B41 0006                  		move.b	d1,cPanning(a5)		; save to channel memory too
00011DBE 70B4                       		moveq	#$FFFFFFB4,d0		; YM address: Panning and LFO
00011DC0 4EBA 0000                  		jsr	WriteChYM(pc)		; write to part 2 channel
00011DC4                            
00011DC4 BAFC 82D6                  		cmp.w	#mSFXDAC1,a5		; check if this channel is a DAC channel
00011DC8 6600                       		bne.s	.fm			; if not, branch
00011DCA 3B7C 0100 000E             		move.w	#$100,cFreq(a5)		; DAC default frequency is $100, NOT $000
00011DD0                            
00011DD0                            .loop
00011DD0 51CF FF1C                  		dbf	d7,.loopSFX		; repeat for each requested channel
00011DD4 4E75                       		rts
00011DD6                            ; ---------------------------------------------------------------------------
00011DD6                            ; The instant release for FM channels behavior was not in the Sonic 1
00011DD6                            ; SMPS driver by default, but it has been added since it fixes an
00011DD6                            ; issue with YM2612, where sometimes subsequent sound effect activations
00011DD6                            ; would sound different over time. This fix will help to mitigate that.
00011DD6                            ; ---------------------------------------------------------------------------
00011DD6                            
00011DD6                            .fm
00011DD6 720F                       		moveq	#$F,d1			; set to release note instantly
00011DD8 7080                       		moveq	#$FFFFFF80,d0		; YM address: Release Rate Operator 1
00011DDA 4EBA 0000                  		jsr	WriteChYM(pc)		; write to YM according to channel
00011DDE 7088                       		moveq	#$FFFFFF88,d0		; YM address: Release Rate Operator 3
00011DE0 4EBA 0000                  		jsr	WriteChYM(pc)		; write to YM according to channel
00011DE4 7084                       		moveq	#$FFFFFF84,d0		; YM address: Release Rate Operator 2
00011DE6 4EBA 0000                  		jsr	WriteChYM(pc)		; write to YM according to channel
00011DEA 708C                       		moveq	#$FFFFFF8C,d0		; YM address: Release Rate Operator 4
00011DEC 4EBA 0000                  		jsr	WriteChYM(pc)		; write to YM according to channel
00011DF0                            
00011DF0 7028                       		moveq	#$28,d0			; YM address: Key on/off
00011DF2 122D 0001                  		move.b	cType(a5),d1		; FM channel, all operators off
00011DF6 6100 0000                  		bsr.w	WriteYM_Pt1		; write to part 1 or 2 channel
00011DFA                            
00011DFA 51CF FEF2                  		dbf	d7,.loopSFX		; repeat for each requested channel
00011DFE 4E75                       		rts
00011E00                            ; ===========================================================================
00011E00                            ; ---------------------------------------------------------------------------
00011E00                            ; pointers for music channels SFX can override and addresses of SFX channels
00011E00                            ; ---------------------------------------------------------------------------
00011E00                            
00011E00 82F2                       dSFXoffList:	dc.w mSFXFM3			; FM3
00011E02 82D6                       		dc.w mSFXDAC1			; DAC1
00011E04 830E                       		dc.w mSFXFM4			; FM4
00011E06 832A                       		dc.w mSFXFM5			; FM5
00011E08 8346                       		dc.w mSFXPSG1			; PSG1
00011E0A 8362                       		dc.w mSFXPSG2			; PSG2
00011E0C 837E                       		dc.w mSFXPSG3			; PSG3
00011E0E 837E                       		dc.w mSFXPSG3			; PSG4
00011E10                            
00011E10 81CE                       dSFXoverList:	dc.w mFM3			; SFX FM3
00011E12 811E                       		dc.w mDAC1			; SFX DAC1
00011E14 81FA                       		dc.w mFM4			; SFX FM4
00011E16 8226                       		dc.w mFM5			; SFX FM5
00011E18 8252                       		dc.w mPSG1			; SFX PSG1
00011E1A 827E                       		dc.w mPSG2			; SFX PSG2
00011E1C 82AA                       		dc.w mPSG3			; SFX PSG3
00011E1E 82AA                       		dc.w mPSG3			; SFX PSG4
00011E20                            ; ===========================================================================
00011E20                            ; ---------------------------------------------------------------------------
00011E20                            ; Play queued command
00011E20                            ; ---------------------------------------------------------------------------
00011E20                            
00011E20                            dPlaySnd_Comm:
00011E20                            		AMPS_Debug_PlayCmd		; check if the command is valid
00011E20 0C07 0000                M 	cmp.b	#(dsoundcommands_end-dsoundcommands)/4,d7
00011E24 6300                     M 	bls.s	.ok
00011E26                          M 	raiseerror	"Invalid command in queue: %<.b d7>",amps_debug_console_channel
00011E26 487A FFFE                M 	pea	*(pc)
00011E2A                          M 	raiseerror2	"Invalid command in queue: %<.b d7>",amps_debug_console_channel
00011E2A 40E7                     M 	move.w	sr,-(sp)
00011E2C                          M 	__fstring_generateargumentscode	"Invalid command in queue: %<.b d7>"
00011E2C =0000001B                M 	__pos:	set instr("Invalid command in queue: %<.b d7>",'%<')
00011E2C =00000000                M 	__stack:set	0
00011E2C =00000000                M 	__sp:	set 0
00011E2C                          M 	while	(__pos)
00011E2C =00000022                M 	__endpos:	set instr(__pos+1,"Invalid command in queue: %<.b d7>",'>')
00011E2C =00000000                M 	__midpos:	set instr(__pos+5,"Invalid command in queue: %<.b d7>",' ')
00011E2C =00000022                M 	__midpos:	= __endpos
00011E2C                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid command in queue: %<.b d7>"
00011E2C                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid command in queue: %<.b d7>"
00011E2C                          M 	__operand:	substr __pos+1+1,__midpos-1,"Invalid command in queue: %<.b d7>"
00011E2C                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid command in queue: %<.b d7>"
00011E2C                          M 	pushp	"move.b d7,1(sp)"
00011E2C                          M 	pushp	"subq.w	#2, sp"
00011E2C =00000002                M 	__stack:	= __stack+2
00011E2C =00000002                M 	__sp:	= __sp+2
00011E2C =00000000                M 	__pos:	set instr(__pos+1,"Invalid command in queue: %<.b d7>",'%<')
00011E2C                          M 	rept	__stack
00011E2C                          M 	popp	__command
00011E2C 554F                     M 	subq.w	#2,sp
00011E2E                          M 	popp	__command
00011E2E 1F47 0001                M 	move.b	d7,1(sp)
00011E32 4EB9 0000 0000           M 	jsr	errorhandler
00011E38                          M 	__fstring_generatedecodedstring	"Invalid command in queue: %<.b d7>"
00011E38 =00000001                M 	__lpos:	set 1
00011E38 =0000001B                M 	__pos:	set instr("Invalid command in queue: %<.b d7>",'%<')
00011E38                          M 	while	(__pos)
00011E38                          M 	__substr:	substr __lpos,__pos-1,"Invalid command in queue: %<.b d7>"
00011E38 496E 7661 6C69 6420 636F+M 	dc.b	"Invalid command in queue: "
00011E52 =00000022                M 	__endpos:	set instr(__pos+1,"Invalid command in queue: %<.b d7>",'>')
00011E52 =00000000                M 	__midpos:	set instr(__pos+5,"Invalid command in queue: %<.b d7>",' ')
00011E52 =00000022                M 	__midpos:	= __endpos
00011E52                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid command in queue: %<.b d7>"
00011E52                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid command in queue: %<.b d7>"
00011E52                          M 	__param:	substr ,,"hex"
00011E52 80                       M 	dc.b	hex
00011E53 =00000023                M 	__lpos:	set __endpos+1
00011E53 =00000000                M 	__pos:	set instr(__pos+1,"Invalid command in queue: %<.b d7>",'%<')
00011E53                          M 	__substr:	substr __lpos,,"Invalid command in queue: %<.b d7>"
00011E53                          M 	dc.b	""
00011E53 00                       M 	dc.b	0
00011E54 00                       M 	dc.b	+_eh_enter_console|(((*&1)^1)*_eh_align_offset)
00011E56 00                       M 	even
00011E56 4EF9 0001 0000           M 	jmp	amps_debug_console_channel
00011E5C                          M 	even
00011E5C                          M .ok
00011E5C                            
00011E5C DE47                       		add.w	d7,d7			; quadruple ID
00011E5E DE47                       		add.w	d7,d7			; because each entry is 1 long word
00011E60 4EFB 7000                  		jmp	dSoundCommands-4(pc,d7.w); jump to appropriate command handler
00011E64                            
00011E64                            ; ---------------------------------------------------------------------------
00011E64                            dSoundCommands:
00011E64 6000 0000                  		bra.w	dPlaySnd_Reset		; 01 - Reset underwater and speed shoes flags, update volume
00011E68 6000 0000                  		bra.w	dPlaySnd_FadeOut	; 02 - Initialize a music fade out
00011E6C 6000 0000                  		bra.w	dPlaySnd_Stop		; 03 - Stop all music
00011E70 6000 0000                  		bra.w	dPlaySnd_ShoesOn	; 04 - Enable speed shoes mode
00011E74 6000 0000                  		bra.w	dPlaySnd_ShoesOff	; 05 - Disable speed shoes mode
00011E78 6000 0000                  		bra.w	dPlaySnd_ToWater	; 06 - Enable underwater mode
00011E7C 6000 0000                  		bra.w	dPlaySnd_OutWater	; 07 - Disable underwater mode
00011E80 6000 FA14                  		bra.w	dPlaySnd_Pause		; 08 - Pause the sound driver
00011E84 6000 F9B0                  		bra.w	dPlaySnd_Unpause	; 09 - Unpause the sound driver
00011E88                            dSoundCommands_End:
00011E88                            ; ===========================================================================
00011E88                            ; ---------------------------------------------------------------------------
00011E88                            ; Commands for what to do after a volume fade
00011E88                            ; ---------------------------------------------------------------------------
00011E88                            
00011E88                            dFadeCommands:
00011E88 4E75                       		rts				; 80 - Do nothing
00011E8A 4E75                       		rts
00011E8C 6000                       .stop		bra.s	dPlaySnd_Stop		; 84 - Stop all music
00011E8E 4E75                       		rts
00011E90 6000 0000                  .resv		bra.w	dResetVolume		; 88 - Reset volume and update
00011E94 61FA                       		bsr.s	.resv			; 8C - Stop music playing and reset volume
00011E96 60F4                       		bra.s	.stop
00011E98                            ; ===========================================================================
00011E98                            ; ---------------------------------------------------------------------------
00011E98                            ; Stop music and SFX from playing (This code clears SFX RAM also)
00011E98                            ; ---------------------------------------------------------------------------
00011E98                            
00011E98                            dPlaySnd_Stop:
00011E98                            ; Not needed,	moveq	#$2B,d0			; YM command: DAC Enable
00011E98                            ; Dual PCM does	moveq	#$FFFFFF80,d1		; FM6 acts as DAC
00011E98                            ; this for us	jsr	WriteYM_Pt1(pc)		; write to YM global register
00011E98                            
00011E98 7027                       		moveq	#$27,d0			; YM command: Channel 3 Mode & Timer Control
00011E9A 7200                       		moveq	#0,d1			; disable timers and channel 3 special mode
00011E9C 4EBA 0000                  		jsr	WriteYM_Pt1(pc)		; write to YM global register
00011EA0                            
00011EA0 43F8 82D6                  		lea	mSFXDAC1.w,a1		; prepare SFX DAC 1 to start clearing fromn
00011EA4                            
00011EA4                            	rept (mSize-mSFXDAC1)/4
00011EA4                            		clr.l	(a1)+			; clear entire SFX RAM (others done below)
00011EA4                            	endr
00011EA4 4299                     M 	clr.l	(a1)+
00011EA6 4299                     M 	clr.l	(a1)+
00011EA8 4299                     M 	clr.l	(a1)+
00011EAA 4299                     M 	clr.l	(a1)+
00011EAC 4299                     M 	clr.l	(a1)+
00011EAE 4299                     M 	clr.l	(a1)+
00011EB0 4299                     M 	clr.l	(a1)+
00011EB2 4299                     M 	clr.l	(a1)+
00011EB4 4299                     M 	clr.l	(a1)+
00011EB6 4299                     M 	clr.l	(a1)+
00011EB8 4299                     M 	clr.l	(a1)+
00011EBA 4299                     M 	clr.l	(a1)+
00011EBC 4299                     M 	clr.l	(a1)+
00011EBE 4299                     M 	clr.l	(a1)+
00011EC0 4299                     M 	clr.l	(a1)+
00011EC2 4299                     M 	clr.l	(a1)+
00011EC4 4299                     M 	clr.l	(a1)+
00011EC6 4299                     M 	clr.l	(a1)+
00011EC8 4299                     M 	clr.l	(a1)+
00011ECA 4299                     M 	clr.l	(a1)+
00011ECC 4299                     M 	clr.l	(a1)+
00011ECE 4299                     M 	clr.l	(a1)+
00011ED0 4299                     M 	clr.l	(a1)+
00011ED2 4299                     M 	clr.l	(a1)+
00011ED4 4299                     M 	clr.l	(a1)+
00011ED6 4299                     M 	clr.l	(a1)+
00011ED8 4299                     M 	clr.l	(a1)+
00011EDA 4299                     M 	clr.l	(a1)+
00011EDC 4299                     M 	clr.l	(a1)+
00011EDE 4299                     M 	clr.l	(a1)+
00011EE0 4299                     M 	clr.l	(a1)+
00011EE2 4299                     M 	clr.l	(a1)+
00011EE4 4299                     M 	clr.l	(a1)+
00011EE6 4299                     M 	clr.l	(a1)+
00011EE8 4299                     M 	clr.l	(a1)+
00011EEA 4299                     M 	clr.l	(a1)+
00011EEC 4299                     M 	clr.l	(a1)+
00011EEE 4299                     M 	clr.l	(a1)+
00011EF0 4299                     M 	clr.l	(a1)+
00011EF2 4299                     M 	clr.l	(a1)+
00011EF4 4299                     M 	clr.l	(a1)+
00011EF6 4299                     M 	clr.l	(a1)+
00011EF8 4299                     M 	clr.l	(a1)+
00011EFA 4299                     M 	clr.l	(a1)+
00011EFC 4299                     M 	clr.l	(a1)+
00011EFE 4299                     M 	clr.l	(a1)+
00011F00 4299                     M 	clr.l	(a1)+
00011F02 4299                     M 	clr.l	(a1)+
00011F04 4299                     M 	clr.l	(a1)+
00011F06                            
00011F06 4251                       		clr.w	(a1)			; if there is an extra word, clear it too
00011F08                            	; continue straight to stopping music
00011F08                            ; ===========================================================================
00011F08                            ; ---------------------------------------------------------------------------
00011F08                            ; Stop music from playing, reset driver memory and mute hardware
00011F08                            ; ---------------------------------------------------------------------------
00011F08                            
00011F08                            dStopMusic:
00011F08 43F8 8100                  		lea	mFlags.w,a1		; load driver RAM start to a1
00011F0C 3611                       		move.w	(a1),d3			; load driver flags and PAL counter to d3
00011F0E 1838 811A                  		move.b	mMasterVolDAC.w,d4	; load DAC master volume to d4
00011F12 2A38 8116                  		move.l	mQueue.w,d5		; load sound queue and PSG master volume to d5
00011F16 4CF8 0007 8106             		movem.l	mComm.w,d0-d2		; load communications bytes, FM master volume and fade address to d0-d2
00011F1C                            
00011F1C                            	rept (mSFXDAC1-mFlags)/4
00011F1C                            		clr.l	(a1)+			; clear driver and music channel memory
00011F1C                            	endr
00011F1C 4299                     M 	clr.l	(a1)+
00011F1E 4299                     M 	clr.l	(a1)+
00011F20 4299                     M 	clr.l	(a1)+
00011F22 4299                     M 	clr.l	(a1)+
00011F24 4299                     M 	clr.l	(a1)+
00011F26 4299                     M 	clr.l	(a1)+
00011F28 4299                     M 	clr.l	(a1)+
00011F2A 4299                     M 	clr.l	(a1)+
00011F2C 4299                     M 	clr.l	(a1)+
00011F2E 4299                     M 	clr.l	(a1)+
00011F30 4299                     M 	clr.l	(a1)+
00011F32 4299                     M 	clr.l	(a1)+
00011F34 4299                     M 	clr.l	(a1)+
00011F36 4299                     M 	clr.l	(a1)+
00011F38 4299                     M 	clr.l	(a1)+
00011F3A 4299                     M 	clr.l	(a1)+
00011F3C 4299                     M 	clr.l	(a1)+
00011F3E 4299                     M 	clr.l	(a1)+
00011F40 4299                     M 	clr.l	(a1)+
00011F42 4299                     M 	clr.l	(a1)+
00011F44 4299                     M 	clr.l	(a1)+
00011F46 4299                     M 	clr.l	(a1)+
00011F48 4299                     M 	clr.l	(a1)+
00011F4A 4299                     M 	clr.l	(a1)+
00011F4C 4299                     M 	clr.l	(a1)+
00011F4E 4299                     M 	clr.l	(a1)+
00011F50 4299                     M 	clr.l	(a1)+
00011F52 4299                     M 	clr.l	(a1)+
00011F54 4299                     M 	clr.l	(a1)+
00011F56 4299                     M 	clr.l	(a1)+
00011F58 4299                     M 	clr.l	(a1)+
00011F5A 4299                     M 	clr.l	(a1)+
00011F5C 4299                     M 	clr.l	(a1)+
00011F5E 4299                     M 	clr.l	(a1)+
00011F60 4299                     M 	clr.l	(a1)+
00011F62 4299                     M 	clr.l	(a1)+
00011F64 4299                     M 	clr.l	(a1)+
00011F66 4299                     M 	clr.l	(a1)+
00011F68 4299                     M 	clr.l	(a1)+
00011F6A 4299                     M 	clr.l	(a1)+
00011F6C 4299                     M 	clr.l	(a1)+
00011F6E 4299                     M 	clr.l	(a1)+
00011F70 4299                     M 	clr.l	(a1)+
00011F72 4299                     M 	clr.l	(a1)+
00011F74 4299                     M 	clr.l	(a1)+
00011F76 4299                     M 	clr.l	(a1)+
00011F78 4299                     M 	clr.l	(a1)+
00011F7A 4299                     M 	clr.l	(a1)+
00011F7C 4299                     M 	clr.l	(a1)+
00011F7E 4299                     M 	clr.l	(a1)+
00011F80 4299                     M 	clr.l	(a1)+
00011F82 4299                     M 	clr.l	(a1)+
00011F84 4299                     M 	clr.l	(a1)+
00011F86 4299                     M 	clr.l	(a1)+
00011F88 4299                     M 	clr.l	(a1)+
00011F8A 4299                     M 	clr.l	(a1)+
00011F8C 4299                     M 	clr.l	(a1)+
00011F8E 4299                     M 	clr.l	(a1)+
00011F90 4299                     M 	clr.l	(a1)+
00011F92 4299                     M 	clr.l	(a1)+
00011F94 4299                     M 	clr.l	(a1)+
00011F96 4299                     M 	clr.l	(a1)+
00011F98 4299                     M 	clr.l	(a1)+
00011F9A 4299                     M 	clr.l	(a1)+
00011F9C 4299                     M 	clr.l	(a1)+
00011F9E 4299                     M 	clr.l	(a1)+
00011FA0 4299                     M 	clr.l	(a1)+
00011FA2 4299                     M 	clr.l	(a1)+
00011FA4 4299                     M 	clr.l	(a1)+
00011FA6 4299                     M 	clr.l	(a1)+
00011FA8 4299                     M 	clr.l	(a1)+
00011FAA 4299                     M 	clr.l	(a1)+
00011FAC 4299                     M 	clr.l	(a1)+
00011FAE 4299                     M 	clr.l	(a1)+
00011FB0 4299                     M 	clr.l	(a1)+
00011FB2 4299                     M 	clr.l	(a1)+
00011FB4 4299                     M 	clr.l	(a1)+
00011FB6 4299                     M 	clr.l	(a1)+
00011FB8 4299                     M 	clr.l	(a1)+
00011FBA 4299                     M 	clr.l	(a1)+
00011FBC 4299                     M 	clr.l	(a1)+
00011FBE 4299                     M 	clr.l	(a1)+
00011FC0 4299                     M 	clr.l	(a1)+
00011FC2 4299                     M 	clr.l	(a1)+
00011FC4 4299                     M 	clr.l	(a1)+
00011FC6 4299                     M 	clr.l	(a1)+
00011FC8 4299                     M 	clr.l	(a1)+
00011FCA 4299                     M 	clr.l	(a1)+
00011FCC 4299                     M 	clr.l	(a1)+
00011FCE 4299                     M 	clr.l	(a1)+
00011FD0 4299                     M 	clr.l	(a1)+
00011FD2 4299                     M 	clr.l	(a1)+
00011FD4 4299                     M 	clr.l	(a1)+
00011FD6 4299                     M 	clr.l	(a1)+
00011FD8 4299                     M 	clr.l	(a1)+
00011FDA 4299                     M 	clr.l	(a1)+
00011FDC 4299                     M 	clr.l	(a1)+
00011FDE 4299                     M 	clr.l	(a1)+
00011FE0 4299                     M 	clr.l	(a1)+
00011FE2 4299                     M 	clr.l	(a1)+
00011FE4 4299                     M 	clr.l	(a1)+
00011FE6 4299                     M 	clr.l	(a1)+
00011FE8 4299                     M 	clr.l	(a1)+
00011FEA 4299                     M 	clr.l	(a1)+
00011FEC 4299                     M 	clr.l	(a1)+
00011FEE 4299                     M 	clr.l	(a1)+
00011FF0 4299                     M 	clr.l	(a1)+
00011FF2 4299                     M 	clr.l	(a1)+
00011FF4 4299                     M 	clr.l	(a1)+
00011FF6 4299                     M 	clr.l	(a1)+
00011FF8 4299                     M 	clr.l	(a1)+
00011FFA 4299                     M 	clr.l	(a1)+
00011FFC 4299                     M 	clr.l	(a1)+
00011FFE 4299                     M 	clr.l	(a1)+
00012000 4299                     M 	clr.l	(a1)+
00012002 4299                     M 	clr.l	(a1)+
00012004 4299                     M 	clr.l	(a1)+
00012006                            
00012006 4251                       		clr.w	(a1)			; if there is an extra word, clear it too
00012008                            
00012008 31C3 8100                  		move.w	d3,mFlags.w		; save driver flags and PAL counter
0001200C 11C4 811A                  		move.b	d4,mMasterVolDAC.w	; save DAC master volume
00012010 21C5 8116                  		move.l	d5,mQueue.w		; save sound queue and PSG master volume
00012014 48F8 0007 8106             		movem.l	d0-d2,mComm.w		; save communications bytes, FM master volume and fade address
0001201A                            
0001201A 6100                       		bsr.s	dMutePSG		; hardware mute PSG
0001201C 4EBA F8AC                  		jsr	dMuteDAC(pc)		; hardware mute DAC
00012020                            	; continue straight to hardware muting FM
00012020                            ; ===========================================================================
00012020                            ; ---------------------------------------------------------------------------
00012020                            ; Mute all FM channels
00012020                            ; ---------------------------------------------------------------------------
00012020                            
00012020                            dMuteFM:
00012020 7028                       		moveq	#$28,d0			; YM address: Key on/off
00012022 7602                       		moveq	#%00000010,d3		; turn keys off, and start from YM channel 3
00012024                            
00012024                            .noteoff
00012024 1203                       		move.b	d3,d1			; copy value into d1
00012026 4EBA 0000                  		jsr	WriteYM_Pt1(pc)		; write to part 1 channel
0001202A 5801                       		addq.b	#4,d1			; set this to part 2 channel
0001202C 4EBA 0000                  		jsr	WriteYM_Pt1(pc)		; write to part 2 channel
00012030 51CB FFF2                  		dbf	d3,.noteoff		; loop for all 3 channel groups
00012034                            
00012034 7040                       		moveq	#$40,d0			; YM command: Total Level Operator 1
00012036 727F                       		moveq	#$7F,d1			; set total level to $7F (silent)
00012038 7802                       		moveq	#3-1,d4			; prepare 3 groups of channels to d4
0001203A                            
0001203A                            .chloop
0001203A 7603                       		moveq	#4-1,d3			; prepare 4 operator writes per channel to d3
0001203C 7A0F                       		moveq	#$10-1,d5		; prepare the value for going to next channel to d5
0001203E                            
0001203E                            .oploop
0001203E 4EBA 0000                  		jsr	WriteYM_Pt1(pc)		; write to part 1 channel
00012042 4EBA 0000                  		jsr	WriteYM_Pt2(pc)		; write to part 2 channel
00012046 5840                       		addq.w	#4,d0			; go to next operator (1 2 3 4)
00012048 51CB FFF4                  		dbf	d3,.oploop		; repeat for each operator
0001204C                            
0001204C 9005                       		sub.b	d5,d0			; go to next FM channel
0001204E 51CC FFEA                  		dbf	d4,.chloop		; repeat for each channel
00012052 4E75                       		rts
00012054                            ; ===========================================================================
00012054                            ; ---------------------------------------------------------------------------
00012054                            ; Routine for muting all PSG channels
00012054                            ; ---------------------------------------------------------------------------
00012054                            
00012054                            dMutePSG:
00012054 43F9 00C0 0011             		lea	dPSG,a1			; load PSG data port address to a1
0001205A 12BC 009F                  		move.b	#ctPSG1|$1F,(a1)	; send volume mute command for PSG1 to PSG
0001205E 12BC 00BF                  		move.b	#ctPSG2|$1F,(a1)	; send volume mute command for PSG2 to PSG
00012062 12BC 00DF                  		move.b	#ctPSG3|$1F,(a1)	; send volume mute command for PSG3 to PSG
00012066 12BC 00FF                  		move.b	#ctPSG4|$1F,(a1)	; send volume mute command for PSG4 to PSG
0001206A 4E75                       		rts
0001206C                            ; ===========================================================================
0001206C                            ; ---------------------------------------------------------------------------
0001206C                            ; Normal fade out data
0001206C                            ; ---------------------------------------------------------------------------
0001206C                            
0001206C                            dFadeOutDataLog:
0001206C 0101 0002 0200 0204 0103+  	dc.b $01, $01, $00,  $02, $02, $00,  $02, $04, $01,  $03, $05, $01
00012078 0405 0104 0602 0507 0206+  	dc.b $04, $05, $01,  $04, $06, $02,  $05, $07, $02,  $06, $08, $02
00012084 0709 0309 0B03 0A0C 030C+  	dc.b $07, $09, $03,  $09, $0B, $03,  $0A, $0C, $03,  $0C, $0E, $03
00012090 0E10 0410 1104 1113 0414+  	dc.b $0E, $10, $04,  $10, $11, $04,  $11, $13, $04,  $14, $15, $05
0001209C 1618 051A 1C05 1C1F 0620+  	dc.b $16, $18, $05,  $1A, $1C, $05,  $1C, $1F, $06,  $20, $24, $06
000120A8 2228 0726 2E07 2C34 0830+  	dc.b $22, $28, $07,  $26, $2E, $07,  $2C, $34, $08,  $30, $39, $08
000120B4 343E 093C 440A 404C 0A46+  	dc.b $34, $3E, $09,  $3C, $44, $0A,  $40, $4C, $0A,  $46, $54, $0B
000120C0 4C5A 0C54 620D 5C6B 0D60+  	dc.b $4C, $5A, $0C,  $54, $62, $0D,  $5C, $6B, $0D,  $60, $76, $0E
000120CC 6C7C 0E74 7F0F 7F7F 0F8C   	dc.b $6C, $7C, $0E,  $74, $7F, $0F,  $7F, $7F, $0F,  fReset
000120D6                            
000120D6                            ;dFadeOutDataLinear:
000120D6                            ;	dc.b $01, $00, $00,  $02, $01, $00,  $02, $01, $01,  $03, $02, $01
000120D6                            ;	dc.b $04, $02, $01,  $04, $03, $02,  $05, $03, $02,  $06, $04, $02
000120D6                            ;	dc.b $07, $05, $03,  $09, $06, $03,  $0A, $08, $03,  $0C, $0A, $03
000120D6                            ;	dc.b $0E, $0D, $04,  $10, $0F, $04,  $11, $10, $04,  $14, $13, $05
000120D6                            ;	dc.b $16, $16, $05,  $1A, $1A, $05,  $1C, $1E, $06,  $20, $22, $06
000120D6                            ;	dc.b $22, $27, $07,  $26, $2A, $07,  $2C, $2E, $08,  $30, $34, $08
000120D6                            ;	dc.b $34, $39, $09,  $3C, $3E, $0A,  $40, $3F, $0A,  $46, $40, $0B
000120D6                            ;	dc.b $4C, $40, $0C,  $54, $40, $0D,  $5C, $40, $0D,  $60, $40, $0E
000120D6                            ;	dc.b $6C, $40, $0E,  $74, $40, $0F,  $7F, $40, $0F,  fReset
000120D6                            	even
000120D6                            ; ===========================================================================
000120D6                            ; ---------------------------------------------------------------------------
000120D6                            ; Subroutine for initializing a fade effect.
000120D6                            ; Since the driver allows for such an extensive and customizable
000120D6                            ; fading code, we may hit a snag if we use fades too fast. It is
000120D6                            ; possible, for example, to fade out, then in the middle of that,
000120D6                            ; start fading in. This would normally cause a quick jump in the
000120D6                            ; volume level from maybe half to completely mute. This routine
000120D6                            ; aims to combat this by actually searching for the closest FM
000120D6                            ; volume level in the fade program, and to start the new fade from
000120D6                            ; where that byte appears. This can alter how long a volume fade
000120D6                            ; lasts however, and if PSG and DAC volume are not correct faded,
000120D6                            ; it may still cause a jump in their volume (especially if only,
000120D6                            ; say, DAC fades volume). In the future, there might be a fix for
000120D6                            ; that.
000120D6                            ; ---------------------------------------------------------------------------
000120D6                            
000120D6                            dPlaySnd_FadeOut:
000120D6 43FA FF94                  		lea	dFadeOutDataLog(pc),a1	; prepare stock fade out program to a1
000120DA                            
000120DA                            dLoadFade:
000120DA 1038 810E                  		move.b	mMasterVolFM.w,d0	; load FM master volume to d0
000120DE 4A38 810F                  		tst.b	mFadeAddr+1.w		; check if a fade program is already executing
000120E2 6700                       		beq.s	.nofade			; if not, load fade as is
000120E4                            
000120E4 2449                       		move.l	a1,a2			; copy fade program address to a2
000120E6 74FF                       		moveq	#-1,d2			; prepare max byter difference
000120E8                            
000120E8                            .find
000120E8 1212                       		move.b	(a2),d1			; load the next FM volume from fade program
000120EA 6A00                       		bpl.s	.search			; branch if this is not a command
000120EC                            
000120EC                            .nofade
000120EC 21C9 810E                  		move.l	a1,mFadeAddr.w		; save new fade program address to memory
000120F0 11C0 810E                  		move.b	d0,mMasterVolFM.w	; save new FM master volume
000120F4 4E75                       		rts
000120F6                            
000120F6                            .search
000120F6 568A                       		addq.l	#3,a2			; skip over the current volume group
000120F8 9200                       		sub.b	d0,d1			; sub current FM volume from read volume
000120FA 6A00                       		bpl.s	.abs			; if positive, do not negate
000120FC 4401                       		neg.b	d1			; negative to positive
000120FE                            
000120FE                            .abs
000120FE B202                       		cmp.b	d2,d1			; check if volume difference was smaller than before
00012100 64E6                       		bhs.s	.find			; if not, read next group
00012102                            
00012102 1401                       		move.b	d1,d2			; else save the new difference
00012104 224A                       		move.l	a2,a1			; also save the fade program address where we found it
00012106 60E0                       		bra.s	.find			; loop through each group in the program
00012108                            ; ===========================================================================
00012108                            ; ---------------------------------------------------------------------------
00012108                            ; Routine for loading a volume filter into Dual PCM ROM.
00012108                            ; This routine will actually write the bank number the volume filter
00012108                            ; is in. This requires volume filters are aligned to Z80 banks, and
00012108                            ; just because we can, we write 9 bits (yeah its not necessary, but
00012108                            ; what the hell, you have to have fun sometimes!)
00012108                            ; ---------------------------------------------------------------------------
00012108                            
00012108                            dSetFilter:
00012108 43F9 0000 0000             		lea	dZ80+SV_VolumeBank,a1	; load volume bank instructions address to a1
0001210E 7274                       		moveq	#$74,d1			; prepare the "ld  (hl),h" instruction to d1
00012110 7408                       		moveq	#9-1,d2			; prepare number of instructions to write to d2
00012112                            	StopZ80					; wait for Z80 to stop
00012112 33FC 0100 00A1 1100      M 	move.w	#$100,$a11100
0001211A                          M .loop_459
0001211A 0839 0000 00A1 1100      M 	btst	#0,$a11100
00012122 66F6                     M 	bne.s	.loop_459
00012124                            ; ---------------------------------------------------------------------------
00012124                            ; addx in Motorola 68000 is much like adc in Z80. It allows us to add
00012124                            ; a register AND the carry to another register. What this means, is if
00012124                            ; we push 1 into carry (so, carry set), we will be loading $75 instead
00012124                            ; of $74 into the carry, making us able to switch between the Z80
00012124                            ; instructions  "ld  (hl),h" and "ld  (hl),l", which in turn allows
00012124                            ; Dual PCM to bank switch into the appropriate bank.
00012124                            ; ---------------------------------------------------------------------------
00012124                            
00012124                            .loop
00012124 7600                       		moveq	#0,d3			; prepare 0 into d3 (because of addx)
00012126 E248                       		lsr.w	#1,d0			; shift lsb into carry
00012128 D701                       		addx.b	d1,d3			; add instruction and carry into d3
0001212A                            
0001212A 12C3                       		move.b	d3,(a1)+		; save instruction into Z80 memory
0001212C 51CA FFF6                  		dbf	d2,.loop		; repeat for each bit/instruction
00012130                            	StartZ80				; enable Z80 execution
00012130 33FC 0000 00A1 1100      M 	move.w	#0,$a11100
00012138 4E75                       		rts
0001213A                            
0001213A                            ; ===========================================================================
0001213A                            ; ---------------------------------------------------------------------------
0001213A                            ; Routine for resetting master volumes, filters and disabling fading
0001213A                            ; ---------------------------------------------------------------------------
0001213A                            
0001213A                            dResetVolume:
0001213A 42B8 810E                  		clr.l	mFadeAddr.w		; stop fading program and reset FM master volume
0001213E 4238 8119                  		clr.b	mMasterVolPSG.w		; reset PSG master volume
00012142 4238 811A                  		clr.b	mMasterVolDAC.w		; reset DAC master volume
00012146 303C 0000                  		move.w	#fLog>>$0F,d0		; load value for linear filter
0001214A 61BC                       		bsr.s	dSetFilter		; load filter instructions
0001214C                            
0001214C                            dUpdateVolumeAll:
0001214C 6100                       		bsr.s	dReqVolUpFM		; request FM volume update
0001214E 8138 82D6                  		or.b	d0,mSFXDAC1.w		; request update for SFX DAC1 channel
00012152                            
00012152 =FFFF811E                  .ch =	mDAC1					; start at DAC1
00012152                            	rept Mus_DAC				; loop through all music DAC channels
00012152                            		or.b	d0,.ch.w		; request channel volume update
00012152                            .ch =		.ch+cSize			; go to next channel
00012152                            	endr
00012152 8138 811E                M 	or.b	d0,.ch.w
00012156 =FFFF814A                M .ch	=	.ch+csize
00012156 8138 814A                M 	or.b	d0,.ch.w
0001215A =FFFF8176                M .ch	=	.ch+csize
0001215A                            
0001215A =FFFF8252                  .ch =	mPSG1					; start at PSG1
0001215A                            	rept Mus_PSG				; loop through all music PSG channels
0001215A                            		or.b	d0,.ch.w		; request channel volume update
0001215A                            .ch =		.ch+cSize			; go to next channel
0001215A                            	endr
0001215A 8138 8252                M 	or.b	d0,.ch.w
0001215E =FFFF827E                M .ch	=	.ch+csize
0001215E 8138 827E                M 	or.b	d0,.ch.w
00012162 =FFFF82AA                M .ch	=	.ch+csize
00012162 8138 82AA                M 	or.b	d0,.ch.w
00012166 =FFFF82D6                M .ch	=	.ch+csize
00012166                            
00012166 =FFFF8346                  .ch =	mSFXPSG1				; start at SFX PSG1
00012166                            	rept SFX_PSG				; loop through all SFX PSG channels
00012166                            		or.b	d0,.ch.w		; request channel volume update
00012166                            .ch =		.ch+cSizeSFX			; go to next channel
00012166                            	endr
00012166 8138 8346                M 	or.b	d0,.ch.w
0001216A =FFFF8362                M .ch	=	.ch+csizesfx
0001216A 8138 8362                M 	or.b	d0,.ch.w
0001216E =FFFF837E                M .ch	=	.ch+csizesfx
0001216E 8138 837E                M 	or.b	d0,.ch.w
00012172 =FFFF839A                M .ch	=	.ch+csizesfx
00012172 4E75                       		rts
00012174                            ; ===========================================================================
00012174                            ; ---------------------------------------------------------------------------
00012174                            ; Enable speed shoes mode
00012174                            ; ---------------------------------------------------------------------------
00012174                            
00012174                            dPlaySnd_ShoesOn:
00012174 11F8 8113 8115             		move.b	mTempoSpeed.w,mTempoCur.w; set tempo accumulator/counter to speed shoes one
0001217A 11F8 8113 8114             		move.b	mTempoSpeed.w,mTempo.w	; set main tempor to speed shoes one
00012180 08F8 0001 8100             		bset	#mfbSpeed,mFlags.w	; enable speed shoes flag
00012186 4E75                       		rts
00012188                            ; ===========================================================================
00012188                            ; ---------------------------------------------------------------------------
00012188                            ; Reset music flags (underwater mode and tempo mode)
00012188                            ; ---------------------------------------------------------------------------
00012188                            
00012188                            dPlaySnd_Reset:
00012188 6100                       		bsr.s	dPlaySnd_OutWater	; gp reset underwater flag and request volume update
0001218A                            ; ===========================================================================
0001218A                            ; ---------------------------------------------------------------------------
0001218A                            ; Disable speed shoes mode
0001218A                            ; ---------------------------------------------------------------------------
0001218A                            
0001218A                            dPlaySnd_ShoesOff:
0001218A 11F8 8112 8115             		move.b	mTempoMain.w,mTempoCur.w; set tempo accumulator/counter to normal one
00012190 11F8 8112 8114             		move.b	mTempoMain.w,mTempo.w	; set main tempor to normal one
00012196 08B8 0001 8100             		bclr	#mfbSpeed,mFlags.w	; disable speed shoes flag
0001219C 4E75                       		rts
0001219E                            ; ===========================================================================
0001219E                            ; ---------------------------------------------------------------------------
0001219E                            ; Enable Underwater mode
0001219E                            ; ---------------------------------------------------------------------------
0001219E                            
0001219E                            dPlaySnd_ToWater:
0001219E 08F8 0002 8100             		bset	#mfbWater,mFlags.w	; enable underwater mode
000121A4 6000                       		bra.s	dReqVolUpFM		; request FM volume update
000121A6                            ; ===========================================================================
000121A6                            ; ---------------------------------------------------------------------------
000121A6                            ; Disable Underwater mode
000121A6                            ; ---------------------------------------------------------------------------
000121A6                            
000121A6                            dPlaySnd_OutWater:
000121A6 08B8 0002 8100             		bclr	#mfbWater,mFlags.w	; disable underwater mode
000121AC                            ; ===========================================================================
000121AC                            ; ---------------------------------------------------------------------------
000121AC                            ; force volume update on all FM channels
000121AC                            ; ---------------------------------------------------------------------------
000121AC                            
000121AC                            dReqVolUpFM;
000121AC 7020                       		moveq	#1<<cfbVol,d0		; prepare volume update flag to d0
000121AE =FFFF8176                  .ch =	mFM1					; start at FM1
000121AE                            	rept Mus_FM				; loop through all music FM channels
000121AE                            		or.b	d0,.ch.w		; request channel volume update
000121AE                            .ch =		.ch+cSize			; go to next channel
000121AE                            	endr
000121AE 8138 8176                M 	or.b	d0,.ch.w
000121B2 =FFFF81A2                M .ch	=	.ch+csize
000121B2 8138 81A2                M 	or.b	d0,.ch.w
000121B6 =FFFF81CE                M .ch	=	.ch+csize
000121B6 8138 81CE                M 	or.b	d0,.ch.w
000121BA =FFFF81FA                M .ch	=	.ch+csize
000121BA 8138 81FA                M 	or.b	d0,.ch.w
000121BE =FFFF8226                M .ch	=	.ch+csize
000121BE 8138 8226                M 	or.b	d0,.ch.w
000121C2 =FFFF8252                M .ch	=	.ch+csize
000121C2                            
000121C2 =FFFF82F2                  .ch =	mSFXFM3					; start at SFX FM3
000121C2                            	rept SFX_FM				; loop through all SFX FM channels
000121C2                            		or.b	d0,.ch.w		; request channel volume update
000121C2                            .ch =		.ch+cSizeSFX			; go to next channel
000121C2                            	endr
000121C2 8138 82F2                M 	or.b	d0,.ch.w
000121C6 =FFFF830E                M .ch	=	.ch+csizesfx
000121C6 8138 830E                M 	or.b	d0,.ch.w
000121CA =FFFF832A                M .ch	=	.ch+csizesfx
000121CA 8138 832A                M 	or.b	d0,.ch.w
000121CE =FFFF8346                M .ch	=	.ch+csizesfx
000121CE 4E75                       		rts
000121D0                            ; ===========================================================================
000121D0                            ; ---------------------------------------------------------------------------
000121D0                            ; Subroutine for updating Total Levels for FM channel
000121D0                            ; ---------------------------------------------------------------------------
000121D0                            
000121D0                            dUpdateVolFM:
000121D0 0815 0001                  		btst	#cfbInt,(a5)		; is the channel interrupted by SFX?
000121D4 6600                       		bne.s	locret_VolFM		; if yes, do not update
000121D6                            
000121D6 162D 0009                  		move.b	cVolume(a5),d3		; load FM channel volume to d3
000121DA D638 810E                  		add.b	mMasterVolFM.w,d3	; add master FM volume to d3
000121DE 6A00                       		bpl.s	.noover			; if volume did not overflow, skio
000121E0 767F                       		moveq	#$7F,d3			; force FM volume to silence
000121E2                            
000121E2                            .noover
000121E2 7000                       		moveq	#0,d0
000121E4 102D 000B                  		move.b	cVoice(a5),d0		; load FM voice ID of the channel to d0
000121E8 224E                       		move.l	a6,a1			; copy music voice table address to a1
000121EA                            
000121EA                            	dCALC_VOICE				; get address of the specific voice to a1
000121EA EB48                     M 	lsl.w	#5,d0
000121EC D2C0                     M 	add.w	d0,a1
000121EE 1011                       		move.b	(a1),d0			; load algorithm and feedback to d0
000121F0 7C00                       		moveq	#0,d6			; reset the modulator offset
000121F2                            
000121F2 0838 0002 8100             		btst	#mfbWater,mFlags.w	; check if underwater mode is enabled
000121F8 6700                       		beq.s	.uwdone			; if not, skip
000121FA 1C00                       		move.b	d0,d6			; copy algorithm and feedback to d6
000121FC 0246 0007                  		and.w	#7,d6			; mask out everything but the algorithm
00012200 D606                       		add.b	d6,d3			; add algorithm to Total Level carrier offset
00012202 1C00                       		move.b	d0,d6			; set algorithm and feedback to modulator offset
00012204                            
00012204                            .uwdone
00012204 7A03                       		moveq	#4-1,d5			; prepare 4 operators to d5
00012206 D2FC 0019                  		add.w	#VoiceTL,a1		; go to the Total Level offset of the voice
0001220A 45FA 0000                  		lea	dOpTLFM(pc),a2		; load Total Level address table to a3
0001220E                            
0001220E                            .tlloop
0001220E 101A                       		move.b	(a2)+,d0		; load YM address to write to
00012210 1219                       		move.b	(a1)+,d1		; get Total Level value from voice to d1
00012212 6A00                       		bpl.s	.noslot			; if slot operator bit was not set, branch
00012214                            
00012214 D203                       		add.b	d3,d1			; add carrier offset to loaded value
00012216 6B00                       		bmi.s	.slot			; if we did not overflow, branch
00012218 727F                       		moveq	#$7F,d1			; cap to silent volume
0001221A 6000                       		bra.s	.slot
0001221C                            
0001221C                            .noslot
0001221C D206                       		add.b	d6,d1			; add modulator offset to loaded value
0001221E                            .slot
0001221E 4EBA 0000                  		jsr	WriteChYM(pc)		; write Total Level to YM according to channel
00012222                            .ignore
00012222 51CD FFEA                  		dbf	d5,.tlloop		; repeat for each Total Level operator
00012226                            
00012226                            		AMPS_Debug_UpdVolFM		; check if the voice was valid
00012226 0C19 004E                M 	cmp.b	#'N',(a1)+
0001222A 6600                     M 	bne.s	.fail
0001222C 0C59 4154                M 	cmp.w	#'AT',(a1)+
00012230 6700                     M 	beq.s	.ok
00012232                          M .fail
00012232 4EB9 0001 0D28           M 	jsr	amps_debugr_updvolfm
00012238                          M .ok
00012238                            
00012238                            locret_VolFM:
00012238 4E75                       		rts
0001223A                            ; ===========================================================================
0001223A                            ; ---------------------------------------------------------------------------
0001223A                            ; YM2612 register update list
0001223A                            ; ---------------------------------------------------------------------------
0001223A                            
0001223A 3038 343C                  dOpListYM:	dc.b $30, $38, $34, $3C		; Detune, Multiple
0001223E 5058 545C                  		dc.b $50, $58, $54, $5C		; Rate Scale, Attack Rate
00012242 6068 646C                  dAMSEn_Ops:	dc.b $60, $68, $64, $6C		; Decay 1 Rate
00012246 7078 747C                  		dc.b $70, $78, $74, $7C		; Decay 2 Rate
0001224A 8088 848C                  		dc.b $80, $88, $84, $8C		; Decay 1 level, Release Rate
0001224E 9098 949C                  		dc.b $90, $98, $94, $9C		; SSG-EG
00012252 4048 444C                  dOpTLFM:	dc.b $40, $48, $44, $4C		; Total Level
00012256                            ; ===========================================================================
00012256                            ; ---------------------------------------------------------------------------
00012256                            ; Process SFX FM channels
00012256                            ; ---------------------------------------------------------------------------
00012256                            
00012256                            dAMPSdoFMSFX:
00012256 4DFA 0000                  		lea	VoiceBank(pc),a6	; load sound effects voice table into a6
0001225A 7E02                       		moveq	#SFX_FM-1,d7		; get total number of SFX FM channels to d7
0001225C                            
0001225C                            dAMPSnextFMSFX:
0001225C DAFC 001C                  		add.w	#cSizeSFX,a5		; go to the next channel
00012260 4A15                       		tst.b	(a5)			; check if channel is running a tracker
00012262 6A00 0000                  		bpl.w	.next			; if not, branch
00012266 532D 000C                  		subq.b	#1,cDuration(a5)	; decrease note duration
0001226A 6700 0000                  		beq.w	.update			; if timed out, update channel
0001226E                            
0001226E                            	dCalcFreq				; calculate channel base frequency
0001226E 1C2D 0007                M 	move.b	cdetune(a5),d6
00012272 4886                     M 	ext.w	d6
00012274 DC6D 000E                M 	add.w	cfreq(a5),d6
00012278                            	dModulate dAMPSdoPSGSFX, dAMPSnextFMSFX, 1; run modulation code
00012278 0815 0003                M 	btst	#cfbmod,(a5)
0001227C 6700                     M 	beq.s	.noret
0001227E 4A2D 0010                M 	tst.b	cmoddelay(a5)
00012282 6700                     M 	beq.s	.started
00012284 532D 0010                M 	subq.b	#1,cmoddelay(a5)
00012288                          M .noret
00012288 0895 0005                M 	bclr	#cfbvol,(a5)
0001228C 6700                     M 	beq.s	.noupdatevol
0001228E 4EBA FF40                M 	jsr	dupdatevolfm(pc)
00012292                          M 	.noupdatevol:
00012292 51CF FFC8                M 	dbf	d7,dampsnextfmsfx
00012296 6000 0000                M 	bra.w	dampsdopsgsfx
0001229A                          M .started
0001229A 532D 0016                M 	subq.b	#1,cmodspeed(a5)
0001229E 66E8                     M 	bne.s	.noret
000122A0 226D 0010                M 	movea.l	cmod(a5),a1
000122A4 1B69 0001 0016           M 	move.b	1(a1),cmodspeed(a5)
000122AA 4A2D 0018                M 	tst.b	cmodcount(a5)
000122AE 6600                     M 	bne.s	.norev
000122B0 1B69 0003 0018           M 	move.b	3(a1),cmodcount(a5)
000122B6 442D 0017                M 	neg.b	cmodstep(a5)
000122BA                          M .norev
000122BA 532D 0018                M 	subq.b	#1,cmodcount(a5)
000122BE 1A2D 0017                M 	move.b	cmodstep(a5),d5
000122C2 4885                     M 	ext.w	d5
000122C4 DA6D 0014                M 	add.w	cmodfreq(a5),d5
000122C8 3B45 0014                M 	move.w	d5,cmodfreq(a5)
000122CC DC45                     M 	add.w	d5,d6
000122CE 6100 0000                  		bsr.w	dUpdateFreqFM3		; send FM frequency to hardware
000122D2                            
000122D2 0895 0005                  		bclr	#cfbVol,(a5)		; check if volume update is needed and clear bit
000122D6 6700                       		beq.s	.next			; if not, skip
000122D8 4EBA FEF6                  		jsr	dUpdateVolFM(pc)	; update FM volume
000122DC                            
000122DC                            .next
000122DC 51CF FF7E                  		dbf	d7,dAMPSnextFMSFX	; make sure to run all the channels
000122E0 4EFA 0000                  		jmp	dAMPSdoPSGSFX(pc)	; after that, process SFX PSG channels
000122E4                            
000122E4                            .update
000122E4 0215 00FA                  		and.b	#$FF-(1<<cfbHold)-(1<<cfbRest),(a5); clear hold and rest flags
000122E8                            	dDoTracker				; process tracker
000122E8 286D 0002                M 	movea.l	cdata(a5),a4
000122EC                          M 	amps_debug_trackupd
000122EC 220C                     M 	move.l	a4,d1
000122EE 0281 00FF FFFF           M 	and.l	#$ffffff,d1
000122F4 0C81 0000 0000           M 	cmp.l	#sfxaddr,d1
000122FA 6500                     M 	blo.s	.fail2
000122FC 0C81 0000 0000           M 	cmp.l	#dacaddr,d1
00012302 6500                     M 	blo.s	.data
00012304                          M .fail2
00012304                          M 	raiseerror	"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",amps_debug_console_channel
00012304 487A FFFE                M 	pea	*(pc)
00012308                          M 	raiseerror2	"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",amps_debug_console_channel
00012308 40E7                     M 	move.w	sr,-(sp)
0001230A                          M 	__fstring_generateargumentscode	"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001230A =0000001A                M 	__pos:	set instr("Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
0001230A =00000000                M 	__stack:set	0
0001230A =00000000                M 	__sp:	set 0
0001230A                          M 	while	(__pos)
0001230A =00000021                M 	__endpos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'>')
0001230A =0000002D                M 	__midpos:	set instr(__pos+5,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",' ')
0001230A =00000021                M 	__midpos:	= __endpos
0001230A                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001230A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001230A                          M 	__operand:	substr __pos+1+1,__midpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001230A                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001230A                          M 	pushp	"move.l a4,-(sp)"
0001230A =00000001                M 	__stack:	= __stack+1
0001230A =00000004                M 	__sp:	= __sp+4
0001230A =00000022                M 	__pos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
0001230A =00000028                M 	__endpos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'>')
0001230A =0000002D                M 	__midpos:	set instr(__pos+5,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",' ')
0001230A =00000028                M 	__midpos:	= __endpos
0001230A                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001230A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001230A =00000029                M 	__pos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
0001230A =00000034                M 	__endpos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'>')
0001230A =00000030                M 	__midpos:	set instr(__pos+5,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",' ')
0001230A                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001230A                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001230A                          M 	__operand:	substr __pos+1+1,__midpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001230A                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001230A                          M 	pushp	"move.l a4,-(sp)"
0001230A =00000002                M 	__stack:	= __stack+1
0001230A =00000008                M 	__sp:	= __sp+4
0001230A =00000000                M 	__pos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
0001230A                          M 	rept	__stack
0001230A                          M 	popp	__command
0001230A 2F0C                     M 	move.l	a4,-(sp)
0001230C                          M 	popp	__command
0001230C 2F0C                     M 	move.l	a4,-(sp)
0001230E 4EB9 0000 0000           M 	jsr	errorhandler
00012314                          M 	__fstring_generatedecodedstring	"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012314 =00000001                M 	__lpos:	set 1
00012314 =0000001A                M 	__pos:	set instr("Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
00012314                          M 	while	(__pos)
00012314                          M 	__substr:	substr __lpos,__pos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012314 496E 7661 6C69 6420 7472+M 	dc.b	"Invalid tracker address: "
0001232D =00000021                M 	__endpos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'>')
0001232D =0000002D                M 	__midpos:	set instr(__pos+5,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",' ')
0001232D =00000021                M 	__midpos:	= __endpos
0001232D                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001232D                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001232D                          M 	__param:	substr ,,"hex"
0001232D 83                       M 	dc.b	hex|3
0001232E =00000022                M 	__lpos:	set __endpos+1
0001232E =00000022                M 	__pos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
0001232E                          M 	__substr:	substr __lpos,__pos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001232E                          M 	dc.b	""
0001232E =00000028                M 	__endpos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'>')
0001232E =0000002D                M 	__midpos:	set instr(__pos+5,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",' ')
0001232E =00000028                M 	__midpos:	= __endpos
0001232E                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001232E                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001232E E0                       M 	dc.b	endl
0001232F =00000029                M 	__lpos:	set __endpos+1
0001232F =00000029                M 	__pos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
0001232F                          M 	__substr:	substr __lpos,__pos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001232F                          M 	dc.b	""
0001232F =00000034                M 	__endpos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'>')
0001232F =00000030                M 	__midpos:	set instr(__pos+5,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",' ')
0001232F                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001232F                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001232F B3                       M 	dc.b	sym|3
00012330 =00000035                M 	__lpos:	set __endpos+1
00012330 =00000000                M 	__pos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
00012330                          M 	__substr:	substr __lpos,,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012330                          M 	dc.b	""
00012330 00                       M 	dc.b	0
00012331 00                       M 	dc.b	+_eh_enter_console|(((*&1)^1)*_eh_align_offset)
00012332                          M 	even
00012332 4EF9 0001 0000           M 	jmp	amps_debug_console_channel
00012338                          M 	even
00012338                          M .data
00012338 7A00                     M 	moveq	#0,d5
0001233A 1A1C                     M 	move.b	(a4)+,d5
0001233C 0C05 00E0                M 	cmpi.b	#$e0,d5
00012340 6500                     M 	blo.s	.notcomm
00012342 4EBA 0000                M 	jsr	dcommands(pc)
00012346 60F0                     M 	bra.s	.data
00012348 6092                     M 	bra.s	.next
0001234A                          M .notcomm
0001234A 4EBA 0000                  		jsr	dKeyOffFM2(pc)		; send key-off command to YM
0001234E 4A05                       		tst.b	d5			; check if note is being played
00012350 6A00                       		bpl.s	.timer			; if not, it must be a timer. branch
00012352                            
00012352 6100 0000                  		bsr.w	dGetFreqFM		; get frequency
00012356 1A1C                       		move.b	(a4)+,d5		; check next byte
00012358 6A00                       		bpl.s	.timer			; if positive, process a tiemr too
0001235A 534C                       		subq.w	#1,a4			; if not, then return back
0001235C 6000                       		bra.s	.pcnote			; do some extra clearing
0001235E                            
0001235E                            .timer
0001235E 4EBA F306                  		jsr	dCalcDuration(pc)	; calculate duration
00012362                            .pcnote
00012362                            	dProcNote 1, 0				; reset necessary channel memory
00012362 2B4C 0002                M 	move.l	a4,cdata(a5)
00012366 1B6D 000D 000C           M 	move.b	clastdur(a5),cduration(a5)
0001236C 0815 0002                M 	btst	#cfbhold,(a5)
00012370 6600                     M 	bne.s	.endpn
00012372 0815 0003                M 	btst	#cfbmod,(a5)
00012376 6700                     M 	beq.s	.endpn
00012378 226D 0010                M 	movea.l	cmod(a5),a1
0001237C 1B59 0010                M 	move.b	(a1)+,cmoddelay(a5)
00012380 1B59 0016                M 	move.b	(a1)+,cmodspeed(a5)
00012384 1B59 0017                M 	move.b	(a1)+,cmodstep(a5)
00012388 1011                     M 	move.b	(a1),d0
0001238A E208                     M 	lsr.b	#1,d0
0001238C 1B40 0018                M 	move.b	d0,cmodcount(a5)
00012390 426D 0014                M 	clr.w	cmodfreq(a5)
00012394                          M .endpn
00012394 6100 0000                  		bsr.w	dUpdateFreqFM		; send FM frequency to hardware
00012398                            	dKeyOnFM 1				; send key-on command to YM
00012398 0815 0002                M 	btst	#cfbhold,(a5)
0001239C 6600                     M 	bne.s	.k
0001239E 0815 0000                M 	btst	#cfbrest,(a5)
000123A2 6600                     M 	bne.s	.k
000123A4 7028                     M 	moveq	#$28,d0
000123A6 122D 0001                M 	move.b	ctype(a5),d1
000123AA 0001 00F0                M 	ori.b	#$f0,d1
000123AE 6100 0000                M 	bsr.w	writeym_pt1
000123B2                          M .k
000123B2                            
000123B2 0895 0005                  		bclr	#cfbVol,(a5)		; check if volume update is needed and clear bit
000123B6 6700                       		beq.s	.noupdate		; if not, branch
000123B8 4EBA FE16                  		jsr	dUpdateVolFM(pc)	; update FM volume
000123BC                            
000123BC 51CF FE9E                  .noupdate	dbf	d7,dAMPSnextFMSFX	; make sure to run all the channels
000123C0 4EFA 0000                  		jmp	dAMPSdoPSGSFX(pc)	; after that, process SFX PSG channels
000123C4                            ; ===========================================================================
000123C4                            ; ---------------------------------------------------------------------------
000123C4                            ; Process music FM channels
000123C4                            ; ---------------------------------------------------------------------------
000123C4                            
000123C4                            dAMPSdoFM:
000123C4 2C78 8102                  		move.l	mVctMus.w,a6		; load music voice table into a6
000123C8 7E04                       		moveq	#Mus_FM-1,d7		; get total number of music FM channels to d7
000123CA                            
000123CA                            dAMPSnextFM:
000123CA DAFC 002C                  		add.w	#cSize,a5		; go to the next channel
000123CE 4A15                       		tst.b	(a5)			; check if channel is running a tracker
000123D0 6A00 0000                  		bpl.w	.next			; if not, branch
000123D4 532D 000C                  		subq.b	#1,cDuration(a5)	; decrease note duration
000123D8 6700 0000                  		beq.w	.update			; if timed out, update channel
000123DC                            
000123DC                            	dNoteToutFM.w				; handle FM-specific note timeout behavior
000123DC                          M 	dnotetouthandler
000123DC 4A2D 001C                M 	tst.b	cnotetimecur(a5)
000123E0 6700                     M 	beq.s	.endt
000123E2 532D 001C                M 	subq.b	#1,cnotetimecur(a5)
000123E6 6600                     M 	bne.s	.endt
000123E8 08D5 0000                M 	bset	#cfbrest,(a5)
000123EC 6100 0000                M 	bsr.w	dkeyofffm
000123F0 6000 0000                M 	bra.w	.next
000123F4                          M .endt
000123F4                            	dCalcFreq				; calculate channel base frequency
000123F4 1C2D 0007                M 	move.b	cdetune(a5),d6
000123F8 4886                     M 	ext.w	d6
000123FA DC6D 000E                M 	add.w	cfreq(a5),d6
000123FE                            	dModulate dAMPSdoPSG, dAMPSnextFM, 0	; run modulation code
000123FE 0815 0003                M 	btst	#cfbmod,(a5)
00012402 6700                     M 	beq.s	.noret
00012404 4A2D 0010                M 	tst.b	cmoddelay(a5)
00012408 6700                     M 	beq.s	.started
0001240A 532D 0010                M 	subq.b	#1,cmoddelay(a5)
0001240E                          M .noret
0001240E 0895 0005                M 	bclr	#cfbvol,(a5)
00012412 6700                     M 	beq.s	.noupdatevol
00012414 4EBA FDBA                M 	jsr	dupdatevolfm(pc)
00012418                          M 	.noupdatevol:
00012418 51CF FFB0                M 	dbf	d7,dampsnextfm
0001241C 6000 0000                M 	bra.w	dampsdopsg
00012420                          M .started
00012420 532D 0016                M 	subq.b	#1,cmodspeed(a5)
00012424 66E8                     M 	bne.s	.noret
00012426 226D 0010                M 	movea.l	cmod(a5),a1
0001242A 1B69 0001 0016           M 	move.b	1(a1),cmodspeed(a5)
00012430 4A2D 0018                M 	tst.b	cmodcount(a5)
00012434 6600                     M 	bne.s	.norev
00012436 1B69 0003 0018           M 	move.b	3(a1),cmodcount(a5)
0001243C 442D 0017                M 	neg.b	cmodstep(a5)
00012440                          M .norev
00012440 532D 0018                M 	subq.b	#1,cmodcount(a5)
00012444 1A2D 0017                M 	move.b	cmodstep(a5),d5
00012448 4885                     M 	ext.w	d5
0001244A DA6D 0014                M 	add.w	cmodfreq(a5),d5
0001244E 3B45 0014                M 	move.w	d5,cmodfreq(a5)
00012452 DC45                     M 	add.w	d5,d6
00012454 6100 0000                  		bsr.w	dUpdateFreqFM2		; send FM frequency to hardware
00012458                            
00012458 0895 0005                  		bclr	#cfbVol,(a5)		; check if volume update is needed and clear bit
0001245C 6700                       		beq.s	.next			; if not, skip
0001245E 4EBA FD70                  		jsr	dUpdateVolFM(pc)	; update FM volume
00012462                            
00012462                            .next
00012462 51CF FF66                  		dbf	d7,dAMPSnextFM		; make sure to run all the channels
00012466 4EFA 0000                  		jmp	dAMPSdoPSG(pc)		; after that, process music PSG channels
0001246A                            
0001246A                            .update
0001246A 0215 00FA                  		and.b	#$FF-(1<<cfbHold)-(1<<cfbRest),(a5); clear hold and rest flags
0001246E                            	dDoTracker				; process tracker
0001246E 286D 0002                M 	movea.l	cdata(a5),a4
00012472                          M 	amps_debug_trackupd
00012472 220C                     M 	move.l	a4,d1
00012474 0281 00FF FFFF           M 	and.l	#$ffffff,d1
0001247A 0C81 0000 0000           M 	cmp.l	#sfxaddr,d1
00012480 6500                     M 	blo.s	.fail2
00012482 0C81 0000 0000           M 	cmp.l	#dacaddr,d1
00012488 6500                     M 	blo.s	.data
0001248A                          M .fail2
0001248A                          M 	raiseerror	"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",amps_debug_console_channel
0001248A 487A FFFE                M 	pea	*(pc)
0001248E                          M 	raiseerror2	"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",amps_debug_console_channel
0001248E 40E7                     M 	move.w	sr,-(sp)
00012490                          M 	__fstring_generateargumentscode	"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012490 =0000001A                M 	__pos:	set instr("Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
00012490 =00000000                M 	__stack:set	0
00012490 =00000000                M 	__sp:	set 0
00012490                          M 	while	(__pos)
00012490 =00000021                M 	__endpos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'>')
00012490 =0000002D                M 	__midpos:	set instr(__pos+5,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",' ')
00012490 =00000021                M 	__midpos:	= __endpos
00012490                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012490                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012490                          M 	__operand:	substr __pos+1+1,__midpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012490                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012490                          M 	pushp	"move.l a4,-(sp)"
00012490 =00000001                M 	__stack:	= __stack+1
00012490 =00000004                M 	__sp:	= __sp+4
00012490 =00000022                M 	__pos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
00012490 =00000028                M 	__endpos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'>')
00012490 =0000002D                M 	__midpos:	set instr(__pos+5,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",' ')
00012490 =00000028                M 	__midpos:	= __endpos
00012490                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012490                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012490 =00000029                M 	__pos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
00012490 =00000034                M 	__endpos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'>')
00012490 =00000030                M 	__midpos:	set instr(__pos+5,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",' ')
00012490                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012490                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012490                          M 	__operand:	substr __pos+1+1,__midpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012490                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012490                          M 	pushp	"move.l a4,-(sp)"
00012490 =00000002                M 	__stack:	= __stack+1
00012490 =00000008                M 	__sp:	= __sp+4
00012490 =00000000                M 	__pos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
00012490                          M 	rept	__stack
00012490                          M 	popp	__command
00012490 2F0C                     M 	move.l	a4,-(sp)
00012492                          M 	popp	__command
00012492 2F0C                     M 	move.l	a4,-(sp)
00012494 4EB9 0000 0000           M 	jsr	errorhandler
0001249A                          M 	__fstring_generatedecodedstring	"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001249A =00000001                M 	__lpos:	set 1
0001249A =0000001A                M 	__pos:	set instr("Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
0001249A                          M 	while	(__pos)
0001249A                          M 	__substr:	substr __lpos,__pos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
0001249A 496E 7661 6C69 6420 7472+M 	dc.b	"Invalid tracker address: "
000124B3 =00000021                M 	__endpos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'>')
000124B3 =0000002D                M 	__midpos:	set instr(__pos+5,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",' ')
000124B3 =00000021                M 	__midpos:	= __endpos
000124B3                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
000124B3                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
000124B3                          M 	__param:	substr ,,"hex"
000124B3 83                       M 	dc.b	hex|3
000124B4 =00000022                M 	__lpos:	set __endpos+1
000124B4 =00000022                M 	__pos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
000124B4                          M 	__substr:	substr __lpos,__pos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
000124B4                          M 	dc.b	""
000124B4 =00000028                M 	__endpos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'>')
000124B4 =0000002D                M 	__midpos:	set instr(__pos+5,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",' ')
000124B4 =00000028                M 	__midpos:	= __endpos
000124B4                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
000124B4                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
000124B4 E0                       M 	dc.b	endl
000124B5 =00000029                M 	__lpos:	set __endpos+1
000124B5 =00000029                M 	__pos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
000124B5                          M 	__substr:	substr __lpos,__pos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
000124B5                          M 	dc.b	""
000124B5 =00000034                M 	__endpos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'>')
000124B5 =00000030                M 	__midpos:	set instr(__pos+5,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",' ')
000124B5                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
000124B5                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
000124B5 B3                       M 	dc.b	sym|3
000124B6 =00000035                M 	__lpos:	set __endpos+1
000124B6 =00000000                M 	__pos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
000124B6                          M 	__substr:	substr __lpos,,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
000124B6                          M 	dc.b	""
000124B6 00                       M 	dc.b	0
000124B7 00                       M 	dc.b	+_eh_enter_console|(((*&1)^1)*_eh_align_offset)
000124B8                          M 	even
000124B8 4EF9 0001 0000           M 	jmp	amps_debug_console_channel
000124BE                          M 	even
000124BE                          M .data
000124BE 7A00                     M 	moveq	#0,d5
000124C0 1A1C                     M 	move.b	(a4)+,d5
000124C2 0C05 00E0                M 	cmpi.b	#$e0,d5
000124C6 6500                     M 	blo.s	.notcomm
000124C8 4EBA 0000                M 	jsr	dcommands(pc)
000124CC 60F0                     M 	bra.s	.data
000124CE 6092                     M 	bra.s	.next
000124D0                          M .notcomm
000124D0 4EBA 0000                  		jsr	dKeyOffFM(pc)		; send key-off command to YM
000124D4 4A05                       		tst.b	d5			; check if note is being played
000124D6 6A00                       		bpl.s	.timer			; if not, it must be a timer. branch
000124D8                            
000124D8 6100 0000                  		bsr.w	dGetFreqFM		; get frequency
000124DC 1A1C                       		move.b	(a4)+,d5		; check next byte
000124DE 6A00                       		bpl.s	.timer			; if positive, process a tiemr too
000124E0 534C                       		subq.w	#1,a4			; if not, then return back
000124E2 6000                       		bra.s	.pcnote			; do some extra clearing
000124E4                            
000124E4                            .timer
000124E4 4EBA F180                  		jsr	dCalcDuration(pc)	; calculate duration
000124E8                            .pcnote
000124E8                            	dProcNote 0, 0				; reset necessary channel memory
000124E8 2B4C 0002                M 	move.l	a4,cdata(a5)
000124EC 1B6D 000D 000C           M 	move.b	clastdur(a5),cduration(a5)
000124F2 0815 0002                M 	btst	#cfbhold,(a5)
000124F6 6600                     M 	bne.s	.endpn
000124F8 1B6D 001D 001C           M 	move.b	cnotetimemain(a5),cnotetimecur(a5)
000124FE 0815 0003                M 	btst	#cfbmod,(a5)
00012502 6700                     M 	beq.s	.endpn
00012504 226D 0010                M 	movea.l	cmod(a5),a1
00012508 1B59 0010                M 	move.b	(a1)+,cmoddelay(a5)
0001250C 1B59 0016                M 	move.b	(a1)+,cmodspeed(a5)
00012510 1B59 0017                M 	move.b	(a1)+,cmodstep(a5)
00012514 1011                     M 	move.b	(a1),d0
00012516 E208                     M 	lsr.b	#1,d0
00012518 1B40 0018                M 	move.b	d0,cmodcount(a5)
0001251C 426D 0014                M 	clr.w	cmodfreq(a5)
00012520                          M .endpn
00012520 6100                       		bsr.s	dUpdateFreqFM		; send FM frequency to hardware
00012522                            	dKeyOnFM				; send key-on command to YM
00012522 0815 0002                M 	btst	#cfbhold,(a5)
00012526 6600                     M 	bne.s	.k
00012528 0815 0000                M 	btst	#cfbrest,(a5)
0001252C 6600                     M 	bne.s	.k
0001252E 0815 0001                M 	btst	#cfbint,(a5)
00012532 6600                     M 	bne.s	.k
00012534 7028                     M 	moveq	#$28,d0
00012536 122D 0001                M 	move.b	ctype(a5),d1
0001253A 0001 00F0                M 	ori.b	#$f0,d1
0001253E 6100 0000                M 	bsr.w	writeym_pt1
00012542                          M .k
00012542                            
00012542 0895 0005                  		bclr	#cfbVol,(a5)		; check if volume update is needed and clear bit
00012546 6700                       		beq.s	.noupdate		; if not, branch
00012548 4EBA FC86                  		jsr	dUpdateVolFM(pc)	; update FM volume
0001254C                            
0001254C                            .noupdate
0001254C 51CF FE7C                  		dbf	d7,dAMPSnextFM		; make sure to run all the channels
00012550 4EFA 0000                  		jmp	dAMPSdoPSG(pc)		; after that, process music PSG channels
00012554                            ; ===========================================================================
00012554                            ; ---------------------------------------------------------------------------
00012554                            ; Write FM frequency to Dual PCM YMCue
00012554                            ; ---------------------------------------------------------------------------
00012554                            
00012554                            dUpdateFreqFM:
00012554 0815 0000                  		btst	#cfbRest,(a5)		; is this channel resting
00012558 6600                       		bne.s	locret_UpdFreqFM	; if is, skip
0001255A 3C2D 000E                  		move.w	cFreq(a5),d6		; load channel base frequency to d6
0001255E 6700                       		beq.s	dUpdFreqFMrest		; if 0, this channel should be resting
00012560                            
00012560 102D 0007                  		move.b	cDetune(a5),d0		; load detune value to d0
00012564 4880                       		ext.w	d0			; extend to word
00012566 DC40                       		add.w	d0,d6			; add to channel base frequency to d6
00012568                            
00012568 0815 0003                  		btst	#cfbMod,(a5)		; check if channel is modulating
0001256C 6700                       		beq.s	dUpdateFreqFM2		; if not, branch
0001256E DC6D 0014                  		add.w	cModFreq(a5),d6		; add channel modulation frequency offset to d6
00012572                            
00012572                            dUpdateFreqFM2:
00012572 0815 0001                  		btst	#cfbInt,(a5)		; is the channel interrupted by SFX?
00012576 6600                       		bne.s	locret_UpdFreqFM	; if is, do not update frequency anyway
00012578                            
00012578                            dUpdateFreqFM3:
00012578 3206                       		move.w	d6,d1			; copy frequency to d1
0001257A E049                       		lsr.w	#8,d1			; shift upper byte into lower byte
0001257C 70A4                       		moveq	#$FFFFFFA4,d0		; YM command: Frequency MSB & Octave
0001257E 4EBA 0000                  		jsr	WriteChYM(pc)		; write to YM according to channel
00012582                            
00012582 1206                       		move.b	d6,d1			; copy lower byte of frequency into d1 (value)
00012584 103C 00A0                  		move.b	#$FFFFFFA0,d0		; YM command: Frequency LSB
00012588 4EFA 0000                  		jmp	WriteChYM(pc)		; write to YM according to channel
0001258C                            
0001258C                            dUpdFreqFMrest:
0001258C 08D5 0000                  		bset	#cfbRest,(a5)		; set channel resting flag
00012590                            
00012590                            locret_UpdFreqFM:
00012590 4E75                       		rts
00012592                            ; ===========================================================================
00012592                            ; ---------------------------------------------------------------------------
00012592                            ; Process a note in FM channel (enable resting or get frequency)
00012592                            ; ---------------------------------------------------------------------------
00012592                            
00012592                            dGetFreqFM:
00012592 0405 0080                  		subi.b	#$80,d5			; sub $80 from the note (notes start at $80)
00012596 6600                       		bne.s	.norest			; branch if note wasnt $80 (rest)
00012598 08D5 0000                  		bset	#cfbRest,(a5)		; set channel resting flag
0001259C 426D 000E                  		clr.w	cFreq(a5)		; set base frequency to 0
000125A0 4E75                       		rts
000125A2                            
000125A2                            .norest
000125A2 DA2D 0008                  		add.b	cPitch(a5),d5		; add pitch offset to note
000125A6 0245 007F                  		andi.w	#$7F,d5			; keep within $80 notes
000125AA DA45                       		add.w	d5,d5			; double offset (each entry is a word)
000125AC                            
000125AC 43FA 0000                  		lea	dFreqFM(pc),a1		; load FM frequency table to a1
000125B0 3B71 5000 000E             		move.w	(a1,d5.w),cFreq(a5)	; load and save the requested frequency
000125B6                            
000125B6                            		AMPS_Debug_NoteFM		; check if the note was valid
000125B6 0C05 0000                M 	cmp.b	#dfreqfm_-dfreqfm,d5
000125BA 6500                     M 	blo.s	.ok
000125BC                          M .fail
000125BC 4EB9 0001 0CCA           M 	jsr	amps_debugr_notefm
000125C2                          M .ok
000125C2 4E75                       		rts
000125C4                            ; ===========================================================================
000125C4                            ; ---------------------------------------------------------------------------
000125C4                            ; Subroutine for doing keying-off FM channel
000125C4                            ; ---------------------------------------------------------------------------
000125C4                            
000125C4                            dKeyOffFM:
000125C4 0815 0001                  		btst	#cfbInt,(a5)		; check if overridden by sfx
000125C8 66C6                       		bne.s	locret_UpdFreqFM	; if so, do not note off
000125CA                            
000125CA                            dKeyOffFM2:
000125CA 0815 0002                  		btst	#cfbHold,(a5)		; check if note is held
000125CE 66C0                       		bne.s	locret_UpdFreqFM	; if so, do not note off
000125D0                            
000125D0 7028                       		moveq	#$28,d0			; YM command: Key on
000125D2 122D 0001                  		move.b	cType(a5),d1		; get channel type bits (and turn all operators off)
000125D6 6000                       		bra.s	WriteYM_Pt1		; write to part 1 channel
000125D8                            ; ===========================================================================
000125D8                            ; ---------------------------------------------------------------------------
000125D8                            ; Write to YMCue according to channel and check if interrupted by sfx
000125D8                            ; ---------------------------------------------------------------------------
000125D8                            
000125D8                            dWriteYMchnInt:
000125D8 0815 0001                  		btst	#cfbInt,(a5)		; check if interrupted by sfx
000125DC 6600                       		bne.s	WriteYM_Pt1_rts		; if was, do not note on
000125DE                            ; ===========================================================================
000125DE                            ; ---------------------------------------------------------------------------
000125DE                            ; Write to YMCue according to channel
000125DE                            ; ---------------------------------------------------------------------------
000125DE                            
000125DE                            WriteChYM:
000125DE 082D 0002 0001             		btst	#ctbPt2,cType(a5)	; check if this is a YM part 1 or 2 channel
000125E4 6600                       		bne.s	WriteChYM2		; if part 2, branch
000125E6 D02D 0001                  		add.b	cType(a5),d0		; add channel type to address
000125EA                            ; ===========================================================================
000125EA                            ; ---------------------------------------------------------------------------
000125EA                            ; Write to YMCue using part 1
000125EA                            ; ---------------------------------------------------------------------------
000125EA                            
000125EA                            WriteYM_Pt1:
000125EA                            		AMPS_Debug_CuePtr 1		; check if cue pointer is valid
000125EA B1FC 0000 0000           M 	cmp.l	#$a00000+ym_buffer1,a0
000125F0 6500                     M 	blo.s	.fail_486
000125F2 B1FC 0000 0000           M 	cmp.l	#$a00000+ym_buffer2+$400,a0
000125F8 6500                     M 	blo.s	.ok_486
000125FA                          M .fail_486
000125FA 4EB9 0001 0D62           M 	jsr	amps_debug_cueptr1
00012600                          M .ok_486
00012600                            	StopZ80					; wait for Z80 to stop
00012600 33FC 0100 00A1 1100      M 	move.w	#$100,$a11100
00012608                          M .loop_487
00012608 0839 0000 00A1 1100      M 	btst	#0,$a11100
00012610 66F6                     M 	bne.s	.loop_487
00012612 51D8                       		sf	(a0)+			; set YM port address as 0
00012614 10C1                       		move.b	d1,(a0)+		; write data value to cue
00012616 10C0                       		move.b	d0,(a0)+		; write address to cue
00012618                            	;	st	(a0)			; mark as the end of the cue data
00012618                            	StartZ80				; enable Z80 execution
00012618 33FC 0000 00A1 1100      M 	move.w	#0,$a11100
00012620                            
00012620                            WriteYM_Pt1_rts:
00012620 4E75                       		rts
00012622                            ; ===========================================================================
00012622                            ; ---------------------------------------------------------------------------
00012622                            ; Write to YMCue according to channel in part 2
00012622                            ; ---------------------------------------------------------------------------
00012622                            
00012622                            WriteChYM2:
00012622 142D 0001                  		move.b	cType(a5),d2		; get channel type to d2
00012626 0882 0002                  		bclr	#ctbPt2,d2		; remove part 2 marker from it
0001262A D002                       		add.b	d2,d0			; add to YM address
0001262C                            ; ===========================================================================
0001262C                            ; ---------------------------------------------------------------------------
0001262C                            ; Write to YMCue using part 2
0001262C                            ; ---------------------------------------------------------------------------
0001262C                            
0001262C                            WriteYM_Pt2:
0001262C                            		AMPS_Debug_CuePtr 2		; check if cue pointer is valid
0001262C B1FC 0000 0000           M 	cmp.l	#$a00000+ym_buffer1,a0
00012632 6500                     M 	blo.s	.fail_489
00012634 B1FC 0000 0000           M 	cmp.l	#$a00000+ym_buffer2+$400,a0
0001263A 6500                     M 	blo.s	.ok_489
0001263C                          M .fail_489
0001263C 4EB9 0001 0D92           M 	jsr	amps_debug_cueptr2
00012642                          M .ok_489
00012642                            	StopZ80					; wait for Z80 to stop
00012642 33FC 0100 00A1 1100      M 	move.w	#$100,$a11100
0001264A                          M .loop_490
0001264A 0839 0000 00A1 1100      M 	btst	#0,$a11100
00012652 66F6                     M 	bne.s	.loop_490
00012654 10FC 0002                  		move.b	#$02,(a0)+		; set YM port address as 2
00012658 10C1                       		move.b	d1,(a0)+		; write data value to cue
0001265A 10C0                       		move.b	d0,(a0)+		; write address to cue
0001265C                            	;	st	(a0)			; mark as the end of the cue data
0001265C                            	StartZ80				; enable Z80 execution
0001265C 33FC 0000 00A1 1100      M 	move.w	#0,$a11100
00012664 4E75                       		rts
00012666                            ; ===========================================================================
00012666                            ; ---------------------------------------------------------------------------
00012666                            ; Note to FM frequency conversion table
00012666                            ; ---------------------------------------------------------------------------
00012666                            ;	dc.w   C     C#    D     Eb    E     F     F#    G     G#    A     Bb    B
00012666 025E                       dFreqFM:dc.w								       $025E; Octave-1 - (80)
00012668 0284 02AB 02D3 02FE 032D+  	dc.w $0284,$02AB,$02D3,$02FE,$032D,$035C,$038F,$03C5,$03FF,$043C,$047C,$0A5E; Octave 0 - (81 - 8C)
00012680 0A84 0AAB 0AD3 0AFE 0B2D+  	dc.w $0A84,$0AAB,$0AD3,$0AFE,$0B2D,$0B5C,$0B8F,$0BC5,$0BFF,$0C3C,$0C7C,$125E; Octave 1 - (8D - 98)
00012698 1284 12AB 12D3 12FE 132D+  	dc.w $1284,$12AB,$12D3,$12FE,$132D,$135C,$138F,$13C5,$13FF,$143C,$147C,$1A5E; Octave 2 - (99 - A4)
000126B0 1A84 1AAB 1AD3 1AFE 1B2D+  	dc.w $1A84,$1AAB,$1AD3,$1AFE,$1B2D,$1B5C,$1B8F,$1BC5,$1BFF,$1C3C,$1C7C,$225E; Octave 3 - (A5 - B0)
000126C8 2284 22AB 22D3 22FE 232D+  	dc.w $2284,$22AB,$22D3,$22FE,$232D,$235C,$238F,$23C5,$23FF,$243C,$247C,$2A5E; Octave 4 - (B1 - BC)
000126E0 2A84 2AAB 2AD3 2AFE 2B2D+  	dc.w $2A84,$2AAB,$2AD3,$2AFE,$2B2D,$2B5C,$2B8F,$2BC5,$2BFF,$2C3C,$2C7C,$325E; Octave 5 - (BD - C8)
000126F8 3284 32AB 32D3 32FE 332D+  	dc.w $3284,$32AB,$32D3,$32FE,$332D,$335C,$338F,$33C5,$33FF,$343C,$347C,$3A5E; Octave 6 - (c9 - D4)
00012710 3A84 3AAB 3AD3 3AFE 3B2D+  	dc.w $3A84,$3AAB,$3AD3,$3AFE,$3B2D,$3B5C,$3B8F,$3BC5,$3BFF,$3C3C,$3C7C	    ; Octave 7 - (D5 - DF)
00012726                            dFreqFM_:
00012726 =00000160                  .x = $100|((dFreqFM_-dFreqFM)/2)		; to check if we played an invalid note
00012726                            		rept $80-((dFreqFM_-dFreqFM)/2)	; and if so, tell us which note it was
00012726                            			dc.w .x
00012726                            .x =			.x+$101
00012726                            		endr
00012726 0160                     M 	dc.w	.x
00012728 =00000261                M .x	=	.x+$101
00012728 0261                     M 	dc.w	.x
0001272A =00000362                M .x	=	.x+$101
0001272A 0362                     M 	dc.w	.x
0001272C =00000463                M .x	=	.x+$101
0001272C 0463                     M 	dc.w	.x
0001272E =00000564                M .x	=	.x+$101
0001272E 0564                     M 	dc.w	.x
00012730 =00000665                M .x	=	.x+$101
00012730 0665                     M 	dc.w	.x
00012732 =00000766                M .x	=	.x+$101
00012732 0766                     M 	dc.w	.x
00012734 =00000867                M .x	=	.x+$101
00012734 0867                     M 	dc.w	.x
00012736 =00000968                M .x	=	.x+$101
00012736 0968                     M 	dc.w	.x
00012738 =00000A69                M .x	=	.x+$101
00012738 0A69                     M 	dc.w	.x
0001273A =00000B6A                M .x	=	.x+$101
0001273A 0B6A                     M 	dc.w	.x
0001273C =00000C6B                M .x	=	.x+$101
0001273C 0C6B                     M 	dc.w	.x
0001273E =00000D6C                M .x	=	.x+$101
0001273E 0D6C                     M 	dc.w	.x
00012740 =00000E6D                M .x	=	.x+$101
00012740 0E6D                     M 	dc.w	.x
00012742 =00000F6E                M .x	=	.x+$101
00012742 0F6E                     M 	dc.w	.x
00012744 =0000106F                M .x	=	.x+$101
00012744 106F                     M 	dc.w	.x
00012746 =00001170                M .x	=	.x+$101
00012746 1170                     M 	dc.w	.x
00012748 =00001271                M .x	=	.x+$101
00012748 1271                     M 	dc.w	.x
0001274A =00001372                M .x	=	.x+$101
0001274A 1372                     M 	dc.w	.x
0001274C =00001473                M .x	=	.x+$101
0001274C 1473                     M 	dc.w	.x
0001274E =00001574                M .x	=	.x+$101
0001274E 1574                     M 	dc.w	.x
00012750 =00001675                M .x	=	.x+$101
00012750 1675                     M 	dc.w	.x
00012752 =00001776                M .x	=	.x+$101
00012752 1776                     M 	dc.w	.x
00012754 =00001877                M .x	=	.x+$101
00012754 1877                     M 	dc.w	.x
00012756 =00001978                M .x	=	.x+$101
00012756 1978                     M 	dc.w	.x
00012758 =00001A79                M .x	=	.x+$101
00012758 1A79                     M 	dc.w	.x
0001275A =00001B7A                M .x	=	.x+$101
0001275A 1B7A                     M 	dc.w	.x
0001275C =00001C7B                M .x	=	.x+$101
0001275C 1C7B                     M 	dc.w	.x
0001275E =00001D7C                M .x	=	.x+$101
0001275E 1D7C                     M 	dc.w	.x
00012760 =00001E7D                M .x	=	.x+$101
00012760 1E7D                     M 	dc.w	.x
00012762 =00001F7E                M .x	=	.x+$101
00012762 1F7E                     M 	dc.w	.x
00012764 =0000207F                M .x	=	.x+$101
00012764 207F                     M 	dc.w	.x
00012766 =00002180                M .x	=	.x+$101
00012766                            ; ===========================================================================
00012766                            ; ---------------------------------------------------------------------------
00012766                            ; Note to Dual PCM frequency conversion table
00012766                            ; ---------------------------------------------------------------------------
00012766                            ;	dc.w   C     C#    D     Eb    E     F     F#    G     G#    A     Bb    B
00012766 0000                       dFreqDAC:dc.w $0000								    ; Octave NOPE - (80)
00012768 0010 0011 0012 0013 0014+  	dc.w $0010,$0011,$0012,$0013,$0014,$0015,$0017,$0018,$0019,$001B,$001D,$001E; Octave 0 - (81 - 8C)
00012780 0020 0022 0024 0026 0028+  	dc.w $0020,$0022,$0024,$0026,$0028,$002B,$002D,$0030,$0033,$0036,$0039,$003C; Octave 1 - (8D - 98)
00012798 0040 0044 0048 004C 0051+  	dc.w $0040,$0044,$0048,$004C,$0051,$0055,$005B,$0060,$0066,$006C,$0072,$0079; Octave 2 - (99 - A4)
000127B0 0080 0088 0090 0098 00A1+  	dc.w $0080,$0088,$0090,$0098,$00A1,$00AB,$00B5,$00C0,$00CB,$00D7,$00E4,$00F2; Octave 3 - (A5 - B0)
000127C8 0100 010F 011F 0130 0143+  	dc.w $0100,$010F,$011F,$0130,$0143,$0156,$016A,$0180,$0196,$01AF,$01C8,$01E3; Octave 4 - (B1 - BC)
000127E0 0200 021E 023F 0261 0285+  	dc.w $0200,$021E,$023F,$0261,$0285,$02AB,$02D4,$02FF,$032D,$035D,$0390,$03C7; Octave 5 - (BD - C8)
000127F8 0400 043D 047D 04C2 050A+  	dc.w $0400,$043D,$047D,$04C2,$050A,$0557,$05A8,$05FE,$0659,$06BA,$0721,$078D; Octave 6 - (C9 - D4)
00012810 0800 087A 08FB 0983 0A14+  	dc.w $0800,$087A,$08FB,$0983,$0A14,$0AAE,$0B50,$0BFD,$0CB3,$0D74,$0E41,$0F1A; Octave 7 - (D5 - E0)
00012828 0FFF 0FFF 0FFF 0FFF 0FFF+  	dc.w $0FFF,$0FFF,$0FFF,$0FFF,$0FFF,$0FFF,$0FFF,$0FFF,$0FFF,$0FFF,$0FFF,$0FFF; Octave 8 - (E1 - EC)
00012840 0FFF 0FFF 0FFF 0FFF 0FFF+  	dc.w $0FFF,$0FFF,$0FFF,$0FFF,$0FFF,$0FFF,$0FFF,$0FFF,$0FFF,$0FFF,$0FFF,$0FFF; Octave 9 - (ED - F8)
00012858 0FFF 0FFF 0FFF 0FFF 0FFF+  	dc.w $0FFF,$0FFF,$0FFF,$0FFF,$0FFF,$0FFF,$0FFF				    ; Octave 10 -(F9 - FF)
00012866                            
00012866 F001 F001 F001 F001 F001+  	dc.w			     -$FFF,-$FFF,-$FFF,-$FFF,-$FFF,-$FFF,-$FFF,-$FFF; Octave -10 -(00 - 07)
00012876 F001 F001 F001 F001 F001+  	dc.w -$FFF,-$FFF,-$FFF,-$FFF,-$FFF,-$FFF,-$FFF,-$FFF,-$FFF,-$FFF,-$FFF,-$FFF; Octave -9 - (08 - 13)
0001288E F001 F001 F001 F001 F001+  	dc.w -$FFF,-$FFF,-$FFF,-$FFF,-$FFF,-$FFF,-$FFF,-$FFF,-$FFF,-$FFF,-$FFF,-$FFF; Octave -8 - (14 - 1F)
000128A6 F0E6 F1BF F28C F34D F403+  	dc.w -$F1A,-$E41,-$D74,-$CB3,-$BFD,-$B50,-$AAE,-$A14,-$983,-$8FB,-$87A,-$800; Octave -7 - (20 - 2B)
000128BE F873 F8DF F946 F9A7 FA02+  	dc.w -$78D,-$721,-$6BA,-$659,-$5FE,-$5A8,-$557,-$50A,-$4C2,-$47D,-$43D,-$400; Octave -6 - (2C - 37)
000128D6 FC39 FC70 FCA3 FCD3 FD01+  	dc.w -$3C7,-$390,-$35D,-$32D,-$2FF,-$2D4,-$2AB,-$285,-$261,-$23F,-$21E,-$200; Octave -5 - (38 - 43)
000128EE FE1D FE38 FE51 FE6A FE80+  	dc.w -$1E3,-$1C8,-$1AF,-$196,-$180,-$16A,-$156,-$143,-$130,-$11F,-$10F,-$100; Octave -4 - (44 - 4F)
00012906 FF0E FF1C FF29 FF35 FF40+  	dc.w -$0F2,-$0E4,-$0D7,-$0CB,-$0C0,-$0B5,-$0AB,-$0A1,-$098,-$090,-$088,-$080; Octave -3 - (50 - 5B)
0001291E FF87 FF8E FF94 FF9A FFA0+  	dc.w -$079,-$072,-$06C,-$066,-$060,-$05B,-$055,-$051,-$04C,-$048,-$044,-$040; Octave -2 - (5C - 67)
00012936 FFC4 FFC7 FFCA FFCD FFD0+  	dc.w -$03C,-$039,-$036,-$033,-$030,-$02D,-$02B,-$028,-$026,-$024,-$022,-$020; Octave -1 - (68 - 73)
0001294E FFE2 FFE3 FFE5 FFE7 FFE8+  	dc.w -$01E,-$01D,-$01B,-$019,-$018,-$017,-$015,-$014,-$013,-$012,-$011,-$010; Octave -0 - (74 - 7F)
00012966                            ; ===========================================================================
00012966                            ; ---------------------------------------------------------------------------
00012966                            ; Note to PSG frequency conversion table
00012966                            ; ---------------------------------------------------------------------------
00012966                            ;	dc.w	C     C#    D     Eb    E     F     F#    G     G#    A     Bb    B
00012966 0356 0326 02F9 02CE 02A5+  dFreqPSG:dc.w $0356,$0326,$02F9,$02CE,$02A5,$0280,$025C,$023A,$021A,$01FB,$01DF,$01C4; Octave 3 - (81 - 8C)
0001297E 01AB 0193 017D 0167 0153+  	dc.w  $01AB,$0193,$017D,$0167,$0153,$0140,$012E,$011D,$010D,$00FE,$00EF,$00E2; Octave 4 - (8D - 98)
00012996 00D6 00C9 00BE 00B4 00A9+  	dc.w  $00D6,$00C9,$00BE,$00B4,$00A9,$00A0,$0097,$008F,$0087,$007F,$0078,$0071; Octave 5 - (99 - A4)
000129AE 006B 0065 005F 005A 0055+  	dc.w  $006B,$0065,$005F,$005A,$0055,$0050,$004B,$0047,$0043,$0040,$003C,$0039; Octave 6 - (A5 - B0)
000129C6 0036 0033 0030 002D 002B+  	dc.w  $0036,$0033,$0030,$002D,$002B,$0028,$0026,$0024,$0022,$0020,$001F,$001D; Octave 7 - (B1 - BC)
000129DE 001B 001A 0018 0017 0016+  	dc.w  $001B,$001A,$0018,$0017,$0016,$0015,$0013,$0012,$0011		     ; Notes (BD - C5)
000129F0 0000                       	dc.w  $0000								     ; Note (C6)
000129F2                            dFreqPSG_:
000129F2 =00000146                  .x = $100|((dFreqPSG_-dFreqPSG)/2)		; to check if we played an invalid note
000129F2                            		rept $80-((dFreqPSG_-dFreqPSG)/2); and if so, tell us which note it was
000129F2                            			dc.w .x
000129F2                            .x =			.x+$101
000129F2                            		endr
000129F2 0146                     M 	dc.w	.x
000129F4 =00000247                M .x	=	.x+$101
000129F4 0247                     M 	dc.w	.x
000129F6 =00000348                M .x	=	.x+$101
000129F6 0348                     M 	dc.w	.x
000129F8 =00000449                M .x	=	.x+$101
000129F8 0449                     M 	dc.w	.x
000129FA =0000054A                M .x	=	.x+$101
000129FA 054A                     M 	dc.w	.x
000129FC =0000064B                M .x	=	.x+$101
000129FC 064B                     M 	dc.w	.x
000129FE =0000074C                M .x	=	.x+$101
000129FE 074C                     M 	dc.w	.x
00012A00 =0000084D                M .x	=	.x+$101
00012A00 084D                     M 	dc.w	.x
00012A02 =0000094E                M .x	=	.x+$101
00012A02 094E                     M 	dc.w	.x
00012A04 =00000A4F                M .x	=	.x+$101
00012A04 0A4F                     M 	dc.w	.x
00012A06 =00000B50                M .x	=	.x+$101
00012A06 0B50                     M 	dc.w	.x
00012A08 =00000C51                M .x	=	.x+$101
00012A08 0C51                     M 	dc.w	.x
00012A0A =00000D52                M .x	=	.x+$101
00012A0A 0D52                     M 	dc.w	.x
00012A0C =00000E53                M .x	=	.x+$101
00012A0C 0E53                     M 	dc.w	.x
00012A0E =00000F54                M .x	=	.x+$101
00012A0E 0F54                     M 	dc.w	.x
00012A10 =00001055                M .x	=	.x+$101
00012A10 1055                     M 	dc.w	.x
00012A12 =00001156                M .x	=	.x+$101
00012A12 1156                     M 	dc.w	.x
00012A14 =00001257                M .x	=	.x+$101
00012A14 1257                     M 	dc.w	.x
00012A16 =00001358                M .x	=	.x+$101
00012A16 1358                     M 	dc.w	.x
00012A18 =00001459                M .x	=	.x+$101
00012A18 1459                     M 	dc.w	.x
00012A1A =0000155A                M .x	=	.x+$101
00012A1A 155A                     M 	dc.w	.x
00012A1C =0000165B                M .x	=	.x+$101
00012A1C 165B                     M 	dc.w	.x
00012A1E =0000175C                M .x	=	.x+$101
00012A1E 175C                     M 	dc.w	.x
00012A20 =0000185D                M .x	=	.x+$101
00012A20 185D                     M 	dc.w	.x
00012A22 =0000195E                M .x	=	.x+$101
00012A22 195E                     M 	dc.w	.x
00012A24 =00001A5F                M .x	=	.x+$101
00012A24 1A5F                     M 	dc.w	.x
00012A26 =00001B60                M .x	=	.x+$101
00012A26 1B60                     M 	dc.w	.x
00012A28 =00001C61                M .x	=	.x+$101
00012A28 1C61                     M 	dc.w	.x
00012A2A =00001D62                M .x	=	.x+$101
00012A2A 1D62                     M 	dc.w	.x
00012A2C =00001E63                M .x	=	.x+$101
00012A2C 1E63                     M 	dc.w	.x
00012A2E =00001F64                M .x	=	.x+$101
00012A2E 1F64                     M 	dc.w	.x
00012A30 =00002065                M .x	=	.x+$101
00012A30 2065                     M 	dc.w	.x
00012A32 =00002166                M .x	=	.x+$101
00012A32 2166                     M 	dc.w	.x
00012A34 =00002267                M .x	=	.x+$101
00012A34 2267                     M 	dc.w	.x
00012A36 =00002368                M .x	=	.x+$101
00012A36 2368                     M 	dc.w	.x
00012A38 =00002469                M .x	=	.x+$101
00012A38 2469                     M 	dc.w	.x
00012A3A =0000256A                M .x	=	.x+$101
00012A3A 256A                     M 	dc.w	.x
00012A3C =0000266B                M .x	=	.x+$101
00012A3C 266B                     M 	dc.w	.x
00012A3E =0000276C                M .x	=	.x+$101
00012A3E 276C                     M 	dc.w	.x
00012A40 =0000286D                M .x	=	.x+$101
00012A40 286D                     M 	dc.w	.x
00012A42 =0000296E                M .x	=	.x+$101
00012A42 296E                     M 	dc.w	.x
00012A44 =00002A6F                M .x	=	.x+$101
00012A44 2A6F                     M 	dc.w	.x
00012A46 =00002B70                M .x	=	.x+$101
00012A46 2B70                     M 	dc.w	.x
00012A48 =00002C71                M .x	=	.x+$101
00012A48 2C71                     M 	dc.w	.x
00012A4A =00002D72                M .x	=	.x+$101
00012A4A 2D72                     M 	dc.w	.x
00012A4C =00002E73                M .x	=	.x+$101
00012A4C 2E73                     M 	dc.w	.x
00012A4E =00002F74                M .x	=	.x+$101
00012A4E 2F74                     M 	dc.w	.x
00012A50 =00003075                M .x	=	.x+$101
00012A50 3075                     M 	dc.w	.x
00012A52 =00003176                M .x	=	.x+$101
00012A52 3176                     M 	dc.w	.x
00012A54 =00003277                M .x	=	.x+$101
00012A54 3277                     M 	dc.w	.x
00012A56 =00003378                M .x	=	.x+$101
00012A56 3378                     M 	dc.w	.x
00012A58 =00003479                M .x	=	.x+$101
00012A58 3479                     M 	dc.w	.x
00012A5A =0000357A                M .x	=	.x+$101
00012A5A 357A                     M 	dc.w	.x
00012A5C =0000367B                M .x	=	.x+$101
00012A5C 367B                     M 	dc.w	.x
00012A5E =0000377C                M .x	=	.x+$101
00012A5E 377C                     M 	dc.w	.x
00012A60 =0000387D                M .x	=	.x+$101
00012A60 387D                     M 	dc.w	.x
00012A62 =0000397E                M .x	=	.x+$101
00012A62 397E                     M 	dc.w	.x
00012A64 =00003A7F                M .x	=	.x+$101
00012A64 3A7F                     M 	dc.w	.x
00012A66 =00003B80                M .x	=	.x+$101
00012A66                            ; ===========================================================================
00012A66                            ; ---------------------------------------------------------------------------
00012A66                            ; Process SFX PSG channels
00012A66                            ; ---------------------------------------------------------------------------
00012A66                            
00012A66                            dAMPSdoPSGSFX:
00012A66 7E02                       		moveq	#SFX_PSG-1,d7		; get total number of SFX PSG channels to d7
00012A68 4DFA FEFC                  		lea	dFreqPSG(pc),a6		; load PSG frequency table for quick access to a6
00012A6C                            
00012A6C                            dAMPSnextPSGSFX:
00012A6C DAFC 001C                  		add.w	#cSizeSFX,a5		; go to the next channel
00012A70 4A15                       		tst.b	(a5)			; check if channel is running a tracker
00012A72 6A00                       		bpl.s	.next			; if not, branch
00012A74 532D 000C                  		subq.b	#1,cDuration(a5)	; decrease note duration
00012A78 6700 0000                  		beq.w	.update			; if timed out, update channel
00012A7C                            
00012A7C                            	dCalcFreq				; calculate channel base frequency
00012A7C 1C2D 0007                M 	move.b	cdetune(a5),d6
00012A80 4886                     M 	ext.w	d6
00012A82 DC6D 000E                M 	add.w	cfreq(a5),d6
00012A86                            	dModulate				; run modulation code
00012A86 0815 0003                M 	btst	#cfbmod,(a5)
00012A8A 6700                     M 	beq.s	.noret
00012A8C 4A2D 0010                M 	tst.b	cmoddelay(a5)
00012A90 6700                     M 	beq.s	.started
00012A92 532D 0010                M 	subq.b	#1,cmoddelay(a5)
00012A96                          M .noret
00012A96 6000                     M 	bra.s	.endm
00012A98                          M .started
00012A98 532D 0016                M 	subq.b	#1,cmodspeed(a5)
00012A9C 66F8                     M 	bne.s	.noret
00012A9E 226D 0010                M 	movea.l	cmod(a5),a1
00012AA2 1B69 0001 0016           M 	move.b	1(a1),cmodspeed(a5)
00012AA8 4A2D 0018                M 	tst.b	cmodcount(a5)
00012AAC 6600                     M 	bne.s	.norev
00012AAE 1B69 0003 0018           M 	move.b	3(a1),cmodcount(a5)
00012AB4 442D 0017                M 	neg.b	cmodstep(a5)
00012AB8                          M .norev
00012AB8 532D 0018                M 	subq.b	#1,cmodcount(a5)
00012ABC 1A2D 0017                M 	move.b	cmodstep(a5),d5
00012AC0 4885                     M 	ext.w	d5
00012AC2 DA6D 0014                M 	add.w	cmodfreq(a5),d5
00012AC6 3B45 0014                M 	move.w	d5,cmodfreq(a5)
00012ACA DC45                     M 	add.w	d5,d6
00012ACC 6100 0000                  		bsr.w	dUpdateFreqPSG3		; if frequency needs changing, do it
00012AD0                            
00012AD0                            .endm
00012AD0 6100 0000                  		bsr.w	dEnvelopePSG		; run envelope program
00012AD4                            .next
00012AD4 51CF FF96                  		dbf	d7,dAMPSnextPSGSFX	; make sure to run all the channels
00012AD8 4EFA 0000                  		jmp	dCheckTracker(pc)	; after that, check tracker and end loop
00012ADC                            
00012ADC                            .update
00012ADC 0215 00FA                  		and.b	#$FF-(1<<cfbHold)-(1<<cfbRest),(a5); clear hold and rest flags
00012AE0                            	dDoTracker				; process tracker
00012AE0 286D 0002                M 	movea.l	cdata(a5),a4
00012AE4                          M 	amps_debug_trackupd
00012AE4 220C                     M 	move.l	a4,d1
00012AE6 0281 00FF FFFF           M 	and.l	#$ffffff,d1
00012AEC 0C81 0000 0000           M 	cmp.l	#sfxaddr,d1
00012AF2 6500                     M 	blo.s	.fail2
00012AF4 0C81 0000 0000           M 	cmp.l	#dacaddr,d1
00012AFA 6500                     M 	blo.s	.data
00012AFC                          M .fail2
00012AFC                          M 	raiseerror	"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",amps_debug_console_channel
00012AFC 487A FFFE                M 	pea	*(pc)
00012B00                          M 	raiseerror2	"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",amps_debug_console_channel
00012B00 40E7                     M 	move.w	sr,-(sp)
00012B02                          M 	__fstring_generateargumentscode	"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012B02 =0000001A                M 	__pos:	set instr("Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
00012B02 =00000000                M 	__stack:set	0
00012B02 =00000000                M 	__sp:	set 0
00012B02                          M 	while	(__pos)
00012B02 =00000021                M 	__endpos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'>')
00012B02 =0000002D                M 	__midpos:	set instr(__pos+5,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",' ')
00012B02 =00000021                M 	__midpos:	= __endpos
00012B02                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012B02                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012B02                          M 	__operand:	substr __pos+1+1,__midpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012B02                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012B02                          M 	pushp	"move.l a4,-(sp)"
00012B02 =00000001                M 	__stack:	= __stack+1
00012B02 =00000004                M 	__sp:	= __sp+4
00012B02 =00000022                M 	__pos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
00012B02 =00000028                M 	__endpos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'>')
00012B02 =0000002D                M 	__midpos:	set instr(__pos+5,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",' ')
00012B02 =00000028                M 	__midpos:	= __endpos
00012B02                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012B02                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012B02 =00000029                M 	__pos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
00012B02 =00000034                M 	__endpos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'>')
00012B02 =00000030                M 	__midpos:	set instr(__pos+5,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",' ')
00012B02                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012B02                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012B02                          M 	__operand:	substr __pos+1+1,__midpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012B02                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012B02                          M 	pushp	"move.l a4,-(sp)"
00012B02 =00000002                M 	__stack:	= __stack+1
00012B02 =00000008                M 	__sp:	= __sp+4
00012B02 =00000000                M 	__pos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
00012B02                          M 	rept	__stack
00012B02                          M 	popp	__command
00012B02 2F0C                     M 	move.l	a4,-(sp)
00012B04                          M 	popp	__command
00012B04 2F0C                     M 	move.l	a4,-(sp)
00012B06 4EB9 0000 0000           M 	jsr	errorhandler
00012B0C                          M 	__fstring_generatedecodedstring	"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012B0C =00000001                M 	__lpos:	set 1
00012B0C =0000001A                M 	__pos:	set instr("Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
00012B0C                          M 	while	(__pos)
00012B0C                          M 	__substr:	substr __lpos,__pos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012B0C 496E 7661 6C69 6420 7472+M 	dc.b	"Invalid tracker address: "
00012B25 =00000021                M 	__endpos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'>')
00012B25 =0000002D                M 	__midpos:	set instr(__pos+5,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",' ')
00012B25 =00000021                M 	__midpos:	= __endpos
00012B25                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012B25                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012B25                          M 	__param:	substr ,,"hex"
00012B25 83                       M 	dc.b	hex|3
00012B26 =00000022                M 	__lpos:	set __endpos+1
00012B26 =00000022                M 	__pos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
00012B26                          M 	__substr:	substr __lpos,__pos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012B26                          M 	dc.b	""
00012B26 =00000028                M 	__endpos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'>')
00012B26 =0000002D                M 	__midpos:	set instr(__pos+5,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",' ')
00012B26 =00000028                M 	__midpos:	= __endpos
00012B26                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012B26                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012B26 E0                       M 	dc.b	endl
00012B27 =00000029                M 	__lpos:	set __endpos+1
00012B27 =00000029                M 	__pos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
00012B27                          M 	__substr:	substr __lpos,__pos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012B27                          M 	dc.b	""
00012B27 =00000034                M 	__endpos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'>')
00012B27 =00000030                M 	__midpos:	set instr(__pos+5,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",' ')
00012B27                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012B27                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012B27 B3                       M 	dc.b	sym|3
00012B28 =00000035                M 	__lpos:	set __endpos+1
00012B28 =00000000                M 	__pos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
00012B28                          M 	__substr:	substr __lpos,,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012B28                          M 	dc.b	""
00012B28 00                       M 	dc.b	0
00012B29 00                       M 	dc.b	+_eh_enter_console|(((*&1)^1)*_eh_align_offset)
00012B2A                          M 	even
00012B2A 4EF9 0001 0000           M 	jmp	amps_debug_console_channel
00012B30                          M 	even
00012B30                          M .data
00012B30 7A00                     M 	moveq	#0,d5
00012B32 1A1C                     M 	move.b	(a4)+,d5
00012B34 0C05 00E0                M 	cmpi.b	#$e0,d5
00012B38 6500                     M 	blo.s	.notcomm
00012B3A 4EBA 0000                M 	jsr	dcommands(pc)
00012B3E 60F0                     M 	bra.s	.data
00012B40 6092                     M 	bra.s	.next
00012B42                          M .notcomm
00012B42 4A05                       		tst.b	d5			; check if note is being played
00012B44 6A00                       		bpl.s	.timer			; if not, it must be a timer. Branch
00012B46                            
00012B46                            	dGetFreqPSG				; get PSG frequency
00012B46 0405 0081                M 	subi.b	#$81,d5
00012B4A 6400                     M 	bhs.s	.norest
00012B4C 08D5 0000                M 	bset	#cfbrest,(a5)
00012B50 3B7C FFFF 000E           M 	move.w	#-1,cfreq(a5)
00012B56 4EBA 0000                M 	jsr	dmutepsgmus(pc)
00012B5A 6000                     M 	bra.s	.freqgot
00012B5C                          M .norest
00012B5C DA2D 0008                M 	add.b	cpitch(a5),d5
00012B60 0245 007F                M 	andi.w	#$7f,d5
00012B64 DA45                     M 	add.w	d5,d5
00012B66 3B76 5000 000E           M 	move.w	(a6,d5.w),cfreq(a5)
00012B6C                          M 	amps_debug_notepsg
00012B6C 0C05 008C                M 	cmp.b	#dfreqpsg_-dfreqpsg,d5
00012B70 6500                     M 	blo.s	.ok
00012B72                          M .fail
00012B72 4EB9 0001 0C9E           M 	jsr	amps_debugr_notepsg
00012B78                          M .ok
00012B78                          M .freqgot
00012B78 1A1C                       		move.b	(a4)+,d5		; check if next note is a timer
00012B7A 6A00                       		bpl.s	.timer			; if yes, handle timer
00012B7C 534C                       		subq.w	#1,a4			; else, undo the increment
00012B7E 6000                       		bra.s	.pcnote			; do not calculate duration
00012B80                            
00012B80                            .timer
00012B80 4EBA EAE4                  		jsr	dCalcDuration(pc)	; calculate duration
00012B84                            .pcnote
00012B84                            	dProcNote 1, 1				; reset necessary channel memory
00012B84 2B4C 0002                M 	move.l	a4,cdata(a5)
00012B88 1B6D 000D 000C           M 	move.b	clastdur(a5),cduration(a5)
00012B8E 0815 0002                M 	btst	#cfbhold,(a5)
00012B92 6600                     M 	bne.s	.endpn
00012B94 422D 0006                M 	clr.b	cenvpos(a5)
00012B98 0815 0003                M 	btst	#cfbmod,(a5)
00012B9C 6700                     M 	beq.s	.endpn
00012B9E 226D 0010                M 	movea.l	cmod(a5),a1
00012BA2 1B59 0010                M 	move.b	(a1)+,cmoddelay(a5)
00012BA6 1B59 0016                M 	move.b	(a1)+,cmodspeed(a5)
00012BAA 1B59 0017                M 	move.b	(a1)+,cmodstep(a5)
00012BAE 1011                     M 	move.b	(a1),d0
00012BB0 E208                     M 	lsr.b	#1,d0
00012BB2 1B40 0018                M 	move.b	d0,cmodcount(a5)
00012BB6 426D 0014                M 	clr.w	cmodfreq(a5)
00012BBA                          M .endpn
00012BBA                            
00012BBA 6100 0000                  		bsr.w	dUpdateFreqPSG		; update hardware frequency
00012BBE 6100 0000                  		bsr.w	dEnvProgPSG		; run envelope program
00012BC2 51CF FEA8                  		dbf	d7,dAMPSnextPSGSFX	; make sure to run all the channels
00012BC6                            	; continue to check tracker and end loop
00012BC6                            ; ===========================================================================
00012BC6                            ; ---------------------------------------------------------------------------
00012BC6                            ; End channel loop and check if tracker debugger should be opened
00012BC6                            ; ---------------------------------------------------------------------------
00012BC6                            
00012BC6                            dCheckTracker:
00012BC6 4A38 839A                  		tst.b	msChktracker.w		; check if tracker debugger flag was set
00012BCA 6700                       		beq.s	.rts			; if not, skip
00012BCC 4238 839A                  		clr.b	msChktracker.w		; clear that flag
00012BD0                            		AMPS_Debug_ChkTracker		; run debugger
00012BD0                          M .fail
00012BD0 4EB9 0001 0E20           M 	jsr	amps_debugr_chktracker
00012BD6                            .rts
00012BD6 4E75                       		rts
00012BD8                            ; ===========================================================================
00012BD8                            ; ---------------------------------------------------------------------------
00012BD8                            ; Music PSG channel loop
00012BD8                            ; ---------------------------------------------------------------------------
00012BD8                            
00012BD8                            dAMPSdoPSG:
00012BD8 7E02                       		moveq	#Mus_PSG-1,d7		; get total number of music PSG channels to d7
00012BDA 4DFA FD8A                  		lea	dFreqPSG(pc),a6		; load PSG frequency table for quick access to a6
00012BDE                            
00012BDE                            dAMPSnextPSG:
00012BDE DAFC 002C                  		add.w	#cSize,a5		; go to the next channe
00012BE2 4A15                       		tst.b	(a5)			; check if channel is running a tracker
00012BE4 6A00 0000                  		bpl.w	.next			; if not, branch
00012BE8 532D 000C                  		subq.b	#1,cDuration(a5)	; decrease note duration
00012BEC 6700 0000                  		beq.w	.update			; if timed out, update channel
00012BF0                            
00012BF0                            	dNoteToutPSG				; handle PSG-specific note timeout behavior
00012BF0                          M 	dnotetouthandler
00012BF0 4A2D 001C                M 	tst.b	cnotetimecur(a5)
00012BF4 6700                     M 	beq.s	.endt
00012BF6 532D 001C                M 	subq.b	#1,cnotetimecur(a5)
00012BFA 6600                     M 	bne.s	.endt
00012BFC 08D5 0000                M 	bset	#cfbrest,(a5)
00012C00 6100 0000                M 	bsr.w	dmutepsgmus
00012C04 6000                     M 	bra.s	.next
00012C06                          M .endt
00012C06                            	dCalcFreq				; calculate channel base frequency
00012C06 1C2D 0007                M 	move.b	cdetune(a5),d6
00012C0A 4886                     M 	ext.w	d6
00012C0C DC6D 000E                M 	add.w	cfreq(a5),d6
00012C10                            	dModulate				; run modulation code
00012C10 0815 0003                M 	btst	#cfbmod,(a5)
00012C14 6700                     M 	beq.s	.noret
00012C16 4A2D 0010                M 	tst.b	cmoddelay(a5)
00012C1A 6700                     M 	beq.s	.started
00012C1C 532D 0010                M 	subq.b	#1,cmoddelay(a5)
00012C20                          M .noret
00012C20 6000                     M 	bra.s	.endm
00012C22                          M .started
00012C22 532D 0016                M 	subq.b	#1,cmodspeed(a5)
00012C26 66F8                     M 	bne.s	.noret
00012C28 226D 0010                M 	movea.l	cmod(a5),a1
00012C2C 1B69 0001 0016           M 	move.b	1(a1),cmodspeed(a5)
00012C32 4A2D 0018                M 	tst.b	cmodcount(a5)
00012C36 6600                     M 	bne.s	.norev
00012C38 1B69 0003 0018           M 	move.b	3(a1),cmodcount(a5)
00012C3E 442D 0017                M 	neg.b	cmodstep(a5)
00012C42                          M .norev
00012C42 532D 0018                M 	subq.b	#1,cmodcount(a5)
00012C46 1A2D 0017                M 	move.b	cmodstep(a5),d5
00012C4A 4885                     M 	ext.w	d5
00012C4C DA6D 0014                M 	add.w	cmodfreq(a5),d5
00012C50 3B45 0014                M 	move.w	d5,cmodfreq(a5)
00012C54 DC45                     M 	add.w	d5,d6
00012C56 6100 0000                  		bsr.w	dUpdateFreqPSG2		; if frequency needs changing, do it
00012C5A                            
00012C5A                            .endm
00012C5A 6100 0000                  		bsr.w	dEnvelopePSG		; run envelope program
00012C5E                            .next
00012C5E 51CF FF7E                  		dbf	d7,dAMPSnextPSG		; make sure to run all the channels
00012C62 4EFA EA1A                  		jmp	dAMPSdoDACSFX(pc)	; after that, process SFX DAC channels
00012C66                            
00012C66                            .update
00012C66 0215 00FA                  		and.b	#$FF-(1<<cfbHold)-(1<<cfbRest),(a5); clear hold and rest flags
00012C6A                            	dDoTracker				; process tracker
00012C6A 286D 0002                M 	movea.l	cdata(a5),a4
00012C6E                          M 	amps_debug_trackupd
00012C6E 220C                     M 	move.l	a4,d1
00012C70 0281 00FF FFFF           M 	and.l	#$ffffff,d1
00012C76 0C81 0000 0000           M 	cmp.l	#sfxaddr,d1
00012C7C 6500                     M 	blo.s	.fail2
00012C7E 0C81 0000 0000           M 	cmp.l	#dacaddr,d1
00012C84 6500                     M 	blo.s	.data
00012C86                          M .fail2
00012C86                          M 	raiseerror	"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",amps_debug_console_channel
00012C86 487A FFFE                M 	pea	*(pc)
00012C8A                          M 	raiseerror2	"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",amps_debug_console_channel
00012C8A 40E7                     M 	move.w	sr,-(sp)
00012C8C                          M 	__fstring_generateargumentscode	"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012C8C =0000001A                M 	__pos:	set instr("Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
00012C8C =00000000                M 	__stack:set	0
00012C8C =00000000                M 	__sp:	set 0
00012C8C                          M 	while	(__pos)
00012C8C =00000021                M 	__endpos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'>')
00012C8C =0000002D                M 	__midpos:	set instr(__pos+5,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",' ')
00012C8C =00000021                M 	__midpos:	= __endpos
00012C8C                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012C8C                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012C8C                          M 	__operand:	substr __pos+1+1,__midpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012C8C                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012C8C                          M 	pushp	"move.l a4,-(sp)"
00012C8C =00000001                M 	__stack:	= __stack+1
00012C8C =00000004                M 	__sp:	= __sp+4
00012C8C =00000022                M 	__pos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
00012C8C =00000028                M 	__endpos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'>')
00012C8C =0000002D                M 	__midpos:	set instr(__pos+5,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",' ')
00012C8C =00000028                M 	__midpos:	= __endpos
00012C8C                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012C8C                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012C8C =00000029                M 	__pos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
00012C8C =00000034                M 	__endpos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'>')
00012C8C =00000030                M 	__midpos:	set instr(__pos+5,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",' ')
00012C8C                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012C8C                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012C8C                          M 	__operand:	substr __pos+1+1,__midpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012C8C                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012C8C                          M 	pushp	"move.l a4,-(sp)"
00012C8C =00000002                M 	__stack:	= __stack+1
00012C8C =00000008                M 	__sp:	= __sp+4
00012C8C =00000000                M 	__pos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
00012C8C                          M 	rept	__stack
00012C8C                          M 	popp	__command
00012C8C 2F0C                     M 	move.l	a4,-(sp)
00012C8E                          M 	popp	__command
00012C8E 2F0C                     M 	move.l	a4,-(sp)
00012C90 4EB9 0000 0000           M 	jsr	errorhandler
00012C96                          M 	__fstring_generatedecodedstring	"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012C96 =00000001                M 	__lpos:	set 1
00012C96 =0000001A                M 	__pos:	set instr("Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
00012C96                          M 	while	(__pos)
00012C96                          M 	__substr:	substr __lpos,__pos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012C96 496E 7661 6C69 6420 7472+M 	dc.b	"Invalid tracker address: "
00012CAF =00000021                M 	__endpos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'>')
00012CAF =0000002D                M 	__midpos:	set instr(__pos+5,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",' ')
00012CAF =00000021                M 	__midpos:	= __endpos
00012CAF                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012CAF                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012CAF                          M 	__param:	substr ,,"hex"
00012CAF 83                       M 	dc.b	hex|3
00012CB0 =00000022                M 	__lpos:	set __endpos+1
00012CB0 =00000022                M 	__pos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
00012CB0                          M 	__substr:	substr __lpos,__pos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012CB0                          M 	dc.b	""
00012CB0 =00000028                M 	__endpos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'>')
00012CB0 =0000002D                M 	__midpos:	set instr(__pos+5,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",' ')
00012CB0 =00000028                M 	__midpos:	= __endpos
00012CB0                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012CB0                          M 	__substr:	substr __pos+1+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012CB0 E0                       M 	dc.b	endl
00012CB1 =00000029                M 	__lpos:	set __endpos+1
00012CB1 =00000029                M 	__pos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
00012CB1                          M 	__substr:	substr __lpos,__pos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012CB1                          M 	dc.b	""
00012CB1 =00000034                M 	__endpos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'>')
00012CB1 =00000030                M 	__midpos:	set instr(__pos+5,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",' ')
00012CB1                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012CB1                          M 	__param:	substr __midpos+1,__endpos-1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012CB1 B3                       M 	dc.b	sym|3
00012CB2 =00000035                M 	__lpos:	set __endpos+1
00012CB2 =00000000                M 	__pos:	set instr(__pos+1,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>",'%<')
00012CB2                          M 	__substr:	substr __lpos,,"Invalid tracker address: %<.l a4>%<endl>%<.l a4 sym>"
00012CB2                          M 	dc.b	""
00012CB2 00                       M 	dc.b	0
00012CB3 00                       M 	dc.b	+_eh_enter_console|(((*&1)^1)*_eh_align_offset)
00012CB4                          M 	even
00012CB4 4EF9 0001 0000           M 	jmp	amps_debug_console_channel
00012CBA                          M 	even
00012CBA                          M .data
00012CBA 7A00                     M 	moveq	#0,d5
00012CBC 1A1C                     M 	move.b	(a4)+,d5
00012CBE 0C05 00E0                M 	cmpi.b	#$e0,d5
00012CC2 6500                     M 	blo.s	.notcomm
00012CC4 4EBA 0000                M 	jsr	dcommands(pc)
00012CC8 60F0                     M 	bra.s	.data
00012CCA 6092                     M 	bra.s	.next
00012CCC                          M .notcomm
00012CCC 4A05                       		tst.b	d5			; check if note is being played
00012CCE 6A00                       		bpl.s	.timer			; if not, it must be a timer. branch
00012CD0                            
00012CD0                            	dGetFreqPSG				; get PSG frequency
00012CD0 0405 0081                M 	subi.b	#$81,d5
00012CD4 6400                     M 	bhs.s	.norest
00012CD6 08D5 0000                M 	bset	#cfbrest,(a5)
00012CDA 3B7C FFFF 000E           M 	move.w	#-1,cfreq(a5)
00012CE0 4EBA 0000                M 	jsr	dmutepsgmus(pc)
00012CE4 6000                     M 	bra.s	.freqgot
00012CE6                          M .norest
00012CE6 DA2D 0008                M 	add.b	cpitch(a5),d5
00012CEA 0245 007F                M 	andi.w	#$7f,d5
00012CEE DA45                     M 	add.w	d5,d5
00012CF0 3B76 5000 000E           M 	move.w	(a6,d5.w),cfreq(a5)
00012CF6                          M 	amps_debug_notepsg
00012CF6 0C05 008C                M 	cmp.b	#dfreqpsg_-dfreqpsg,d5
00012CFA 6500                     M 	blo.s	.ok
00012CFC                          M .fail
00012CFC 4EB9 0001 0C9E           M 	jsr	amps_debugr_notepsg
00012D02                          M .ok
00012D02                          M .freqgot
00012D02 1A1C                       		move.b	(a4)+,d5		; check if next note is a timer
00012D04 6A00                       		bpl.s	.timer			; if yes, handle timer
00012D06 534C                       		subq.w	#1,a4			; else, undo the increment
00012D08 6000                       		bra.s	.pcnote			; do not calculate duration
00012D0A                            
00012D0A                            .timer
00012D0A 4EBA E95A                  		jsr	dCalcDuration(pc)	; calculate duration
00012D0E                            .pcnote
00012D0E                            	dProcNote 0, 1				; reset necessary channel memory
00012D0E 2B4C 0002                M 	move.l	a4,cdata(a5)
00012D12 1B6D 000D 000C           M 	move.b	clastdur(a5),cduration(a5)
00012D18 0815 0002                M 	btst	#cfbhold,(a5)
00012D1C 6600                     M 	bne.s	.endpn
00012D1E 1B6D 001D 001C           M 	move.b	cnotetimemain(a5),cnotetimecur(a5)
00012D24 422D 0006                M 	clr.b	cenvpos(a5)
00012D28 0815 0003                M 	btst	#cfbmod,(a5)
00012D2C 6700                     M 	beq.s	.endpn
00012D2E 226D 0010                M 	movea.l	cmod(a5),a1
00012D32 1B59 0010                M 	move.b	(a1)+,cmoddelay(a5)
00012D36 1B59 0016                M 	move.b	(a1)+,cmodspeed(a5)
00012D3A 1B59 0017                M 	move.b	(a1)+,cmodstep(a5)
00012D3E 1011                     M 	move.b	(a1),d0
00012D40 E208                     M 	lsr.b	#1,d0
00012D42 1B40 0018                M 	move.b	d0,cmodcount(a5)
00012D46 426D 0014                M 	clr.w	cmodfreq(a5)
00012D4A                          M .endpn
00012D4A                            
00012D4A 6100                       		bsr.s	dUpdateFreqPSG		; update hardware frequency
00012D4C 6100 0000                  		bsr.w	dEnvProgPSG		; run envelope program
00012D50 51CF FE8C                  		dbf	d7,dAMPSnextPSG		; make sure to run all the channels
00012D54 4EFA E928                  		jmp	dAMPSdoDACSFX(pc)	; after that, process SFX DAC channels
00012D58                            ; ===========================================================================
00012D58                            ; ---------------------------------------------------------------------------
00012D58                            ; Write PSG frequency to hardware
00012D58                            ; ---------------------------------------------------------------------------
00012D58                            
00012D58                            dUpdateFreqPSG:
00012D58 3C2D 000E                  		move.w	cFreq(a5),d6		; get channel base frequency to d6
00012D5C 6A00                       		bpl.s	.detune			; if it was not rest frequency, branch
00012D5E 08D5 0000                  		bset	#cfbRest,(a5)		; set channel resting flag
00012D62 4E75                       		rts
00012D64                            
00012D64                            .detune
00012D64 102D 0007                  		move.b	cDetune(a5),d0		; load detune value to d0
00012D68 4880                       		ext.w	d0			; extend to word
00012D6A DC40                       		add.w	d0,d6			; add to channel base frequency to d6
00012D6C                            
00012D6C 0815 0003                  		btst	#cfbMod,(a5)		; check if channel is modulating
00012D70 6700                       		beq.s	dUpdateFreqPSG2		; if not, branch
00012D72 DC6D 0014                  		add.w	cModFreq(a5),d6		; add modulation frequency offset to d6
00012D76                            
00012D76                            dUpdateFreqPSG2:
00012D76 0815 0001                  		btst	#cfbInt,(a5)		; is channel interrupted by sfx?
00012D7A 6600                       		bne.s	locret_dUpdateFreqPSG	; if so, skip
00012D7C                            
00012D7C                            dUpdateFreqPSG3:
00012D7C 0815 0000                  		btst	#cfbRest,(a5)		; is this channel resting
00012D80 6600                       		bne.s	locret_dUpdateFreqPSG	; if so, skip
00012D82                            
00012D82 102D 0001                  		move.b	cType(a5),d0		; load channel type value to d0
00012D86 0C00 00E0                  		cmpi.b	#ctPSG4,d0		; check if this channel is in PSG4 mode
00012D8A 6600                       		bne.s	.notPSG4		; if not, branch
00012D8C 70C0                       		moveq	#$FFFFFF00|ctPSG3,d0	; load PSG3 type value instead
00012D8E                            
00012D8E                            .notPSG4
00012D8E 3206                       		move.w	d6,d1			; copy frequency to d1
00012D90 0201 000F                  		andi.b	#$F,d1			; get the low nibble of it
00012D94 8001                       		or.b	d1,d0			; combine with channel type
00012D96                            ; ---------------------------------------------------------------------------
00012D96                            ; Note about the and instruction below: If this instruction is
00012D96                            ; not commented out, the instashield SFX will not sound correct.
00012D96                            ; This instruction was removed in Sonic 3K because of this, but
00012D96                            ; this can cause issues when values overflow the valid range of
00012D96                            ; PSG frequency. This may cause erroneous behavior if not anded,
00012D96                            ; but will also make the instashield SFX not sound correct.
00012D96                            ; Comment out the instruction with caution, if you are planning
00012D96                            ; to port said sound effect to this driver. This has not caused
00012D96                            ; any issues for me, and if you are careful you can avoid any
00012D96                            ; such case, but beware of this issue!
00012D96                            ; ---------------------------------------------------------------------------
00012D96                            
00012D96 E84E                       		lsr.w	#4,d6			; get the 2 higher nibbles of frequency
00012D98 0206 003F                  		andi.b	#$3F,d6			; clear any extra bits that aren't valid
00012D9C 13C0 00C0 0011             		move.b	d0,dPSG			; write frequency low nibble and latch channel
00012DA2 13C6 00C0 0011             		move.b	d6,dPSG			; write frequency high nibbles to PSG
00012DA8                            
00012DA8                            locret_dUpdateFreqPSG:
00012DA8 4E75                       		rts
00012DAA                            ; ===========================================================================
00012DAA                            ; ---------------------------------------------------------------------------
00012DAA                            ; Routine for running envelope programs
00012DAA                            ; ---------------------------------------------------------------------------
00012DAA                            
00012DAA                            dEnvProgPSG:
00012DAA 1A2D 0009                  		move.b	cVolume(a5),d5		; load channel volume to d5
00012DAE DA38 8119                  		add.b	mMasterVolPSG.w,d5	; add PSG master volume to d5
00012DB2                            
00012DB2 7800                       		moveq	#0,d4
00012DB4 182D 000B                  		move.b	cVolEnv(a5),d4		; load volume envelope ID to d4
00012DB8 6700                       		beq.s	dUpdateVolPSG2		; if 0, update volume only
00012DBA 6000                       		bra.s	dEnvProgPSG2		; continue to run code below
00012DBC                            
00012DBC                            dEnvelopePSG:
00012DBC 7800                       		moveq	#0,d4
00012DBE 182D 000B                  		move.b	cVolEnv(a5),d4		; load volume envelope ID to d4
00012DC2 6700                       		beq.s	locret_UpdVolPSG	; if 0, return
00012DC4                            
00012DC4 1A2D 0009                  		move.b	cVolume(a5),d5		; load channel volume to d5
00012DC8 DA38 8119                  		add.b	mMasterVolPSG.w,d5	; add PSG master volume to d5
00012DCC                            
00012DCC                            dEnvProgPSG2:
00012DCC                            		AMPS_Debug_VolEnvID		; check if volume envelope ID is valid
00012DCC 0C04 0000                M 	cmp.b	#(volenvs_end-volenvs)/4,d4
00012DD0 6300                     M 	bls.s	.ok
00012DD2 4EB9 0001 0C66           M 	jsr	amps_debugr_volenvid
00012DD8                          M .ok
00012DD8                            
00012DD8 43FA 0000                  		lea	VolEnvs-4(pc),a1	; load volume envelope data array
00012DDC D844                       		add.w	d4,d4			; quadruple volume envelope ID
00012DDE D844                       		add.w	d4,d4			; (each entry is 4 bytes in size)
00012DE0 2271 4000                  		move.l	(a1,d4.w),a1		; get pointer to volume envelope data
00012DE4                            
00012DE4 7200                       		moveq	#0,d1
00012DE6 7000                       		moveq	#0,d0
00012DE8                            
00012DE8                            dEnvProgPSG3:
00012DE8 122D 0006                  		move.b	cEnvPos(a5),d1		; get envelope position to d1
00012DEC 1031 1000                  		move.b	(a1,d1.w),d0		; get the date in that position
00012DF0 6B00                       		bmi.s	dEnvCommand		; if it is a command, handle it
00012DF2                            
00012DF2 522D 0006                  		addq.b	#1,cEnvPos(a5)		; increment envelope position
00012DF6 DA00                       		add.b	d0,d5			; add envelope volume to d5
00012DF8                            	; continue to update PSG volume
00012DF8                            ; ===========================================================================
00012DF8                            ; ---------------------------------------------------------------------------
00012DF8                            ; Routine for updating PSG volume to hardware
00012DF8                            ; ---------------------------------------------------------------------------
00012DF8                            
00012DF8                            dUpdateVolPSG2:
00012DF8 0C05 000F                  		cmpi.b	#$F,d5			; check if volume is out of range
00012DFC 6300                       		bls.s	dUpdateVolPSG		; if not, branch
00012DFE 7A0F                       		moveq	#$F,d5			; cap volume to silent
00012E00                            
00012E00                            dUpdateVolPSG:
00012E00 0815 0000                  		btst	#cfbRest,(a5)		; is this channel resting
00012E04 6600                       		bne.s	locret_UpdVolPSG	; if is, do not update
00012E06 0815 0001                  		btst	#cfbInt,(a5)		; is channel interrupted by sfx?
00012E0A 6600                       		bne.s	locret_UpdVolPSG	; if is, do not update
00012E0C                            
00012E0C 0815 0002                  		btst	#cfbHold,(a5)		; check if note is held
00012E10 6700                       		beq.s	dUpdVolPSGset		; if not, update volume
00012E12 BAFC 82D6                  		cmp.w	#mSFXDAC1,a5		; check if this is a SFX channel
00012E16 6400                       		bhs.s	dUpdVolPSGset		; if so, update volume
00012E18                            
00012E18 4A2D 001D                  		tst.b	cNoteTimeMain(a5)	; check if note timeout is active
00012E1C 6700                       		beq.s	dUpdVolPSGset		; if not, update volume
00012E1E 4A2D 001C                  		tst.b	cNoteTimeCur(a5)	; is note stopped already?
00012E22 6700                       		beq.s	locret_UpdVolPSG	; if is, do not update
00012E24                            
00012E24                            dUpdVolPSGset:
00012E24 8A2D 0001                  		or.b	cType(a5),d5		; combine channel type value with volume
00012E28 0605 0010                  		addi.b	#$10,d5			; set volume update bit
00012E2C 13C5 00C0 0011             		move.b	d5,dPSG			; write volume command to PSG port
00012E32                            
00012E32                            locret_UpdVolPSG:
00012E32 4E75                       		rts
00012E34                            ; ===========================================================================
00012E34                            ; ---------------------------------------------------------------------------
00012E34                            ; Subroutine for handling volume envelope commands
00012E34                            ; ---------------------------------------------------------------------------
00012E34                            
00012E34                            dEnvCommand:
00012E34                            		AMPS_Debug_VolEnvCmd		; check if command is valid
00012E34 0C00 0088                M 	cmp.b	#elast,d0
00012E38 6400                     M 	bhs.s	.fail
00012E3A 0C00 0080                M 	cmp.b	#$80,d0
00012E3E 6500                     M 	blo.s	.fail
00012E40 0800 0000                M 	btst	#0,d0
00012E44 6700                     M 	beq.s	.ok
00012E46                          M .fail
00012E46                          M 	raiseerror2	"Volume envelope command invalid: %<.b d0>",amps_debug_console_channel
00012E46 40E7                     M 	move.w	sr,-(sp)
00012E48                          M 	__fstring_generateargumentscode	"Volume envelope command invalid: %<.b d0>"
00012E48 =00000022                M 	__pos:	set instr("Volume envelope command invalid: %<.b d0>",'%<')
00012E48 =00000000                M 	__stack:set	0
00012E48 =00000000                M 	__sp:	set 0
00012E48                          M 	while	(__pos)
00012E48 =00000029                M 	__endpos:	set instr(__pos+1,"Volume envelope command invalid: %<.b d0>",'>')
00012E48 =00000000                M 	__midpos:	set instr(__pos+5,"Volume envelope command invalid: %<.b d0>",' ')
00012E48 =00000029                M 	__midpos:	= __endpos
00012E48                          M 	__substr:	substr __pos+1+1,__endpos-1,"Volume envelope command invalid: %<.b d0>"
00012E48                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Volume envelope command invalid: %<.b d0>"
00012E48                          M 	__operand:	substr __pos+1+1,__midpos-1,"Volume envelope command invalid: %<.b d0>"
00012E48                          M 	__param:	substr __midpos+1,__endpos-1,"Volume envelope command invalid: %<.b d0>"
00012E48                          M 	pushp	"move.b d0,1(sp)"
00012E48                          M 	pushp	"subq.w	#2, sp"
00012E48 =00000002                M 	__stack:	= __stack+2
00012E48 =00000002                M 	__sp:	= __sp+2
00012E48 =00000000                M 	__pos:	set instr(__pos+1,"Volume envelope command invalid: %<.b d0>",'%<')
00012E48                          M 	rept	__stack
00012E48                          M 	popp	__command
00012E48 554F                     M 	subq.w	#2,sp
00012E4A                          M 	popp	__command
00012E4A 1F40 0001                M 	move.b	d0,1(sp)
00012E4E 4EB9 0000 0000           M 	jsr	errorhandler
00012E54                          M 	__fstring_generatedecodedstring	"Volume envelope command invalid: %<.b d0>"
00012E54 =00000001                M 	__lpos:	set 1
00012E54 =00000022                M 	__pos:	set instr("Volume envelope command invalid: %<.b d0>",'%<')
00012E54                          M 	while	(__pos)
00012E54                          M 	__substr:	substr __lpos,__pos-1,"Volume envelope command invalid: %<.b d0>"
00012E54 566F 6C75 6D65 2065 6E76+M 	dc.b	"Volume envelope command invalid: "
00012E75 =00000029                M 	__endpos:	set instr(__pos+1,"Volume envelope command invalid: %<.b d0>",'>')
00012E75 =00000000                M 	__midpos:	set instr(__pos+5,"Volume envelope command invalid: %<.b d0>",' ')
00012E75 =00000029                M 	__midpos:	= __endpos
00012E75                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"Volume envelope command invalid: %<.b d0>"
00012E75                          M 	__param:	substr __midpos+1,__endpos-1,"Volume envelope command invalid: %<.b d0>"
00012E75                          M 	__param:	substr ,,"hex"
00012E75 80                       M 	dc.b	hex
00012E76 =0000002A                M 	__lpos:	set __endpos+1
00012E76 =00000000                M 	__pos:	set instr(__pos+1,"Volume envelope command invalid: %<.b d0>",'%<')
00012E76                          M 	__substr:	substr __lpos,,"Volume envelope command invalid: %<.b d0>"
00012E76                          M 	dc.b	""
00012E76 00                       M 	dc.b	0
00012E77 00                       M 	dc.b	+_eh_enter_console|(((*&1)^1)*_eh_align_offset)
00012E78                          M 	even
00012E78 4EF9 0001 0000           M 	jmp	amps_debug_console_channel
00012E7E                          M 	even
00012E7E                          M .ok
00012E7E                            
00012E7E 4EFB 0000                  		jmp	.comm-$80(pc,d0.w)	; jump to command handler
00012E82                            
00012E82                            .comm
00012E82 6000                       		bra.s	.reset			; 80 - Loop back to beginning
00012E84 6000                       		bra.s	.hold			; 82 - Hold the envelope at current level
00012E86 6000                       		bra.s	.loop			; 84 - Go to position defined by the next byte
00012E88                            	;	bra.s	.stop			; 86 - Stop current note and envelope
00012E88                            ; ---------------------------------------------------------------------------
00012E88                            
00012E88                            .stop
00012E88 08D5 0000                  		bset	#cfbRest,(a5)		; set channel resting bit
00012E8C 6000                       		bra.s	dMutePSGmus		; nute the channel
00012E8E                            ; ---------------------------------------------------------------------------
00012E8E                            
00012E8E                            .hold
00012E8E 532D 0006                  		subq.b	#1,cEnvPos(a5)		; decrease envelope position
00012E92 4EFA FF54                  		jmp	dEnvProgPSG3(pc)	; run the program again (make sure volume fades work)
00012E96                            ; ---------------------------------------------------------------------------
00012E96                            
00012E96                            .reset
00012E96 422D 0006                  		clr.b	cEnvPos(a5)		; set envelope position to 0
00012E9A 4EFA FF4C                  		jmp	dEnvProgPSG3(pc)	; run the program again
00012E9E                            ; ---------------------------------------------------------------------------
00012E9E                            
00012E9E                            .loop
00012E9E 1B71 1001 0006             		move.b	1(a1,d1.w),cEnvPos(a5)	; set envelope position to the next byte
00012EA4 4EFA FF42                  		jmp	dEnvProgPSG3(pc)	; run the program again
00012EA8                            ; ===========================================================================
00012EA8                            ; ---------------------------------------------------------------------------
00012EA8                            ; Routine for hardware muting a PSG channel
00012EA8                            ; ---------------------------------------------------------------------------
00012EA8                            
00012EA8                            dMutePSGmus:
00012EA8 0815 0001                  		btst	#cfbInt,(a5)		; check if this is a SFX channel
00012EAC 6600                       		bne.s	locret_MutePSG		; if yes, do not update
00012EAE                            
00012EAE                            dMutePSGsfx:
00012EAE 701F                       		moveq	#$1F,d0			; prepare volume update to mute value to d0
00012EB0 802D 0001                  		or.b	cType(a5),d0		; combine channel type value with d0
00012EB4 13C0 00C0 0011             		move.b	d0,dPSG			; write volume command to PSG port
00012EBA                            
00012EBA                            locret_MutePSG:
00012EBA 4E75                       		rts
00012EBC                            ; ===========================================================================
00012EBC                            ; ---------------------------------------------------------------------------
00012EBC                            ; Routine to execute tracker commands
00012EBC                            ;
00012EBC                            ; The reason we use add.b instead of add.w, is to get rid of some bits that
00012EBC                            ; would make this kind of arbitary jumping way more complex than it needs to be.
00012EBC                            ; What do we win by doing this? Why, 8 cycles per command! Thats... Not a lot,
00012EBC                            ; but it may be helpful with speed anyway.
00012EBC                            ; ---------------------------------------------------------------------------
00012EBC                            
00012EBC                            dCommands:
00012EBC DA05                       		add.b	d5,d5			; quadruple command ID
00012EBE DA05                       		add.b	d5,d5			; since each entry is 4 bytes large
00012EC0                            
00012EC0 0815 0004                  		btst	#cfbCond,(a5)		; check if condition state
00012EC4 6600 0000                  		bne.w	.falsecomm		; branch if false
00012EC8 4EFB 5000                  		jmp	.comm-$80(pc,d5.w)	; jump to appropriate handler
00012ECC                            ; ===========================================================================
00012ECC                            ; ---------------------------------------------------------------------------
00012ECC                            ; Command handlers for normal execution
00012ECC                            ; ---------------------------------------------------------------------------
00012ECC                            
00012ECC                            .comm
00012ECC 6000 0000                  	bra.w	dcPan		; E0 - Panning, AMS, FMS (PANAFMS - PAFMS_PAN)
00012ED0 6000 0000                  	bra.w	dcsDetune	; E1 - Set channel frequency displacement to xx (DETUNE_SET)
00012ED4 6000 0000                  	bra.w	dcaDetune	; E2 - Add xx to channel frequency displacement (DETUNE)
00012ED8 6000 0000                  	bra.w	dcsTransp	; E3 - Set channel pitch to xx (TRANSPOSE - TRNSP_SET)
00012EDC 6000 0000                  	bra.w	dcaTransp	; E4 - Add xx to channel pitch (TRANSPOSE - TRNSP_ADD)
00012EE0 6000 0000                  	bra.w	dcsTmulCh	; E5 - Set channel tick multiplier to xx (TICK_MULT - TMULT_CUR)
00012EE4 6000 0000                  	bra.w	dcsTmul		; E6 - Set global tick multiplier to xx (TICK_MULT - TMULT_ALL)
00012EE8 6000 0000                  	bra.w	dcHold		; E7 - Do not allow note on/off for next note (HOLD)
00012EEC 6000 0000                  	bra.w	dcVoice		; E8 - Set Voice/voice/sample to xx (INSTRUMENT - INS_C_FM / INS_C_PSG / INS_C_DAC)
00012EF0 6000 0000                  	bra.w	dcsTempoShoes	; E9 - Set music speed shoes tempo to xx (TEMPO - TEMPO_SET_SPEED)
00012EF4 6000 0000                  	bra.w	dcsTempo	; EA - Set music tempo to xx (TEMPO - TEMPO_SET)
00012EF8 6000 0000                  	bra.w	dcModOn		; EB - Turn on Modulation (MOD_SET - MODS_ON)
00012EFC 6000 0000                  	bra.w	dcModOff	; EC - Turn off Modulation (MOD_SET - MODS_OFF)
00012F00 6000 0000                  	bra.w	dcaVolume	; ED - Add xx to channel volume (VOLUME - VOL_CN_FM / VOL_CN_PSG / VOL_CN_DAC)
00012F04 6000 0000                  	bra.w	dcsVolume	; EE - Set channel volume to xx (VOLUME - VOL_CN_ABS)
00012F08 6000 0000                  	bra.w	dcsLFO		; EF - Set LFO (SET_LFO - LFO_AMSEN)
00012F0C 6000 0000                  	bra.w	dcMod68K	; F0 - Modulation (MOD_SETUP)
00012F10 6000 0000                  	bra.w	dcSampDAC	; F1 - Use sample DAC mode (DAC_MODE - DACM_SAMP)
00012F14 6000 0000                  	bra.w	dcPitchDAC	; F2 - Use pitch DAC mode (DAC_MODE - DACM_NOTE)
00012F18 6000 0000                  	bra.w	dcNoisePSG	; F3 - PSG4 mode to xx (PSG_NOISE - PNOIS_AMPS)
00012F1C 6000 0000                  	bra.w	dcCont		; F4 - Do a continuous SFX loop (CONT_SFX)
00012F20 6000 0000                  	bra.w	dcStop		; F5 - End of channel (TRK_END - TEND_STD)
00012F24 6000 0000                  	bra.w	dcJump		; F6 - Jump to xxxx (GOTO)
00012F28 6000 0000                  	bra.w	dcLoop		; F7 - Loop back to zzzz yy times, xx being the loop index (LOOP)
00012F2C 6000 0000                  	bra.w	dcCall		; F8 - Call pattern at xxxx, saving return point (GOSUB)
00012F30 6000 0000                  	bra.w	dcReturn	; F9 - Return (RETURN)
00012F34 6000 0000                  	bra.w	dcsComm		; FA - Set communications byte yy to xx (SET_COMM - SPECIAL)
00012F38 6000 0000                  	bra.w	dcCond		; FB - Get comms byte y, and compare zz using condition x (COMM_CONDITION)
00012F3C 6000 0000                  	bra.w	dcResetCond	; FC - Reset condition (COMM_RESET)
00012F40 6000 0000                  	bra.w	dcTimeout	; FD - Stop note after xx frames (NOTE_STOP - NSTOP_NORMAL
00012F44 6000 0000                  	bra.w	dcYM		; FE - YM command (YMCMD)
00012F48                            				; FF - META
00012F48                            ; ===========================================================================
00012F48                            ; ---------------------------------------------------------------------------
00012F48                            ; Routine to execute tracker meta and false condition commands
00012F48                            ; ---------------------------------------------------------------------------
00012F48                            
00012F48                            .metacall
00012F48 1A1C                       		move.b	(a4)+,d5		; get next command byte
00012F4A DA45                       		add.w	d5,d5			; quadruple ID
00012F4C DA45                       		add.w	d5,d5			; since each entry is again 4 bytes large
00012F4E 4EFB 5000                  		jmp	.meta(pc,d5.w)		; jump to appropriate meta handler
00012F52                            
00012F52                            .falsecomm
00012F52 4EFB 5000                  		jmp	.false-$80(pc,d5.w)	; jump to appropriate handler (false command)
00012F56                            ; ===========================================================================
00012F56                            ; ---------------------------------------------------------------------------
00012F56                            ; Command handlers for meta commands
00012F56                            ; ---------------------------------------------------------------------------
00012F56                            
00012F56                            .meta
00012F56 6000 0000                  	bra.w	dcWriteDAC1	; FF 00 - Play sample xx on DAC1 (PLAY_DAC - PLAY_DAC1)
00012F5A 6000 0000                  	bra.w	dcWriteDAC2	; FF 01 - Play sample xx on DAC2 (PLAY_DAC - PLAY_DAC2)
00012F5E 6000 0000                  	bra.w	dcsFreq		; FF 02 - Set channel frequency to xxxx (CHFREQ_SET)
00012F62 6000 0000                  	bra.w	dcsFreqNote	; FF 03 - Set channel frequency to note xx (CHFREQ_SET - CHFREQ_NOTE)
00012F66 6000 0000                  	bra.w	dcSpRev		; FF 04 - Increment spindash rev counter (SPINDASH_REV - SDREV_INC)
00012F6A 6000 0000                  	bra.w	dcSpReset	; FF 05 - Reset spindash rev counter (SPINDASH_REV - SDREV_RESET)
00012F6E 6000 0000                  	bra.w	dcaTempoShoes	; FF 06 - Add xx to music speed tempo (TEMPO - TEMPO_ADD_SPEED)
00012F72 6000 0000                  	bra.w	dcaTempo	; FF 07 - Add xx to music tempo (TEMPO - TEMPO_ADD)
00012F76 6000 0000                  	bra.w	dcCondReg	; FF 08 - Get RAM table offset by y, and chk zz with cond x (COMM_CONDITION - COMM_SPEC)
00012F7A 6000 0000                  	bra.w	dcSound		; FF 09 - Play another music/sfx (SND_CMD)
00012F7E 6000 0000                  	bra.w	dcFreqOn	; FF 0A - Enable raw frequency mode (RAW_FREQ)
00012F82 6000 0000                  	bra.w	dcFreqOff	; FF 0B - Disable raw frequency mode (RAW_FREQ - RAW_FREQ_OFF)
00012F86 6000 0000                  	bra.w	dcSpecFM3	; FF 0C - Enable FM3 special mode (SPC_FM3)
00012F8A 6000 0000                  	bra.w	dcFilter	; FF 0D - Set DAC filter bank. (DAC_FILTER)
00012F8E                            
00012F8E 6000 0000                  		bra.w	dcFreeze	; FF 0E - Freeze CPU. Debug flag (DEBUG_STOP_CPU)
00012F92 6000 0000                  		bra.w	dcTracker	; FF 0F - Bring up tracker debugger at end of frame. Debug flag (DEBUG_PRINT_TRACKER)
00012F96                            ; ===========================================================================
00012F96                            ; ---------------------------------------------------------------------------
00012F96                            ; Command handlers for false condition execution
00012F96                            ; ---------------------------------------------------------------------------
00012F96                            
00012F96                            .false
00012F96 524C                       	addq.w	#1,a4
00012F98 4E75                       	rts			; E0 - Panning, AMS, FMS (PANAFMS - PAFMS_PAN)
00012F9A 524C                       	addq.w	#1,a4
00012F9C 4E75                       	rts			; E1 - Add xx to channel frequency displacement (DETUNE)
00012F9E 524C                       	addq.w	#1,a4
00012FA0 4E75                       	rts			; E2 - Add xx to channel frequency displacement (DETUNE)
00012FA2 524C                       	addq.w	#1,a4
00012FA4 4E75                       	rts			; E3 - Set channel pitch to xx (TRANSPOSE - TRNSP_SET)
00012FA6 524C                       	addq.w	#1,a4
00012FA8 4E75                       	rts			; E4 - Add xx to channel pitch (TRANSPOSE - TRNSP_ADD)
00012FAA 6000 0000                  	bra.w	dcsTmulCh	; E5 - Set channel tick multiplier to xx (TICK_MULT - TMULT_CUR)
00012FAE 6000 0000                  	bra.w	dcsTmul		; E6 - Set global tick multiplier to xx (TICK_MULT - TMULT_ALL)
00012FB2 6000 0000                  	bra.w	dcHold		; E7 - Do not allow note on/off for next note (HOLD)
00012FB6 524C                       	addq.w	#1,a4
00012FB8 4E75                       	rts			; E8 - Add xx to music tempo (TEMPO - TEMPO_ADD)
00012FBA 524C                       	addq.w	#1,a4
00012FBC 4E75                       	rts			; E9 - Set music tempo to xx (TEMPO - TEMPO_SET)
00012FBE 524C                       	addq.w	#1,a4
00012FC0 4E75                       	rts			; EA - Set Voice/voice/sample to xx (INSTRUMENT - INS_C_FM / INS_C_PSG / INS_C_DAC)
00012FC2 4E75                       	rts
00012FC4 4E75                       	rts			; EB - Turn on Modulation (MOD_SET - MODS_ON)
00012FC6 4E75                       	rts
00012FC8 4E75                       	rts			; EC - Turn off Modulation (MOD_SET - MODS_OFF)
00012FCA 524C                       	addq.w	#1,a4
00012FCC 4E75                       	rts			; ED - Add xx to channel volume (VOLUME - VOL_CN_FM / VOL_CN_PSG / VOL_CN_DAC)
00012FCE 524C                       	addq.w	#1,a4
00012FD0 4E75                       	rts			; EE - Set channel volume to xx (VOLUME - VOL_CN_ABS)
00012FD2 524C                       	addq.w	#1,a4
00012FD4 4E75                       	rts			; EF - Set LFO (SET_LFO - LFO_AMSEN)
00012FD6 584C                       	addq.w	#4,a4
00012FD8 4E75                       	rts			; F0 - Modulation (MOD_SETUP)
00012FDA 4E75                       	rts
00012FDC 4E75                       	rts			; F1 - Use sample DAC mode (DAC_MODE - DACM_SAMP)
00012FDE 4E75                       	rts
00012FE0 4E75                       	rts			; F2 - Use pitch DAC mode (DAC_MODE - DACM_NOTE)
00012FE2 524C                       	addq.w	#1,a4
00012FE4 4E75                       	rts			; F3 - PSG4 mode to xx (PSG_NOISE - PNOIS_SET)
00012FE6 544C                       	addq.w	#2,a4
00012FE8 4E75                       	rts			; F4 - Do a continuous SFX loop (CONT_SFX)
00012FEA 4E75                       	rts
00012FEC 4E75                       	rts			; F5 - End of channel (TRK_END - TEND_STD)
00012FEE 544C                       	addq.w	#2,a4
00012FF0 4E75                       	rts			; F6 - Jump to xxxx (GOTO)
00012FF2 584C                       	addq.w	#4,a4
00012FF4 4E75                       	rts			; F7 - Loop back to zzzz yy times, xx being the loop index (LOOP)
00012FF6 544C                       	addq.w	#2,a4
00012FF8 4E75                       	rts			; F8 - Call pattern at xxxx, saving return point (GOSUB)
00012FFA 4E75                       	rts
00012FFC 4E75                       	rts			; F9 - Return (RETURN)
00012FFE 6000 0000                  	bra.w	dcsComm		; FA - Set communications byte yy to xx (SET_COMM - SPECIAL)
00013002 6000 0000                  	bra.w	dcCond		; FB - Get comms byte y, and compare zz using condition x (COMM_CONDITION)
00013006 6000 0000                  	bra.w	dcResetCond	; FC - Reset condition (COND_RESET)
0001300A 524C                       	addq.w	#1,a4
0001300C 4E75                       	rts			; FD - Stop note after xx frames (NOTE_STOP - NSTOP_NORMAL
0001300E 524C                       	addq.w	#1,a4
00013010 4E75                       	rts			; FE - YM command (YMCMD)
00013012 6000 FF34                  	bra.w	.metacall	; FF - META
00013016                            ; ===========================================================================
00013016                            ; ---------------------------------------------------------------------------
00013016                            ; Tracker commands for writing direct DAC samples to Dual PCM.
00013016                            ; Note that this will override any DAC already being played,
00013016                            ; and in turn trackers may override these DAC samples at any
00013016                            ; time. Use with caution!
00013016                            ; ---------------------------------------------------------------------------
00013016                            
00013016                            dcWriteDAC1:
00013016 7000                       		moveq	#0,d0
00013018 101C                       		move.b	(a4)+,d0		; get note to write
0001301A 4EFA E552                  		jmp	dNoteWriteDAC1(pc)	; note-on
0001301E                            
0001301E                            dcWriteDAC2:
0001301E 7000                       		moveq	#0,d0
00013020 101C                       		move.b	(a4)+,d0		; get note to write
00013022 4EFA E53C                  		jmp	dNoteWriteDAC2(pc)	; note-on
00013026                            ; ===========================================================================
00013026                            ; ---------------------------------------------------------------------------
00013026                            ; Tracker commands for handling spindash revving.
00013026                            ; The way spindash revving works, is it actually just
00013026                            ; increments a counter each time, and this counter is
00013026                            ; added into the channel pitch offset.
00013026                            ; ---------------------------------------------------------------------------
00013026                            
00013026                            dcSpRev:
00013026 1038 811B                  		move.b	mSpindash.w,d0		; load spindash rev counter to d0
0001302A 5238 811B                  		addq.b	#1,mSpindash.w		; increment spindash rev counter
0001302E D12D 0008                  		add.b	d0,cPitch(a5)		; add d0 to channel pitch offset
00013032                            
00013032 0C00 000B                  		cmp.b	#$C-1,d0		; check if this is the max pitch offset
00013036 6500                       		blo.s	.rts			; if not, skip
00013038 5338 811B                  		subq.b	#1,mSpindash.w		; cap at pitch offset $C
0001303C                            
0001303C                            .rts
0001303C 4E75                       		rts
0001303E                            
0001303E                            dcSpReset:
0001303E 4238 811B                  		clr.b	mSpindash.w		; reset spindash rev counter
00013042 4E75                       		rts
00013044                            ; ===========================================================================
00013044                            ; ---------------------------------------------------------------------------
00013044                            ; Tracker command for changing channel panning
00013044                            ; ---------------------------------------------------------------------------
00013044                            
00013044                            dcPan:
00013044                            		AMPS_Debug_dcPan		; check if this channel can pan
00013044 4A2D 0001                M 	tst.b	ctype(a5)
00013048 6A00                     M 	bpl.s	.ok
0001304A                          M 	raiseerror	"sPan on a PSG channel!",amps_debug_console_channel
0001304A 487A FFFE                M 	pea	*(pc)
0001304E                          M 	raiseerror2	"sPan on a PSG channel!",amps_debug_console_channel
0001304E 40E7                     M 	move.w	sr,-(sp)
00013050                          M 	__fstring_generateargumentscode	"sPan on a PSG channel!"
00013050 =00000000                M 	__pos:	set instr("sPan on a PSG channel!",'%<')
00013050 =00000000                M 	__stack:set	0
00013050 =00000000                M 	__sp:	set 0
00013050                          M 	while	(__pos)
00013050                          M 	rept	__stack
00013050 4EB9 0000 0000           M 	jsr	errorhandler
00013056                          M 	__fstring_generatedecodedstring	"sPan on a PSG channel!"
00013056 =00000001                M 	__lpos:	set 1
00013056 =00000000                M 	__pos:	set instr("sPan on a PSG channel!",'%<')
00013056                          M 	while	(__pos)
00013056                          M 	__substr:	substr __lpos,,"sPan on a PSG channel!"
00013056 7350 616E 206F 6E20 6120+M 	dc.b	"sPan on a PSG channel!"
0001306C 00                       M 	dc.b	0
0001306D 00                       M 	dc.b	+_eh_enter_console|(((*&1)^1)*_eh_align_offset)
0001306E                          M 	even
0001306E 4EF9 0001 0000           M 	jmp	amps_debug_console_channel
00013074                          M 	even
00013074                          M .ok
00013074                            
00013074 7237                       		moveq	#$37,d1			; prepare bits to keep
00013076 C22D 0006                  		and.b	cPanning(a5),d1		; and with channel LFO settings
0001307A 821C                       		or.b	(a4)+,d1		; or panning value
0001307C 1B41 0006                  		move.b	d1,cPanning(a5)		; save as channel panning
00013080                            
00013080 70B4                       		moveq	#$FFFFFFB4,d0		; YM command: Panning & LFO
00013082 082D 0003 0001             		btst	#ctbDAC,cType(a5)	; check if this is a DAC channel
00013088 6700 F54E                  		beq.w	dWriteYMchnInt		; if not, write channel-specific YM command
0001308C                            ; ---------------------------------------------------------------------------
0001308C                            ; Since the DAC channels have or based panning behavior, we need this
0001308C                            ; piece of code to update its panning
0001308C                            ; ---------------------------------------------------------------------------
0001308C                            
0001308C 1238 8124                  		move.b	mDAC1+cPanning.w,d1	; read panning value from music DAC1
00013090 0838 0001 811E             		btst	#cfbInt,mDAC1+cFlags.w	; check if music DAC1 is interrupted by SFX
00013096 6700                       		beq.s	.nodacsfx		; if not, use music DAC1 panning
00013098 1238 82DC                  		move.b	mSFXDAC1+cPanning.w,d1	; read panning value from SFX DAC1
0001309C                            
0001309C                            .nodacsfx
0001309C 8238 8150                  		or.b	mDAC2+cPanning.w,d1	; or the panning value from music DAC2
000130A0 70B6                       		moveq	#$FFFFFFB4+2,d0		; YM address: Panning and LFO (FM3/6)
000130A2 4EFA F588                  		jmp	WriteYM_Pt2(pc)		; write to part 2 channel
000130A6                            ; ===========================================================================
000130A6                            ; ---------------------------------------------------------------------------
000130A6                            ; Tracker commands for changing detune offset
000130A6                            ; ---------------------------------------------------------------------------
000130A6                            
000130A6                            dcaDetune:
000130A6 101C                       		move.b	(a4)+,d0		; load detune offset from tracker
000130A8 D12D 0007                  		add.b	d0,cDetune(a5)		; Add to channel detune offset
000130AC 4E75                       		rts
000130AE                            
000130AE                            dcsDetune:
000130AE 1B5C 0007                  		move.b	(a4)+,cDetune(a5)	; load detune offset from tracker to channel
000130B2 4E75                       		rts
000130B4                            ; ===========================================================================
000130B4                            ; ---------------------------------------------------------------------------
000130B4                            ; Tracker command for changing channel volume
000130B4                            ; ---------------------------------------------------------------------------
000130B4                            
000130B4                            dcsVolume:
000130B4 1B5C 0009                  		move.b	(a4)+,cVolume(a5)	; load volume from tracker to channel
000130B8 08D5 0005                  		bset	#cfbVol,(a5)		; set volume update flag
000130BC 4E75                       		rts
000130BE                            
000130BE                            dcaVolume:
000130BE 101C                       		move.b	(a4)+,d0		; load volume from tracker
000130C0 D12D 0009                  		add.b	d0,cVolume(a5)		; add to channel volume
000130C4 08D5 0005                  		bset	#cfbVol,(a5)		; set volume update flag
000130C8 4E75                       		rts
000130CA                            ; ===========================================================================
000130CA                            ; ---------------------------------------------------------------------------
000130CA                            ; Tracker command for setting DAC to sample mode and resetting frequency
000130CA                            ; ---------------------------------------------------------------------------
000130CA                            
000130CA                            dcSampDAC:
000130CA 3B7C 0100 000E             		move.w	#$100,cFreq(a5)		; reset to defualt base frequency
000130D0 0895 0000                  		bclr	#cfbMode,(a5)		; enable sample mode
000130D4 4E75                       		rts
000130D6                            ; ===========================================================================
000130D6                            ; ---------------------------------------------------------------------------
000130D6                            ; Tracker command for setting DAC to pitch mode
000130D6                            ; ---------------------------------------------------------------------------
000130D6                            
000130D6                            dcPitchDAC:
000130D6 08D5 0000                  		bset	#cfbMode,(a5)		; enable pitch mode
000130DA 4E75                       		rts
000130DC                            ; ===========================================================================
000130DC                            ; ---------------------------------------------------------------------------
000130DC                            ; Tracker commands for changing channel tick multiplier
000130DC                            ; ---------------------------------------------------------------------------
000130DC                            
000130DC                            dcsTmulCh:
000130DC 1B5C 000A                  		move.b	(a4)+,cTick(a5)		; load tick multiplier from tracker to channel
000130E0 4E75                       		rts
000130E2                            
000130E2                            dcsTmul:
000130E2 101C                       		move.b	(a4)+,d0		; load tick multiplier from tracker to d0
000130E4 =FFFF811E                  .x =	mDAC1					; start at DAC1
000130E4                            	rept Mus_Ch				; do for all music channels
000130E4                            		move.b	d0,cTick+.x.w		; set channel tick multiplier
000130E4                            .x =		.x+cSize			; go to next channel
000130E4                            	endr
000130E4 11C0 8128                M 	move.b	d0,ctick+.x.w
000130E8 =FFFF814A                M .x	=	.x+csize
000130E8 11C0 8154                M 	move.b	d0,ctick+.x.w
000130EC =FFFF8176                M .x	=	.x+csize
000130EC 11C0 8180                M 	move.b	d0,ctick+.x.w
000130F0 =FFFF81A2                M .x	=	.x+csize
000130F0 11C0 81AC                M 	move.b	d0,ctick+.x.w
000130F4 =FFFF81CE                M .x	=	.x+csize
000130F4 11C0 81D8                M 	move.b	d0,ctick+.x.w
000130F8 =FFFF81FA                M .x	=	.x+csize
000130F8 11C0 8204                M 	move.b	d0,ctick+.x.w
000130FC =FFFF8226                M .x	=	.x+csize
000130FC 11C0 8230                M 	move.b	d0,ctick+.x.w
00013100 =FFFF8252                M .x	=	.x+csize
00013100 11C0 825C                M 	move.b	d0,ctick+.x.w
00013104 =FFFF827E                M .x	=	.x+csize
00013104 11C0 8288                M 	move.b	d0,ctick+.x.w
00013108 =FFFF82AA                M .x	=	.x+csize
00013108 11C0 82B4                M 	move.b	d0,ctick+.x.w
0001310C =FFFF82D6                M .x	=	.x+csize
0001310C 4E75                       		rts
0001310E                            ; ===========================================================================
0001310E                            ; ---------------------------------------------------------------------------
0001310E                            ; Tracker command for enabling or disabling the hold flag
0001310E                            ; ---------------------------------------------------------------------------
0001310E                            
0001310E                            dcHold:
0001310E 0855 0002                  		bchg	#cfbHold,(a5)		; flip the channel hold flag
00013112 4E75                       		rts
00013114                            ; ===========================================================================
00013114                            ; ---------------------------------------------------------------------------
00013114                            ; Tracker command for enabling or disabling note timeout
00013114                            ; ---------------------------------------------------------------------------
00013114                            
00013114                            dcTimeout:
00013114                            		AMPS_Debug_dcTimeout		; check if this channel has timeout support
00013114 BAFC 82D6                M 	cmp.w	#msfxdac1,a5
00013118 6500                     M 	blo.s	.ok
0001311A                          M 	raiseerror	"sNoteTimeOut on a SFX channel!",amps_debug_console_channel
0001311A 487A FFFE                M 	pea	*(pc)
0001311E                          M 	raiseerror2	"sNoteTimeOut on a SFX channel!",amps_debug_console_channel
0001311E 40E7                     M 	move.w	sr,-(sp)
00013120                          M 	__fstring_generateargumentscode	"sNoteTimeOut on a SFX channel!"
00013120 =00000000                M 	__pos:	set instr("sNoteTimeOut on a SFX channel!",'%<')
00013120 =00000000                M 	__stack:set	0
00013120 =00000000                M 	__sp:	set 0
00013120                          M 	while	(__pos)
00013120                          M 	rept	__stack
00013120 4EB9 0000 0000           M 	jsr	errorhandler
00013126                          M 	__fstring_generatedecodedstring	"sNoteTimeOut on a SFX channel!"
00013126 =00000001                M 	__lpos:	set 1
00013126 =00000000                M 	__pos:	set instr("sNoteTimeOut on a SFX channel!",'%<')
00013126                          M 	while	(__pos)
00013126                          M 	__substr:	substr __lpos,,"sNoteTimeOut on a SFX channel!"
00013126 734E 6F74 6554 696D 654F+M 	dc.b	"sNoteTimeOut on a SFX channel!"
00013144 00                       M 	dc.b	0
00013145 00                       M 	dc.b	+_eh_enter_console|(((*&1)^1)*_eh_align_offset)
00013146                          M 	even
00013146 4EF9 0001 0000           M 	jmp	amps_debug_console_channel
0001314C                          M 	even
0001314C                          M .ok
0001314C                            
0001314C 1B54 001D                  		move.b	(a4),cNoteTimeMain(a5)	; load note timeout from tracker to channel
00013150 1B5C 001C                  		move.b	(a4)+,cNoteTimeCur(a5)	; ''
00013154 4E75                       		rts
00013156                            ; ===========================================================================
00013156                            ; ---------------------------------------------------------------------------
00013156                            ; Tracker commands for changing channel pitch
00013156                            ; ---------------------------------------------------------------------------
00013156                            
00013156                            dcaTransp:
00013156 101C                       		move.b	(a4)+,d0		; load pitch offset from tracker
00013158 D12D 0008                  		add.b	d0,cPitch(a5)		; add to channel pitch offset
0001315C 4E75                       		rts
0001315E                            
0001315E                            dcsTransp:
0001315E 1B5C 0008                  		move.b	(a4)+,cPitch(a5)	; load pitch offset from tracker to channel
00013162 4E75                       		rts
00013164                            ; ===========================================================================
00013164                            ; ---------------------------------------------------------------------------
00013164                            ; Tracker commands for tempo control
00013164                            ; ---------------------------------------------------------------------------
00013164                            
00013164                            dcsTempoShoes:
00013164 101C                       		move.b	(a4)+,d0		; load tempo value from tracker
00013166 11C0 8113                  		move.b	d0,mTempoSpeed.w	; save as the speed shoes tempo
0001316A 0838 0001 8100             		btst	#mfbSpeed,mFlags.w	; check if speed shoes mode is active
00013170 6600                       		bne.s	dcsTempoCur		; if is, load as current tempo too
00013172 4E75                       		rts
00013174                            
00013174                            dcsTempo:
00013174 101C                       		move.b	(a4)+,d0		; load tempo value from tracker
00013176 11C0 8112                  		move.b	d0,mTempoMain.w		; save as the main tempo
0001317A 0838 0001 8100             		btst	#mfbSpeed,mFlags.w	; check if speed shoes mode is active
00013180 6600                       		bne.s	locret_Tempo		; if not, load as current tempo too
00013182                            
00013182                            dcsTempoCur:
00013182 11C0 8114                  		move.b	d0,mTempo.w		; save as current tempo
00013186                            
00013186                            locret_Tempo:
00013186 4E75                       		rts
00013188                            
00013188                            dcaTempoShoes:
00013188 101C                       		move.b	(a4)+,d0		; load tempo value from tracker
0001318A D138 8113                  		add.b	d0,mTempoSpeed.w	; add to the speed shoes tempo
0001318E 0838 0001 8100             		btst	#mfbSpeed,mFlags.w	; check if speed shoes mode is active
00013194 6600                       		bne.s	dcaTempoCur		; if is, add to current tempo too
00013196 4E75                       		rts
00013198                            
00013198                            dcaTempo:
00013198 101C                       		move.b	(a4)+,d0		; load tempo value from tracker
0001319A D138 8112                  		add.b	d0,mTempoMain.w		; add to the main tempo
0001319E 0838 0001 8100             		btst	#mfbSpeed,mFlags.w	; check if speed shoes mode is active
000131A4 66E0                       		bne.s	locret_Tempo		; if not, add to current tempo too
000131A6                            
000131A6                            dcaTempoCur:
000131A6 D138 8114                  		add.b	d0,mTempo.w		; add to current tempo
000131AA 4E75                       		rts
000131AC                            ; ===========================================================================
000131AC                            ; ---------------------------------------------------------------------------
000131AC                            ; Tracker command for enabling or disabling PSG4 noise mode
000131AC                            ; ---------------------------------------------------------------------------
000131AC                            
000131AC                            dcNoisePSG:
000131AC 1B54 001B                  		move.b	(a4),cStatPSG4(a5)	; load PSG4 status command from tracker to channel
000131B0 6700                       		beq.s	.psg3			; if disabling PSG4 mode, branch
000131B2 1B7C 00E0 0001             		move.b	#ctPSG4,cType(a5)	; make PSG3 act on behalf of PSG4
000131B8 13DC 00C0 0011             		move.b	(a4)+,dPSG		; send command to PSG port
000131BE 4E75                       		rts
000131C0                            
000131C0                            .psg3
000131C0 1B7C 00C0 0001             		move.b	#ctPSG3,cType(a5)	; make PSG3 not act on behalf of PSG4
000131C6 13FC 00FF 00C0 0011        		move.b	#ctPSG4|$1F,dPSG	; send PSG4 mute command to PSG
000131CE 524C                       		addq.w	#1,a4			; skip param
000131D0 4E75                       		rts
000131D2                            ; ===========================================================================
000131D2                            ; ---------------------------------------------------------------------------
000131D2                            ; Tracker command for playing another music or SFX
000131D2                            ; ---------------------------------------------------------------------------
000131D2                            
000131D2                            dcSound:
000131D2 11DC 8118                  		move.b	(a4)+,mQueue+2.w	; load sound ID from tracker to sound queue
000131D6                            
000131D6                            Return_dcSound:
000131D6 4E75                       		rts
000131D8                            ; ===========================================================================
000131D8                            ; ---------------------------------------------------------------------------
000131D8                            ; Tracker command for setting DAC filter bank
000131D8                            ; ---------------------------------------------------------------------------
000131D8                            
000131D8                            dcFilter:
000131D8 7000                       		moveq	#0,d0
000131DA 101C                       		move.b	(a4)+,d0		; load filter bank number from tracker
000131DC 4EFA EF2A                  		jmp	dSetFilter(pc)		; load filter bank instructions to Z80 RAM
000131E0                            ; ===========================================================================
000131E0                            ; ---------------------------------------------------------------------------
000131E0                            ; Tracker command for writing a YM command to YMCue
000131E0                            ; ---------------------------------------------------------------------------
000131E0                            
000131E0                            dcYM:
000131E0 101C                       		move.b	(a4)+,d0		; load YM address from tracker to d0
000131E2 121C                       		move.b	(a4)+,d1		; get command value from tracker to d1
000131E4 0815 0001                  		btst	#cfbInt,(a5)		; is this channel overridden by SFX?
000131E8 66EC                       		bne.s	Return_dcSound		; if so, skip
000131EA                            
000131EA 0C00 0030                  		cmp.b	#$30,d0			; is this register 00-2F?
000131EE 6500 F3FA                  		blo.w	WriteYM_Pt1		; if so, write to part 1 always
000131F2                            
000131F2 1400                       		move.b	d0,d2			; copy address to d2
000131F4 0402 00A8                  		sub.b	#$A8,d2			; align $A8 with 0
000131F8 0C02 0008                  		cmp.b	#$08,d2			; is this egister A8-AF?
000131FC 6500 F3EC                  		blo.w	WriteYM_Pt1		; if so, write to part 1 always
00013200 4EFA F3DC                  		jmp	WriteChYM(pc)		; write to YM according to channel
00013204                            ; ===========================================================================
00013204                            ; ---------------------------------------------------------------------------
00013204                            ; Tracker command for setting channel base frequency
00013204                            ; ---------------------------------------------------------------------------
00013204                            
00013204                            dcsFreq:
00013204 1B5C 000E                  		move.b	(a4)+,cFreq(a5)		; load base frequency from tracker to channel
00013208 1B5C 000F                  		move.b	(a4)+,cFreq+1(a5)	; ''
0001320C                            
0001320C 082D 0003 0001             		btst	#ctbDAC,cType(a5)	; check if this is a DAC channel
00013212 6600                       		bne.s	.rts			; if so, bránch
00013214                            		AMPS_Debug_dcInvalid		; this command should be only used with DAC channels
00013214                          M 	raiseerror	"Invalid command detected!",amps_debug_console_channel
00013214 487A FFFE                M 	pea	*(pc)
00013218                          M 	raiseerror2	"Invalid command detected!",amps_debug_console_channel
00013218 40E7                     M 	move.w	sr,-(sp)
0001321A                          M 	__fstring_generateargumentscode	"Invalid command detected!"
0001321A =00000000                M 	__pos:	set instr("Invalid command detected!",'%<')
0001321A =00000000                M 	__stack:set	0
0001321A =00000000                M 	__sp:	set 0
0001321A                          M 	while	(__pos)
0001321A                          M 	rept	__stack
0001321A 4EB9 0000 0000           M 	jsr	errorhandler
00013220                          M 	__fstring_generatedecodedstring	"Invalid command detected!"
00013220 =00000001                M 	__lpos:	set 1
00013220 =00000000                M 	__pos:	set instr("Invalid command detected!",'%<')
00013220                          M 	while	(__pos)
00013220                          M 	__substr:	substr __lpos,,"Invalid command detected!"
00013220 496E 7661 6C69 6420 636F+M 	dc.b	"Invalid command detected!"
00013239 00                       M 	dc.b	0
0001323A 00                       M 	dc.b	+_eh_enter_console|(((*&1)^1)*_eh_align_offset)
0001323C 00                       M 	even
0001323C 4EF9 0001 0000           M 	jmp	amps_debug_console_channel
00013242                          M 	even
00013242                            .rts
00013242 4E75                       		rts
00013244                            ; ===========================================================================
00013244                            ; ---------------------------------------------------------------------------
00013244                            ; Tracker command for setting channel base frequency from the note table
00013244                            ; ---------------------------------------------------------------------------
00013244                            
00013244                            dcsFreqNote:
00013244 7000                       		moveq	#0,d0
00013246 101C                       		move.b	(a4)+,d0		; load note from tracker to d0
00013248 D02D 0008                  		add.b	cPitch(a5),d0		; add pitch offset to note
0001324C D040                       		add.w	d0,d0			; double offset (each entry is a word)
0001324E                            
0001324E 43FA F516                  		lea	dFreqDAC(pc),a1		; load DAC frequency table to a1
00013252 3B71 0000 000E             		move.w	(a1,d0.w),cFreq(a5)	; load and save the requested frequency
00013258                            
00013258 082D 0003 0001             		btst	#ctbDAC,cType(a5)	; check if this is a DAC channel
0001325E 6600                       		bne.s	.rts			; if so, bránch
00013260                            		AMPS_Debug_dcInvalid		; this command should be only used with DAC channels
00013260                          M 	raiseerror	"Invalid command detected!",amps_debug_console_channel
00013260 487A FFFE                M 	pea	*(pc)
00013264                          M 	raiseerror2	"Invalid command detected!",amps_debug_console_channel
00013264 40E7                     M 	move.w	sr,-(sp)
00013266                          M 	__fstring_generateargumentscode	"Invalid command detected!"
00013266 =00000000                M 	__pos:	set instr("Invalid command detected!",'%<')
00013266 =00000000                M 	__stack:set	0
00013266 =00000000                M 	__sp:	set 0
00013266                          M 	while	(__pos)
00013266                          M 	rept	__stack
00013266 4EB9 0000 0000           M 	jsr	errorhandler
0001326C                          M 	__fstring_generatedecodedstring	"Invalid command detected!"
0001326C =00000001                M 	__lpos:	set 1
0001326C =00000000                M 	__pos:	set instr("Invalid command detected!",'%<')
0001326C                          M 	while	(__pos)
0001326C                          M 	__substr:	substr __lpos,,"Invalid command detected!"
0001326C 496E 7661 6C69 6420 636F+M 	dc.b	"Invalid command detected!"
00013285 00                       M 	dc.b	0
00013286 00                       M 	dc.b	+_eh_enter_console|(((*&1)^1)*_eh_align_offset)
00013288 00                       M 	even
00013288 4EF9 0001 0000           M 	jmp	amps_debug_console_channel
0001328E                          M 	even
0001328E                            .rts
0001328E 4E75                       		rts
00013290                            ; ===========================================================================
00013290                            ; ---------------------------------------------------------------------------
00013290                            ; Tracker command for doing a continous SFX loop
00013290                            ; ---------------------------------------------------------------------------
00013290                            
00013290                            dcCont:
00013290 5338 811C                  		subq.b	#1,mContCtr.w		; decrease continous sfx counter
00013294 6A00                       		bpl.s	dcJump			; if positive, jump to routine
00013296 4238 811D                  		clr.b	mContLast.w		; clear continous SFX ID
0001329A 544C                       		addq.w	#2,a4			; skip over jump offset
0001329C 4E75                       		rts
0001329E                            ; ===========================================================================
0001329E                            ; ---------------------------------------------------------------------------
0001329E                            ; Tracker command for calling a tracker subroutine
0001329E                            ; ---------------------------------------------------------------------------
0001329E                            
0001329E                            dcCall:
0001329E                            		AMPS_Debug_dcCall1		; check if this channel supports the stack
0001329E BAFC 82D6                M 	cmp.w	#msfxdac1,a5
000132A2 6500                     M 	blo.s	.ok1
000132A4                          M 	raiseerror	"sCall on a SFX channel!",amps_debug_console_channel
000132A4 487A FFFE                M 	pea	*(pc)
000132A8                          M 	raiseerror2	"sCall on a SFX channel!",amps_debug_console_channel
000132A8 40E7                     M 	move.w	sr,-(sp)
000132AA                          M 	__fstring_generateargumentscode	"sCall on a SFX channel!"
000132AA =00000000                M 	__pos:	set instr("sCall on a SFX channel!",'%<')
000132AA =00000000                M 	__stack:set	0
000132AA =00000000                M 	__sp:	set 0
000132AA                          M 	while	(__pos)
000132AA                          M 	rept	__stack
000132AA 4EB9 0000 0000           M 	jsr	errorhandler
000132B0                          M 	__fstring_generatedecodedstring	"sCall on a SFX channel!"
000132B0 =00000001                M 	__lpos:	set 1
000132B0 =00000000                M 	__pos:	set instr("sCall on a SFX channel!",'%<')
000132B0                          M 	while	(__pos)
000132B0                          M 	__substr:	substr __lpos,,"sCall on a SFX channel!"
000132B0 7343 616C 6C20 6F6E 2061+M 	dc.b	"sCall on a SFX channel!"
000132C7 00                       M 	dc.b	0
000132C8 00                       M 	dc.b	+_eh_enter_console|(((*&1)^1)*_eh_align_offset)
000132CA 00                       M 	even
000132CA 4EF9 0001 0000           M 	jmp	amps_debug_console_channel
000132D0                          M 	even
000132D0                          M .ok1
000132D0                            
000132D0 7000                       		moveq	#0,d0
000132D2 102D 001E                  		move.b	cStack(a5),d0		; get channel stack pointer
000132D6 5900                       		subq.b	#4,d0			; allocate space for another routine
000132D8                            
000132D8                            		AMPS_Debug_dcCall2		; check if we overflowed the space
000132D8 0C00 001C                M 	cmp.b	#cnotetimecur,d0
000132DC 6200                     M 	bhi.s	.ok2
000132DE                          M 	raiseerror	"sCall stack too deep!",amps_debug_console_channel
000132DE 487A FFFE                M 	pea	*(pc)
000132E2                          M 	raiseerror2	"sCall stack too deep!",amps_debug_console_channel
000132E2 40E7                     M 	move.w	sr,-(sp)
000132E4                          M 	__fstring_generateargumentscode	"sCall stack too deep!"
000132E4 =00000000                M 	__pos:	set instr("sCall stack too deep!",'%<')
000132E4 =00000000                M 	__stack:set	0
000132E4 =00000000                M 	__sp:	set 0
000132E4                          M 	while	(__pos)
000132E4                          M 	rept	__stack
000132E4 4EB9 0000 0000           M 	jsr	errorhandler
000132EA                          M 	__fstring_generatedecodedstring	"sCall stack too deep!"
000132EA =00000001                M 	__lpos:	set 1
000132EA =00000000                M 	__pos:	set instr("sCall stack too deep!",'%<')
000132EA                          M 	while	(__pos)
000132EA                          M 	__substr:	substr __lpos,,"sCall stack too deep!"
000132EA 7343 616C 6C20 7374 6163+M 	dc.b	"sCall stack too deep!"
000132FF 00                       M 	dc.b	0
00013300 00                       M 	dc.b	+_eh_enter_console|(((*&1)^1)*_eh_align_offset)
00013302 00                       M 	even
00013302 4EF9 0001 0000           M 	jmp	amps_debug_console_channel
00013308                          M 	even
00013308                          M .ok2
00013308 2B8C 0000                  		move.l	a4,(a5,d0.w)		; save current address in stack
0001330C 1B40 001E                  		move.b	d0,cStack(a5)		; save stack pointer
00013310                            ; ===========================================================================
00013310                            ; ---------------------------------------------------------------------------
00013310                            ; Tracker command for jumping to another tracker location
00013310                            ; ---------------------------------------------------------------------------
00013310                            
00013310                            dcJump:
00013310                            	dREAD_WORD a4, d0			; read a word from tracker to d0
00013310 1E9C                     M 	move.b	(a4)+,(sp)
00013312 3017                     M 	move.w	(sp),d0
00013314 1014                     M 	move.b	(a4),d0
00013316 D8C0                       		adda.w	d0,a4			; offset tracker address by d0
00013318 4E75                       		rts
0001331A                            ; ===========================================================================
0001331A                            ; ---------------------------------------------------------------------------
0001331A                            ; Tracker command for handling loops
0001331A                            ; ---------------------------------------------------------------------------
0001331A                            
0001331A                            dcLoop:
0001331A 7000                       		moveq	#0,d0
0001331C 101C                       		move.b	(a4)+,d0		; load loop index from tracker to d0
0001331E                            		AMPS_Debug_dcLoop		; check if loop index is valid
0001331E 0C00 0003                M 	cmp.b	#3,d0
00013322 6200                     M 	bhi.s	.fail
00013324 BAFC 82D6                M 	cmp.w	#msfxdac1,a5
00013328 6500                     M 	blo.s	.nosfx
0001332A 0C00 0001                M 	cmp.b	#1,d0
0001332E 6700                     M 	beq.s	.fail
00013330                          M .nosfx
00013330 0C2D 00C0 0001           M 	cmp.b	#$c0,ctype(a5)
00013336 6500                     M 	blo.s	.ok
00013338 0C00 0002                M 	cmp.b	#2,d0
0001333C 6600                     M 	bne.s	.ok
0001333E                          M .fail
0001333E                          M 	raiseerror	"sLoop ID is invalid!",amps_debug_console_channel
0001333E 487A FFFE                M 	pea	*(pc)
00013342                          M 	raiseerror2	"sLoop ID is invalid!",amps_debug_console_channel
00013342 40E7                     M 	move.w	sr,-(sp)
00013344                          M 	__fstring_generateargumentscode	"sLoop ID is invalid!"
00013344 =00000000                M 	__pos:	set instr("sLoop ID is invalid!",'%<')
00013344 =00000000                M 	__stack:set	0
00013344 =00000000                M 	__sp:	set 0
00013344                          M 	while	(__pos)
00013344                          M 	rept	__stack
00013344 4EB9 0000 0000           M 	jsr	errorhandler
0001334A                          M 	__fstring_generatedecodedstring	"sLoop ID is invalid!"
0001334A =00000001                M 	__lpos:	set 1
0001334A =00000000                M 	__pos:	set instr("sLoop ID is invalid!",'%<')
0001334A                          M 	while	(__pos)
0001334A                          M 	__substr:	substr __lpos,,"sLoop ID is invalid!"
0001334A 734C 6F6F 7020 4944 2069+M 	dc.b	"sLoop ID is invalid!"
0001335E 00                       M 	dc.b	0
0001335F 00                       M 	dc.b	+_eh_enter_console|(((*&1)^1)*_eh_align_offset)
00013360                          M 	even
00013360 4EF9 0001 0000           M 	jmp	amps_debug_console_channel
00013366                          M 	even
00013366                          M .ok
00013366                            
00013366 4A35 0019                  		tst.b	cLoop(a5,d0.w)		; check the loop counter
0001336A 6600                       		bne.s	.loopok			; if nonzero, branch
0001336C 1BAC 0002 0019             		move.b	2(a4),cLoop(a5,d0.w)	; reload loop counter
00013372                            
00013372                            .loopok
00013372 5335 0019                  		subq.b	#1,cLoop(a5,d0.w)	; decrease loop counter
00013376 6698                       		bne.s	dcJump			; if not 0, jump to routine
00013378 564C                       		addq.w	#3,a4			; skip over jump offset
0001337A 4E75                       		rts
0001337C                            ; ===========================================================================
0001337C                            ; ---------------------------------------------------------------------------
0001337C                            ; Tracker command for initializing modulation
0001337C                            ; ---------------------------------------------------------------------------
0001337C                            
0001337C                            dcMod68K:
0001337C 2B4C 0010                  		move.l	a4,cMod(a5)		; set modulation data address
00013380 1B5C 0010                  		move.b	(a4)+,cModDelay(a5)	; load modulation delay from tracker to channel
00013384 1B5C 0016                  		move.b	(a4)+,cModSpeed(a5)	; load modulation speed from tracker to channel
00013388 1B5C 0017                  		move.b	(a4)+,cModStep(a5)	; load modulation step offset from tracker to channel
0001338C                            
0001338C 101C                       		move.b	(a4)+,d0		; load modulation step count from tracker to d0
0001338E E208                       		lsr.b	#1,d0			; halve it
00013390 1B40 0018                  		move.b	d0,cModCount(a5)	; save as modulation step count to channel
00013394 426D 0014                  		clr.w	cModFreq(a5)		; reset modulation frequency offset to 0
00013398                            	; continue to enabling modulation
00013398                            ; ===========================================================================
00013398                            ; ---------------------------------------------------------------------------
00013398                            ; Tracker commands for enabling and disabling modulation
00013398                            ; ---------------------------------------------------------------------------
00013398                            
00013398                            dcModOn:
00013398 08D5 0003                  		bset	#cfbMod,(a5)		; enable modulation
0001339C 4E75                       		rts
0001339E                            
0001339E                            dcModOff:
0001339E 0895 0003                  		bclr	#cfbMod,(a5)		; disable modulation
000133A2 4E75                       		rts
000133A4                            ; ===========================================================================
000133A4                            ; ---------------------------------------------------------------------------
000133A4                            ; Tracker command for returning from tracker subroutine
000133A4                            ; ---------------------------------------------------------------------------
000133A4                            
000133A4                            dcReturn:
000133A4                            		AMPS_Debug_dcReturn1		; check if this channel supports the stack
000133A4 BAFC 82D6                M 	cmp.w	#msfxdac1,a5
000133A8 6500                     M 	blo.s	.ok1
000133AA                          M 	raiseerror	"sRet on a SFX channel!",amps_debug_console_channel
000133AA 487A FFFE                M 	pea	*(pc)
000133AE                          M 	raiseerror2	"sRet on a SFX channel!",amps_debug_console_channel
000133AE 40E7                     M 	move.w	sr,-(sp)
000133B0                          M 	__fstring_generateargumentscode	"sRet on a SFX channel!"
000133B0 =00000000                M 	__pos:	set instr("sRet on a SFX channel!",'%<')
000133B0 =00000000                M 	__stack:set	0
000133B0 =00000000                M 	__sp:	set 0
000133B0                          M 	while	(__pos)
000133B0                          M 	rept	__stack
000133B0 4EB9 0000 0000           M 	jsr	errorhandler
000133B6                          M 	__fstring_generatedecodedstring	"sRet on a SFX channel!"
000133B6 =00000001                M 	__lpos:	set 1
000133B6 =00000000                M 	__pos:	set instr("sRet on a SFX channel!",'%<')
000133B6                          M 	while	(__pos)
000133B6                          M 	__substr:	substr __lpos,,"sRet on a SFX channel!"
000133B6 7352 6574 206F 6E20 6120+M 	dc.b	"sRet on a SFX channel!"
000133CC 00                       M 	dc.b	0
000133CD 00                       M 	dc.b	+_eh_enter_console|(((*&1)^1)*_eh_align_offset)
000133CE                          M 	even
000133CE 4EF9 0001 0000           M 	jmp	amps_debug_console_channel
000133D4                          M 	even
000133D4                          M .ok1
000133D4 7000                       		moveq	#0,d0
000133D6 102D 001E                  		move.b	cStack(a5),d0		; get channel stack pointer
000133DA 2875 0000                  		movea.l	(a5,d0.w),a4		; load the address to return to
000133DE                            
000133DE 544C                       		addq.w	#2,a4			; skip the call address parameter
000133E0 5800                       		addq.b	#4,d0			; deallocate stack space
000133E2 1B40 001E                  		move.b	d0,cStack(a5)		; save stack pointer
000133E6                            
000133E6                            		AMPS_Debug_dcReturn2		; check if we underflowed the space
000133E6 0C00 002C                M 	cmp.b	#csize,d0
000133EA 6300                     M 	bls.s	.ok2
000133EC                          M 	raiseerror	"sRet stack too shallow!",amps_debug_console_channel
000133EC 487A FFFE                M 	pea	*(pc)
000133F0                          M 	raiseerror2	"sRet stack too shallow!",amps_debug_console_channel
000133F0 40E7                     M 	move.w	sr,-(sp)
000133F2                          M 	__fstring_generateargumentscode	"sRet stack too shallow!"
000133F2 =00000000                M 	__pos:	set instr("sRet stack too shallow!",'%<')
000133F2 =00000000                M 	__stack:set	0
000133F2 =00000000                M 	__sp:	set 0
000133F2                          M 	while	(__pos)
000133F2                          M 	rept	__stack
000133F2 4EB9 0000 0000           M 	jsr	errorhandler
000133F8                          M 	__fstring_generatedecodedstring	"sRet stack too shallow!"
000133F8 =00000001                M 	__lpos:	set 1
000133F8 =00000000                M 	__pos:	set instr("sRet stack too shallow!",'%<')
000133F8                          M 	while	(__pos)
000133F8                          M 	__substr:	substr __lpos,,"sRet stack too shallow!"
000133F8 7352 6574 2073 7461 636B+M 	dc.b	"sRet stack too shallow!"
0001340F 00                       M 	dc.b	0
00013410 00                       M 	dc.b	+_eh_enter_console|(((*&1)^1)*_eh_align_offset)
00013412 00                       M 	even
00013412 4EF9 0001 0000           M 	jmp	amps_debug_console_channel
00013418                          M 	even
00013418                          M .ok2
00013418 4E75                       		rts
0001341A                            ; ===========================================================================
0001341A                            ; ---------------------------------------------------------------------------
0001341A                            ; Tracker command for initializing special FM3 mode
0001341A                            ; ---------------------------------------------------------------------------
0001341A                            
0001341A                            dcSpecFM3:
0001341A                            		AMPS_Debug_dcInvalid		; this is an invalid command
0001341A                          M 	raiseerror	"Invalid command detected!",amps_debug_console_channel
0001341A 487A FFFE                M 	pea	*(pc)
0001341E                          M 	raiseerror2	"Invalid command detected!",amps_debug_console_channel
0001341E 40E7                     M 	move.w	sr,-(sp)
00013420                          M 	__fstring_generateargumentscode	"Invalid command detected!"
00013420 =00000000                M 	__pos:	set instr("Invalid command detected!",'%<')
00013420 =00000000                M 	__stack:set	0
00013420 =00000000                M 	__sp:	set 0
00013420                          M 	while	(__pos)
00013420                          M 	rept	__stack
00013420 4EB9 0000 0000           M 	jsr	errorhandler
00013426                          M 	__fstring_generatedecodedstring	"Invalid command detected!"
00013426 =00000001                M 	__lpos:	set 1
00013426 =00000000                M 	__pos:	set instr("Invalid command detected!",'%<')
00013426                          M 	while	(__pos)
00013426                          M 	__substr:	substr __lpos,,"Invalid command detected!"
00013426 496E 7661 6C69 6420 636F+M 	dc.b	"Invalid command detected!"
0001343F 00                       M 	dc.b	0
00013440 00                       M 	dc.b	+_eh_enter_console|(((*&1)^1)*_eh_align_offset)
00013442 00                       M 	even
00013442 4EF9 0001 0000           M 	jmp	amps_debug_console_channel
00013448                          M 	even
00013448 4E75                       		rts
0001344A                            ; ===========================================================================
0001344A                            ; ---------------------------------------------------------------------------
0001344A                            ; Tracker command for enabling raw frequency mode
0001344A                            ; ---------------------------------------------------------------------------
0001344A                            
0001344A                            dcFreqOn:
0001344A                            		AMPS_Debug_dcInvalid		; this is an invalid command
0001344A                          M 	raiseerror	"Invalid command detected!",amps_debug_console_channel
0001344A 487A FFFE                M 	pea	*(pc)
0001344E                          M 	raiseerror2	"Invalid command detected!",amps_debug_console_channel
0001344E 40E7                     M 	move.w	sr,-(sp)
00013450                          M 	__fstring_generateargumentscode	"Invalid command detected!"
00013450 =00000000                M 	__pos:	set instr("Invalid command detected!",'%<')
00013450 =00000000                M 	__stack:set	0
00013450 =00000000                M 	__sp:	set 0
00013450                          M 	while	(__pos)
00013450                          M 	rept	__stack
00013450 4EB9 0000 0000           M 	jsr	errorhandler
00013456                          M 	__fstring_generatedecodedstring	"Invalid command detected!"
00013456 =00000001                M 	__lpos:	set 1
00013456 =00000000                M 	__pos:	set instr("Invalid command detected!",'%<')
00013456                          M 	while	(__pos)
00013456                          M 	__substr:	substr __lpos,,"Invalid command detected!"
00013456 496E 7661 6C69 6420 636F+M 	dc.b	"Invalid command detected!"
0001346F 00                       M 	dc.b	0
00013470 00                       M 	dc.b	+_eh_enter_console|(((*&1)^1)*_eh_align_offset)
00013472 00                       M 	even
00013472 4EF9 0001 0000           M 	jmp	amps_debug_console_channel
00013478                          M 	even
00013478 4E75                       		rts
0001347A                            ; ===========================================================================
0001347A                            ; ---------------------------------------------------------------------------
0001347A                            ; Tracker command for disabling raw frequency mode
0001347A                            ; ---------------------------------------------------------------------------
0001347A                            
0001347A                            dcFreqOff:
0001347A                            		AMPS_Debug_dcInvalid		; this is an invalid command
0001347A                          M 	raiseerror	"Invalid command detected!",amps_debug_console_channel
0001347A 487A FFFE                M 	pea	*(pc)
0001347E                          M 	raiseerror2	"Invalid command detected!",amps_debug_console_channel
0001347E 40E7                     M 	move.w	sr,-(sp)
00013480                          M 	__fstring_generateargumentscode	"Invalid command detected!"
00013480 =00000000                M 	__pos:	set instr("Invalid command detected!",'%<')
00013480 =00000000                M 	__stack:set	0
00013480 =00000000                M 	__sp:	set 0
00013480                          M 	while	(__pos)
00013480                          M 	rept	__stack
00013480 4EB9 0000 0000           M 	jsr	errorhandler
00013486                          M 	__fstring_generatedecodedstring	"Invalid command detected!"
00013486 =00000001                M 	__lpos:	set 1
00013486 =00000000                M 	__pos:	set instr("Invalid command detected!",'%<')
00013486                          M 	while	(__pos)
00013486                          M 	__substr:	substr __lpos,,"Invalid command detected!"
00013486 496E 7661 6C69 6420 636F+M 	dc.b	"Invalid command detected!"
0001349F 00                       M 	dc.b	0
000134A0 00                       M 	dc.b	+_eh_enter_console|(((*&1)^1)*_eh_align_offset)
000134A2 00                       M 	even
000134A2 4EF9 0001 0000           M 	jmp	amps_debug_console_channel
000134A8                          M 	even
000134A8                            
000134A8                            locret_FreqOff:
000134A8 4E75                       		rts
000134AA                            ; ===========================================================================
000134AA                            ; ---------------------------------------------------------------------------
000134AA                            ; Tracker command for changing voice, volume envelope or sample
000134AA                            ; ---------------------------------------------------------------------------
000134AA                            
000134AA                            dcVoice:
000134AA 7000                       		moveq	#0,d0
000134AC 101C                       		move.b	(a4)+,d0		; load voice/sample/volume envelope from tracker to d0
000134AE 1B40 000B                  		move.b	d0,cVoice(a5)		; save to channel
000134B2                            
000134B2 4A2D 0001                  		tst.b	cType(a5)		; check if this is a PSG channel
000134B6 6BF0                       		bmi.s	locret_FreqOff		; if is, skip
000134B8 082D 0003 0001             		btst	#ctbDAC,cType(a5)	; check if this is a DAC channel
000134BE 66E8                       		bne.s	locret_FreqOff		; if is, skip
000134C0                            
000134C0 0815 0001                  		btst	#cfbInt,(a5)		; check if channel is interrupted by SFX
000134C4 66E2                       		bne.s	locret_FreqOff		; if is, skip
000134C6 224E                       		move.l	a6,a1			; load voice table to a1
000134C8                            	; continue to send FM voice
000134C8                            ; ===========================================================================
000134C8                            ; ---------------------------------------------------------------------------
000134C8                            ; Subroutine for sending the FM voice to YM2612
000134C8                            ; This routine is speed optimized in a way that allows Dual PCM
000134C8                            ; to only be stopped for as long as it must be. This will waste
000134C8                            ; some cycles for 68000, but it will help improve DAC quality.
000134C8                            ; ---------------------------------------------------------------------------
000134C8                            
000134C8                            dUpdateVoiceFM:
000134C8                            	dCALC_VOICE				; get address of the specific voice to a1
000134C8 EB48                     M 	lsl.w	#5,d0
000134CA D2C0                     M 	add.w	d0,a1
000134CC 9EFC 003C                  		sub.w	#(VoiceRegs+1)*2,sp	; prepapre space in the stack
000134D0 264F                       		move.l	sp,a3			; copy pointer to the free space to a3
000134D2                            
000134D2 1819                       		move.b	(a1)+,d4		; load feedback and algorithm to d4
000134D4 16C4                       		move.b	d4,(a3)+		; save it to free space
000134D6 16FC 00B0                  		move.b	#$B0,(a3)+		; YM command: Algorithm & FeedBack
000134DA                            
000134DA 45FA ED5E                  		lea	dOpListYM(pc),a2	; load YM2612 operator list into a2
000134DE                            	rept VoiceRegs-5
000134DE                            		move.b	(a1)+,(a3)+		; copy each value (except Total Level)
000134DE                            		move.b	(a2)+,(a3)+		; copy each command
000134DE                            	endr
000134DE 16D9                     M 	move.b	(a1)+,(a3)+
000134E0 16DA                     M 	move.b	(a2)+,(a3)+
000134E2 16D9                     M 	move.b	(a1)+,(a3)+
000134E4 16DA                     M 	move.b	(a2)+,(a3)+
000134E6 16D9                     M 	move.b	(a1)+,(a3)+
000134E8 16DA                     M 	move.b	(a2)+,(a3)+
000134EA 16D9                     M 	move.b	(a1)+,(a3)+
000134EC 16DA                     M 	move.b	(a2)+,(a3)+
000134EE 16D9                     M 	move.b	(a1)+,(a3)+
000134F0 16DA                     M 	move.b	(a2)+,(a3)+
000134F2 16D9                     M 	move.b	(a1)+,(a3)+
000134F4 16DA                     M 	move.b	(a2)+,(a3)+
000134F6 16D9                     M 	move.b	(a1)+,(a3)+
000134F8 16DA                     M 	move.b	(a2)+,(a3)+
000134FA 16D9                     M 	move.b	(a1)+,(a3)+
000134FC 16DA                     M 	move.b	(a2)+,(a3)+
000134FE 16D9                     M 	move.b	(a1)+,(a3)+
00013500 16DA                     M 	move.b	(a2)+,(a3)+
00013502 16D9                     M 	move.b	(a1)+,(a3)+
00013504 16DA                     M 	move.b	(a2)+,(a3)+
00013506 16D9                     M 	move.b	(a1)+,(a3)+
00013508 16DA                     M 	move.b	(a2)+,(a3)+
0001350A 16D9                     M 	move.b	(a1)+,(a3)+
0001350C 16DA                     M 	move.b	(a2)+,(a3)+
0001350E 16D9                     M 	move.b	(a1)+,(a3)+
00013510 16DA                     M 	move.b	(a2)+,(a3)+
00013512 16D9                     M 	move.b	(a1)+,(a3)+
00013514 16DA                     M 	move.b	(a2)+,(a3)+
00013516 16D9                     M 	move.b	(a1)+,(a3)+
00013518 16DA                     M 	move.b	(a2)+,(a3)+
0001351A 16D9                     M 	move.b	(a1)+,(a3)+
0001351C 16DA                     M 	move.b	(a2)+,(a3)+
0001351E 16D9                     M 	move.b	(a1)+,(a3)+
00013520 16DA                     M 	move.b	(a2)+,(a3)+
00013522 16D9                     M 	move.b	(a1)+,(a3)+
00013524 16DA                     M 	move.b	(a2)+,(a3)+
00013526 16D9                     M 	move.b	(a1)+,(a3)+
00013528 16DA                     M 	move.b	(a2)+,(a3)+
0001352A 16D9                     M 	move.b	(a1)+,(a3)+
0001352C 16DA                     M 	move.b	(a2)+,(a3)+
0001352E 16D9                     M 	move.b	(a1)+,(a3)+
00013530 16DA                     M 	move.b	(a2)+,(a3)+
00013532 16D9                     M 	move.b	(a1)+,(a3)+
00013534 16DA                     M 	move.b	(a2)+,(a3)+
00013536 16D9                     M 	move.b	(a1)+,(a3)+
00013538 16DA                     M 	move.b	(a2)+,(a3)+
0001353A 16D9                     M 	move.b	(a1)+,(a3)+
0001353C 16DA                     M 	move.b	(a2)+,(a3)+
0001353E                            
0001353E 7C00                       		moveq	#0,d6			; reset the modulator offset
00013540 162D 0009                  		move.b	cVolume(a5),d3		; load FM channel volume to d3
00013544 D638 810E                  		add.b	mMasterVolFM.w,d3	; add master FM volume to d3
00013548 6A00                       		bpl.s	.noover			; if volume did not overflow, skio
0001354A 767F                       		moveq	#$7F,d3			; force FM volume to silence
0001354C                            
0001354C                            .noover
0001354C 0838 0002 8100             		btst	#mfbWater,mFlags.w	; check if underwater mode is enabled
00013552 6700                       		beq.s	.uwdone			; if not, skip
00013554 1C04                       		move.b	d4,d6			; copy algorithm and feedback to d6
00013556 0246 0007                  		and.w	#7,d6			; mask out everything but the algorithm
0001355A D606                       		add.b	d6,d3			; add algorithm to Total Level carrier offset
0001355C 1C04                       		move.b	d4,d6			; set algorithm and feedback to modulator offset
0001355E                            
0001355E                            .uwdone
0001355E 7A03                       		moveq	#4-1,d5			; prepare 4 operators to d5
00013560                            
00013560                            .tlloop
00013560 1219                       		move.b	(a1)+,d1		; get Total Level value from voice to d1
00013562 6A00                       		bpl.s	.noslot			; if slot operator bit was not set, branch
00013564                            
00013564 D203                       		add.b	d3,d1			; add carrier offset to loaded value
00013566 6B00                       		bmi.s	.slot			; if we did not overflow, branch
00013568 727F                       		moveq	#$7F,d1			; cap to silent volume
0001356A 6000                       		bra.s	.slot
0001356C                            
0001356C                            .noslot
0001356C D206                       		add.b	d6,d1			; add modulator offset to loaded value
0001356E                            .slot
0001356E 16C1                       		move.b	d1,(a3)+		; save the Total Level value
00013570 16DA                       		move.b	(a2)+,(a3)+		; copy total level command
00013572 51CD FFEC                  		dbf	d5,.tlloop		; repeat for each Total Level operator
00013576                            
00013576                            		AMPS_Debug_UpdVoiceFM		; check if the voice was valid
00013576 0C19 004E                M 	cmp.b	#'N',(a1)+
0001357A 6600                     M 	bne.s	.fail
0001357C 0C59 4154                M 	cmp.w	#'AT',(a1)+
00013580 6700                     M 	beq.s	.ok
00013582                          M .fail
00013582                          M 	raiseerror	"FM voice Update invalid voice: %<.b cVoice(a5)>",amps_debug_console_channel
00013582 487A FFFE                M 	pea	*(pc)
00013586                          M 	raiseerror2	"FM voice Update invalid voice: %<.b cVoice(a5)>",amps_debug_console_channel
00013586 40E7                     M 	move.w	sr,-(sp)
00013588                          M 	__fstring_generateargumentscode	"FM voice Update invalid voice: %<.b cVoice(a5)>"
00013588 =00000020                M 	__pos:	set instr("FM voice Update invalid voice: %<.b cVoice(a5)>",'%<')
00013588 =00000000                M 	__stack:set	0
00013588 =00000000                M 	__sp:	set 0
00013588                          M 	while	(__pos)
00013588 =0000002F                M 	__endpos:	set instr(__pos+1,"FM voice Update invalid voice: %<.b cVoice(a5)>",'>')
00013588 =00000000                M 	__midpos:	set instr(__pos+5,"FM voice Update invalid voice: %<.b cVoice(a5)>",' ')
00013588 =0000002F                M 	__midpos:	= __endpos
00013588                          M 	__substr:	substr __pos+1+1,__endpos-1,"FM voice Update invalid voice: %<.b cVoice(a5)>"
00013588                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"FM voice Update invalid voice: %<.b cVoice(a5)>"
00013588                          M 	__operand:	substr __pos+1+1,__midpos-1,"FM voice Update invalid voice: %<.b cVoice(a5)>"
00013588                          M 	__param:	substr __midpos+1,__endpos-1,"FM voice Update invalid voice: %<.b cVoice(a5)>"
00013588                          M 	pushp	"move.b cVoice(a5),1(sp)"
00013588                          M 	pushp	"subq.w	#2, sp"
00013588 =00000002                M 	__stack:	= __stack+2
00013588 =00000002                M 	__sp:	= __sp+2
00013588 =00000000                M 	__pos:	set instr(__pos+1,"FM voice Update invalid voice: %<.b cVoice(a5)>",'%<')
00013588                          M 	rept	__stack
00013588                          M 	popp	__command
00013588 554F                     M 	subq.w	#2,sp
0001358A                          M 	popp	__command
0001358A 1F6D 000B 0001           M 	move.b	cvoice(a5),1(sp)
00013590 4EB9 0000 0000           M 	jsr	errorhandler
00013596                          M 	__fstring_generatedecodedstring	"FM voice Update invalid voice: %<.b cVoice(a5)>"
00013596 =00000001                M 	__lpos:	set 1
00013596 =00000020                M 	__pos:	set instr("FM voice Update invalid voice: %<.b cVoice(a5)>",'%<')
00013596                          M 	while	(__pos)
00013596                          M 	__substr:	substr __lpos,__pos-1,"FM voice Update invalid voice: %<.b cVoice(a5)>"
00013596 464D 2076 6F69 6365 2055+M 	dc.b	"FM voice Update invalid voice: "
000135B5 =0000002F                M 	__endpos:	set instr(__pos+1,"FM voice Update invalid voice: %<.b cVoice(a5)>",'>')
000135B5 =00000000                M 	__midpos:	set instr(__pos+5,"FM voice Update invalid voice: %<.b cVoice(a5)>",' ')
000135B5 =0000002F                M 	__midpos:	= __endpos
000135B5                          M 	__type:	substr __pos+1+1,__pos+1+1+1,"FM voice Update invalid voice: %<.b cVoice(a5)>"
000135B5                          M 	__param:	substr __midpos+1,__endpos-1,"FM voice Update invalid voice: %<.b cVoice(a5)>"
000135B5                          M 	__param:	substr ,,"hex"
000135B5 80                       M 	dc.b	hex
000135B6 =00000030                M 	__lpos:	set __endpos+1
000135B6 =00000000                M 	__pos:	set instr(__pos+1,"FM voice Update invalid voice: %<.b cVoice(a5)>",'%<')
000135B6                          M 	__substr:	substr __lpos,,"FM voice Update invalid voice: %<.b cVoice(a5)>"
000135B6                          M 	dc.b	""
000135B6 00                       M 	dc.b	0
000135B7 00                       M 	dc.b	+_eh_enter_console|(((*&1)^1)*_eh_align_offset)
000135B8                          M 	even
000135B8 4EF9 0001 0000           M 	jmp	amps_debug_console_channel
000135BE                          M 	even
000135BE                          M .ok
000135BE                            
000135BE 0895 0005                  		bclr	#cfbVol,(a5)		; reset volume update request flag
000135C2 16ED 0006                  		move.b	cPanning(a5),(a3)+	; copy panning value to free space
000135C6 16FC 00B4                  		move.b	#$B4,(a3)+		; YM command: Panning & LFO
000135CA                            
000135CA 7400                       		moveq	#0,d2			; prepare part 1 value
000135CC 162D 0001                  		move.b	cType(a5),d3		; load FM channel type to d3
000135D0 0803 0002                  		btst	#ctbPt2,d3		; check if its part 1
000135D4 6700                       		beq.s	.ptok			; if so, branch
000135D6 0203 0003                  		and.b	#3,d3			; get channel offset only
000135DA 7402                       		moveq	#2,d2			; prepare part 2 value
000135DC                            
000135DC                            .ptok
000135DC 264F                       		move.l	sp,a3			; copy free space pointer to a3 again
000135DE 721D                       		moveq	#VoiceRegs,d1		; prepare loop point
000135E0                            		AMPS_Debug_CuePtr 0		; make sure cue is valid
000135E0 B1FC 0000 0000           M 	cmp.l	#$a00000+ym_buffer1,a0
000135E6 6500                     M 	blo.s	.fail_589
000135E8 B1FC 0000 0000           M 	cmp.l	#$a00000+ym_buffer2+$400,a0
000135EE 6500                     M 	blo.s	.ok_589
000135F0                          M .fail_589
000135F0 4EB9 0001 0DC2           M 	jsr	amps_debug_cueptr0
000135F6                          M .ok_589
000135F6                            	StopZ80					; wait for Z80 to stop
000135F6 33FC 0100 00A1 1100      M 	move.w	#$100,$a11100
000135FE                          M .loop_590
000135FE 0839 0000 00A1 1100      M 	btst	#0,$a11100
00013606 66F6                     M 	bne.s	.loop_590
00013608                            
00013608                            .write
00013608 10C2                       		move.b	d2,(a0)+		; select YM port to access (4000 or 4002)
0001360A 10DB                       		move.b	(a3)+,(a0)+		; write command values
0001360C                            
0001360C 101B                       		move.b	(a3)+,d0		; load YM command
0001360E 8003                       		or.b	d3,d0			; add the channel offset to command
00013610 10C0                       		move.b	d0,(a0)+		; save to Z80 cue
00013612 51C9 FFF4                  		dbf	d1,.write		; write all registers
00013616 50D0                       		st	(a0)			; mark as end of the cue
00013618                            
00013618                            	StartZ80				; enable Z80 execution
00013618 33FC 0000 00A1 1100      M 	move.w	#0,$a11100
00013620 DEFC 003C                  		add.w	#(VoiceRegs+1)*2,sp	; reset stack pointer
00013624 4E75                       		rts
00013626                            ; ===========================================================================
00013626                            ; ---------------------------------------------------------------------------
00013626                            ; Tracker command for stopping the current channel
00013626                            ; ---------------------------------------------------------------------------
00013626                            
00013626                            dcStop:
00013626 0215 007B                  		and.b	#$FF-(1<<cfbHold)-(1<<cfbRun),(a5); clear hold and running tracker flags
0001362A 4A2D 0001                  		tst.b	cType(a5)		; check if this was a PSG channel
0001362E 6B00                       		bmi.s	.mutePSG		; if yes, mute it
00013630                            
00013630 082D 0003 0001             		btst	#ctbDAC,cType(a5)	; check if this was a DAC channel
00013636 6600                       		bne.s	.cont			; if we are, skip
00013638 4EBA EF8A                  		jsr	dKeyOffFM(pc)		; send key-off command to YM
0001363C 6000                       		bra.s	.cont
0001363E                            ; ---------------------------------------------------------------------------
0001363E                            
0001363E                            .mutePSG
0001363E 4EBA F868                  		jsr	dMutePSGmus(pc)		; mute PSG channel
00013642                            
00013642                            .cont
00013642 BAFC 82F2                  		cmpa.w	#mSFXFM3,a5		; check if this is a SFX channel
00013646 6500                       		blo.s	.exit			; if not, skip all this mess
00013648 422D 001A                  		clr.b	cPrio(a5)		; clear channel priority
0001364C                            
0001364C 43FA E7C2                  		lea	dSFXoverList(pc),a1	; load quick reference to the SFX override list to a1
00013650 7600                       		moveq	#0,d3
00013652 162D 0001                  		move.b	cType(a5),d3		; load channel type to d3
00013656 6B00                       		bmi.s	.psg			; if this is a PSG channel, branch
00013658 3F0D                       		move.w	a5,-(sp)		; push channel pointer
0001365A                            
0001365A 0243 0007                  		and.w	#$07,d3			; get only the necessary bits to d3
0001365E 5543                       		subq.w	#2,d3			; since FM 1 and 2 are not used, skip over them
00013660 D643                       		add.w	d3,d3			; double offset (each entry is 1 word in size)
00013662 3A71 3000                  		move.w	(a1,d3.w),a5		; get the SFX channel we were overriding
00013666                            
00013666                            .dacdone
00013666 4A15                       		tst.b	(a5)			; check if that channel is running a tracker
00013668 6A00                       		bpl.s	.fixch			; if not, branch
0001366A                            
0001366A 08D5 0005                  		bset	#cfbVol,(a5)		; set update volume flag (cleared by dUpdateVoiceFM)
0001366E 0895 0001                  		bclr	#cfbInt,(a5)		; reset sfx override flag
00013672 082D 0003 0001             		btst	#ctbDAC,cType(a5)	; check if the channel is a DAC channel
00013678 6600                       		bne.s	.fixch			; if yes, skip
0001367A                            
0001367A 08D5 0000                  		bset	#cfbRest,(a5)		; Set channel resting flag
0001367E 2278 8102                  		move.l	mVctMus.w,a1		; load music voice table to a1
00013682 102D 000B                  		move.b	cVoice(a5),d0		; load FM voice ID of the channel to d0
00013686 4EBA FE40                  		jsr	dUpdateVoiceFM(pc)	; send FM voice for this channel
0001368A                            
0001368A                            .fixch
0001368A 3A5F                       		move.w	(sp)+,a5		; pop the current channel
0001368C                            .exit
0001368C 5497                       		addq.l	#2,(sp)			; go to next channel immediately
0001368E 4E75                       		rts
00013690                            ; ---------------------------------------------------------------------------
00013690                            ; There is nothing that would break even if the channel is not
00013690                            ; running a tracker, so we do not bother checking
00013690                            ; ---------------------------------------------------------------------------
00013690                            
00013690                            .psg
00013690 E80B                       		lsr.b	#4,d3			; make it easier to reference the right offset in the table
00013692 3271 3000                  		movea.w	(a1,d3.w),a1		; get the SFX channel we were overriding
00013696 0891 0001                  		bclr	#cfbInt,(a1)		; channel is not interrupted anymore
0001369A 08D1 0000                  		bset	#cfbRest,(a1)		; reset sfx override flag
0001369E                            
0001369E 0C29 00E0 0001             		cmp.b	#ctPSG4,cType(a1)	; check if this channel is in PSG4 mode
000136A4 66E6                       		bne.s	.exit			; if not, skip
000136A6 13E9 001B 00C0 0011        		move.b	cStatPSG4(a1),dPSG	; update PSG4 status to PSG port
000136AE 60DC                       		bra.s	.exit
000136B0                            ; ===========================================================================
000136B0                            ; ---------------------------------------------------------------------------
000136B0                            ; Tracker command for enabling LFO
000136B0                            ; ---------------------------------------------------------------------------
000136B0                            
000136B0                            dcsLFO:
000136B0 7000                       		moveq	#0,d0
000136B2 102D 000B                  		move.b	cVoice(a5),d0		; load FM voice ID of the channel to d0
000136B6 224E                       		move.l	a6,a1			; load voice table to a1
000136B8                            
000136B8                            	dCALC_VOICE 9				; get address of the specific voice to a1
000136B8 EB48                     M 	lsl.w	#5,d0
000136BA 0640 0009                M 	add.w	#9,d0
000136BE D2C0                     M 	add.w	d0,a1
000136C0 1614                       		move.b	(a4),d3			; load LFO enable operators to d3
000136C2 45FA EB7E                  		lea	dAMSEn_Ops(pc),a2	; load Decay 1 Rate address table to a2
000136C6 7C03                       		moveq	#4-1,d6			; prepare 4 operators to d5
000136C8                            
000136C8                            .decayloop
000136C8 1219                       		move.b	(a1)+,d1		; get Decay 1 Level value from voice to d1
000136CA 101A                       		move.b	(a2)+,d0		; load YM address to write to d0
000136CC                            
000136CC D603                       		add.b	d3,d3			; check if LFO is enabled for this channeö
000136CE 6400                       		bcc.s	.noLFO			; if not, skip
000136D0 0001 0080                  		or.b	#$80,d1			; set enable LFO bit
000136D4 4EBA EF08                  		jsr	WriteChYM(pc)		; write to YM according to channel
000136D8                            
000136D8                            .noLFO
000136D8 51CE FFEE                  		dbf	d6,.decayloop		; repeat for each Decay 1 Level operator
000136DC                            
000136DC 121C                       		move.b	(a4)+,d1		; load LFO frequency value from tracker
000136DE 7022                       		moveq	#$22,d0			; YM command: LFO
000136E0 4EBA EF08                  		jsr	WriteYM_Pt1(pc)		; write to part 1 channel
000136E4                            
000136E4 121C                       		move.b	(a4)+,d1		; load AMS, FMS & Panning from tracker
000136E6 1B41 0006                  		move.b	d1,cPanning(a5)		; save to channel panning
000136EA                            
000136EA 70B4                       		moveq	#$FFFFFFB4,d0		; YM command: Panning & LFO
000136EC 4EFA EEEA                  		jmp	dWriteYMchnInt(pc)	; write to YM according to channel
000136F0                            ; ===========================================================================
000136F0                            ; ---------------------------------------------------------------------------
000136F0                            ; Tracker command for resetting condition
000136F0                            ; ---------------------------------------------------------------------------
000136F0                            
000136F0                            dcResetCond:
000136F0 0895 0004                  		bclr	#cfbCond,(a5)		; reset condition flag
000136F4 4E75                       		rts
000136F6                            ; ===========================================================================
000136F6                            ; ---------------------------------------------------------------------------
000136F6                            ; Tracker command for writing to communications flags
000136F6                            ; ---------------------------------------------------------------------------
000136F6                            
000136F6                            dcsComm:
000136F6 43F8 8106                  		lea	mComm.w,a1		; get communications array to a1
000136FA 7000                       		moveq	#0,d0
000136FC 101C                       		move.b	(a4)+,d0		; load byte number to write from tracker
000136FE 139C 0000                  		move.b	(a4)+,(a1,d0.w)		; load vaue from tracker to communications byte
00013702 4E75                       		rts
00013704                            ; ===========================================================================
00013704                            ; ---------------------------------------------------------------------------
00013704                            ; RAM addresses for special condition code
00013704                            ; ---------------------------------------------------------------------------
00013704                            
00013704                            dcCondRegTable:
00013704 898A 8100                  	dc.w Region, mFlags		; 0
00013708 8112 8113                  	dc.w mTempoMain, mTempoSpeed	; 2
0001370C 0000 0000                  	dc.w 0, 0			; 4
00013710 0000 0000                  	dc.w 0, 0			; 6
00013714 0000 0000                  	dc.w 0, 0			; 8
00013718 0000 0000                  	dc.w 0, 0			; $A
0001371C 0000 0000                  	dc.w 0, 0			; $C
00013720 0000 0001                  	dc.w 0, cType			; $E
00013724                            ; ===========================================================================
00013724                            ; ---------------------------------------------------------------------------
00013724                            ; Tracker command for checking special RAM addresses
00013724                            ; ---------------------------------------------------------------------------
00013724                            
00013724                            dcCondReg:
00013724 101C                       		move.b	(a4)+,d0		; get value from tracker
00013726 1200                       		move.b	d0,d1			; copy to d1
00013728                            
00013728 0240 000F                  		and.w	#$F,d0			; get RAM table offset to d0
0001372C D040                       		add.w	d0,d0			; double it (each entry is 1 word)
0001372E 303B 00D4                  		move.w	dcCondRegTable(pc,d0.w),d0; get data to read from
00013732 6B00                       		bmi.s	.gotit			; branch if if was a RAM address
00013734 D04D                       		add.w	a5,d0			; else it was a channel offset
00013736                            
00013736                            .gotit
00013736 3240                       		move.w	d0,a1			; get the desired address from d0 to a1
00013738 1011                       		move.b	(a1),d0			; read byte from it
0001373A 6000                       		bra.s	dcCondCom
0001373C                            ; ===========================================================================
0001373C                            ; ---------------------------------------------------------------------------
0001373C                            ; Tracker command for checking communications bytes
0001373C                            ; ---------------------------------------------------------------------------
0001373C                            
0001373C                            dcCond:
0001373C 43F8 8106                  		lea	mComm.w,a1		; get communications array to a1
00013740 101C                       		move.b	(a4)+,d0		; load condition and offset from tracker to d0
00013742 1200                       		move.b	d0,d1			; copy to d1
00013744 0240 000F                  		and.w	#$F,d0			; get offset only
00013748 1031 0000                  		move.b	(a1,d0.w),d0		; load value from communcations byte to d0
0001374C                            
0001374C                            dcCondCom:
0001374C 0895 0004                  		bclr	#cfbCond,(a5)		; set condition to true
00013750 0241 00F0                  		and.w	#$F0,d1			; get condition value only
00013754 E449                       		lsr.w	#2,d1			; shift 2 bits down (each entry is 4 bytes large)
00013756 B01C                       		cmp.b	(a4)+,d0		; check value against tracker byte
00013758 4EFB 1000                  		jmp	.cond(pc,d1.w)		; handle conditional code
0001375C                            ; ===========================================================================
0001375C                            ; ---------------------------------------------------------------------------
0001375C                            ; Code for setting the condition flag
0001375C                            ; ---------------------------------------------------------------------------
0001375C                            
0001375C                            .c	macro x
0001375C                            	\x	.false
0001375C                            	rts
0001375C                                 endm
0001375C                            
0001375C                            .false
0001375C 08D5 0004                  		bset	#cfbCond,(a5)		; set condition to false
00013760                            
00013760 4E75                       .cond	rts		; T
00013762 4E75                       	rts
00013764                            	.c bra.s	; F
00013764 60F6                     M 	bra.s	.false
00013766 4E75                     M 	rts
00013768                            	.c bls.s	; HI
00013768 63F2                     M 	bls.s	.false
0001376A 4E75                     M 	rts
0001376C                            	.c bhi.s	; LS
0001376C 62EE                     M 	bhi.s	.false
0001376E 4E75                     M 	rts
00013770                            	.c blo.s	; HS/CC
00013770 65EA                     M 	blo.s	.false
00013772 4E75                     M 	rts
00013774                            	.c bhs.s	; LO/CS
00013774 64E6                     M 	bhs.s	.false
00013776 4E75                     M 	rts
00013778                            	.c beq.s	; NE
00013778 67E2                     M 	beq.s	.false
0001377A 4E75                     M 	rts
0001377C                            	.c bne.s	; EQ
0001377C 66DE                     M 	bne.s	.false
0001377E 4E75                     M 	rts
00013780                            	.c bvs.s	; VC
00013780 69DA                     M 	bvs.s	.false
00013782 4E75                     M 	rts
00013784                            	.c bvc.s	; VS
00013784 68D6                     M 	bvc.s	.false
00013786 4E75                     M 	rts
00013788                            	.c bmi.s	; PL
00013788 6BD2                     M 	bmi.s	.false
0001378A 4E75                     M 	rts
0001378C                            	.c bpl.s	; MI
0001378C 6ACE                     M 	bpl.s	.false
0001378E 4E75                     M 	rts
00013790                            	.c blt.s	; GE
00013790 6DCA                     M 	blt.s	.false
00013792 4E75                     M 	rts
00013794                            	.c bge.s	; LT
00013794 6CC6                     M 	bge.s	.false
00013796 4E75                     M 	rts
00013798                            	.c ble.s	; GT
00013798 6FC2                     M 	ble.s	.false
0001379A 4E75                     M 	rts
0001379C                            	.c bgt.s	; LE
0001379C 6EBE                     M 	bgt.s	.false
0001379E 4E75                     M 	rts
000137A0                            ; ===========================================================================
000137A0                            ; ---------------------------------------------------------------------------
000137A0                            ; Tracker command for freezing the CPU. DEBUG FLAG
000137A0                            ; ---------------------------------------------------------------------------
000137A0                            
000137A0                            dcFreeze:
000137A0 6000 FFFE                  		bra.w	*		; Freeze CPU here
000137A4 4E75                       		rts
000137A6                            ; ===========================================================================
000137A6                            ; ---------------------------------------------------------------------------
000137A6                            ; Tracker command for debugging tracker data. DEBUG FLAG
000137A6                            ; ---------------------------------------------------------------------------
000137A6                            
000137A6                            dcTracker:
000137A6 50F8 839A                  		st	msChktracker.w	; set debug flag
000137AA 4E75                       		rts
000137AC                            ; ===========================================================================
000137AC                            ; ---------------------------------------------------------------------------
000137AC                            ; Define music and SFX
000137AC                            ; ---------------------------------------------------------------------------
000137AC                            
000137AC                            	opt oz-				; disable zero-offset optimization
000137AC                            
000137AC =000000FA                  __sfx =		SFXoff
000137AC =0000000A                  __mus =		MusOff
000137AC                            SoundIndex:
000137AC                            	ptrSFX	0, RingRight, RingLeft
000137AC =00000000                M .type	=	0<<24
000137AC                          M 	rept	narg-1
000137AC =000000FA                M sfx_ringright	=	__sfx
000137AC                          M dsfxfa	equs	"ringright"
000137AC 0000 0000                M 	dc.l	dsfxafa|.type
000137B0 =000000FB                M __sfx	=	__sfx+1
000137B0                          M 	shift
000137B0 =000000FB                M sfx_ringleft	=	__sfx
000137B0                          M dsfxfb	equs	"ringleft"
000137B0 0000 0000                M 	dc.l	dsfxafb|.type
000137B4 =000000FC                M __sfx	=	__sfx+1
000137B4                          M 	shift
000137B4                            
000137B4                            MusicIndex:
000137B4                            	ptrMusic Pelimusa, $1A, MysticCave, $34, DIS, $1E, ZaxxRemix, $00
000137B4                          M 	rept	narg/2
000137B4 =0000000A                M mus_pelimusa	=	__mus
000137B4                          M dmusa	equs	"pelimusa"
000137B4 0000 0000                M 	dc.l	(($1a)<<24)|dmusaa
000137B8 =0000000B                M __mus	=	__mus+1
000137B8                          M 	shift
000137B8                          M 	shift
000137B8 =0000000B                M mus_mysticcave	=	__mus
000137B8                          M dmusb	equs	"mysticcave"
000137B8 0000 0000                M 	dc.l	(($34)<<24)|dmusab
000137BC =0000000C                M __mus	=	__mus+1
000137BC                          M 	shift
000137BC                          M 	shift
000137BC =0000000C                M mus_dis	=	__mus
000137BC                          M dmusc	equs	"dis"
000137BC 0000 0000                M 	dc.l	(($1e)<<24)|dmusac
000137C0 =0000000D                M __mus	=	__mus+1
000137C0                          M 	shift
000137C0                          M 	shift
000137C0 =0000000D                M mus_zaxxremix	=	__mus
000137C0                          M dmusd	equs	"zaxxremix"
000137C0 0000 0000                M 	dc.l	(($00)<<24)|dmusad
000137C4 =0000000E                M __mus	=	__mus+1
000137C4                          M 	shift
000137C4                          M 	shift
000137C4                            	ptrMusic ColumnDive, $3C, Pray, $0B, HydroCity, $1E, GameNo, $74
000137C4                          M 	rept	narg/2
000137C4 =0000000E                M mus_columndive	=	__mus
000137C4                          M dmuse	equs	"columndive"
000137C4 0000 0000                M 	dc.l	(($3c)<<24)|dmusae
000137C8 =0000000F                M __mus	=	__mus+1
000137C8                          M 	shift
000137C8                          M 	shift
000137C8 =0000000F                M mus_pray	=	__mus
000137C8                          M dmusf	equs	"pray"
000137C8 0000 0000                M 	dc.l	(($0b)<<24)|dmusaf
000137CC =00000010                M __mus	=	__mus+1
000137CC                          M 	shift
000137CC                          M 	shift
000137CC =00000010                M mus_hydrocity	=	__mus
000137CC                          M dmus10	equs	"hydrocity"
000137CC 0000 0000                M 	dc.l	(($1e)<<24)|dmusa10
000137D0 =00000011                M __mus	=	__mus+1
000137D0                          M 	shift
000137D0                          M 	shift
000137D0 =00000011                M mus_gameno	=	__mus
000137D0                          M dmus11	equs	"gameno"
000137D0 0000 0000                M 	dc.l	(($74)<<24)|dmusa11
000137D4 =00000012                M __mus	=	__mus+1
000137D4                          M 	shift
000137D4                          M 	shift
000137D4                            	ptrMusic TowerPuppet, $00, ChoosePath, $0E, Shop, $74, Beach, $32
000137D4                          M 	rept	narg/2
000137D4 =00000012                M mus_towerpuppet	=	__mus
000137D4                          M dmus12	equs	"towerpuppet"
000137D4 0000 0000                M 	dc.l	(($00)<<24)|dmusa12
000137D8 =00000013                M __mus	=	__mus+1
000137D8                          M 	shift
000137D8                          M 	shift
000137D8 =00000013                M mus_choosepath	=	__mus
000137D8                          M dmus13	equs	"choosepath"
000137D8 0000 0000                M 	dc.l	(($0e)<<24)|dmusa13
000137DC =00000014                M __mus	=	__mus+1
000137DC                          M 	shift
000137DC                          M 	shift
000137DC =00000014                M mus_shop	=	__mus
000137DC                          M dmus14	equs	"shop"
000137DC 0000 0000                M 	dc.l	(($74)<<24)|dmusa14
000137E0 =00000015                M __mus	=	__mus+1
000137E0                          M 	shift
000137E0                          M 	shift
000137E0 =00000015                M mus_beach	=	__mus
000137E0                          M dmus15	equs	"beach"
000137E0 0000 0000                M 	dc.l	(($32)<<24)|dmusa15
000137E4 =00000016                M __mus	=	__mus+1
000137E4                          M 	shift
000137E4                          M 	shift
000137E4                            	ptrMusic SmoothCriminal, $2A
000137E4                          M 	rept	narg/2
000137E4 =00000016                M mus_smoothcriminal	=	__mus
000137E4                          M dmus16	equs	"smoothcriminal"
000137E4 0000 0000                M 	dc.l	(($2a)<<24)|dmusa16
000137E8 =00000017                M __mus	=	__mus+1
000137E8                          M 	shift
000137E8                          M 	shift
000137E8                            ; ===========================================================================
000137E8                            ; ---------------------------------------------------------------------------
000137E8                            ; Define samples
000137E8                            ; ---------------------------------------------------------------------------
000137E8                            
000137E8 =00000080                  __samp =	$80
000137E8                            SampleList:
000137E8                            	sample $0000, Stop, Stop		; 80 - Stop sample (DO NOT EDIT)
000137E8 =00000080                M dstop	=	__samp
000137E8 =00000081                M __samp	=	__samp+1
000137E8 0000 00                  M 	dc.b	swf_stop&$ff,((swf_stop>>$08)&$7f)|$80,(swf_stop>>$0f)&$ff
000137EB 0000 00                  M 	dc.b	(swfr_stop-1)&$ff,(((swfr_stop-1)>>$08)&$7f)|$80,((swfr_stop-1)>>$0f)&$ff
000137EE 0000 00                  M 	dc.b	swf_stop&$ff,((swf_stop>>$08)&$7f)|$80,(swf_stop>>$0f)&$ff
000137F1 0000 00                  M 	dc.b	(swfr_stop-1)&$ff,(((swfr_stop-1)>>$08)&$7f)|$80,((swfr_stop-1)>>$0f)&$ff
000137F4 FF00                     M 	dc.w	$0000-$100
000137F6 0000                     M 	dc.w	0
000137F8                            	sample $0100, Kick, Stop		; 81 - Kick
000137F8 =00000081                M dkick	=	__samp
000137F8 =00000082                M __samp	=	__samp+1
000137F8 0000 00                  M 	dc.b	swf_kick&$ff,((swf_kick>>$08)&$7f)|$80,(swf_kick>>$0f)&$ff
000137FB 0000 00                  M 	dc.b	(swfr_kick-1)&$ff,(((swfr_kick-1)>>$08)&$7f)|$80,((swfr_kick-1)>>$0f)&$ff
000137FE 0000 00                  M 	dc.b	swf_stop&$ff,((swf_stop>>$08)&$7f)|$80,(swf_stop>>$0f)&$ff
00013801 0000 00                  M 	dc.b	(swfr_stop-1)&$ff,(((swfr_stop-1)>>$08)&$7f)|$80,((swfr_stop-1)>>$0f)&$ff
00013804 0000                     M 	dc.w	$0100-$100
00013806 0000                     M 	dc.w	0
00013808                            	sample $0100, LowKick, Stop		; 82 - Low Kick
00013808 =00000082                M dlowkick	=	__samp
00013808 =00000083                M __samp	=	__samp+1
00013808 0000 00                  M 	dc.b	swf_lowkick&$ff,((swf_lowkick>>$08)&$7f)|$80,(swf_lowkick>>$0f)&$ff
0001380B 0000 00                  M 	dc.b	(swfr_lowkick-1)&$ff,(((swfr_lowkick-1)>>$08)&$7f)|$80,((swfr_lowkick-1)>>$0f)&$ff
0001380E 0000 00                  M 	dc.b	swf_stop&$ff,((swf_stop>>$08)&$7f)|$80,(swf_stop>>$0f)&$ff
00013811 0000 00                  M 	dc.b	(swfr_stop-1)&$ff,(((swfr_stop-1)>>$08)&$7f)|$80,((swfr_stop-1)>>$0f)&$ff
00013814 0000                     M 	dc.w	$0100-$100
00013816 0000                     M 	dc.w	0
00013818                            	sample $0100, Snare, Stop		; 83 - Snare
00013818 =00000083                M dsnare	=	__samp
00013818 =00000084                M __samp	=	__samp+1
00013818 0000 00                  M 	dc.b	swf_snare&$ff,((swf_snare>>$08)&$7f)|$80,(swf_snare>>$0f)&$ff
0001381B 0000 00                  M 	dc.b	(swfr_snare-1)&$ff,(((swfr_snare-1)>>$08)&$7f)|$80,((swfr_snare-1)>>$0f)&$ff
0001381E 0000 00                  M 	dc.b	swf_stop&$ff,((swf_stop>>$08)&$7f)|$80,(swf_stop>>$0f)&$ff
00013821 0000 00                  M 	dc.b	(swfr_stop-1)&$ff,(((swfr_stop-1)>>$08)&$7f)|$80,((swfr_stop-1)>>$0f)&$ff
00013824 0000                     M 	dc.w	$0100-$100
00013826 0000                     M 	dc.w	0
00013828                            	sample $0100, Clap, Stop		; 84 - Clap
00013828 =00000084                M dclap	=	__samp
00013828 =00000085                M __samp	=	__samp+1
00013828 0000 00                  M 	dc.b	swf_clap&$ff,((swf_clap>>$08)&$7f)|$80,(swf_clap>>$0f)&$ff
0001382B 0000 00                  M 	dc.b	(swfr_clap-1)&$ff,(((swfr_clap-1)>>$08)&$7f)|$80,((swfr_clap-1)>>$0f)&$ff
0001382E 0000 00                  M 	dc.b	swf_stop&$ff,((swf_stop>>$08)&$7f)|$80,(swf_stop>>$0f)&$ff
00013831 0000 00                  M 	dc.b	(swfr_stop-1)&$ff,(((swfr_stop-1)>>$08)&$7f)|$80,((swfr_stop-1)>>$0f)&$ff
00013834 0000                     M 	dc.w	$0100-$100
00013836 0000                     M 	dc.w	0
00013838                            	sample $0180, Tom, Stop, HiTom		; 85 - High Tom
00013838 =00000085                M dhitom	=	__samp
00013838 =00000086                M __samp	=	__samp+1
00013838 0000 00                  M 	dc.b	swf_tom&$ff,((swf_tom>>$08)&$7f)|$80,(swf_tom>>$0f)&$ff
0001383B 0000 00                  M 	dc.b	(swfr_tom-1)&$ff,(((swfr_tom-1)>>$08)&$7f)|$80,((swfr_tom-1)>>$0f)&$ff
0001383E 0000 00                  M 	dc.b	swf_stop&$ff,((swf_stop>>$08)&$7f)|$80,(swf_stop>>$0f)&$ff
00013841 0000 00                  M 	dc.b	(swfr_stop-1)&$ff,(((swfr_stop-1)>>$08)&$7f)|$80,((swfr_stop-1)>>$0f)&$ff
00013844 0080                     M 	dc.w	$0180-$100
00013846 0000                     M 	dc.w	0
00013848                            	sample $0100, Tom, Stop			; 86 - Mid Tom
00013848 =00000086                M dtom	=	__samp
00013848 =00000087                M __samp	=	__samp+1
00013848 0000 00                  M 	dc.b	swf_tom&$ff,((swf_tom>>$08)&$7f)|$80,(swf_tom>>$0f)&$ff
0001384B 0000 00                  M 	dc.b	(swfr_tom-1)&$ff,(((swfr_tom-1)>>$08)&$7f)|$80,((swfr_tom-1)>>$0f)&$ff
0001384E 0000 00                  M 	dc.b	swf_stop&$ff,((swf_stop>>$08)&$7f)|$80,(swf_stop>>$0f)&$ff
00013851 0000 00                  M 	dc.b	(swfr_stop-1)&$ff,(((swfr_stop-1)>>$08)&$7f)|$80,((swfr_stop-1)>>$0f)&$ff
00013854 0000                     M 	dc.w	$0100-$100
00013856 0000                     M 	dc.w	0
00013858                            	sample $00C0, Tom, Stop, LowTom		; 87 - Low Tom
00013858 =00000087                M dlowtom	=	__samp
00013858 =00000088                M __samp	=	__samp+1
00013858 0000 00                  M 	dc.b	swf_tom&$ff,((swf_tom>>$08)&$7f)|$80,(swf_tom>>$0f)&$ff
0001385B 0000 00                  M 	dc.b	(swfr_tom-1)&$ff,(((swfr_tom-1)>>$08)&$7f)|$80,((swfr_tom-1)>>$0f)&$ff
0001385E 0000 00                  M 	dc.b	swf_stop&$ff,((swf_stop>>$08)&$7f)|$80,(swf_stop>>$0f)&$ff
00013861 0000 00                  M 	dc.b	(swfr_stop-1)&$ff,(((swfr_stop-1)>>$08)&$7f)|$80,((swfr_stop-1)>>$0f)&$ff
00013864 FFC0                     M 	dc.w	$00c0-$100
00013866 0000                     M 	dc.w	0
00013868                            	sample $0080, Tom, Stop, FloorTom	; 88 - Floor Tom
00013868 =00000088                M dfloortom	=	__samp
00013868 =00000089                M __samp	=	__samp+1
00013868 0000 00                  M 	dc.b	swf_tom&$ff,((swf_tom>>$08)&$7f)|$80,(swf_tom>>$0f)&$ff
0001386B 0000 00                  M 	dc.b	(swfr_tom-1)&$ff,(((swfr_tom-1)>>$08)&$7f)|$80,((swfr_tom-1)>>$0f)&$ff
0001386E 0000 00                  M 	dc.b	swf_stop&$ff,((swf_stop>>$08)&$7f)|$80,(swf_stop>>$0f)&$ff
00013871 0000 00                  M 	dc.b	(swfr_stop-1)&$ff,(((swfr_stop-1)>>$08)&$7f)|$80,((swfr_stop-1)>>$0f)&$ff
00013874 FF80                     M 	dc.w	$0080-$100
00013876 0000                     M 	dc.w	0
00013878                            
00013878                            	sample $0100, OrchHit, Stop		; 89 - Orchestra hit (Dynamite Headdy)
00013878 =00000089                M dorchhit	=	__samp
00013878 =0000008A                M __samp	=	__samp+1
00013878 0000 00                  M 	dc.b	swf_orchhit&$ff,((swf_orchhit>>$08)&$7f)|$80,(swf_orchhit>>$0f)&$ff
0001387B 0000 00                  M 	dc.b	(swfr_orchhit-1)&$ff,(((swfr_orchhit-1)>>$08)&$7f)|$80,((swfr_orchhit-1)>>$0f)&$ff
0001387E 0000 00                  M 	dc.b	swf_stop&$ff,((swf_stop>>$08)&$7f)|$80,(swf_stop>>$0f)&$ff
00013881 0000 00                  M 	dc.b	(swfr_stop-1)&$ff,(((swfr_stop-1)>>$08)&$7f)|$80,((swfr_stop-1)>>$0f)&$ff
00013884 0000                     M 	dc.w	$0100-$100
00013886 0000                     M 	dc.w	0
00013888                            	sample $0100, ZaxxOOH, Stop		; 8A - OOH 0-4 (Zaxxon Motherbase 2000)
00013888 =0000008A                M dzaxxooh	=	__samp
00013888 =0000008B                M __samp	=	__samp+1
00013888 0000 00                  M 	dc.b	swf_zaxxooh&$ff,((swf_zaxxooh>>$08)&$7f)|$80,(swf_zaxxooh>>$0f)&$ff
0001388B 0000 00                  M 	dc.b	(swfr_zaxxooh-1)&$ff,(((swfr_zaxxooh-1)>>$08)&$7f)|$80,((swfr_zaxxooh-1)>>$0f)&$ff
0001388E 0000 00                  M 	dc.b	swf_stop&$ff,((swf_stop>>$08)&$7f)|$80,(swf_stop>>$0f)&$ff
00013891 0000 00                  M 	dc.b	(swfr_stop-1)&$ff,(((swfr_stop-1)>>$08)&$7f)|$80,((swfr_stop-1)>>$0f)&$ff
00013894 0000                     M 	dc.w	$0100-$100
00013896 0000                     M 	dc.w	0
00013898                            	sample $0080, ZaxxOOH, Stop, ZaxxLoOOH	; 8B - OOH Low 0-6 (Zaxxon Motherbase 2000)
00013898 =0000008B                M dzaxxloooh	=	__samp
00013898 =0000008C                M __samp	=	__samp+1
00013898 0000 00                  M 	dc.b	swf_zaxxooh&$ff,((swf_zaxxooh>>$08)&$7f)|$80,(swf_zaxxooh>>$0f)&$ff
0001389B 0000 00                  M 	dc.b	(swfr_zaxxooh-1)&$ff,(((swfr_zaxxooh-1)>>$08)&$7f)|$80,((swfr_zaxxooh-1)>>$0f)&$ff
0001389E 0000 00                  M 	dc.b	swf_stop&$ff,((swf_stop>>$08)&$7f)|$80,(swf_stop>>$0f)&$ff
000138A1 0000 00                  M 	dc.b	(swfr_stop-1)&$ff,(((swfr_stop-1)>>$08)&$7f)|$80,((swfr_stop-1)>>$0f)&$ff
000138A4 FF80                     M 	dc.w	$0080-$100
000138A6 0000                     M 	dc.w	0
000138A8                            	sample $0100, ZaxxGO, Stop		; 8C - GO 0-5 (Zaxxon Motherbase 2000)
000138A8 =0000008C                M dzaxxgo	=	__samp
000138A8 =0000008D                M __samp	=	__samp+1
000138A8 0000 00                  M 	dc.b	swf_zaxxgo&$ff,((swf_zaxxgo>>$08)&$7f)|$80,(swf_zaxxgo>>$0f)&$ff
000138AB 0000 00                  M 	dc.b	(swfr_zaxxgo-1)&$ff,(((swfr_zaxxgo-1)>>$08)&$7f)|$80,((swfr_zaxxgo-1)>>$0f)&$ff
000138AE 0000 00                  M 	dc.b	swf_stop&$ff,((swf_stop>>$08)&$7f)|$80,(swf_stop>>$0f)&$ff
000138B1 0000 00                  M 	dc.b	(swfr_stop-1)&$ff,(((swfr_stop-1)>>$08)&$7f)|$80,((swfr_stop-1)>>$0f)&$ff
000138B4 0000                     M 	dc.w	$0100-$100
000138B6 0000                     M 	dc.w	0
000138B8                            	sample $0100, ZaxxDIS, Stop		; 8D - DIS 2-3 (Zaxxon Motherbase 2000)
000138B8 =0000008D                M dzaxxdis	=	__samp
000138B8 =0000008E                M __samp	=	__samp+1
000138B8 0000 00                  M 	dc.b	swf_zaxxdis&$ff,((swf_zaxxdis>>$08)&$7f)|$80,(swf_zaxxdis>>$0f)&$ff
000138BB 0000 00                  M 	dc.b	(swfr_zaxxdis-1)&$ff,(((swfr_zaxxdis-1)>>$08)&$7f)|$80,((swfr_zaxxdis-1)>>$0f)&$ff
000138BE 0000 00                  M 	dc.b	swf_stop&$ff,((swf_stop>>$08)&$7f)|$80,(swf_stop>>$0f)&$ff
000138C1 0000 00                  M 	dc.b	(swfr_stop-1)&$ff,(((swfr_stop-1)>>$08)&$7f)|$80,((swfr_stop-1)>>$0f)&$ff
000138C4 0000                     M 	dc.w	$0100-$100
000138C6 0000                     M 	dc.w	0
000138C8                            	sample $0100, ZaxxIT, Stop		; 8E - IT 2-9 (Zaxxon Motherbase 2000)
000138C8 =0000008E                M dzaxxit	=	__samp
000138C8 =0000008F                M __samp	=	__samp+1
000138C8 0000 00                  M 	dc.b	swf_zaxxit&$ff,((swf_zaxxit>>$08)&$7f)|$80,(swf_zaxxit>>$0f)&$ff
000138CB 0000 00                  M 	dc.b	(swfr_zaxxit-1)&$ff,(((swfr_zaxxit-1)>>$08)&$7f)|$80,((swfr_zaxxit-1)>>$0f)&$ff
000138CE 0000 00                  M 	dc.b	swf_stop&$ff,((swf_stop>>$08)&$7f)|$80,(swf_stop>>$0f)&$ff
000138D1 0000 00                  M 	dc.b	(swfr_stop-1)&$ff,(((swfr_stop-1)>>$08)&$7f)|$80,((swfr_stop-1)>>$0f)&$ff
000138D4 0000                     M 	dc.w	$0100-$100
000138D6 0000                     M 	dc.w	0
000138D8                            	sample $0100, ZaxxEYO, Stop		; 8F - EYO 2-A (Zaxxon Motherbase 2000)
000138D8 =0000008F                M dzaxxeyo	=	__samp
000138D8 =00000090                M __samp	=	__samp+1
000138D8 0000 00                  M 	dc.b	swf_zaxxeyo&$ff,((swf_zaxxeyo>>$08)&$7f)|$80,(swf_zaxxeyo>>$0f)&$ff
000138DB 0000 00                  M 	dc.b	(swfr_zaxxeyo-1)&$ff,(((swfr_zaxxeyo-1)>>$08)&$7f)|$80,((swfr_zaxxeyo-1)>>$0f)&$ff
000138DE 0000 00                  M 	dc.b	swf_stop&$ff,((swf_stop>>$08)&$7f)|$80,(swf_stop>>$0f)&$ff
000138E1 0000 00                  M 	dc.b	(swfr_stop-1)&$ff,(((swfr_stop-1)>>$08)&$7f)|$80,((swfr_stop-1)>>$0f)&$ff
000138E4 0000                     M 	dc.w	$0100-$100
000138E6 0000                     M 	dc.w	0
000138E8                            
000138E8                            	sample $0100, KcTom, Stop		; 90 - Tom (Knuckles Chaotix)
000138E8 =00000090                M dkctom	=	__samp
000138E8 =00000091                M __samp	=	__samp+1
000138E8 0000 00                  M 	dc.b	swf_kctom&$ff,((swf_kctom>>$08)&$7f)|$80,(swf_kctom>>$0f)&$ff
000138EB 0000 00                  M 	dc.b	(swfr_kctom-1)&$ff,(((swfr_kctom-1)>>$08)&$7f)|$80,((swfr_kctom-1)>>$0f)&$ff
000138EE 0000 00                  M 	dc.b	swf_stop&$ff,((swf_stop>>$08)&$7f)|$80,(swf_stop>>$0f)&$ff
000138F1 0000 00                  M 	dc.b	(swfr_stop-1)&$ff,(((swfr_stop-1)>>$08)&$7f)|$80,((swfr_stop-1)>>$0f)&$ff
000138F4 0000                     M 	dc.w	$0100-$100
000138F6 0000                     M 	dc.w	0
000138F8                            	sample $00C0, KcTom, Stop, KcLowTom	; 91 - Low Tom (Knuckles Chaotix)
000138F8 =00000091                M dkclowtom	=	__samp
000138F8 =00000092                M __samp	=	__samp+1
000138F8 0000 00                  M 	dc.b	swf_kctom&$ff,((swf_kctom>>$08)&$7f)|$80,(swf_kctom>>$0f)&$ff
000138FB 0000 00                  M 	dc.b	(swfr_kctom-1)&$ff,(((swfr_kctom-1)>>$08)&$7f)|$80,((swfr_kctom-1)>>$0f)&$ff
000138FE 0000 00                  M 	dc.b	swf_stop&$ff,((swf_stop>>$08)&$7f)|$80,(swf_stop>>$0f)&$ff
00013901 0000 00                  M 	dc.b	(swfr_stop-1)&$ff,(((swfr_stop-1)>>$08)&$7f)|$80,((swfr_stop-1)>>$0f)&$ff
00013904 FFC0                     M 	dc.w	$00c0-$100
00013906 0000                     M 	dc.w	0
00013908                            	sample $0080, KcTom, Stop, KcFloorTom	; 92 - Floor Tom (Knuckles Chaotix)
00013908 =00000092                M dkcfloortom	=	__samp
00013908 =00000093                M __samp	=	__samp+1
00013908 0000 00                  M 	dc.b	swf_kctom&$ff,((swf_kctom>>$08)&$7f)|$80,(swf_kctom>>$0f)&$ff
0001390B 0000 00                  M 	dc.b	(swfr_kctom-1)&$ff,(((swfr_kctom-1)>>$08)&$7f)|$80,((swfr_kctom-1)>>$0f)&$ff
0001390E 0000 00                  M 	dc.b	swf_stop&$ff,((swf_stop>>$08)&$7f)|$80,(swf_stop>>$0f)&$ff
00013911 0000 00                  M 	dc.b	(swfr_stop-1)&$ff,(((swfr_stop-1)>>$08)&$7f)|$80,((swfr_stop-1)>>$0f)&$ff
00013914 FF80                     M 	dc.w	$0080-$100
00013916 0000                     M 	dc.w	0
00013918                            	sample $0100, kcCymbal, Stop		; 93 - Cymbal? (Knuckles Chaotix)
00013918 =00000093                M dkccymbal	=	__samp
00013918 =00000094                M __samp	=	__samp+1
00013918 0000 00                  M 	dc.b	swf_kccymbal&$ff,((swf_kccymbal>>$08)&$7f)|$80,(swf_kccymbal>>$0f)&$ff
0001391B 0000 00                  M 	dc.b	(swfr_kccymbal-1)&$ff,(((swfr_kccymbal-1)>>$08)&$7f)|$80,((swfr_kccymbal-1)>>$0f)&$ff
0001391E 0000 00                  M 	dc.b	swf_stop&$ff,((swf_stop>>$08)&$7f)|$80,(swf_stop>>$0f)&$ff
00013921 0000 00                  M 	dc.b	(swfr_stop-1)&$ff,(((swfr_stop-1)>>$08)&$7f)|$80,((swfr_stop-1)>>$0f)&$ff
00013924 0000                     M 	dc.w	$0100-$100
00013926 0000                     M 	dc.w	0
00013928                            	sample $0100, KcSnare, Stop		; 94 - Snare (Knuckles Chaotix)
00013928 =00000094                M dkcsnare	=	__samp
00013928 =00000095                M __samp	=	__samp+1
00013928 0000 00                  M 	dc.b	swf_kcsnare&$ff,((swf_kcsnare>>$08)&$7f)|$80,(swf_kcsnare>>$0f)&$ff
0001392B 0000 00                  M 	dc.b	(swfr_kcsnare-1)&$ff,(((swfr_kcsnare-1)>>$08)&$7f)|$80,((swfr_kcsnare-1)>>$0f)&$ff
0001392E 0000 00                  M 	dc.b	swf_stop&$ff,((swf_stop>>$08)&$7f)|$80,(swf_stop>>$0f)&$ff
00013931 0000 00                  M 	dc.b	(swfr_stop-1)&$ff,(((swfr_stop-1)>>$08)&$7f)|$80,((swfr_stop-1)>>$0f)&$ff
00013934 0000                     M 	dc.w	$0100-$100
00013936 0000                     M 	dc.w	0
00013938                            	sample $0100, KcTamb, Stop		; 95 - Tambourine? (Knuckles Chaotix)
00013938 =00000095                M dkctamb	=	__samp
00013938 =00000096                M __samp	=	__samp+1
00013938 0000 00                  M 	dc.b	swf_kctamb&$ff,((swf_kctamb>>$08)&$7f)|$80,(swf_kctamb>>$0f)&$ff
0001393B 0000 00                  M 	dc.b	(swfr_kctamb-1)&$ff,(((swfr_kctamb-1)>>$08)&$7f)|$80,((swfr_kctamb-1)>>$0f)&$ff
0001393E 0000 00                  M 	dc.b	swf_stop&$ff,((swf_stop>>$08)&$7f)|$80,(swf_stop>>$0f)&$ff
00013941 0000 00                  M 	dc.b	(swfr_stop-1)&$ff,(((swfr_stop-1)>>$08)&$7f)|$80,((swfr_stop-1)>>$0f)&$ff
00013944 0000                     M 	dc.w	$0100-$100
00013946 0000                     M 	dc.w	0
00013948                            	sample $0100, Kc87, Stop		; 96 - Not really sure? (Knuckles Chaotix)
00013948 =00000096                M dkc87	=	__samp
00013948 =00000097                M __samp	=	__samp+1
00013948 0000 00                  M 	dc.b	swf_kc87&$ff,((swf_kc87>>$08)&$7f)|$80,(swf_kc87>>$0f)&$ff
0001394B 0000 00                  M 	dc.b	(swfr_kc87-1)&$ff,(((swfr_kc87-1)>>$08)&$7f)|$80,((swfr_kc87-1)>>$0f)&$ff
0001394E 0000 00                  M 	dc.b	swf_stop&$ff,((swf_stop>>$08)&$7f)|$80,(swf_stop>>$0f)&$ff
00013951 0000 00                  M 	dc.b	(swfr_stop-1)&$ff,(((swfr_stop-1)>>$08)&$7f)|$80,((swfr_stop-1)>>$0f)&$ff
00013954 0000                     M 	dc.w	$0100-$100
00013956 0000                     M 	dc.w	0
00013958                            	sample $0100, KcCrash, Stop		; 97 - Crash Cymbal (Knuckles Chaotix)
00013958 =00000097                M dkccrash	=	__samp
00013958 =00000098                M __samp	=	__samp+1
00013958 0000 00                  M 	dc.b	swf_kccrash&$ff,((swf_kccrash>>$08)&$7f)|$80,(swf_kccrash>>$0f)&$ff
0001395B 0000 00                  M 	dc.b	(swfr_kccrash-1)&$ff,(((swfr_kccrash-1)>>$08)&$7f)|$80,((swfr_kccrash-1)>>$0f)&$ff
0001395E 0000 00                  M 	dc.b	swf_stop&$ff,((swf_stop>>$08)&$7f)|$80,(swf_stop>>$0f)&$ff
00013961 0000 00                  M 	dc.b	(swfr_stop-1)&$ff,(((swfr_stop-1)>>$08)&$7f)|$80,((swfr_stop-1)>>$0f)&$ff
00013964 0000                     M 	dc.w	$0100-$100
00013966 0000                     M 	dc.w	0
00013968                            
00013968                            	sample $0100, Meow, Stop	; AVG	; 98 - Meow (Meow Mix - Cyriak)
00013968 =00000098                M dmeow	=	__samp
00013968 =00000099                M __samp	=	__samp+1
00013968 0000 00                  M 	dc.b	swf_meow&$ff,((swf_meow>>$08)&$7f)|$80,(swf_meow>>$0f)&$ff
0001396B 0000 00                  M 	dc.b	(swfr_meow-1)&$ff,(((swfr_meow-1)>>$08)&$7f)|$80,((swfr_meow-1)>>$0f)&$ff
0001396E 0000 00                  M 	dc.b	swf_stop&$ff,((swf_stop>>$08)&$7f)|$80,(swf_stop>>$0f)&$ff
00013971 0000 00                  M 	dc.b	(swfr_stop-1)&$ff,(((swfr_stop-1)>>$08)&$7f)|$80,((swfr_stop-1)>>$0f)&$ff
00013974 0000                     M 	dc.w	$0100-$100
00013976 0000                     M 	dc.w	0
00013978                            	sample $0100, Wooh, WoohLoop	; AVG	; 99 - Wooh (The Amazing Atheist)
00013978 =00000099                M dwooh	=	__samp
00013978 =0000009A                M __samp	=	__samp+1
00013978 0000 00                  M 	dc.b	swf_wooh&$ff,((swf_wooh>>$08)&$7f)|$80,(swf_wooh>>$0f)&$ff
0001397B 0000 00                  M 	dc.b	(swfr_wooh-1)&$ff,(((swfr_wooh-1)>>$08)&$7f)|$80,((swfr_wooh-1)>>$0f)&$ff
0001397E 0000 00                  M 	dc.b	swf_woohloop&$ff,((swf_woohloop>>$08)&$7f)|$80,(swf_woohloop>>$0f)&$ff
00013981 0000 00                  M 	dc.b	(swfr_woohloop-1)&$ff,(((swfr_woohloop-1)>>$08)&$7f)|$80,((swfr_woohloop-1)>>$0f)&$ff
00013984 0000                     M 	dc.w	$0100-$100
00013986 0000                     M 	dc.w	0
00013988                            	sample $0100, Lazer, Stop	; AVG	; 9A - Lazer (R2D2 bird)
00013988 =0000009A                M dlazer	=	__samp
00013988 =0000009B                M __samp	=	__samp+1
00013988 0000 00                  M 	dc.b	swf_lazer&$ff,((swf_lazer>>$08)&$7f)|$80,(swf_lazer>>$0f)&$ff
0001398B 0000 00                  M 	dc.b	(swfr_lazer-1)&$ff,(((swfr_lazer-1)>>$08)&$7f)|$80,((swfr_lazer-1)>>$0f)&$ff
0001398E 0000 00                  M 	dc.b	swf_stop&$ff,((swf_stop>>$08)&$7f)|$80,(swf_stop>>$0f)&$ff
00013991 0000 00                  M 	dc.b	(swfr_stop-1)&$ff,(((swfr_stop-1)>>$08)&$7f)|$80,((swfr_stop-1)>>$0f)&$ff
00013994 0000                     M 	dc.w	$0100-$100
00013996 0000                     M 	dc.w	0
00013998                            
00013998                            	sample $0100, Kaiku1, Stop		; 9B - Kaiku (Wings - Pelimusa)
00013998 =0000009B                M dkaiku1	=	__samp
00013998 =0000009C                M __samp	=	__samp+1
00013998 0000 00                  M 	dc.b	swf_kaiku1&$ff,((swf_kaiku1>>$08)&$7f)|$80,(swf_kaiku1>>$0f)&$ff
0001399B 0000 00                  M 	dc.b	(swfr_kaiku1-1)&$ff,(((swfr_kaiku1-1)>>$08)&$7f)|$80,((swfr_kaiku1-1)>>$0f)&$ff
0001399E 0000 00                  M 	dc.b	swf_stop&$ff,((swf_stop>>$08)&$7f)|$80,(swf_stop>>$0f)&$ff
000139A1 0000 00                  M 	dc.b	(swfr_stop-1)&$ff,(((swfr_stop-1)>>$08)&$7f)|$80,((swfr_stop-1)>>$0f)&$ff
000139A4 0000                     M 	dc.w	$0100-$100
000139A6 0000                     M 	dc.w	0
000139A8                            	sample $0100, Kaiku2, Stop		; 9C - Kaiku (Wings - Pelimusa)
000139A8 =0000009C                M dkaiku2	=	__samp
000139A8 =0000009D                M __samp	=	__samp+1
000139A8 0000 00                  M 	dc.b	swf_kaiku2&$ff,((swf_kaiku2>>$08)&$7f)|$80,(swf_kaiku2>>$0f)&$ff
000139AB 0000 00                  M 	dc.b	(swfr_kaiku2-1)&$ff,(((swfr_kaiku2-1)>>$08)&$7f)|$80,((swfr_kaiku2-1)>>$0f)&$ff
000139AE 0000 00                  M 	dc.b	swf_stop&$ff,((swf_stop>>$08)&$7f)|$80,(swf_stop>>$0f)&$ff
000139B1 0000 00                  M 	dc.b	(swfr_stop-1)&$ff,(((swfr_stop-1)>>$08)&$7f)|$80,((swfr_stop-1)>>$0f)&$ff
000139B4 0000                     M 	dc.w	$0100-$100
000139B6 0000                     M 	dc.w	0
000139B8                            	sample $0100, Kaiku3, Stop		; 9D - Kaiku (Wings - Pelimusa)
000139B8 =0000009D                M dkaiku3	=	__samp
000139B8 =0000009E                M __samp	=	__samp+1
000139B8 0000 00                  M 	dc.b	swf_kaiku3&$ff,((swf_kaiku3>>$08)&$7f)|$80,(swf_kaiku3>>$0f)&$ff
000139BB 0000 00                  M 	dc.b	(swfr_kaiku3-1)&$ff,(((swfr_kaiku3-1)>>$08)&$7f)|$80,((swfr_kaiku3-1)>>$0f)&$ff
000139BE 0000 00                  M 	dc.b	swf_stop&$ff,((swf_stop>>$08)&$7f)|$80,(swf_stop>>$0f)&$ff
000139C1 0000 00                  M 	dc.b	(swfr_stop-1)&$ff,(((swfr_stop-1)>>$08)&$7f)|$80,((swfr_stop-1)>>$0f)&$ff
000139C4 0000                     M 	dc.w	$0100-$100
000139C6 0000                     M 	dc.w	0
000139C8                            	sample $0100, Kaiku4, Stop		; 9E - Kaiku (Wings - Pelimusa)
000139C8 =0000009E                M dkaiku4	=	__samp
000139C8 =0000009F                M __samp	=	__samp+1
000139C8 0000 00                  M 	dc.b	swf_kaiku4&$ff,((swf_kaiku4>>$08)&$7f)|$80,(swf_kaiku4>>$0f)&$ff
000139CB 0000 00                  M 	dc.b	(swfr_kaiku4-1)&$ff,(((swfr_kaiku4-1)>>$08)&$7f)|$80,((swfr_kaiku4-1)>>$0f)&$ff
000139CE 0000 00                  M 	dc.b	swf_stop&$ff,((swf_stop>>$08)&$7f)|$80,(swf_stop>>$0f)&$ff
000139D1 0000 00                  M 	dc.b	(swfr_stop-1)&$ff,(((swfr_stop-1)>>$08)&$7f)|$80,((swfr_stop-1)>>$0f)&$ff
000139D4 0000                     M 	dc.w	$0100-$100
000139D6 0000                     M 	dc.w	0
000139D8                            	sample $0100, Kaiku5, Stop		; 9F - Kaiku (Wings - Pelimusa)
000139D8 =0000009F                M dkaiku5	=	__samp
000139D8 =000000A0                M __samp	=	__samp+1
000139D8 0000 00                  M 	dc.b	swf_kaiku5&$ff,((swf_kaiku5>>$08)&$7f)|$80,(swf_kaiku5>>$0f)&$ff
000139DB 0000 00                  M 	dc.b	(swfr_kaiku5-1)&$ff,(((swfr_kaiku5-1)>>$08)&$7f)|$80,((swfr_kaiku5-1)>>$0f)&$ff
000139DE 0000 00                  M 	dc.b	swf_stop&$ff,((swf_stop>>$08)&$7f)|$80,(swf_stop>>$0f)&$ff
000139E1 0000 00                  M 	dc.b	(swfr_stop-1)&$ff,(((swfr_stop-1)>>$08)&$7f)|$80,((swfr_stop-1)>>$0f)&$ff
000139E4 0000                     M 	dc.w	$0100-$100
000139E6 0000                     M 	dc.w	0
000139E8                            	sample $0100, KaikuL1, KaikuL2, KaikuL2	; A0 - Kaiku (Wings - Pelimusa)
000139E8 =000000A0                M dkaikul2	=	__samp
000139E8 =000000A1                M __samp	=	__samp+1
000139E8 0000 00                  M 	dc.b	swf_kaikul1&$ff,((swf_kaikul1>>$08)&$7f)|$80,(swf_kaikul1>>$0f)&$ff
000139EB 0000 00                  M 	dc.b	(swfr_kaikul1-1)&$ff,(((swfr_kaikul1-1)>>$08)&$7f)|$80,((swfr_kaikul1-1)>>$0f)&$ff
000139EE 0000 00                  M 	dc.b	swf_kaikul2&$ff,((swf_kaikul2>>$08)&$7f)|$80,(swf_kaikul2>>$0f)&$ff
000139F1 0000 00                  M 	dc.b	(swfr_kaikul2-1)&$ff,(((swfr_kaikul2-1)>>$08)&$7f)|$80,((swfr_kaikul2-1)>>$0f)&$ff
000139F4 0000                     M 	dc.w	$0100-$100
000139F6 0000                     M 	dc.w	0
000139F8                            	sample $0100, KaikuL1, KaikuL3, KaikuL3	; A1 - Kaiku (Wings - Pelimusa)
000139F8 =000000A1                M dkaikul3	=	__samp
000139F8 =000000A2                M __samp	=	__samp+1
000139F8 0000 00                  M 	dc.b	swf_kaikul1&$ff,((swf_kaikul1>>$08)&$7f)|$80,(swf_kaikul1>>$0f)&$ff
000139FB 0000 00                  M 	dc.b	(swfr_kaikul1-1)&$ff,(((swfr_kaikul1-1)>>$08)&$7f)|$80,((swfr_kaikul1-1)>>$0f)&$ff
000139FE 0000 00                  M 	dc.b	swf_kaikul3&$ff,((swf_kaikul3>>$08)&$7f)|$80,(swf_kaikul3>>$0f)&$ff
00013A01 0000 00                  M 	dc.b	(swfr_kaikul3-1)&$ff,(((swfr_kaikul3-1)>>$08)&$7f)|$80,((swfr_kaikul3-1)>>$0f)&$ff
00013A04 0000                     M 	dc.w	$0100-$100
00013A06 0000                     M 	dc.w	0
00013A08                            	sample $0100, Sarobasso, Stop		; A2 - Sarobasso (Wings - Pelimusa)
00013A08 =000000A2                M dsarobasso	=	__samp
00013A08 =000000A3                M __samp	=	__samp+1
00013A08 0000 00                  M 	dc.b	swf_sarobasso&$ff,((swf_sarobasso>>$08)&$7f)|$80,(swf_sarobasso>>$0f)&$ff
00013A0B 0000 00                  M 	dc.b	(swfr_sarobasso-1)&$ff,(((swfr_sarobasso-1)>>$08)&$7f)|$80,((swfr_sarobasso-1)>>$0f)&$ff
00013A0E 0000 00                  M 	dc.b	swf_stop&$ff,((swf_stop>>$08)&$7f)|$80,(swf_stop>>$0f)&$ff
00013A11 0000 00                  M 	dc.b	(swfr_stop-1)&$ff,(((swfr_stop-1)>>$08)&$7f)|$80,((swfr_stop-1)>>$0f)&$ff
00013A14 0000                     M 	dc.w	$0100-$100
00013A16 0000                     M 	dc.w	0
00013A18                            ; ===========================================================================
00013A18                            ; ---------------------------------------------------------------------------
00013A18                            ; Define volume envelopes and their data
00013A18                            ; ---------------------------------------------------------------------------
00013A18                            
00013A18 =00000001                  __venv =	$01
00013A18                            VolEnvs:
00013A18                            	volenv Ristar02, Ristar07, Ristar10, Ristar18, Ristar1D, GameNo01
00013A18                          M 	rept	narg
00013A18 =00000001                M vristar02	=	__venv
00013A18 0000 0000                M 	dc.l	vdristar02
00013A1C =00000002                M __venv	=	__venv+1
00013A1C                          M 	shift
00013A1C =00000002                M vristar07	=	__venv
00013A1C 0000 0000                M 	dc.l	vdristar07
00013A20 =00000003                M __venv	=	__venv+1
00013A20                          M 	shift
00013A20 =00000003                M vristar10	=	__venv
00013A20 0000 0000                M 	dc.l	vdristar10
00013A24 =00000004                M __venv	=	__venv+1
00013A24                          M 	shift
00013A24 =00000004                M vristar18	=	__venv
00013A24 0000 0000                M 	dc.l	vdristar18
00013A28 =00000005                M __venv	=	__venv+1
00013A28                          M 	shift
00013A28 =00000005                M vristar1d	=	__venv
00013A28 0000 0000                M 	dc.l	vdristar1d
00013A2C =00000006                M __venv	=	__venv+1
00013A2C                          M 	shift
00013A2C =00000006                M vgameno01	=	__venv
00013A2C 0000 0000                M 	dc.l	vdgameno01
00013A30 =00000007                M __venv	=	__venv+1
00013A30                          M 	shift
00013A30                            	volenv S3K_02, S3K_01, S3K_08, S3K_0A, Phan3_05, Phan3_0A, Zaxx04
00013A30                          M 	rept	narg
00013A30 =00000007                M vs3k_02	=	__venv
00013A30 0000 0000                M 	dc.l	vds3k_02
00013A34 =00000008                M __venv	=	__venv+1
00013A34                          M 	shift
00013A34 =00000008                M vs3k_01	=	__venv
00013A34 0000 0000                M 	dc.l	vds3k_01
00013A38 =00000009                M __venv	=	__venv+1
00013A38                          M 	shift
00013A38 =00000009                M vs3k_08	=	__venv
00013A38 0000 0000                M 	dc.l	vds3k_08
00013A3C =0000000A                M __venv	=	__venv+1
00013A3C                          M 	shift
00013A3C =0000000A                M vs3k_0a	=	__venv
00013A3C 0000 0000                M 	dc.l	vds3k_0a
00013A40 =0000000B                M __venv	=	__venv+1
00013A40                          M 	shift
00013A40 =0000000B                M vphan3_05	=	__venv
00013A40 0000 0000                M 	dc.l	vdphan3_05
00013A44 =0000000C                M __venv	=	__venv+1
00013A44                          M 	shift
00013A44 =0000000C                M vphan3_0a	=	__venv
00013A44 0000 0000                M 	dc.l	vdphan3_0a
00013A48 =0000000D                M __venv	=	__venv+1
00013A48                          M 	shift
00013A48 =0000000D                M vzaxx04	=	__venv
00013A48 0000 0000                M 	dc.l	vdzaxx04
00013A4C =0000000E                M __venv	=	__venv+1
00013A4C                          M 	shift
00013A4C                            	volenv DyHe03, DyHe05, DyHe0A, Col3_02, Col3_03, Col3_05
00013A4C                          M 	rept	narg
00013A4C =0000000E                M vdyhe03	=	__venv
00013A4C 0000 0000                M 	dc.l	vddyhe03
00013A50 =0000000F                M __venv	=	__venv+1
00013A50                          M 	shift
00013A50 =0000000F                M vdyhe05	=	__venv
00013A50 0000 0000                M 	dc.l	vddyhe05
00013A54 =00000010                M __venv	=	__venv+1
00013A54                          M 	shift
00013A54 =00000010                M vdyhe0a	=	__venv
00013A54 0000 0000                M 	dc.l	vddyhe0a
00013A58 =00000011                M __venv	=	__venv+1
00013A58                          M 	shift
00013A58 =00000011                M vcol3_02	=	__venv
00013A58 0000 0000                M 	dc.l	vdcol3_02
00013A5C =00000012                M __venv	=	__venv+1
00013A5C                          M 	shift
00013A5C =00000012                M vcol3_03	=	__venv
00013A5C 0000 0000                M 	dc.l	vdcol3_03
00013A60 =00000013                M __venv	=	__venv+1
00013A60                          M 	shift
00013A60 =00000013                M vcol3_05	=	__venv
00013A60 0000 0000                M 	dc.l	vdcol3_05
00013A64 =00000014                M __venv	=	__venv+1
00013A64                          M 	shift
00013A64                            	volenv WOI_0C, WOI_0D, Kc02, Kc05, Kc08, MoonWalker04
00013A64                          M 	rept	narg
00013A64 =00000014                M vwoi_0c	=	__venv
00013A64 0000 0000                M 	dc.l	vdwoi_0c
00013A68 =00000015                M __venv	=	__venv+1
00013A68                          M 	shift
00013A68 =00000015                M vwoi_0d	=	__venv
00013A68 0000 0000                M 	dc.l	vdwoi_0d
00013A6C =00000016                M __venv	=	__venv+1
00013A6C                          M 	shift
00013A6C =00000016                M vkc02	=	__venv
00013A6C 0000 0000                M 	dc.l	vdkc02
00013A70 =00000017                M __venv	=	__venv+1
00013A70                          M 	shift
00013A70 =00000017                M vkc05	=	__venv
00013A70 0000 0000                M 	dc.l	vdkc05
00013A74 =00000018                M __venv	=	__venv+1
00013A74                          M 	shift
00013A74 =00000018                M vkc08	=	__venv
00013A74 0000 0000                M 	dc.l	vdkc08
00013A78 =00000019                M __venv	=	__venv+1
00013A78                          M 	shift
00013A78 =00000019                M vmoonwalker04	=	__venv
00013A78 0000 0000                M 	dc.l	vdmoonwalker04
00013A7C =0000001A                M __venv	=	__venv+1
00013A7C                          M 	shift
00013A7C                            	volenv S2_02, S2_01, S2_0B
00013A7C                          M 	rept	narg
00013A7C =0000001A                M vs2_02	=	__venv
00013A7C 0000 0000                M 	dc.l	vds2_02
00013A80 =0000001B                M __venv	=	__venv+1
00013A80                          M 	shift
00013A80 =0000001B                M vs2_01	=	__venv
00013A80 0000 0000                M 	dc.l	vds2_01
00013A84 =0000001C                M __venv	=	__venv+1
00013A84                          M 	shift
00013A84 =0000001C                M vs2_0b	=	__venv
00013A84 0000 0000                M 	dc.l	vds2_0b
00013A88 =0000001D                M __venv	=	__venv+1
00013A88                          M 	shift
00013A88                            VolEnvs_End:
00013A88                            	opt ae-
00013A88                            
00013A88                            ; Sonic 2 01
00013A88 0000 0001 0101 0202        vdS2_01:	dc.b $00, $00, $00, $01, $01, $01, $02, $02
00013A90 0203 0303 0404 0405        		dc.b $02, $03, $03, $03, $04, $04, $04, $05
00013A98 0505 0606 0607 82          		dc.b $05, $05, $06, $06, $06, $07, eHold
00013A9F                            
00013A9F                            ; Sonic 2 0B
00013A9F 0404 0403 0303 0202        vdS2_0B:	dc.b $04, $04, $04, $03, $03, $03, $02, $02
00013AA7 0201 0101 0101 0101        		dc.b $02, $01, $01, $01, $01, $01, $01, $01
00013AAF 0202 0202 0203 0303        		dc.b $02, $02, $02, $02, $02, $03, $03, $03
00013AB7 0303 0482                  		dc.b $03, $03, $04, eHold
00013ABB                            
00013ABB                            ; Michael Jackson's Moonwalker 04
00013ABB 0000 0203 0404 0505        vdMoonWalker04:	dc.b $00, $00, $02, $03, $04, $04, $05, $05
00013AC3 0506 82                    		dc.b $05, $06, eHold
00013AC6                            
00013AC6                            ; Knuckles Chaotix 08
00013AC6 0201 0000 0101 0282        vdKc08:		dc.b $02, $01, $00, $00, $01, $01, $02, eHold
00013ACE                            
00013ACE                            ; Zaxxon Motherbase 04
00013ACE 0201 0000 0102 0202        vdZaxx04:	dc.b $02, $01, $00, $00, $01, $02, $02, $02
00013AD6 0202 0202 0202 0202        		dc.b $02, $02, $02, $02, $02, $02, $02, $02
00013ADE 0203 0303 0404 0405 82     		dc.b $02, $03, $03, $03, $04, $04, $04, $05, eHold
00013AE7                            
00013AE7                            ; World of Illusion 0C
00013AE7 0605 0403 0101 0000        vdWOI_0C:	dc.b $06, $05, $04, $03, $01, $01, $00, $00
00013AEF 0000 0000 0000 0101        		dc.b $00, $00, $00, $00, $00, $00, $01, $01
00013AF7 0202 0303 0404 82          		dc.b $02, $02, $03, $03, $04, $04, eHold
00013AFE                            
00013AFE                            ; World of Illusion 0D
00013AFE 0403 0201 0001 0102        vdWOI_0D:	dc.b $04, $03, $02, $01, $00, $01, $01, $02
00013B06 0203 0304 0405 0506        		dc.b $02, $03, $03, $04, $04, $05, $05, $06
00013B0E 0607 0782                  		dc.b $06, $07, $07, eHold
00013B12                            
00013B12                            ; Phantasy Star III & Knuckles Chaotix 05
00013B12                            vdKc05:
00013B12 0300 0101 0102 0304        vdPhan3_05:	dc.b $03, $00, $01, $01, $01, $02, $03, $04
00013B1A 0405 82                    		dc.b $04, $05, eHold
00013B1D                            
00013B1D                            ; Phantasy Star III 0A
00013B1D 0100 0000 0001 0101        vdPhan3_0A:	dc.b $01, $00, $00, $00, $00, $01, $01, $01
00013B25 0202 0203 0303 0304        		dc.b $02, $02, $02, $03, $03, $03, $03, $04
00013B2D 0404 0505 82               		dc.b $04, $04, $05, $05, eHold
00013B32                            
00013B32                            ; Game no Kanzume Otokuyou 01
00013B32 0001 0101 0101 0101        vdGameNo01:	dc.b $00, $01, $01, $01, $01, $01, $01, $01
00013B3A 0102 0202 0202 0202        		dc.b $01, $02, $02, $02, $02, $02, $02, $02
00013B42 0203 0303 0303 0303        		dc.b $02, $03, $03, $03, $03, $03, $03, $03
00013B4A 0304 0404 0404 0404        		dc.b $03, $04, $04, $04, $04, $04, $04, $04
00013B52 0405 0505 0505 0505        		dc.b $04, $05, $05, $05, $05, $05, $05, $05
00013B5A 0506 82                    		dc.b $05, $06, eHold
00013B5D                            
00013B5D                            ; Ristar 07
00013B5D 0302 0100 0001 0102 82     vdRistar07:	dc.b $03, $02, $01, $00, $00, $01, $01, $02, eHold
00013B66                            
00013B66                            ; Knuckles Chaotix 02
00013B66 0000                       vdKc02:		dc.b $00, $00		; continue to volenv below
00013B68                            
00013B68                            ; Ristar & S2 & S3K & Columns III 02
00013B68                            vdS2_02:
00013B68                            vdCol3_02:
00013B68                            vdS3K_02:
00013B68 0002 0406 0810 86          vdRistar02:	dc.b $00, $02, $04, $06, $08, $10, eStop
00013B6F                            
00013B6F                            ; Ristar 1D
00013B6F 0000 0000 0101 0101        vdRistar1D:	dc.b $00, $00, $00, $00, $01, $01, $01, $01
00013B77 0102 0203 0304 0404        		dc.b $01, $02, $02, $03, $03, $04, $04, $04
00013B7F 0403 0302 0201 82          		dc.b $04, $03, $03, $02, $02, $01, eHold
00013B86                            
00013B86                            ; Ristar 10 & S3K 08
00013B86                            vdS3K_08:
00013B86 0000 0002 0303 0405        vdRistar10:	dc.b $00, $00, $00, $02, $03, $03, $04, $05
00013B8E 0607 0809 0A0B 0E0F 86     		dc.b $06, $07, $08, $09, $0A, $0B, $0E, $0F, eStop
00013B97                            
00013B97                            ; Ristar 18
00013B97 0003 0609 86               vdRistar18:	dc.b $00, $03, $06, $09, eStop
00013B9C                            
00013B9C                            ; S3K 01
00013B9C 0286                       vdS3K_01:	dc.b $02, eStop
00013B9E                            
00013B9E                            ; S3K 0A
00013B9E 0100 0000 0001 0101        vdS3K_0A:	dc.b $01, $00, $00, $00, $00, $01, $01, $01
00013BA6 0202 0203 0303 0304        		dc.b $02, $02, $02, $03, $03, $03, $03, $04
00013BAE 0404 0505 82               		dc.b $04, $04, $05, $05, eHold
00013BB3                            
00013BB3                            ; Dynamite Headdy 03
00013BB3 0000 0101 0303 0405 86     vdDyHe03:	dc.b $00, $00, $01, $01, $03, $03, $04, $05, eStop
00013BBC                            
00013BBC                            ; Dynamite Headdy 05
00013BBC 0404 0404 0303 0303        vdDyHe05:	dc.b $04, $04, $04, $04, $03, $03, $03, $03
00013BC4 0202 0202 0101 0101        		dc.b $02, $02, $02, $02, $01, $01, $01, $01
00013BCC 0000 0000 0000 0000        		dc.b $00, $00, $00, $00, $00, $00, $00, $00
00013BD4 0000 0101 0101 0101        		dc.b $00, $00, $01, $01, $01, $01, $01, $01
00013BDC 0101 0101 0101 0101        		dc.b $01, $01, $01, $01, $01, $01, $01, $01
00013BE4 0202 0202 0202 0202        		dc.b $02, $02, $02, $02, $02, $02, $02, $02
00013BEC 0303 0303 0303 0303        		dc.b $03, $03, $03, $03, $03, $03, $03, $03
00013BF4 0486                       		dc.b $04, eStop
00013BF6                            
00013BF6                            ; Dynamite Headdy 0A
00013BF6 0706 0606 0505 0504        vdDyHe0A:	dc.b $07, $06, $06, $06, $05, $05, $05, $04
00013BFE 0403 0303 0303 0202        		dc.b $04, $03, $03, $03, $03, $03, $02, $02
00013C06 0201 0101 0000 0000        		dc.b $02, $01, $01, $01, $00, $00, $00, $00
00013C0E 0000 0000 0000 0000        		dc.b $00, $00, $00, $00, $00, $00, $00, $00
00013C16 0000 0000 0000 0000        		dc.b $00, $00, $00, $00, $00, $00, $00, $00
00013C1E 0000 0000 0000 0000        		dc.b $00, $00, $00, $00, $00, $00, $00, $00
00013C26 0000 0101 0101 0101        		dc.b $00, $00, $01, $01, $01, $01, $01, $01
00013C2E 0101 0101 0101 0101        		dc.b $01, $01, $01, $01, $01, $01, $01, $01
00013C36 0101 0101 0101 0202        		dc.b $01, $01, $01, $01, $01, $01, $02, $02
00013C3E 0202 0202 0303 0303        		dc.b $02, $02, $02, $02, $03, $03, $03, $03
00013C46 0404 0404 0405 0505        		dc.b $04, $04, $04, $04, $04, $05, $05, $05
00013C4E 0505 0606 0606 0607        		dc.b $05, $05, $06, $06, $06, $06, $06, $07
00013C56 0707 0707 0808 0808        		dc.b $07, $07, $07, $07, $08, $08, $08, $08
00013C5E 0809 0909 0909 82          		dc.b $08, $09, $09, $09, $09, $09, eHold
00013C65                            
00013C65                            ; Columns III 03
00013C65 0201 0000 0102 0202        vdCol3_03:	dc.b $02, $01, $00, $00, $01, $02, $02, $02
00013C6D 0202 0202 0202 0202        		dc.b $02, $02, $02, $02, $02, $02, $02, $02
00013C75 0203 0303 0404 0405 82     		dc.b $02, $03, $03, $03, $04, $04, $04, $05, eHold
00013C7E                            
00013C7E                            ; Columns III 05
00013C7E 0201 0000 0102 0202        vdCol3_05:	dc.b $02, $01, $00, $00, $01, $02, $02, $02
00013C86 0202 0202 0202 0202        		dc.b $02, $02, $02, $02, $02, $02, $02, $02
00013C8E 0203 0303 0404 0405 86     		dc.b $02, $03, $03, $03, $04, $04, $04, $05, eStop
00013C98 00                         	even
00013C98                            ; ===========================================================================
00013C98                            ; ---------------------------------------------------------------------------
00013C98                            ; Include music, sound effects and voice table
00013C98                            ; ---------------------------------------------------------------------------
00013C98                            
00013C98                            	include "driver/Voices.asm"	; include universal Voice bank
00013C98                            VoiceBank:
00013C98 =00000000                  sPatNum = 0
00013C98                            	; Voice $00
00013C98                            	; $04
00013C98                            	; $37, $72, $77, $49,	$1F, $1F, $1F, $1F
00013C98                            	; $07, $0A, $07, $0D,	$00, $0B, $00, $0B
00013C98                            	; $1F, $0F, $1F, $0F,	$23, $80, $23, $80
00013C98                            	spAlgorithm	$04, Rings
00013C98 =00000000                M prings	=	spatnum
00013C98 =00000001                M spatnum	=	spatnum+1
00013C98 =00000004                M spal	=	val
00013C98                            	spFeedback	$00
00013C98 =00000000                M spfe	=	val
00013C98                            	spDetune	$03, $07, $07, $04
00013C98 =00000003                M spde1	=	op1
00013C98 =00000007                M spde2	=	op2
00013C98 =00000007                M spde3	=	op3
00013C98 =00000004                M spde4	=	op4
00013C98                            	spMultiple	$07, $07, $02, $09
00013C98 =00000007                M spmu1	=	op1
00013C98 =00000007                M spmu2	=	op2
00013C98 =00000002                M spmu3	=	op3
00013C98 =00000009                M spmu4	=	op4
00013C98                            	spRateScale	$00, $00, $00, $00
00013C98 =00000000                M sprs1	=	op1
00013C98 =00000000                M sprs2	=	op2
00013C98 =00000000                M sprs3	=	op3
00013C98 =00000000                M sprs4	=	op4
00013C98                            	spAttackRt	$1F, $1F, $1F, $1F
00013C98 =0000001F                M spar1	=	op1
00013C98 =0000001F                M spar2	=	op2
00013C98 =0000001F                M spar3	=	op3
00013C98 =0000001F                M spar4	=	op4
00013C98                            	spAmpMod	$00, $00, $00, $00
00013C98 =00000000                M spam1	=	op1
00013C98 =00000000                M spam2	=	op2
00013C98 =00000000                M spam3	=	op3
00013C98 =00000000                M spam4	=	op4
00013C98                            	spSustainRt	$07, $07, $0A, $0D
00013C98 =00000007                M spsr1	=	op1
00013C98 =00000007                M spsr2	=	op2
00013C98 =0000000A                M spsr3	=	op3
00013C98 =0000000D                M spsr4	=	op4
00013C98                            	spSustainLv	$01, $01, $00, $00
00013C98 =00000001                M spsl1	=	op1
00013C98 =00000001                M spsl2	=	op2
00013C98 =00000000                M spsl3	=	op3
00013C98 =00000000                M spsl4	=	op4
00013C98                            	spDecayRt	$00, $00, $0B, $0B
00013C98 =00000000                M spdr1	=	op1
00013C98 =00000000                M spdr2	=	op2
00013C98 =0000000B                M spdr3	=	op3
00013C98 =0000000B                M spdr4	=	op4
00013C98                            	spSSGEG		$00, $00, $00, $00
00013C98 =00000000                M spss1	=	op1
00013C98 =00000000                M spss2	=	op2
00013C98 =00000000                M spss3	=	op3
00013C98 =00000000                M spss4	=	op4
00013C98                            	spReleaseRt	$0F, $0F, $0F, $0F
00013C98 =0000000F                M sprr1	=	op1
00013C98 =0000000F                M sprr2	=	op2
00013C98 =0000000F                M sprr3	=	op3
00013C98 =0000000F                M sprr4	=	op4
00013C98                            	spSSGEG		$00, $00, $00, $00
00013C98 =00000000                M spss1	=	op1
00013C98 =00000000                M spss2	=	op2
00013C98 =00000000                M spss3	=	op3
00013C98 =00000000                M spss4	=	op4
00013C98                            	spTotalLv	$23, $23, $00, $00
00013C98 =00000023                M sptl1	=	op1
00013C98 =00000023                M sptl2	=	op2
00013C98 =00000000                M sptl3	=	op3
00013C98 =00000000                M sptl4	=	op4
00013C98 04                       M 	dc.b	(spfe<<3)+spal
00013C99 =00000080                M sptlmask4	set	$80
00013C99 =00000000                M sptlmask2	set	((spal>=5)<<7)
00013C99 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00013C99 =00000000                M sptlmask1	set	((spal=7)<<7)
00013C99 3772 7749                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00013C9D 1F1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00013CA1 070A 070D                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00013CA5 000B 000B                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00013CA9 1F0F 1F0F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00013CAD 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00013CB1 2380 2380                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00013CB5 4E41 54                  M 	dc.b	'NAT'
00013CB8                            	opt ae-				; disable automatic evens
00013CB8                            
00013CB8                            sfxaddr	incSFX				; include all sfx
00013CB8                          M 	local	a,b
00013CB8 =000000FA                M a	=	sfxoff
00013CB8                          M 	rept	__sfx-sfxoff
00013CB8                          M 	even
00013CB8                          M b	equs	dsfxfa
00013CB8                          M _sfx_ringright
00013CB8                          M dsfxafa	include	"driver/sfx/ringright.asm"
00013CB8                            	sHeaderInit
00013CB8 =00013CB8                M spointzero	=	*
00013CB8 =00000000                M spatnum	=	0
00013CB8                            	sHeaderPrio	$80
00013CB8 80                       M 	dc.b	$80
00013CB9                            	sHeaderCh	$01
00013CB9 00                       M 	dc.b	$01-1
00013CBA                            	sHeaderSFX	$80, ctFM5, .FM5, $00, $05
00013CBA 8005                     M 	dc.b	$80,ctfm5
00013CBC 0000                     M 	dc.w	.fm5-spointzero
00013CBE 0005                     M 	dc.b	$00,$05
00013CC0                            
00013CC0                            .FM5	sPan	spRight
00013CC0 E040                     M 	dc.b	$e0,spright
00013CC2                            	sVoice	pRings
00013CC2 E800                     M 	dc.b	$e8,prings
00013CC4                            	sJump	SFX_Ring1
00013CC4 F6                       M 	dc.b	$f6
00013CC5 0000                     M 	dc.w	sfx_ring1-*-1
00013CC7 =000000FB                M a	=	a+1
00013CC8 00                       M 	even
00013CC8                          M b	equs	dsfxfb
00013CC8                          M _sfx_ringleft
00013CC8                          M dsfxafb	include	"driver/sfx/ringleft.asm"
00013CC8                            	sHeaderInit
00013CC8 =00013CC8                M spointzero	=	*
00013CC8 =00000000                M spatnum	=	0
00013CC8                            	sHeaderPrio	$80
00013CC8 80                       M 	dc.b	$80
00013CC9                            	sHeaderCh	$01
00013CC9 00                       M 	dc.b	$01-1
00013CCA                            	sHeaderSFX	$80, ctFM4, .FM4, $00, $05
00013CCA 8004                     M 	dc.b	$80,ctfm4
00013CCC 0000                     M 	dc.w	.fm4-spointzero
00013CCE 0005                     M 	dc.b	$00,$05
00013CD0                            
00013CD0                            .FM4	sPan	spLeft
00013CD0 E080                     M 	dc.b	$e0,spleft
00013CD2                            	sVoice	pRings
00013CD2 E800                     M 	dc.b	$e8,prings
00013CD4                            
00013CD4                            SFX_Ring1:
00013CD4 C104 C405 C91B             	dc.b nE5, $04, nG5, $05, nC6, $1B
00013CDA                            	sStop
00013CDA F5                       M 	dc.b	$f5
00013CDB =000000FC                M a	=	a+1
00013CDB                            musaddr	incMus				; include all music
00013CDB                          M 	local	a,b
00013CDB =0000000A                M a	=	musoff
00013CDB                          M 	rept	__mus-musoff
00013CDC 00                       M 	even
00013CDC                          M b	equs	dmusa
00013CDC                          M _mus_pelimusa
00013CDC                          M dmusaa	include	"driver/music/pelimusa.asm"
00013CDC                            ; ===========================================================================
00013CDC                            ; ---------------------------------------------------------------------------
00013CDC                            ; Wings - PeliMusa remixed for AMPS driver by Natusmi & Ozaleto
00013CDC                            ; ---------------------------------------------------------------------------
00013CDC                            
00013CDC                            Pelimusa_Header:
00013CDC                            	sHeaderInit
00013CDC =00013CDC                M spointzero	=	*
00013CDC =00000000                M spatnum	=	0
00013CDC                            	sHeaderTempo	$01, $2C
00013CDC 002C                     M 	dc.b	$01-1,$2c
00013CDE                            	sHeaderCh	$05, $03
00013CDE 04                       M 	dc.b	$05-1
00013CDF 02                       M 	dc.b	$03-1
00013CE0                            	sHeaderDAC	Pelimusa_DAC1, $00, dKaiku2
00013CE0 0000                     M 	dc.w	pelimusa_dac1-spointzero
00013CE2 00                       M 	dc.b	$00
00013CE3 9C                       M 	dc.b	dkaiku2
00013CE4                            	sHeaderDAC	Pelimusa_DAC2, $00, dKaiku1
00013CE4 0000                     M 	dc.w	pelimusa_dac2-spointzero
00013CE6 00                       M 	dc.b	$00
00013CE7 9B                       M 	dc.b	dkaiku1
00013CE8                            	sHeaderFM	Pelimusa_FM1, $00, $00
00013CE8 0000                     M 	dc.w	pelimusa_fm1-spointzero
00013CEA 0000                     M 	dc.b	$00,$00
00013CEC                            	sHeaderFM	Pelimusa_FM2, $00, $08
00013CEC 0000                     M 	dc.w	pelimusa_fm2-spointzero
00013CEE 0008                     M 	dc.b	$00,$08
00013CF0                            	sHeaderFM	Pelimusa_FM3, $00, $16
00013CF0 0000                     M 	dc.w	pelimusa_fm3-spointzero
00013CF2 0016                     M 	dc.b	$00,$16
00013CF4                            	sHeaderFM	Pelimusa_FM4, $00, $17
00013CF4 0000                     M 	dc.w	pelimusa_fm4-spointzero
00013CF6 0017                     M 	dc.b	$00,$17
00013CF8                            	sHeaderFM	Pelimusa_FM5, $00, $18
00013CF8 0000                     M 	dc.w	pelimusa_fm5-spointzero
00013CFA 0018                     M 	dc.b	$00,$18
00013CFC                            	sHeaderPSG	Pelimusa_PSG1, $00, $0A, $30, vRistar10
00013CFC 0000                     M 	dc.w	pelimusa_psg1-spointzero
00013CFE 000A 3003                M 	dc.b	$00,$0a,$30,vristar10
00013D02                            	sHeaderPSG	Pelimusa_PSG2, $00, $08, $00, vCol3_02
00013D02 0000                     M 	dc.w	pelimusa_psg2-spointzero
00013D04 0008 0011                M 	dc.b	$00,$08,$00,vcol3_02
00013D08                            	sHeaderPSG	Pelimusa_PSG3, $00, $08, $00, v00
00013D08 0000                     M 	dc.w	pelimusa_psg3-spointzero
00013D0A 0008 0000                M 	dc.b	$00,$08,$00,v00
00013D0E                            
00013D0E                            	; Patch $00 - Syntikkabasso 1 and 2 (From Columns III)
00013D0E                            	spAlgorithm	$02, Basso
00013D0E =00000000                M pbasso	=	spatnum
00013D0E =00000001                M spatnum	=	spatnum+1
00013D0E =00000002                M spal	=	val
00013D0E                            	spFeedback	$07
00013D0E =00000007                M spfe	=	val
00013D0E                            	spDetune	$01, $03, $03, $07
00013D0E =00000001                M spde1	=	op1
00013D0E =00000003                M spde2	=	op2
00013D0E =00000003                M spde3	=	op3
00013D0E =00000007                M spde4	=	op4
00013D0E                            	spMultiple	$03, $03, $07, $01
00013D0E =00000003                M spmu1	=	op1
00013D0E =00000003                M spmu2	=	op2
00013D0E =00000007                M spmu3	=	op3
00013D0E =00000001                M spmu4	=	op4
00013D0E                            	spRateScale	$02, $00, $00, $00
00013D0E =00000002                M sprs1	=	op1
00013D0E =00000000                M sprs2	=	op2
00013D0E =00000000                M sprs3	=	op3
00013D0E =00000000                M sprs4	=	op4
00013D0E                            	spAttackRt	$0F, $18, $17, $16
00013D0E =0000000F                M spar1	=	op1
00013D0E =00000018                M spar2	=	op2
00013D0E =00000017                M spar3	=	op3
00013D0E =00000016                M spar4	=	op4
00013D0E                            	spAmpMod	$00, $00, $00, $00
00013D0E =00000000                M spam1	=	op1
00013D0E =00000000                M spam2	=	op2
00013D0E =00000000                M spam3	=	op3
00013D0E =00000000                M spam4	=	op4
00013D0E                            	spSustainRt	$0E, $08, $12, $10
00013D0E =0000000E                M spsr1	=	op1
00013D0E =00000008                M spsr2	=	op2
00013D0E =00000012                M spsr3	=	op3
00013D0E =00000010                M spsr4	=	op4
00013D0E                            	spSustainLv	$0C, $04, $0A, $0C
00013D0E =0000000C                M spsl1	=	op1
00013D0E =00000004                M spsl2	=	op2
00013D0E =0000000A                M spsl3	=	op3
00013D0E =0000000C                M spsl4	=	op4
00013D0E                            	spDecayRt	$17, $06, $1C, $04
00013D0E =00000017                M spdr1	=	op1
00013D0E =00000006                M spdr2	=	op2
00013D0E =0000001C                M spdr3	=	op3
00013D0E =00000004                M spdr4	=	op4
00013D0E                            	spReleaseRt	$0C, $0C, $0C, $0C
00013D0E =0000000C                M sprr1	=	op1
00013D0E =0000000C                M sprr2	=	op2
00013D0E =0000000C                M sprr3	=	op3
00013D0E =0000000C                M sprr4	=	op4
00013D0E                            	spSSGEG		$00, $00, $00, $00
00013D0E =00000000                M spss1	=	op1
00013D0E =00000000                M spss2	=	op2
00013D0E =00000000                M spss3	=	op3
00013D0E =00000000                M spss4	=	op4
00013D0E                            	spTotalLv	$24, $22, $1A, $00
00013D0E =00000024                M sptl1	=	op1
00013D0E =00000022                M sptl2	=	op2
00013D0E =0000001A                M sptl3	=	op3
00013D0E =00000000                M sptl4	=	op4
00013D0E 3A                       M 	dc.b	(spfe<<3)+spal
00013D0F =00000080                M sptlmask4	set	$80
00013D0F =00000000                M sptlmask2	set	((spal>=5)<<7)
00013D0F =00000000                M sptlmask3	set	((spal>=4)<<7)
00013D0F =00000000                M sptlmask1	set	((spal=7)<<7)
00013D0F 1337 3371                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00013D13 8F17 1816                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00013D17 0E12 0810                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00013D1B 171C 0604                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00013D1F CCAC 4CCC                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00013D23 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00013D27 241A 2280                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00013D2B 4E41 54                  M 	dc.b	'NAT'
00013D2E                            
00013D2E                            	; Patch $01 - FM Low Kick (From Zaxxon Motherbase 2000)
00013D2E                            	spAlgorithm	$04, LowKick
00013D2E =00000001                M plowkick	=	spatnum
00013D2E =00000002                M spatnum	=	spatnum+1
00013D2E =00000004                M spal	=	val
00013D2E                            	spFeedback	$00
00013D2E =00000000                M spfe	=	val
00013D2E                            	spDetune	$03, $07, $04, $02
00013D2E =00000003                M spde1	=	op1
00013D2E =00000007                M spde2	=	op2
00013D2E =00000004                M spde3	=	op3
00013D2E =00000002                M spde4	=	op4
00013D2E                            	spMultiple	$00, $00, $00, $00
00013D2E =00000000                M spmu1	=	op1
00013D2E =00000000                M spmu2	=	op2
00013D2E =00000000                M spmu3	=	op3
00013D2E =00000000                M spmu4	=	op4
00013D2E                            	spRateScale	$00, $00, $00, $00
00013D2E =00000000                M sprs1	=	op1
00013D2E =00000000                M sprs2	=	op2
00013D2E =00000000                M sprs3	=	op3
00013D2E =00000000                M sprs4	=	op4
00013D2E                            	spAttackRt	$1F, $1F, $1F, $1F
00013D2E =0000001F                M spar1	=	op1
00013D2E =0000001F                M spar2	=	op2
00013D2E =0000001F                M spar3	=	op3
00013D2E =0000001F                M spar4	=	op4
00013D2E                            	spAmpMod	$00, $00, $00, $00
00013D2E =00000000                M spam1	=	op1
00013D2E =00000000                M spam2	=	op2
00013D2E =00000000                M spam3	=	op3
00013D2E =00000000                M spam4	=	op4
00013D2E                            	spSustainRt	$17, $00, $1F, $00
00013D2E =00000017                M spsr1	=	op1
00013D2E =00000000                M spsr2	=	op2
00013D2E =0000001F                M spsr3	=	op3
00013D2E =00000000                M spsr4	=	op4
00013D2E                            	spSustainLv	$00, $00, $00, $00
00013D2E =00000000                M spsl1	=	op1
00013D2E =00000000                M spsl2	=	op2
00013D2E =00000000                M spsl3	=	op3
00013D2E =00000000                M spsl4	=	op4
00013D2E                            	spDecayRt	$10, $10, $10, $10
00013D2E =00000010                M spdr1	=	op1
00013D2E =00000010                M spdr2	=	op2
00013D2E =00000010                M spdr3	=	op3
00013D2E =00000010                M spdr4	=	op4
00013D2E                            	spReleaseRt	$0F, $0F, $0F, $0F
00013D2E =0000000F                M sprr1	=	op1
00013D2E =0000000F                M sprr2	=	op2
00013D2E =0000000F                M sprr3	=	op3
00013D2E =0000000F                M sprr4	=	op4
00013D2E                            	spSSGEG		$00, $00, $00, $00
00013D2E =00000000                M spss1	=	op1
00013D2E =00000000                M spss2	=	op2
00013D2E =00000000                M spss3	=	op3
00013D2E =00000000                M spss4	=	op4
00013D2E                            	spTotalLv	$0A, $06, $00, $00
00013D2E =0000000A                M sptl1	=	op1
00013D2E =00000006                M sptl2	=	op2
00013D2E =00000000                M sptl3	=	op3
00013D2E =00000000                M sptl4	=	op4
00013D2E 04                       M 	dc.b	(spfe<<3)+spal
00013D2F =00000080                M sptlmask4	set	$80
00013D2F =00000000                M sptlmask2	set	((spal>=5)<<7)
00013D2F =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00013D2F =00000000                M sptlmask1	set	((spal=7)<<7)
00013D2F 3040 7020                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00013D33 1F1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00013D37 171F 0000                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00013D3B 1010 1010                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00013D3F 0F0F 0F0F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00013D43 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00013D47 0A80 0680                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00013D4B 4E41 54                  M 	dc.b	'NAT'
00013D4E                            
00013D4E                            	; Patch $02 - FM Snare (From Zaxxon Motherbase 2000)
00013D4E                            	spAlgorithm	$04, Snare
00013D4E =00000002                M psnare	=	spatnum
00013D4E =00000003                M spatnum	=	spatnum+1
00013D4E =00000004                M spal	=	val
00013D4E                            	spFeedback	$06
00013D4E =00000006                M spfe	=	val
00013D4E                            	spDetune	$05, $02, $05, $02
00013D4E =00000005                M spde1	=	op1
00013D4E =00000002                M spde2	=	op2
00013D4E =00000005                M spde3	=	op3
00013D4E =00000002                M spde4	=	op4
00013D4E                            	spMultiple	$05, $01, $05, $01
00013D4E =00000005                M spmu1	=	op1
00013D4E =00000001                M spmu2	=	op2
00013D4E =00000005                M spmu3	=	op3
00013D4E =00000001                M spmu4	=	op4
00013D4E                            	spRateScale	$00, $00, $00, $00
00013D4E =00000000                M sprs1	=	op1
00013D4E =00000000                M sprs2	=	op2
00013D4E =00000000                M sprs3	=	op3
00013D4E =00000000                M sprs4	=	op4
00013D4E                            	spAttackRt	$1F, $1F, $1F, $1F
00013D4E =0000001F                M spar1	=	op1
00013D4E =0000001F                M spar2	=	op2
00013D4E =0000001F                M spar3	=	op3
00013D4E =0000001F                M spar4	=	op4
00013D4E                            	spAmpMod	$00, $00, $00, $00
00013D4E =00000000                M spam1	=	op1
00013D4E =00000000                M spam2	=	op2
00013D4E =00000000                M spam3	=	op3
00013D4E =00000000                M spam4	=	op4
00013D4E                            	spSustainRt	$07, $16, $10, $1B
00013D4E =00000007                M spsr1	=	op1
00013D4E =00000016                M spsr2	=	op2
00013D4E =00000010                M spsr3	=	op3
00013D4E =0000001B                M spsr4	=	op4
00013D4E                            	spSustainLv	$00, $00, $00, $00
00013D4E =00000000                M spsl1	=	op1
00013D4E =00000000                M spsl2	=	op2
00013D4E =00000000                M spsl3	=	op3
00013D4E =00000000                M spsl4	=	op4
00013D4E                            	spDecayRt	$00, $00, $0F, $15
00013D4E =00000000                M spdr1	=	op1
00013D4E =00000000                M spdr2	=	op2
00013D4E =0000000F                M spdr3	=	op3
00013D4E =00000015                M spdr4	=	op4
00013D4E                            	spReleaseRt	$0F, $0F, $0F, $0F
00013D4E =0000000F                M sprr1	=	op1
00013D4E =0000000F                M sprr2	=	op2
00013D4E =0000000F                M sprr3	=	op3
00013D4E =0000000F                M sprr4	=	op4
00013D4E                            	spSSGEG		$00, $00, $00, $00
00013D4E =00000000                M spss1	=	op1
00013D4E =00000000                M spss2	=	op2
00013D4E =00000000                M spss3	=	op3
00013D4E =00000000                M spss4	=	op4
00013D4E                            	spTotalLv	$01, $10, $07, $00
00013D4E =00000001                M sptl1	=	op1
00013D4E =00000010                M sptl2	=	op2
00013D4E =00000007                M sptl3	=	op3
00013D4E =00000000                M sptl4	=	op4
00013D4E 34                       M 	dc.b	(spfe<<3)+spal
00013D4F =00000080                M sptlmask4	set	$80
00013D4F =00000000                M sptlmask2	set	((spal>=5)<<7)
00013D4F =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00013D4F =00000000                M sptlmask1	set	((spal=7)<<7)
00013D4F 5555 2121                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00013D53 1F1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00013D57 0710 161B                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00013D5B 000F 0015                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00013D5F 0F0F 0F0F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00013D63 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00013D67 0187 1080                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00013D6B 4E41 54                  M 	dc.b	'NAT'
00013D6E                            
00013D6E                            	; Patch $03 - FM Crash (From Zaxxon Motherbase 2000)
00013D6E                            	spAlgorithm	$04, Crash
00013D6E =00000003                M pcrash	=	spatnum
00013D6E =00000004                M spatnum	=	spatnum+1
00013D6E =00000004                M spal	=	val
00013D6E                            	spFeedback	$06
00013D6E =00000006                M spfe	=	val
00013D6E                            	spDetune	$05, $02, $05, $02
00013D6E =00000005                M spde1	=	op1
00013D6E =00000002                M spde2	=	op2
00013D6E =00000005                M spde3	=	op3
00013D6E =00000002                M spde4	=	op4
00013D6E                            	spMultiple	$04, $01, $05, $01
00013D6E =00000004                M spmu1	=	op1
00013D6E =00000001                M spmu2	=	op2
00013D6E =00000005                M spmu3	=	op3
00013D6E =00000001                M spmu4	=	op4
00013D6E                            	spRateScale	$00, $00, $00, $00
00013D6E =00000000                M sprs1	=	op1
00013D6E =00000000                M sprs2	=	op2
00013D6E =00000000                M sprs3	=	op3
00013D6E =00000000                M sprs4	=	op4
00013D6E                            	spAttackRt	$1F, $1F, $1F, $1F
00013D6E =0000001F                M spar1	=	op1
00013D6E =0000001F                M spar2	=	op2
00013D6E =0000001F                M spar3	=	op3
00013D6E =0000001F                M spar4	=	op4
00013D6E                            	spAmpMod	$00, $00, $00, $00
00013D6E =00000000                M spam1	=	op1
00013D6E =00000000                M spam2	=	op2
00013D6E =00000000                M spam3	=	op3
00013D6E =00000000                M spam4	=	op4
00013D6E                            	spSustainRt	$07, $16, $00, $1B
00013D6E =00000007                M spsr1	=	op1
00013D6E =00000016                M spsr2	=	op2
00013D6E =00000000                M spsr3	=	op3
00013D6E =0000001B                M spsr4	=	op4
00013D6E                            	spSustainLv	$00, $00, $00, $00
00013D6E =00000000                M spsl1	=	op1
00013D6E =00000000                M spsl2	=	op2
00013D6E =00000000                M spsl3	=	op3
00013D6E =00000000                M spsl4	=	op4
00013D6E                            	spDecayRt	$00, $10, $0E, $15
00013D6E =00000000                M spdr1	=	op1
00013D6E =00000010                M spdr2	=	op2
00013D6E =0000000E                M spdr3	=	op3
00013D6E =00000015                M spdr4	=	op4
00013D6E                            	spReleaseRt	$0F, $0F, $0F, $0F
00013D6E =0000000F                M sprr1	=	op1
00013D6E =0000000F                M sprr2	=	op2
00013D6E =0000000F                M sprr3	=	op3
00013D6E =0000000F                M sprr4	=	op4
00013D6E                            	spSSGEG		$00, $00, $00, $00
00013D6E =00000000                M spss1	=	op1
00013D6E =00000000                M spss2	=	op2
00013D6E =00000000                M spss3	=	op3
00013D6E =00000000                M spss4	=	op4
00013D6E                            	spTotalLv	$03, $10, $00, $00
00013D6E =00000003                M sptl1	=	op1
00013D6E =00000010                M sptl2	=	op2
00013D6E =00000000                M sptl3	=	op3
00013D6E =00000000                M sptl4	=	op4
00013D6E 34                       M 	dc.b	(spfe<<3)+spal
00013D6F =00000080                M sptlmask4	set	$80
00013D6F =00000000                M sptlmask2	set	((spal>=5)<<7)
00013D6F =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00013D6F =00000000                M sptlmask1	set	((spal=7)<<7)
00013D6F 5455 2121                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00013D73 1F1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00013D77 0700 161B                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00013D7B 000E 1015                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00013D7F 0F0F 0F0F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00013D83 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00013D87 0380 1080                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00013D8B 4E41 54                  M 	dc.b	'NAT'
00013D8E                            
00013D8E                            	; Patch $04 - Jousi (From Sonic 1)
00013D8E                            	spAlgorithm	$04, Jousi
00013D8E =00000004                M pjousi	=	spatnum
00013D8E =00000005                M spatnum	=	spatnum+1
00013D8E =00000004                M spal	=	val
00013D8E                            	spFeedback	$05
00013D8E =00000005                M spfe	=	val
00013D8E                            	spDetune	$07, $00, $07, $00
00013D8E =00000007                M spde1	=	op1
00013D8E =00000000                M spde2	=	op2
00013D8E =00000007                M spde3	=	op3
00013D8E =00000000                M spde4	=	op4
00013D8E                            	spMultiple	$02, $04, $05, $04
00013D8E =00000002                M spmu1	=	op1
00013D8E =00000004                M spmu2	=	op2
00013D8E =00000005                M spmu3	=	op3
00013D8E =00000004                M spmu4	=	op4
00013D8E                            	spRateScale	$00, $00, $00, $00
00013D8E =00000000                M sprs1	=	op1
00013D8E =00000000                M sprs2	=	op2
00013D8E =00000000                M sprs3	=	op3
00013D8E =00000000                M sprs4	=	op4
00013D8E                            	spAttackRt	$1F, $1F, $12, $12
00013D8E =0000001F                M spar1	=	op1
00013D8E =0000001F                M spar2	=	op2
00013D8E =00000012                M spar3	=	op3
00013D8E =00000012                M spar4	=	op4
00013D8E                            	spAmpMod	$00, $00, $00, $00
00013D8E =00000000                M spam1	=	op1
00013D8E =00000000                M spam2	=	op2
00013D8E =00000000                M spam3	=	op3
00013D8E =00000000                M spam4	=	op4
00013D8E                            	spSustainRt	$00, $00, $0A, $0A
00013D8E =00000000                M spsr1	=	op1
00013D8E =00000000                M spsr2	=	op2
00013D8E =0000000A                M spsr3	=	op3
00013D8E =0000000A                M spsr4	=	op4
00013D8E                            	spSustainLv	$00, $00, $01, $01
00013D8E =00000000                M spsl1	=	op1
00013D8E =00000000                M spsl2	=	op2
00013D8E =00000001                M spsl3	=	op3
00013D8E =00000001                M spsl4	=	op4
00013D8E                            	spDecayRt	$00, $00, $00, $00
00013D8E =00000000                M spdr1	=	op1
00013D8E =00000000                M spdr2	=	op2
00013D8E =00000000                M spdr3	=	op3
00013D8E =00000000                M spdr4	=	op4
00013D8E                            	spReleaseRt	$00, $00, $06, $06
00013D8E =00000000                M sprr1	=	op1
00013D8E =00000000                M sprr2	=	op2
00013D8E =00000006                M sprr3	=	op3
00013D8E =00000006                M sprr4	=	op4
00013D8E                            	spSSGEG		$00, $00, $00, $00
00013D8E =00000000                M spss1	=	op1
00013D8E =00000000                M spss2	=	op2
00013D8E =00000000                M spss3	=	op3
00013D8E =00000000                M spss4	=	op4
00013D8E                            	spTotalLv	$16, $17, $00, $00
00013D8E =00000016                M sptl1	=	op1
00013D8E =00000017                M sptl2	=	op2
00013D8E =00000000                M sptl3	=	op3
00013D8E =00000000                M sptl4	=	op4
00013D8E 2C                       M 	dc.b	(spfe<<3)+spal
00013D8F =00000080                M sptlmask4	set	$80
00013D8F =00000000                M sptlmask2	set	((spal>=5)<<7)
00013D8F =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00013D8F =00000000                M sptlmask1	set	((spal=7)<<7)
00013D8F 7275 0404                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00013D93 1F12 1F12                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00013D97 000A 000A                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00013D9B 0000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00013D9F 0016 0016                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00013DA3 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00013DA7 1680 1780                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00013DAB 4E41 54                  M 	dc.b	'NAT'
00013DAE                            
00013DAE                            	; Patch $05 - Melodia (From Sonic 1)
00013DAE                            	spAlgorithm	$02, Melodia
00013DAE =00000005                M pmelodia	=	spatnum
00013DAE =00000006                M spatnum	=	spatnum+1
00013DAE =00000002                M spal	=	val
00013DAE                            	spFeedback	$07
00013DAE =00000007                M spfe	=	val
00013DAE                            	spDetune	$00, $00, $00, $00
00013DAE =00000000                M spde1	=	op1
00013DAE =00000000                M spde2	=	op2
00013DAE =00000000                M spde3	=	op3
00013DAE =00000000                M spde4	=	op4
00013DAE                            	spMultiple	$01, $02, $00, $02
00013DAE =00000001                M spmu1	=	op1
00013DAE =00000002                M spmu2	=	op2
00013DAE =00000000                M spmu3	=	op3
00013DAE =00000002                M spmu4	=	op4
00013DAE                            	spRateScale	$00, $00, $00, $00
00013DAE =00000000                M sprs1	=	op1
00013DAE =00000000                M sprs2	=	op2
00013DAE =00000000                M sprs3	=	op3
00013DAE =00000000                M sprs4	=	op4
00013DAE                            	spAttackRt	$18, $18, $18, $18
00013DAE =00000018                M spar1	=	op1
00013DAE =00000018                M spar2	=	op2
00013DAE =00000018                M spar3	=	op3
00013DAE =00000018                M spar4	=	op4
00013DAE                            	spAmpMod	$00, $00, $00, $00
00013DAE =00000000                M spam1	=	op1
00013DAE =00000000                M spam2	=	op2
00013DAE =00000000                M spam3	=	op3
00013DAE =00000000                M spam4	=	op4
00013DAE                            	spSustainRt	$0C, $0C, $0C, $0C
00013DAE =0000000C                M spsr1	=	op1
00013DAE =0000000C                M spsr2	=	op2
00013DAE =0000000C                M spsr3	=	op3
00013DAE =0000000C                M spsr4	=	op4
00013DAE                            	spSustainLv	$06, $06, $06, $06
00013DAE =00000006                M spsl1	=	op1
00013DAE =00000006                M spsl2	=	op2
00013DAE =00000006                M spsl3	=	op3
00013DAE =00000006                M spsl4	=	op4
00013DAE                            	spDecayRt	$08, $08, $08, $08
00013DAE =00000008                M spdr1	=	op1
00013DAE =00000008                M spdr2	=	op2
00013DAE =00000008                M spdr3	=	op3
00013DAE =00000008                M spdr4	=	op4
00013DAE                            	spReleaseRt	$0F, $0F, $0F, $0F
00013DAE =0000000F                M sprr1	=	op1
00013DAE =0000000F                M sprr2	=	op2
00013DAE =0000000F                M sprr3	=	op3
00013DAE =0000000F                M sprr4	=	op4
00013DAE                            	spSSGEG		$00, $00, $00, $00
00013DAE =00000000                M spss1	=	op1
00013DAE =00000000                M spss2	=	op2
00013DAE =00000000                M spss3	=	op3
00013DAE =00000000                M spss4	=	op4
00013DAE                            	spTotalLv	$18, $1C, $28, $07
00013DAE =00000018                M sptl1	=	op1
00013DAE =0000001C                M sptl2	=	op2
00013DAE =00000028                M sptl3	=	op3
00013DAE =00000007                M sptl4	=	op4
00013DAE 3A                       M 	dc.b	(spfe<<3)+spal
00013DAF =00000080                M sptlmask4	set	$80
00013DAF =00000000                M sptlmask2	set	((spal>=5)<<7)
00013DAF =00000000                M sptlmask3	set	((spal>=4)<<7)
00013DAF =00000000                M sptlmask1	set	((spal=7)<<7)
00013DAF 0100 0202                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00013DB3 1818 1818                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00013DB7 0C0C 0C0C                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00013DBB 0808 0808                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00013DBF 6F6F 6F6F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00013DC3 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00013DC7 1828 1C87                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00013DCB 4E41 54                  M 	dc.b	'NAT'
00013DCE                            ; ===========================================================================
00013DCE                            ; ---------------------------------------------------------------------------
00013DCE                            ; DAC1: Kaiku (Channel 7)
00013DCE                            ; ---------------------------------------------------------------------------
00013DCE                            
00013DCE                            Pelimusa_Kaiku	macro	note
00013DCE                            	rept narg
00013DCE                            		if \note<$80
00013DCE                            			dc.b \note
00013DCE                            		else
00013DCE                            			dc.b \note-nA5+nC4
00013DCE                            		endif
00013DCE                            	shift
00013DCE                            	endr
00013DCE                                endm
00013DCE                            
00013DCE                            Pelimusa_Saro	macro	note
00013DCE                            	rept narg
00013DCE                            		if \note<$80
00013DCE                            			dc.b \note
00013DCE                            		else
00013DCE                            			dc.b \note-nA5+nC4
00013DCE                            		endif
00013DCE                            	shift
00013DCE                            	endr
00013DCE                                endm
00013DCE                            ; ---------------------------------------------------------------------------
00013DCE                            
00013DCE                            Pelimusa_DAC1:
00013DCE                            	sCall		Pelimusa_Delay1
00013DCE F8                       M 	dc.b	$f8
00013DCF 0000                     M 	dc.w	pelimusa_delay1-*-1
00013DD1                            	sVoice		dSarobasso
00013DD1 E8A2                     M 	dc.b	$e8,dsarobasso
00013DD3                            
00013DD3                            	; pattern 6
00013DD3                            	sCall		.intro1
00013DD3 F8                       M 	dc.b	$f8
00013DD4 0000                     M 	dc.w	.intro1-*-1
00013DD6                            	sCall		.intro1
00013DD6 F8                       M 	dc.b	$f8
00013DD7 0000                     M 	dc.w	.intro1-*-1
00013DD9                            	saTranspose	-$04	; nFx
00013DD9 E4FC                     M 	dc.b	$e4,-$04
00013DDB                            	sCall		.intro1
00013DDB F8                       M 	dc.b	$f8
00013DDC 0000                     M 	dc.w	.intro1-*-1
00013DDE                            
00013DDE                            	Pelimusa_Saro	nA5, $06, $0C, $12
00013DDE                          M 	rept	narg
00013DDE B1                       M 	dc.b	na5-na5+nc4
00013DDF                          M 	shift
00013DDF 06                       M 	dc.b	$06
00013DE0                          M 	shift
00013DE0 0C                       M 	dc.b	$0c
00013DE1                          M 	shift
00013DE1 12                       M 	dc.b	$12
00013DE2                          M 	shift
00013DE2                            	ssVol		$04
00013DE2 EE04                     M 	dc.b	$ee,$04
00013DE4 18                         	dc.b $18
00013DE5                            	ssVol		$00
00013DE5 EE00                     M 	dc.b	$ee,$00
00013DE7 180C                       	dc.b $18, $0C
00013DE9                            	saTranspose	$04	; nAx
00013DE9 E404                     M 	dc.b	$e4,$04
00013DEB                            
00013DEB                            	; pattern 7, 11 and 12
00013DEB                            .loop	sCall		.track
00013DEB F8                       M 	dc.b	$f8
00013DEC 0000                     M 	dc.w	.track-*-1
00013DEE                            	sCall		.patt8
00013DEE F8                       M 	dc.b	$f8
00013DEF 0000                     M 	dc.w	.patt8-*-1
00013DF1                            	sCall		.track
00013DF1 F8                       M 	dc.b	$f8
00013DF2 0000                     M 	dc.w	.track-*-1
00013DF4                            	sCall		.track
00013DF4 F8                       M 	dc.b	$f8
00013DF5 0000                     M 	dc.w	.track-*-1
00013DF7                            	sCall		.patt8
00013DF7 F8                       M 	dc.b	$f8
00013DF8 0000                     M 	dc.w	.patt8-*-1
00013DFA                            	sCall		.track
00013DFA F8                       M 	dc.b	$f8
00013DFB 0000                     M 	dc.w	.track-*-1
00013DFD                            	sCall		.patt8
00013DFD F8                       M 	dc.b	$f8
00013DFE 0000                     M 	dc.w	.patt8-*-1
00013E00                            	sJump		.loop
00013E00 F6                       M 	dc.b	$f6
00013E01 FFE9                     M 	dc.w	.loop-*-1
00013E03                            ; ---------------------------------------------------------------------------
00013E03                            
00013E03                            .intro1	Pelimusa_Saro	nA5, $06, $0C, $12
00013E03                          M 	rept	narg
00013E03 B1                       M 	dc.b	na5-na5+nc4
00013E04                          M 	shift
00013E04 06                       M 	dc.b	$06
00013E05                          M 	shift
00013E05 0C                       M 	dc.b	$0c
00013E06                          M 	shift
00013E06 12                       M 	dc.b	$12
00013E07                          M 	shift
00013E07                            	ssVol		$04
00013E07 EE04                     M 	dc.b	$ee,$04
00013E09 18                         	dc.b $18
00013E0A                            	ssVol		$00
00013E0A EE00                     M 	dc.b	$ee,$00
00013E0C 1806                       	dc.b $18, $06
00013E0E                            	ssVol		$04
00013E0E EE04                     M 	dc.b	$ee,$04
00013E10 06                         	dc.b $06
00013E11                            	ssVol		$00
00013E11 EE00                     M 	dc.b	$ee,$00
00013E13                            	sRet
00013E13 F9                       M 	dc.b	$f9
00013E14                            ; ---------------------------------------------------------------------------
00013E14                            
00013E14                            .patt8	sVoice		dSarobasso
00013E14 E8A2                     M 	dc.b	$e8,dsarobasso
00013E16                            .pat8x	sCall		.pat81
00013E16 F8                       M 	dc.b	$f8
00013E17 0000                     M 	dc.w	.pat81-*-1
00013E19                            
00013E19                            	Pelimusa_Saro	nC6, $0C, $06, $12
00013E19                          M 	rept	narg
00013E19 B4                       M 	dc.b	nc6-na5+nc4
00013E1A                          M 	shift
00013E1A 0C                       M 	dc.b	$0c
00013E1B                          M 	shift
00013E1B 06                       M 	dc.b	$06
00013E1C                          M 	shift
00013E1C 12                       M 	dc.b	$12
00013E1D                          M 	shift
00013E1D                            	ssVol		$04
00013E1D EE04                     M 	dc.b	$ee,$04
00013E1F 18                         	dc.b $18
00013E20                            	ssVol		$04
00013E20 EE04                     M 	dc.b	$ee,$04
00013E22                            	Pelimusa_Saro	nG5, $18
00013E22                          M 	rept	narg
00013E22 AF                       M 	dc.b	ng5-na5+nc4
00013E23                          M 	shift
00013E23 18                       M 	dc.b	$18
00013E24                          M 	shift
00013E24                            	ssVol		$00
00013E24 EE00                     M 	dc.b	$ee,$00
00013E26 0C                         	dc.b $0C
00013E27                            	sCall		.pat81
00013E27 F8                       M 	dc.b	$f8
00013E28 0000                     M 	dc.w	.pat81-*-1
00013E2A                            
00013E2A                            	Pelimusa_Saro	nG5, $0C, $06, $12
00013E2A                          M 	rept	narg
00013E2A AF                       M 	dc.b	ng5-na5+nc4
00013E2B                          M 	shift
00013E2B 0C                       M 	dc.b	$0c
00013E2C                          M 	shift
00013E2C 06                       M 	dc.b	$06
00013E2D                          M 	shift
00013E2D 12                       M 	dc.b	$12
00013E2E                          M 	shift
00013E2E                            	ssVol		$04
00013E2E EE04                     M 	dc.b	$ee,$04
00013E30 18                         	dc.b $18
00013E31                            	ssVol		$02
00013E31 EE02                     M 	dc.b	$ee,$02
00013E33 18                         	dc.b $18
00013E34                            	ssVol		$00
00013E34 EE00                     M 	dc.b	$ee,$00
00013E36 0C                         	dc.b $0C
00013E37                            	sLoop		$01, $02, .pat8x
00013E37 F701                     M 	dc.b	$f7,$01
00013E39 FFDC                     M 	dc.w	.pat8x-*-1
00013E3B 02                       M 	dc.b	$02
00013E3C                            	sRet
00013E3C F9                       M 	dc.b	$f9
00013E3D                            
00013E3D                            .pat81	Pelimusa_Saro	nA5, $0C, $06, $12
00013E3D                          M 	rept	narg
00013E3D B1                       M 	dc.b	na5-na5+nc4
00013E3E                          M 	shift
00013E3E 0C                       M 	dc.b	$0c
00013E3F                          M 	shift
00013E3F 06                       M 	dc.b	$06
00013E40                          M 	shift
00013E40 12                       M 	dc.b	$12
00013E41                          M 	shift
00013E41                            	ssVol		$04
00013E41 EE04                     M 	dc.b	$ee,$04
00013E43 18                         	dc.b $18
00013E44                            	ssVol		$02
00013E44 EE02                     M 	dc.b	$ee,$02
00013E46                            	Pelimusa_Saro	nF5, $18
00013E46                          M 	rept	narg
00013E46 AD                       M 	dc.b	nf5-na5+nc4
00013E47                          M 	shift
00013E47 18                       M 	dc.b	$18
00013E48                          M 	shift
00013E48                            	ssVol		$00
00013E48 EE00                     M 	dc.b	$ee,$00
00013E4A 0C                         	dc.b $0C
00013E4B                            	sRet
00013E4B F9                       M 	dc.b	$f9
00013E4C                            ; ---------------------------------------------------------------------------
00013E4C                            
00013E4C 8006                       .track	dc.b nRst, $06
00013E4E                            	sCall		Pelimusa_DAC12_Main
00013E4E F8                       M 	dc.b	$f8
00013E4F 0000                     M 	dc.w	pelimusa_dac12_main-*-1
00013E51                            
00013E51                            	Pelimusa_Kaiku nB5, $06
00013E51                          M 	rept	narg
00013E51 B3                       M 	dc.b	nb5-na5+nc4
00013E52                          M 	shift
00013E52 06                       M 	dc.b	$06
00013E53                          M 	shift
00013E53                            	sLoop		$01, $02, .track
00013E53 F701                     M 	dc.b	$f7,$01
00013E55 FFF6                     M 	dc.w	.track-*-1
00013E57 02                       M 	dc.b	$02
00013E58                            ;	sModOff
00013E58                            	sRet
00013E58 F9                       M 	dc.b	$f9
00013E59                            ; ===========================================================================
00013E59                            ; ---------------------------------------------------------------------------
00013E59                            ; DAC2: Kaiku (Channel 6)
00013E59                            ; ---------------------------------------------------------------------------
00013E59                            
00013E59                            Pelimusa_DAC2:
00013E59                            	sCall		Pelimusa_Delay2
00013E59 F8                       M 	dc.b	$f8
00013E5A 0000                     M 	dc.w	pelimusa_delay2-*-1
00013E5C                            
00013E5C                            	; pattern 7, 11 and 12
00013E5C                            .loop	sCall		.track
00013E5C F8                       M 	dc.b	$f8
00013E5D 0000                     M 	dc.w	.track-*-1
00013E5F                            	sCall		.patt8
00013E5F F8                       M 	dc.b	$f8
00013E60 0000                     M 	dc.w	.patt8-*-1
00013E62                            	sCall		.track
00013E62 F8                       M 	dc.b	$f8
00013E63 0000                     M 	dc.w	.track-*-1
00013E65                            	sCall		.track
00013E65 F8                       M 	dc.b	$f8
00013E66 0000                     M 	dc.w	.track-*-1
00013E68                            	sCall		.patt8
00013E68 F8                       M 	dc.b	$f8
00013E69 0000                     M 	dc.w	.patt8-*-1
00013E6B                            	sCall		.track
00013E6B F8                       M 	dc.b	$f8
00013E6C 0000                     M 	dc.w	.track-*-1
00013E6E                            	sCall		.patt8
00013E6E F8                       M 	dc.b	$f8
00013E6F 0000                     M 	dc.w	.patt8-*-1
00013E71                            	sJump		.loop
00013E71 F6                       M 	dc.b	$f6
00013E72 FFE9                     M 	dc.w	.loop-*-1
00013E74                            ; ---------------------------------------------------------------------------
00013E74                            
00013E74                            .track	sCall		Pelimusa_DAC12_Main
00013E74 F8                       M 	dc.b	$f8
00013E75 0000                     M 	dc.w	pelimusa_dac12_main-*-1
00013E77                            
00013E77                            	Pelimusa_Kaiku nB5
00013E77                          M 	rept	narg
00013E77 B3                       M 	dc.b	nb5-na5+nc4
00013E78                          M 	shift
00013E78                            	sLoop		$01, $02, .track
00013E78 F701                     M 	dc.b	$f7,$01
00013E7A FFF9                     M 	dc.w	.track-*-1
00013E7C 02                       M 	dc.b	$02
00013E7D                            ;	sModOff
00013E7D                            	sRet
00013E7D F9                       M 	dc.b	$f9
00013E7E                            ; ---------------------------------------------------------------------------
00013E7E                            
00013E7E                            .patt8	sVoice		dKaikuL2
00013E7E E8A0                     M 	dc.b	$e8,dkaikul2
00013E80 B160 E760                  	dc.b nC4, $60, sHold, $60
00013E84                            	sVoice		dKaikuL3
00013E84 E8A1                     M 	dc.b	$e8,dkaikul3
00013E86 B160 E760                  	dc.b nC4, $60, sHold, $60
00013E8A                            	sLoop		$01, $02, .patt8
00013E8A F701                     M 	dc.b	$f7,$01
00013E8C FFF1                     M 	dc.w	.patt8-*-1
00013E8E 02                       M 	dc.b	$02
00013E8F                            	sRet
00013E8F F9                       M 	dc.b	$f9
00013E90                            ; ---------------------------------------------------------------------------
00013E90                            
00013E90                            Pelimusa_DAC12_Main:
00013E90                            ;	ssMod68k	$01, $02, $01, $05
00013E90                            	sCall		Pelimusa_SetDACNormal
00013E90 F8                       M 	dc.b	$f8
00013E91 0000                     M 	dc.w	pelimusa_setdacnormal-*-1
00013E93                            	Pelimusa_Kaiku nA5, $0C
00013E93                          M 	rept	narg
00013E93 B1                       M 	dc.b	na5-na5+nc4
00013E94                          M 	shift
00013E94 0C                       M 	dc.b	$0c
00013E95                          M 	shift
00013E95                            	sVoice		dKaiku5
00013E95 E89F                     M 	dc.b	$e8,dkaiku5
00013E97                            	Pelimusa_Kaiku nC6
00013E97                          M 	rept	narg
00013E97 B4                       M 	dc.b	nc6-na5+nc4
00013E98                          M 	shift
00013E98                            	sCall		Pelimusa_SetDACNormal
00013E98 F8                       M 	dc.b	$f8
00013E99 0000                     M 	dc.w	pelimusa_setdacnormal-*-1
00013E9B                            	Pelimusa_Kaiku nE6, nC6
00013E9B                          M 	rept	narg
00013E9B B8                       M 	dc.b	ne6-na5+nc4
00013E9C                          M 	shift
00013E9C B4                       M 	dc.b	nc6-na5+nc4
00013E9D                          M 	shift
00013E9D                            	sCall		Pelimusa_SetDACLong
00013E9D F8                       M 	dc.b	$f8
00013E9E 0000                     M 	dc.w	pelimusa_setdaclong-*-1
00013EA0                            	Pelimusa_Kaiku nF5
00013EA0                          M 	rept	narg
00013EA0 AD                       M 	dc.b	nf5-na5+nc4
00013EA1                          M 	shift
00013EA1                            	sCall		Pelimusa_SetDACNormal
00013EA1 F8                       M 	dc.b	$f8
00013EA2 0000                     M 	dc.w	pelimusa_setdacnormal-*-1
00013EA4                            	Pelimusa_Kaiku nA5, nC6, nA5, nC6
00013EA4                          M 	rept	narg
00013EA4 B1                       M 	dc.b	na5-na5+nc4
00013EA5                          M 	shift
00013EA5 B4                       M 	dc.b	nc6-na5+nc4
00013EA6                          M 	shift
00013EA6 B1                       M 	dc.b	na5-na5+nc4
00013EA7                          M 	shift
00013EA7 B4                       M 	dc.b	nc6-na5+nc4
00013EA8                          M 	shift
00013EA8                            	sVoice		dKaiku5
00013EA8 E89F                     M 	dc.b	$e8,dkaiku5
00013EAA                            	Pelimusa_Kaiku nE6
00013EAA                          M 	rept	narg
00013EAA B8                       M 	dc.b	ne6-na5+nc4
00013EAB                          M 	shift
00013EAB                            	sCall		Pelimusa_SetDACNormal
00013EAB F8                       M 	dc.b	$f8
00013EAC 0000                     M 	dc.w	pelimusa_setdacnormal-*-1
00013EAE                            	Pelimusa_Kaiku nG6
00013EAE                          M 	rept	narg
00013EAE BB                       M 	dc.b	ng6-na5+nc4
00013EAF                          M 	shift
00013EAF                            	sVoice		dKaiku5
00013EAF E89F                     M 	dc.b	$e8,dkaiku5
00013EB1                            	Pelimusa_Kaiku nE6
00013EB1                          M 	rept	narg
00013EB1 B8                       M 	dc.b	ne6-na5+nc4
00013EB2                          M 	shift
00013EB2                            	sCall		Pelimusa_SetDACLong
00013EB2 F8                       M 	dc.b	$f8
00013EB3 0000                     M 	dc.w	pelimusa_setdaclong-*-1
00013EB5                            	Pelimusa_Kaiku nG5
00013EB5                          M 	rept	narg
00013EB5 AF                       M 	dc.b	ng5-na5+nc4
00013EB6                          M 	shift
00013EB6                            	sCall		Pelimusa_SetDACNormal
00013EB6 F8                       M 	dc.b	$f8
00013EB7 0000                     M 	dc.w	pelimusa_setdacnormal-*-1
00013EB9                            	Pelimusa_Kaiku nB5, nD6, nB5, nA5
00013EB9                          M 	rept	narg
00013EB9 B3                       M 	dc.b	nb5-na5+nc4
00013EBA                          M 	shift
00013EBA B6                       M 	dc.b	nd6-na5+nc4
00013EBB                          M 	shift
00013EBB B3                       M 	dc.b	nb5-na5+nc4
00013EBC                          M 	shift
00013EBC B1                       M 	dc.b	na5-na5+nc4
00013EBD                          M 	shift
00013EBD                            	sVoice		dKaiku5
00013EBD E89F                     M 	dc.b	$e8,dkaiku5
00013EBF                            	Pelimusa_Kaiku nC6
00013EBF                          M 	rept	narg
00013EBF B4                       M 	dc.b	nc6-na5+nc4
00013EC0                          M 	shift
00013EC0                            	sCall		Pelimusa_SetDACNormal
00013EC0 F8                       M 	dc.b	$f8
00013EC1 0000                     M 	dc.w	pelimusa_setdacnormal-*-1
00013EC3                            	Pelimusa_Kaiku nE6, nC6
00013EC3                          M 	rept	narg
00013EC3 B8                       M 	dc.b	ne6-na5+nc4
00013EC4                          M 	shift
00013EC4 B4                       M 	dc.b	nc6-na5+nc4
00013EC5                          M 	shift
00013EC5                            	sCall		Pelimusa_SetDACLong
00013EC5 F8                       M 	dc.b	$f8
00013EC6 0000                     M 	dc.w	pelimusa_setdaclong-*-1
00013EC8                            	Pelimusa_Kaiku nF5
00013EC8                          M 	rept	narg
00013EC8 AD                       M 	dc.b	nf5-na5+nc4
00013EC9                          M 	shift
00013EC9                            	sCall		Pelimusa_SetDACNormal
00013EC9 F8                       M 	dc.b	$f8
00013ECA 0000                     M 	dc.w	pelimusa_setdacnormal-*-1
00013ECC                            	Pelimusa_Kaiku nA5, nC6, nA5, nG5
00013ECC                          M 	rept	narg
00013ECC B1                       M 	dc.b	na5-na5+nc4
00013ECD                          M 	shift
00013ECD B4                       M 	dc.b	nc6-na5+nc4
00013ECE                          M 	shift
00013ECE B1                       M 	dc.b	na5-na5+nc4
00013ECF                          M 	shift
00013ECF AF                       M 	dc.b	ng5-na5+nc4
00013ED0                          M 	shift
00013ED0                            	sVoice		dKaiku5
00013ED0 E89F                     M 	dc.b	$e8,dkaiku5
00013ED2                            	Pelimusa_Kaiku nB5
00013ED2                          M 	rept	narg
00013ED2 B3                       M 	dc.b	nb5-na5+nc4
00013ED3                          M 	shift
00013ED3                            	sCall		Pelimusa_SetDACNormal
00013ED3 F8                       M 	dc.b	$f8
00013ED4 0000                     M 	dc.w	pelimusa_setdacnormal-*-1
00013ED6                            	Pelimusa_Kaiku nD6
00013ED6                          M 	rept	narg
00013ED6 B6                       M 	dc.b	nd6-na5+nc4
00013ED7                          M 	shift
00013ED7                            	sVoice		dKaiku5
00013ED7 E89F                     M 	dc.b	$e8,dkaiku5
00013ED9                            	Pelimusa_Kaiku nB5
00013ED9                          M 	rept	narg
00013ED9 B3                       M 	dc.b	nb5-na5+nc4
00013EDA                          M 	shift
00013EDA                            	sCall		Pelimusa_SetDACLong
00013EDA F8                       M 	dc.b	$f8
00013EDB 0000                     M 	dc.w	pelimusa_setdaclong-*-1
00013EDD                            	Pelimusa_Kaiku nD6
00013EDD                          M 	rept	narg
00013EDD B6                       M 	dc.b	nd6-na5+nc4
00013EDE                          M 	shift
00013EDE                            	sCall		Pelimusa_SetDACNormal
00013EDE F8                       M 	dc.b	$f8
00013EDF 0000                     M 	dc.w	pelimusa_setdacnormal-*-1
00013EE1                            	Pelimusa_Kaiku nB5, nG5
00013EE1                          M 	rept	narg
00013EE1 B3                       M 	dc.b	nb5-na5+nc4
00013EE2                          M 	shift
00013EE2 AF                       M 	dc.b	ng5-na5+nc4
00013EE3                          M 	shift
00013EE3                            	sRet
00013EE3 F9                       M 	dc.b	$f9
00013EE4                            
00013EE4                            Pelimusa_SetDACNormal:
00013EE4                            	sCondReg	$F, dcoEQ, ctDAC2	; if this is DAC2
00013EE4 FF08 7F0E                M 	dc.b	$ff,$08,$f|(dcoeq<<4),ctdac2
00013EE8                            	sVoice		dKaiku1			; then Kaiku1
00013EE8 E89B                     M 	dc.b	$e8,dkaiku1
00013EEA                            	sCondReg	$F, dcoEQ, ctDAC1	; if this is DAC1
00013EEA FF08 7F0B                M 	dc.b	$ff,$08,$f|(dcoeq<<4),ctdac1
00013EEE                            	sVoice		dKaiku2			; then Kaiku2
00013EEE E89C                     M 	dc.b	$e8,dkaiku2
00013EF0                            	sCondOff
00013EF0 FC                       M 	dc.b	$fc
00013EF1                            	sRet
00013EF1 F9                       M 	dc.b	$f9
00013EF2                            
00013EF2                            Pelimusa_SetDACLong:
00013EF2                            	sCondReg	$F, dcoEQ, ctDAC2	; if this is DAC2
00013EF2 FF08 7F0E                M 	dc.b	$ff,$08,$f|(dcoeq<<4),ctdac2
00013EF6                            	sVoice		dKaiku3			; then Kaiku3
00013EF6 E89D                     M 	dc.b	$e8,dkaiku3
00013EF8                            	sCondReg	$F, dcoEQ, ctDAC1	; if this is DAC1
00013EF8 FF08 7F0B                M 	dc.b	$ff,$08,$f|(dcoeq<<4),ctdac1
00013EFC                            	sVoice		dKaiku4			; then Kaiku4
00013EFC E89E                     M 	dc.b	$e8,dkaiku4
00013EFE                            	sCondOff
00013EFE FC                       M 	dc.b	$fc
00013EFF                            	sRet
00013EFF F9                       M 	dc.b	$f9
00013F00                            ; ---------------------------------------------------------------------------
00013F00                            
00013F00                            Pelimusa_Delay4:
00013F00                            	sCall		Pelimusa_Delay2
00013F00 F8                       M 	dc.b	$f8
00013F01 0000                     M 	dc.w	pelimusa_delay2-*-1
00013F03                            
00013F03                            Pelimusa_Delay2:
00013F03 8060                       	dc.b nRst, $60
00013F05                            
00013F05                            Pelimusa_DelayShorter:
00013F05 8060 8080 60               	dc.b nRst, $60, nRst, nRst, $60
00013F0A                            
00013F0A                            Pelimusa_Delay1:
00013F0A 8060 8060 8080             	dc.b nRst, $60, nRst, $60, nRst, nRst
00013F10                            	sRet
00013F10 F9                       M 	dc.b	$f9
00013F11                            ; ===========================================================================
00013F11                            ; ---------------------------------------------------------------------------
00013F11                            ; FM1: Drums (Channel 1)
00013F11                            ; ---------------------------------------------------------------------------
00013F11                            
00013F11                            Pelimusa_FM1:
00013F11                            	; pattern 5 and 6
00013F11                            	ssDetune	-$05
00013F11 E1FB                     M 	dc.b	$e1,-$05
00013F13                            	sCall		Pelimusa_FM1_Intro
00013F13 F8                       M 	dc.b	$f8
00013F14 0000                     M 	dc.w	pelimusa_fm1_intro-*-1
00013F16                            	sVoice		pLowKick
00013F16 E801                     M 	dc.b	$e8,plowkick
00013F18 18                         	dc.b $18
00013F19                            	sVoice		pSnare
00013F19 E802                     M 	dc.b	$e8,psnare
00013F1B 1206                       	dc.b $12, $06
00013F1D                            
00013F1D                            	sCall		Pelimusa_FM1_Intro
00013F1D F8                       M 	dc.b	$f8
00013F1E 0000                     M 	dc.w	pelimusa_fm1_intro-*-1
00013F20                            	sVoice		pLowKick
00013F20 E801                     M 	dc.b	$e8,plowkick
00013F22 06                         	dc.b $06
00013F23                            	sVoice		pSnare
00013F23 E802                     M 	dc.b	$e8,psnare
00013F25 120C 0606                  	dc.b $12, $0C, $06, $06
00013F29                            
00013F29                            	; pattern 7 and 8
00013F29                            .loop	sCall		Pelimusa_FM1_Main
00013F29 F8                       M 	dc.b	$f8
00013F2A 0000                     M 	dc.w	pelimusa_fm1_main-*-1
00013F2C                            	sCall		Pelimusa_DelayShorter
00013F2C F8                       M 	dc.b	$f8
00013F2D FFD7                     M 	dc.w	pelimusa_delayshorter-*-1
00013F2F                            
00013F2F                            	sVoice		pCrash
00013F2F E803                     M 	dc.b	$e8,pcrash
00013F31                            	ssVol		$10
00013F31 EE10                     M 	dc.b	$ee,$10
00013F33 9906                       .volp	dc.b nC2, $06
00013F35                            	saVol		-$01
00013F35 EDFF                     M 	dc.b	$ed,-$01
00013F37                            	sLoop		$00, $10, .volp
00013F37 F700                     M 	dc.b	$f7,$00
00013F39 FFF9                     M 	dc.w	.volp-*-1
00013F3B 10                       M 	dc.b	$10
00013F3C                            
00013F3C                            	sCall		Pelimusa_FM1_Main
00013F3C F8                       M 	dc.b	$f8
00013F3D 0000                     M 	dc.w	pelimusa_fm1_main-*-1
00013F3F                            	sJump		.loop
00013F3F F6                       M 	dc.b	$f6
00013F40 FFE8                     M 	dc.w	.loop-*-1
00013F42                            ; ---------------------------------------------------------------------------
00013F42                            
00013F42                            Pelimusa_FM1_Intro:
00013F42                            	sVoice		pLowKick
00013F42 E801                     M 	dc.b	$e8,plowkick
00013F44 9918                       	dc.b nC2, $18
00013F46                            	sVoice		pSnare
00013F46 E802                     M 	dc.b	$e8,psnare
00013F48 18                         	dc.b $18
00013F49                            	sVoice		pLowKick
00013F49 E801                     M 	dc.b	$e8,plowkick
00013F4B 18                         	dc.b $18
00013F4C                            	sVoice		pSnare
00013F4C E802                     M 	dc.b	$e8,psnare
00013F4E 0C                         	dc.b $0C
00013F4F                            	sVoice		pLowKick
00013F4F E801                     M 	dc.b	$e8,plowkick
00013F51 24                         	dc.b $24
00013F52                            	sVoice		pSnare
00013F52 E802                     M 	dc.b	$e8,psnare
00013F54 18                         	dc.b $18
00013F55                            	sVoice		pLowKick
00013F55 E801                     M 	dc.b	$e8,plowkick
00013F57 18                         	dc.b $18
00013F58                            	sVoice		pSnare
00013F58 E802                     M 	dc.b	$e8,psnare
00013F5A 18                         	dc.b $18
00013F5B                            
00013F5B                            	sVoice		pLowKick
00013F5B E801                     M 	dc.b	$e8,plowkick
00013F5D 18                         	dc.b $18
00013F5E                            	sVoice		pSnare
00013F5E E802                     M 	dc.b	$e8,psnare
00013F60 18                         	dc.b $18
00013F61                            	sVoice		pLowKick
00013F61 E801                     M 	dc.b	$e8,plowkick
00013F63 18                         	dc.b $18
00013F64                            	sVoice		pSnare
00013F64 E802                     M 	dc.b	$e8,psnare
00013F66 0C                         	dc.b $0C
00013F67                            	sVoice		pLowKick
00013F67 E801                     M 	dc.b	$e8,plowkick
00013F69 24                         	dc.b $24
00013F6A                            	sVoice		pSnare
00013F6A E802                     M 	dc.b	$e8,psnare
00013F6C 18                         	dc.b $18
00013F6D                            	sRet
00013F6D F9                       M 	dc.b	$f9
00013F6E                            
00013F6E                            Pelimusa_FM1_Main:
00013F6E                            	sCall		.long
00013F6E F8                       M 	dc.b	$f8
00013F6F 0000                     M 	dc.w	.long-*-1
00013F71 1206                       	dc.b $12, $06
00013F73                            	sCall		.long
00013F73 F8                       M 	dc.b	$f8
00013F74 0000                     M 	dc.w	.long-*-1
00013F76 0C06 06                    	dc.b $0C, $06, $06
00013F79                            	sLoop		$01, $06, Pelimusa_FM1_Main
00013F79 F701                     M 	dc.b	$f7,$01
00013F7B FFF2                     M 	dc.w	pelimusa_fm1_main-*-1
00013F7D 06                       M 	dc.b	$06
00013F7E                            	sRet
00013F7E F9                       M 	dc.b	$f9
00013F7F                            
00013F7F                            .long	sVoice		pLowKick
00013F7F E801                     M 	dc.b	$e8,plowkick
00013F81 18                         	dc.b $18
00013F82                            	sVoice		pSnare
00013F82 E802                     M 	dc.b	$e8,psnare
00013F84 18                         	dc.b $18
00013F85                            	sVoice		pLowKick
00013F85 E801                     M 	dc.b	$e8,plowkick
00013F87 18                         	dc.b $18
00013F88                            	sVoice		pSnare
00013F88 E802                     M 	dc.b	$e8,psnare
00013F8A 18                         	dc.b $18
00013F8B                            	sVoice		pLowKick
00013F8B E801                     M 	dc.b	$e8,plowkick
00013F8D 18                         	dc.b $18
00013F8E                            	sVoice		pSnare
00013F8E E802                     M 	dc.b	$e8,psnare
00013F90 18                         	dc.b $18
00013F91                            	sVoice		pLowKick
00013F91 E801                     M 	dc.b	$e8,plowkick
00013F93 18                         	dc.b $18
00013F94                            	sVoice		pSnare
00013F94 E802                     M 	dc.b	$e8,psnare
00013F96                            	sRet
00013F96 F9                       M 	dc.b	$f9
00013F97                            ; ===========================================================================
00013F97                            ; ---------------------------------------------------------------------------
00013F97                            ; FM2: Background (Channel 3)
00013F97                            ; ---------------------------------------------------------------------------
00013F97                            
00013F97                            Pelimusa_FM2:
00013F97                            	sVoice		pBasso
00013F97 E800                     M 	dc.b	$e8,pbasso
00013F99                            
00013F99                            	; pattern 5 and 6
00013F99                            .intro	sCall		Pelimusa_FM2_Intro0
00013F99 F8                       M 	dc.b	$f8
00013F9A 0000                     M 	dc.w	pelimusa_fm2_intro0-*-1
00013F9C                            	sCall		Pelimusa_FM2_Intro2
00013F9C F8                       M 	dc.b	$f8
00013F9D 0000                     M 	dc.w	pelimusa_fm2_intro2-*-1
00013F9F                            	sCall		Pelimusa_FM2_Intro3
00013F9F F8                       M 	dc.b	$f8
00013FA0 0000                     M 	dc.w	pelimusa_fm2_intro3-*-1
00013FA2                            	sCall		Pelimusa_FM2_Intro5
00013FA2 F8                       M 	dc.b	$f8
00013FA3 0000                     M 	dc.w	pelimusa_fm2_intro5-*-1
00013FA5                            
00013FA5                            	sCall		Pelimusa_FM2_Intro1
00013FA5 F8                       M 	dc.b	$f8
00013FA6 0000                     M 	dc.w	pelimusa_fm2_intro1-*-1
00013FA8                            	sCall		Pelimusa_FM2_Intro2
00013FA8 F8                       M 	dc.b	$f8
00013FA9 0000                     M 	dc.w	pelimusa_fm2_intro2-*-1
00013FAB                            	sCall		Pelimusa_FM2_Intro3
00013FAB F8                       M 	dc.b	$f8
00013FAC 0000                     M 	dc.w	pelimusa_fm2_intro3-*-1
00013FAE                            	sCall		Pelimusa_FM2_Intro4
00013FAE F8                       M 	dc.b	$f8
00013FAF 0000                     M 	dc.w	pelimusa_fm2_intro4-*-1
00013FB1                            	saTranspose	-$04		; first play Ax, then Fx
00013FB1 E4FC                     M 	dc.b	$e4,-$04
00013FB3                            	sLoop		$00, $02, .intro
00013FB3 F700                     M 	dc.b	$f7,$00
00013FB5 FFE3                     M 	dc.w	.intro-*-1
00013FB7 02                       M 	dc.b	$02
00013FB8                            	saTranspose	$08
00013FB8 E408                     M 	dc.b	$e4,$08
00013FBA                            	sLoop		$01, $02, .intro
00013FBA F701                     M 	dc.b	$f7,$01
00013FBC FFDC                     M 	dc.w	.intro-*-1
00013FBE 02                       M 	dc.b	$02
00013FBF                            
00013FBF                            .main	sCall		Pelimusa_FM2_Main
00013FBF F8                       M 	dc.b	$f8
00013FC0 0000                     M 	dc.w	pelimusa_fm2_main-*-1
00013FC2                            	sCall		Pelimusa_Delay2
00013FC2 F8                       M 	dc.b	$f8
00013FC3 FF3F                     M 	dc.w	pelimusa_delay2-*-1
00013FC5                            	sCall		Pelimusa_FM2_Main
00013FC5 F8                       M 	dc.b	$f8
00013FC6 0000                     M 	dc.w	pelimusa_fm2_main-*-1
00013FC8                            	sJump		.main
00013FC8 F6                       M 	dc.b	$f6
00013FC9 FFF5                     M 	dc.w	.main-*-1
00013FCB                            ; ---------------------------------------------------------------------------
00013FCB                            
00013FCB                            Pelimusa_FM2_Main:
00013FCB                            	; pattern 7 and 8
00013FCB                            	sCall		Pelimusa_FM2_Intro0
00013FCB F8                       M 	dc.b	$f8
00013FCC 0000                     M 	dc.w	pelimusa_fm2_intro0-*-1
00013FCE                            	sCall		Pelimusa_FM2_Intro2
00013FCE F8                       M 	dc.b	$f8
00013FCF 0000                     M 	dc.w	pelimusa_fm2_intro2-*-1
00013FD1                            
00013FD1                            	saTranspose	-$04		; nFx
00013FD1 E4FC                     M 	dc.b	$e4,-$04
00013FD3                            	sCall		Pelimusa_FM2_Intro3
00013FD3 F8                       M 	dc.b	$f8
00013FD4 0000                     M 	dc.w	pelimusa_fm2_intro3-*-1
00013FD6                            	sCall		Pelimusa_FM2_Intro5
00013FD6 F8                       M 	dc.b	$f8
00013FD7 0000                     M 	dc.w	pelimusa_fm2_intro5-*-1
00013FD9                            
00013FD9                            	saTranspose	$07		; nCx
00013FD9 E407                     M 	dc.b	$e4,$07
00013FDB                            	sCall		Pelimusa_FM2_Intro1
00013FDB F8                       M 	dc.b	$f8
00013FDC 0000                     M 	dc.w	pelimusa_fm2_intro1-*-1
00013FDE                            	sCall		Pelimusa_FM2_Intro2
00013FDE F8                       M 	dc.b	$f8
00013FDF 0000                     M 	dc.w	pelimusa_fm2_intro2-*-1
00013FE1                            
00013FE1                            	saTranspose	-$05		; nGx
00013FE1 E4FB                     M 	dc.b	$e4,-$05
00013FE3                            	sCall		Pelimusa_FM2_Intro3
00013FE3 F8                       M 	dc.b	$f8
00013FE4 0000                     M 	dc.w	pelimusa_fm2_intro3-*-1
00013FE6                            	sCall		Pelimusa_FM2_Intro4
00013FE6 F8                       M 	dc.b	$f8
00013FE7 0000                     M 	dc.w	pelimusa_fm2_intro4-*-1
00013FE9                            
00013FE9                            	saTranspose	$02		; nAx
00013FE9 E402                     M 	dc.b	$e4,$02
00013FEB                            	sCall		Pelimusa_FM2_Intro0
00013FEB F8                       M 	dc.b	$f8
00013FEC 0000                     M 	dc.w	pelimusa_fm2_intro0-*-1
00013FEE                            	sCall		Pelimusa_FM2_Intro2
00013FEE F8                       M 	dc.b	$f8
00013FEF 0000                     M 	dc.w	pelimusa_fm2_intro2-*-1
00013FF1                            
00013FF1                            	saTranspose	-$04		; nFx
00013FF1 E4FC                     M 	dc.b	$e4,-$04
00013FF3                            	sCall		Pelimusa_FM2_Intro3
00013FF3 F8                       M 	dc.b	$f8
00013FF4 0000                     M 	dc.w	pelimusa_fm2_intro3-*-1
00013FF6                            	sCall		Pelimusa_FM2_Intro5
00013FF6 F8                       M 	dc.b	$f8
00013FF7 0000                     M 	dc.w	pelimusa_fm2_intro5-*-1
00013FF9                            
00013FF9                            	saTranspose	$02		; nGx
00013FF9 E402                     M 	dc.b	$e4,$02
00013FFB                            .endbit	sCall		Pelimusa_FM2_Intro1
00013FFB F8                       M 	dc.b	$f8
00013FFC 0000                     M 	dc.w	pelimusa_fm2_intro1-*-1
00013FFE                            	sCall		Pelimusa_FM2_Intro2
00013FFE F8                       M 	dc.b	$f8
00013FFF 0000                     M 	dc.w	pelimusa_fm2_intro2-*-1
00014001                            	sLoop		$01, $02, .endbit
00014001 F701                     M 	dc.b	$f7,$01
00014003 FFF7                     M 	dc.w	.endbit-*-1
00014005 02                       M 	dc.b	$02
00014006                            
00014006                            	saTranspose	$02		; nAx
00014006 E402                     M 	dc.b	$e4,$02
00014008                            	sLoop		$02, $06, Pelimusa_FM2_Main
00014008 F702                     M 	dc.b	$f7,$02
0001400A FFC0                     M 	dc.w	pelimusa_fm2_main-*-1
0001400C 06                       M 	dc.b	$06
0001400D                            	sRet
0001400D F9                       M 	dc.b	$f9
0001400E                            ; ---------------------------------------------------------------------------
0001400E                            
0001400E                            Pelimusa_FM2_Intro0:
0001400E 9606                       	dc.b nA1, $06
00014010                            	saVol		$0C
00014010 ED0C                     M 	dc.b	$ed,$0c
00014012 96                         	dc.b nA1
00014013                            	sRet
00014013 F9                       M 	dc.b	$f9
00014014                            
00014014                            Pelimusa_FM2_Intro1:
00014014 9606                       	dc.b nA1, $06
00014016                            	saVol		$0C
00014016 ED0C                     M 	dc.b	$ed,$0c
00014018 8A                         	dc.b nA0
00014019                            	sRet
00014019 F9                       M 	dc.b	$f9
0001401A                            
0001401A                            Pelimusa_FM2_Intro3:
0001401A 9696                       	dc.b nA1, nA1
0001401C                            	saVol		$0C
0001401C ED0C                     M 	dc.b	$ed,$0c
0001401E 8A                         	dc.b nA0
0001401F                            	saVol		-$0C
0001401F EDF4                     M 	dc.b	$ed,-$0c
00014021 A2                         	dc.b nA2
00014022                            	sRet
00014022 F9                       M 	dc.b	$f9
00014023                            
00014023                            Pelimusa_FM2_Intro2:
00014023                            	saVol		-$0C
00014023 EDF4                     M 	dc.b	$ed,-$0c
00014025 8AA2                       	dc.b nA0, nA2
00014027                            	saVol		$0C
00014027 ED0C                     M 	dc.b	$ed,$0c
00014029 8A                         	dc.b nA0
0001402A                            	saVol		-$0C
0001402A EDF4                     M 	dc.b	$ed,-$0c
0001402C 9696                       	dc.b nA1, nA1
0001402E                            	saVol		$0C
0001402E ED0C                     M 	dc.b	$ed,$0c
00014030 8A                         	dc.b nA0
00014031                            	saVol		-$0C
00014031 EDF4                     M 	dc.b	$ed,-$0c
00014033                            	sRet
00014033 F9                       M 	dc.b	$f9
00014034                            
00014034                            Pelimusa_FM2_Intro4:
00014034 8A                         	dc.b nA0
00014035                            	saVol		$0C
00014035 ED0C                     M 	dc.b	$ed,$0c
00014037 96                         	dc.b nA1
00014038                            	saVol		-$0C
00014038 EDF4                     M 	dc.b	$ed,-$0c
0001403A 9696                       	dc.b nA1, nA1
0001403C                            	sRet
0001403C F9                       M 	dc.b	$f9
0001403D                            
0001403D                            Pelimusa_FM2_Intro5:
0001403D 96                         	dc.b nA1
0001403E                            	saVol		$0C
0001403E ED0C                     M 	dc.b	$ed,$0c
00014040 8A                         	dc.b nA0
00014041                            	saVol		-$0C
00014041 EDF4                     M 	dc.b	$ed,-$0c
00014043 9696                       	dc.b nA1, nA1
00014045                            	sRet
00014045 F9                       M 	dc.b	$f9
00014046                            ; ===========================================================================
00014046                            ; ---------------------------------------------------------------------------
00014046                            ; FM3: Jousi + Melodia
00014046                            ; ---------------------------------------------------------------------------
00014046                            
00014046                            Pelimusa_FM3:
00014046                            	sCall		Pelimusa_Delay2
00014046 F8                       M 	dc.b	$f8
00014047 FEBB                     M 	dc.w	pelimusa_delay2-*-1
00014049                            
00014049                            .loop	sCall		Pelimusa_FM3_Pattern8
00014049 F8                       M 	dc.b	$f8
0001404A 0000                     M 	dc.w	pelimusa_fm3_pattern8-*-1
0001404C                            	sCall		.jousi
0001404C F8                       M 	dc.b	$f8
0001404D 0000                     M 	dc.w	.jousi-*-1
0001404F                            	sCall		Pelimusa_FM3_Pattern8
0001404F F8                       M 	dc.b	$f8
00014050 0000                     M 	dc.w	pelimusa_fm3_pattern8-*-1
00014052                            	sCall		Pelimusa_Delay2
00014052 F8                       M 	dc.b	$f8
00014053 FEAF                     M 	dc.w	pelimusa_delay2-*-1
00014055                            	sCall		.jousi
00014055 F8                       M 	dc.b	$f8
00014056 0000                     M 	dc.w	.jousi-*-1
00014058                            	sCall		Pelimusa_FM3_Pattern8
00014058 F8                       M 	dc.b	$f8
00014059 0000                     M 	dc.w	pelimusa_fm3_pattern8-*-1
0001405B                            	sCall		.jousi
0001405B F8                       M 	dc.b	$f8
0001405C 0000                     M 	dc.w	.jousi-*-1
0001405E                            	sJump		.loop
0001405E F6                       M 	dc.b	$f6
0001405F FFE9                     M 	dc.w	.loop-*-1
00014061                            ; ---------------------------------------------------------------------------
00014061                            
00014061                            .jousi	ssVol		$16
00014061 EE16                     M 	dc.b	$ee,$16
00014063                            	sVoice		pJousi
00014063 E804                     M 	dc.b	$e8,pjousi
00014065                            	ssMod68k	$06, $01, $04, $02
00014065 F006 0104 02             M 	dc.b	$f0,$06,$01,$04,$02
0001406A                            
0001406A C130 C2B8 BFC1 C2          .jousi2	dc.b nE5, $30, nF5, nG4, nD5, nE5, nF5
00014071 BF60                       	dc.b nD5, $60
00014073                            	sLoop		$00, $02, .jousi2
00014073 F700                     M 	dc.b	$f7,$00
00014075 FFF4                     M 	dc.w	.jousi2-*-1
00014077 02                       M 	dc.b	$02
00014078                            	sRet
00014078 F9                       M 	dc.b	$f9
00014079                            ; ---------------------------------------------------------------------------
00014079                            
00014079                            Pelimusa_FM34_Volume	macro note, volume
00014079                            	Pelimusa_FM34_Volume2	\volume
00014079                            	dc.b \note, $06
00014079                            	shift
00014079                            
00014079                            	rept narg-2
00014079                            		Pelimusa_FM34_Volume2	\volume
00014079                            		dc.b $06
00014079                            	shift
00014079                            	endr
00014079                                endm
00014079                            
00014079                            Pelimusa_FM34_Volume2	macro volume
00014079                            	if \volume<=8
00014079                            		ssVol		$7F
00014079                            
00014079                            	elseif \volume=64
00014079                            		ssVol		$00
00014079                            
00014079                            	elseif \volume=48
00014079                            		ssVol		$04
00014079                            
00014079                            	elseif \volume=32
00014079                            		ssVol		$08
00014079                            
00014079                            	elseif \volume=24
00014079                            		ssVol		$0A
00014079                            
00014079                            	elseif \volume=16
00014079                            		ssVol		$0C
00014079                            	endif
00014079                                endm
00014079                            ; ---------------------------------------------------------------------------
00014079                            
00014079                            Pelimusa_FM3_Pattern8:
00014079                            	sVoice		pMelodia
00014079 E805                     M 	dc.b	$e8,pmelodia
0001407B                            	ssMod68k	$01, $01, -$02, $08
0001407B F001 01FE 08             M 	dc.b	$f0,$01,$01,-$02,$08
00014080                            
00014080                            .loop	Pelimusa_FM34_Volume nA4, 64, 8, 32, 8, 48, 8, 32, 8
00014080                          M 	pelimusa_fm34_volume2	64
00014080                          M 	ssvol	$00
00014080 EE00                     M 	dc.b	$ee,$00
00014082 BA06                     M 	dc.b	na4,$06
00014084                          M 	shift
00014084                          M 	rept	narg-2
00014084                          M 	pelimusa_fm34_volume2	8
00014084                          M 	ssvol	$7f
00014084 EE7F                     M 	dc.b	$ee,$7f
00014086 06                       M 	dc.b	$06
00014087                          M 	shift
00014087                          M 	pelimusa_fm34_volume2	32
00014087                          M 	ssvol	$08
00014087 EE08                     M 	dc.b	$ee,$08
00014089 06                       M 	dc.b	$06
0001408A                          M 	shift
0001408A                          M 	pelimusa_fm34_volume2	8
0001408A                          M 	ssvol	$7f
0001408A EE7F                     M 	dc.b	$ee,$7f
0001408C 06                       M 	dc.b	$06
0001408D                          M 	shift
0001408D                          M 	pelimusa_fm34_volume2	48
0001408D                          M 	ssvol	$04
0001408D EE04                     M 	dc.b	$ee,$04
0001408F 06                       M 	dc.b	$06
00014090                          M 	shift
00014090                          M 	pelimusa_fm34_volume2	8
00014090                          M 	ssvol	$7f
00014090 EE7F                     M 	dc.b	$ee,$7f
00014092 06                       M 	dc.b	$06
00014093                          M 	shift
00014093                          M 	pelimusa_fm34_volume2	32
00014093                          M 	ssvol	$08
00014093 EE08                     M 	dc.b	$ee,$08
00014095 06                       M 	dc.b	$06
00014096                          M 	shift
00014096                          M 	pelimusa_fm34_volume2	8
00014096                          M 	ssvol	$7f
00014096 EE7F                     M 	dc.b	$ee,$7f
00014098 06                       M 	dc.b	$06
00014099                          M 	shift
00014099                            	Pelimusa_FM34_Volume nF4, 48, 8, 32, 8
00014099                          M 	pelimusa_fm34_volume2	48
00014099                          M 	ssvol	$04
00014099 EE04                     M 	dc.b	$ee,$04
0001409B B606                     M 	dc.b	nf4,$06
0001409D                          M 	shift
0001409D                          M 	rept	narg-2
0001409D                          M 	pelimusa_fm34_volume2	8
0001409D                          M 	ssvol	$7f
0001409D EE7F                     M 	dc.b	$ee,$7f
0001409F 06                       M 	dc.b	$06
000140A0                          M 	shift
000140A0                          M 	pelimusa_fm34_volume2	32
000140A0                          M 	ssvol	$08
000140A0 EE08                     M 	dc.b	$ee,$08
000140A2 06                       M 	dc.b	$06
000140A3                          M 	shift
000140A3                          M 	pelimusa_fm34_volume2	8
000140A3                          M 	ssvol	$7f
000140A3 EE7F                     M 	dc.b	$ee,$7f
000140A5 06                       M 	dc.b	$06
000140A6                          M 	shift
000140A6                            	Pelimusa_FM34_Volume nA4, 48, 8
000140A6                          M 	pelimusa_fm34_volume2	48
000140A6                          M 	ssvol	$04
000140A6 EE04                     M 	dc.b	$ee,$04
000140A8 BA06                     M 	dc.b	na4,$06
000140AA                          M 	shift
000140AA                          M 	rept	narg-2
000140AA                          M 	pelimusa_fm34_volume2	8
000140AA                          M 	ssvol	$7f
000140AA EE7F                     M 	dc.b	$ee,$7f
000140AC 06                       M 	dc.b	$06
000140AD                          M 	shift
000140AD                            	Pelimusa_FM34_Volume nF4, 48, 8
000140AD                          M 	pelimusa_fm34_volume2	48
000140AD                          M 	ssvol	$04
000140AD EE04                     M 	dc.b	$ee,$04
000140AF B606                     M 	dc.b	nf4,$06
000140B1                          M 	shift
000140B1                          M 	rept	narg-2
000140B1                          M 	pelimusa_fm34_volume2	8
000140B1                          M 	ssvol	$7f
000140B1 EE7F                     M 	dc.b	$ee,$7f
000140B3 06                       M 	dc.b	$06
000140B4                          M 	shift
000140B4                            	Pelimusa_FM34_Volume nC5, 64, 8, 32, 8, 32, 8
000140B4                          M 	pelimusa_fm34_volume2	64
000140B4                          M 	ssvol	$00
000140B4 EE00                     M 	dc.b	$ee,$00
000140B6 BD06                     M 	dc.b	nc5,$06
000140B8                          M 	shift
000140B8                          M 	rept	narg-2
000140B8                          M 	pelimusa_fm34_volume2	8
000140B8                          M 	ssvol	$7f
000140B8 EE7F                     M 	dc.b	$ee,$7f
000140BA 06                       M 	dc.b	$06
000140BB                          M 	shift
000140BB                          M 	pelimusa_fm34_volume2	32
000140BB                          M 	ssvol	$08
000140BB EE08                     M 	dc.b	$ee,$08
000140BD 06                       M 	dc.b	$06
000140BE                          M 	shift
000140BE                          M 	pelimusa_fm34_volume2	8
000140BE                          M 	ssvol	$7f
000140BE EE7F                     M 	dc.b	$ee,$7f
000140C0 06                       M 	dc.b	$06
000140C1                          M 	shift
000140C1                          M 	pelimusa_fm34_volume2	32
000140C1                          M 	ssvol	$08
000140C1 EE08                     M 	dc.b	$ee,$08
000140C3 06                       M 	dc.b	$06
000140C4                          M 	shift
000140C4                          M 	pelimusa_fm34_volume2	8
000140C4                          M 	ssvol	$7f
000140C4 EE7F                     M 	dc.b	$ee,$7f
000140C6 06                       M 	dc.b	$06
000140C7                          M 	shift
000140C7                            	Pelimusa_FM34_Volume nB4, 48, 8, 32, 8, 32, 8
000140C7                          M 	pelimusa_fm34_volume2	48
000140C7                          M 	ssvol	$04
000140C7 EE04                     M 	dc.b	$ee,$04
000140C9 BC06                     M 	dc.b	nb4,$06
000140CB                          M 	shift
000140CB                          M 	rept	narg-2
000140CB                          M 	pelimusa_fm34_volume2	8
000140CB                          M 	ssvol	$7f
000140CB EE7F                     M 	dc.b	$ee,$7f
000140CD 06                       M 	dc.b	$06
000140CE                          M 	shift
000140CE                          M 	pelimusa_fm34_volume2	32
000140CE                          M 	ssvol	$08
000140CE EE08                     M 	dc.b	$ee,$08
000140D0 06                       M 	dc.b	$06
000140D1                          M 	shift
000140D1                          M 	pelimusa_fm34_volume2	8
000140D1                          M 	ssvol	$7f
000140D1 EE7F                     M 	dc.b	$ee,$7f
000140D3 06                       M 	dc.b	$06
000140D4                          M 	shift
000140D4                          M 	pelimusa_fm34_volume2	32
000140D4                          M 	ssvol	$08
000140D4 EE08                     M 	dc.b	$ee,$08
000140D6 06                       M 	dc.b	$06
000140D7                          M 	shift
000140D7                          M 	pelimusa_fm34_volume2	8
000140D7                          M 	ssvol	$7f
000140D7 EE7F                     M 	dc.b	$ee,$7f
000140D9 06                       M 	dc.b	$06
000140DA                          M 	shift
000140DA                            	Pelimusa_FM34_Volume nC5, 48, 8
000140DA                          M 	pelimusa_fm34_volume2	48
000140DA                          M 	ssvol	$04
000140DA EE04                     M 	dc.b	$ee,$04
000140DC BD06                     M 	dc.b	nc5,$06
000140DE                          M 	shift
000140DE                          M 	rept	narg-2
000140DE                          M 	pelimusa_fm34_volume2	8
000140DE                          M 	ssvol	$7f
000140DE EE7F                     M 	dc.b	$ee,$7f
000140E0 06                       M 	dc.b	$06
000140E1                          M 	shift
000140E1                            	Pelimusa_FM34_Volume nB4, 48, 8
000140E1                          M 	pelimusa_fm34_volume2	48
000140E1                          M 	ssvol	$04
000140E1 EE04                     M 	dc.b	$ee,$04
000140E3 BC06                     M 	dc.b	nb4,$06
000140E5                          M 	shift
000140E5                          M 	rept	narg-2
000140E5                          M 	pelimusa_fm34_volume2	8
000140E5                          M 	ssvol	$7f
000140E5 EE7F                     M 	dc.b	$ee,$7f
000140E7 06                       M 	dc.b	$06
000140E8                          M 	shift
000140E8                            	Pelimusa_FM34_Volume nA4, 64, 8, 64, 8, 64, 8, 64, 8
000140E8                          M 	pelimusa_fm34_volume2	64
000140E8                          M 	ssvol	$00
000140E8 EE00                     M 	dc.b	$ee,$00
000140EA BA06                     M 	dc.b	na4,$06
000140EC                          M 	shift
000140EC                          M 	rept	narg-2
000140EC                          M 	pelimusa_fm34_volume2	8
000140EC                          M 	ssvol	$7f
000140EC EE7F                     M 	dc.b	$ee,$7f
000140EE 06                       M 	dc.b	$06
000140EF                          M 	shift
000140EF                          M 	pelimusa_fm34_volume2	64
000140EF                          M 	ssvol	$00
000140EF EE00                     M 	dc.b	$ee,$00
000140F1 06                       M 	dc.b	$06
000140F2                          M 	shift
000140F2                          M 	pelimusa_fm34_volume2	8
000140F2                          M 	ssvol	$7f
000140F2 EE7F                     M 	dc.b	$ee,$7f
000140F4 06                       M 	dc.b	$06
000140F5                          M 	shift
000140F5                          M 	pelimusa_fm34_volume2	64
000140F5                          M 	ssvol	$00
000140F5 EE00                     M 	dc.b	$ee,$00
000140F7 06                       M 	dc.b	$06
000140F8                          M 	shift
000140F8                          M 	pelimusa_fm34_volume2	8
000140F8                          M 	ssvol	$7f
000140F8 EE7F                     M 	dc.b	$ee,$7f
000140FA 06                       M 	dc.b	$06
000140FB                          M 	shift
000140FB                          M 	pelimusa_fm34_volume2	64
000140FB                          M 	ssvol	$00
000140FB EE00                     M 	dc.b	$ee,$00
000140FD 06                       M 	dc.b	$06
000140FE                          M 	shift
000140FE                          M 	pelimusa_fm34_volume2	8
000140FE                          M 	ssvol	$7f
000140FE EE7F                     M 	dc.b	$ee,$7f
00014100 06                       M 	dc.b	$06
00014101                          M 	shift
00014101                            	Pelimusa_FM34_Volume nF4, 48, 8, 48, 8
00014101                          M 	pelimusa_fm34_volume2	48
00014101                          M 	ssvol	$04
00014101 EE04                     M 	dc.b	$ee,$04
00014103 B606                     M 	dc.b	nf4,$06
00014105                          M 	shift
00014105                          M 	rept	narg-2
00014105                          M 	pelimusa_fm34_volume2	8
00014105                          M 	ssvol	$7f
00014105 EE7F                     M 	dc.b	$ee,$7f
00014107 06                       M 	dc.b	$06
00014108                          M 	shift
00014108                          M 	pelimusa_fm34_volume2	48
00014108                          M 	ssvol	$04
00014108 EE04                     M 	dc.b	$ee,$04
0001410A 06                       M 	dc.b	$06
0001410B                          M 	shift
0001410B                          M 	pelimusa_fm34_volume2	8
0001410B                          M 	ssvol	$7f
0001410B EE7F                     M 	dc.b	$ee,$7f
0001410D 06                       M 	dc.b	$06
0001410E                          M 	shift
0001410E                            	Pelimusa_FM34_Volume nA4, 48, 8
0001410E                          M 	pelimusa_fm34_volume2	48
0001410E                          M 	ssvol	$04
0001410E EE04                     M 	dc.b	$ee,$04
00014110 BA06                     M 	dc.b	na4,$06
00014112                          M 	shift
00014112                          M 	rept	narg-2
00014112                          M 	pelimusa_fm34_volume2	8
00014112                          M 	ssvol	$7f
00014112 EE7F                     M 	dc.b	$ee,$7f
00014114 06                       M 	dc.b	$06
00014115                          M 	shift
00014115                            	Pelimusa_FM34_Volume nF4, 48, 8
00014115                          M 	pelimusa_fm34_volume2	48
00014115                          M 	ssvol	$04
00014115 EE04                     M 	dc.b	$ee,$04
00014117 B606                     M 	dc.b	nf4,$06
00014119                          M 	shift
00014119                          M 	rept	narg-2
00014119                          M 	pelimusa_fm34_volume2	8
00014119                          M 	ssvol	$7f
00014119 EE7F                     M 	dc.b	$ee,$7f
0001411B 06                       M 	dc.b	$06
0001411C                          M 	shift
0001411C                            	Pelimusa_FM34_Volume nG4, 64, 8, 32, 8, 32, 8
0001411C                          M 	pelimusa_fm34_volume2	64
0001411C                          M 	ssvol	$00
0001411C EE00                     M 	dc.b	$ee,$00
0001411E B806                     M 	dc.b	ng4,$06
00014120                          M 	shift
00014120                          M 	rept	narg-2
00014120                          M 	pelimusa_fm34_volume2	8
00014120                          M 	ssvol	$7f
00014120 EE7F                     M 	dc.b	$ee,$7f
00014122 06                       M 	dc.b	$06
00014123                          M 	shift
00014123                          M 	pelimusa_fm34_volume2	32
00014123                          M 	ssvol	$08
00014123 EE08                     M 	dc.b	$ee,$08
00014125 06                       M 	dc.b	$06
00014126                          M 	shift
00014126                          M 	pelimusa_fm34_volume2	8
00014126                          M 	ssvol	$7f
00014126 EE7F                     M 	dc.b	$ee,$7f
00014128 06                       M 	dc.b	$06
00014129                          M 	shift
00014129                          M 	pelimusa_fm34_volume2	32
00014129                          M 	ssvol	$08
00014129 EE08                     M 	dc.b	$ee,$08
0001412B 06                       M 	dc.b	$06
0001412C                          M 	shift
0001412C                          M 	pelimusa_fm34_volume2	8
0001412C                          M 	ssvol	$7f
0001412C EE7F                     M 	dc.b	$ee,$7f
0001412E 06                       M 	dc.b	$06
0001412F                          M 	shift
0001412F                            	Pelimusa_FM34_Volume nB4, 64, 8, 32, 8, 32, 8
0001412F                          M 	pelimusa_fm34_volume2	64
0001412F                          M 	ssvol	$00
0001412F EE00                     M 	dc.b	$ee,$00
00014131 BC06                     M 	dc.b	nb4,$06
00014133                          M 	shift
00014133                          M 	rept	narg-2
00014133                          M 	pelimusa_fm34_volume2	8
00014133                          M 	ssvol	$7f
00014133 EE7F                     M 	dc.b	$ee,$7f
00014135 06                       M 	dc.b	$06
00014136                          M 	shift
00014136                          M 	pelimusa_fm34_volume2	32
00014136                          M 	ssvol	$08
00014136 EE08                     M 	dc.b	$ee,$08
00014138 06                       M 	dc.b	$06
00014139                          M 	shift
00014139                          M 	pelimusa_fm34_volume2	8
00014139                          M 	ssvol	$7f
00014139 EE7F                     M 	dc.b	$ee,$7f
0001413B 06                       M 	dc.b	$06
0001413C                          M 	shift
0001413C                          M 	pelimusa_fm34_volume2	32
0001413C                          M 	ssvol	$08
0001413C EE08                     M 	dc.b	$ee,$08
0001413E 06                       M 	dc.b	$06
0001413F                          M 	shift
0001413F                          M 	pelimusa_fm34_volume2	8
0001413F                          M 	ssvol	$7f
0001413F EE7F                     M 	dc.b	$ee,$7f
00014141 06                       M 	dc.b	$06
00014142                          M 	shift
00014142                            	Pelimusa_FM34_Volume nC5, 48, 8, 48, 8
00014142                          M 	pelimusa_fm34_volume2	48
00014142                          M 	ssvol	$04
00014142 EE04                     M 	dc.b	$ee,$04
00014144 BD06                     M 	dc.b	nc5,$06
00014146                          M 	shift
00014146                          M 	rept	narg-2
00014146                          M 	pelimusa_fm34_volume2	8
00014146                          M 	ssvol	$7f
00014146 EE7F                     M 	dc.b	$ee,$7f
00014148 06                       M 	dc.b	$06
00014149                          M 	shift
00014149                          M 	pelimusa_fm34_volume2	48
00014149                          M 	ssvol	$04
00014149 EE04                     M 	dc.b	$ee,$04
0001414B 06                       M 	dc.b	$06
0001414C                          M 	shift
0001414C                          M 	pelimusa_fm34_volume2	8
0001414C                          M 	ssvol	$7f
0001414C EE7F                     M 	dc.b	$ee,$7f
0001414E 06                       M 	dc.b	$06
0001414F                          M 	shift
0001414F                            	sLoop		$01, $02, .loop
0001414F F701                     M 	dc.b	$f7,$01
00014151 FF2E                     M 	dc.w	.loop-*-1
00014153 02                       M 	dc.b	$02
00014154                            	sRet
00014154 F9                       M 	dc.b	$f9
00014155                            ; ===========================================================================
00014155                            ; ---------------------------------------------------------------------------
00014155                            ; FM4: Jousi + Melodia
00014155                            ; ---------------------------------------------------------------------------
00014155                            
00014155                            Pelimusa_FM4:
00014155                            	sCall		Pelimusa_Delay2
00014155 F8                       M 	dc.b	$f8
00014156 FDAC                     M 	dc.w	pelimusa_delay2-*-1
00014158                            
00014158                            .loop	sCall		Pelimusa_FM4_Pattern8
00014158 F8                       M 	dc.b	$f8
00014159 0000                     M 	dc.w	pelimusa_fm4_pattern8-*-1
0001415B                            	sCall		.jousi
0001415B F8                       M 	dc.b	$f8
0001415C 0000                     M 	dc.w	.jousi-*-1
0001415E                            	sCall		Pelimusa_FM4_Pattern8
0001415E F8                       M 	dc.b	$f8
0001415F 0000                     M 	dc.w	pelimusa_fm4_pattern8-*-1
00014161                            	sCall		Pelimusa_Delay2
00014161 F8                       M 	dc.b	$f8
00014162 FDA0                     M 	dc.w	pelimusa_delay2-*-1
00014164                            	sCall		.jousi
00014164 F8                       M 	dc.b	$f8
00014165 0000                     M 	dc.w	.jousi-*-1
00014167                            	sCall		Pelimusa_FM4_Pattern8
00014167 F8                       M 	dc.b	$f8
00014168 0000                     M 	dc.w	pelimusa_fm4_pattern8-*-1
0001416A                            	sCall		.jousi
0001416A F8                       M 	dc.b	$f8
0001416B 0000                     M 	dc.w	.jousi-*-1
0001416D                            	sJump		.loop
0001416D F6                       M 	dc.b	$f6
0001416E FFE9                     M 	dc.w	.loop-*-1
00014170                            
00014170                            .jousi	ssVol		$17
00014170 EE17                     M 	dc.b	$ee,$17
00014172                            	sVoice		pJousi
00014172 E804                     M 	dc.b	$e8,pjousi
00014174                            	ssMod68k	$04, $01, $04, $03
00014174 F004 0104 03             M 	dc.b	$f0,$04,$01,$04,$03
00014179                            
00014179 BA60                       .jousi2	dc.b nA4, $60
0001417B B130 B8                    	dc.b nC4, $30, nG4
0001417E BA60 B8                    	dc.b nA4, $60, nG4
00014181                            	sLoop		$00, $02, .jousi2
00014181 F700                     M 	dc.b	$f7,$00
00014183 FFF5                     M 	dc.w	.jousi2-*-1
00014185 02                       M 	dc.b	$02
00014186                            	sModOff
00014186 EC                       M 	dc.b	$ec
00014187                            	sRet
00014187 F9                       M 	dc.b	$f9
00014188                            ; ---------------------------------------------------------------------------
00014188                            
00014188                            Pelimusa_FM4_Pattern8:
00014188                            	sVoice		pMelodia
00014188 E805                     M 	dc.b	$e8,pmelodia
0001418A                            	ssMod68k	$02, $01, -$03, $08
0001418A F002 01FD 08             M 	dc.b	$f0,$02,$01,-$03,$08
0001418F                            
0001418F 8006                       .loop	dc.b nRst, $06
00014191                            	Pelimusa_FM34_Volume nA4, 32, 4, 16, 4, 24, 4, 16, 4
00014191                          M 	pelimusa_fm34_volume2	32
00014191                          M 	ssvol	$08
00014191 EE08                     M 	dc.b	$ee,$08
00014193 BA06                     M 	dc.b	na4,$06
00014195                          M 	shift
00014195                          M 	rept	narg-2
00014195                          M 	pelimusa_fm34_volume2	4
00014195                          M 	ssvol	$7f
00014195 EE7F                     M 	dc.b	$ee,$7f
00014197 06                       M 	dc.b	$06
00014198                          M 	shift
00014198                          M 	pelimusa_fm34_volume2	16
00014198                          M 	ssvol	$0c
00014198 EE0C                     M 	dc.b	$ee,$0c
0001419A 06                       M 	dc.b	$06
0001419B                          M 	shift
0001419B                          M 	pelimusa_fm34_volume2	4
0001419B                          M 	ssvol	$7f
0001419B EE7F                     M 	dc.b	$ee,$7f
0001419D 06                       M 	dc.b	$06
0001419E                          M 	shift
0001419E                          M 	pelimusa_fm34_volume2	24
0001419E                          M 	ssvol	$0a
0001419E EE0A                     M 	dc.b	$ee,$0a
000141A0 06                       M 	dc.b	$06
000141A1                          M 	shift
000141A1                          M 	pelimusa_fm34_volume2	4
000141A1                          M 	ssvol	$7f
000141A1 EE7F                     M 	dc.b	$ee,$7f
000141A3 06                       M 	dc.b	$06
000141A4                          M 	shift
000141A4                          M 	pelimusa_fm34_volume2	16
000141A4                          M 	ssvol	$0c
000141A4 EE0C                     M 	dc.b	$ee,$0c
000141A6 06                       M 	dc.b	$06
000141A7                          M 	shift
000141A7                          M 	pelimusa_fm34_volume2	4
000141A7                          M 	ssvol	$7f
000141A7 EE7F                     M 	dc.b	$ee,$7f
000141A9 06                       M 	dc.b	$06
000141AA                          M 	shift
000141AA                            	Pelimusa_FM34_Volume nF4, 24, 4, 16, 4
000141AA                          M 	pelimusa_fm34_volume2	24
000141AA                          M 	ssvol	$0a
000141AA EE0A                     M 	dc.b	$ee,$0a
000141AC B606                     M 	dc.b	nf4,$06
000141AE                          M 	shift
000141AE                          M 	rept	narg-2
000141AE                          M 	pelimusa_fm34_volume2	4
000141AE                          M 	ssvol	$7f
000141AE EE7F                     M 	dc.b	$ee,$7f
000141B0 06                       M 	dc.b	$06
000141B1                          M 	shift
000141B1                          M 	pelimusa_fm34_volume2	16
000141B1                          M 	ssvol	$0c
000141B1 EE0C                     M 	dc.b	$ee,$0c
000141B3 06                       M 	dc.b	$06
000141B4                          M 	shift
000141B4                          M 	pelimusa_fm34_volume2	4
000141B4                          M 	ssvol	$7f
000141B4 EE7F                     M 	dc.b	$ee,$7f
000141B6 06                       M 	dc.b	$06
000141B7                          M 	shift
000141B7                            	Pelimusa_FM34_Volume nA4, 24, 4
000141B7                          M 	pelimusa_fm34_volume2	24
000141B7                          M 	ssvol	$0a
000141B7 EE0A                     M 	dc.b	$ee,$0a
000141B9 BA06                     M 	dc.b	na4,$06
000141BB                          M 	shift
000141BB                          M 	rept	narg-2
000141BB                          M 	pelimusa_fm34_volume2	4
000141BB                          M 	ssvol	$7f
000141BB EE7F                     M 	dc.b	$ee,$7f
000141BD 06                       M 	dc.b	$06
000141BE                          M 	shift
000141BE                            	Pelimusa_FM34_Volume nF4, 24, 4
000141BE                          M 	pelimusa_fm34_volume2	24
000141BE                          M 	ssvol	$0a
000141BE EE0A                     M 	dc.b	$ee,$0a
000141C0 B606                     M 	dc.b	nf4,$06
000141C2                          M 	shift
000141C2                          M 	rept	narg-2
000141C2                          M 	pelimusa_fm34_volume2	4
000141C2                          M 	ssvol	$7f
000141C2 EE7F                     M 	dc.b	$ee,$7f
000141C4 06                       M 	dc.b	$06
000141C5                          M 	shift
000141C5                            	Pelimusa_FM34_Volume nC5, 32, 4, 16, 4, 16, 4
000141C5                          M 	pelimusa_fm34_volume2	32
000141C5                          M 	ssvol	$08
000141C5 EE08                     M 	dc.b	$ee,$08
000141C7 BD06                     M 	dc.b	nc5,$06
000141C9                          M 	shift
000141C9                          M 	rept	narg-2
000141C9                          M 	pelimusa_fm34_volume2	4
000141C9                          M 	ssvol	$7f
000141C9 EE7F                     M 	dc.b	$ee,$7f
000141CB 06                       M 	dc.b	$06
000141CC                          M 	shift
000141CC                          M 	pelimusa_fm34_volume2	16
000141CC                          M 	ssvol	$0c
000141CC EE0C                     M 	dc.b	$ee,$0c
000141CE 06                       M 	dc.b	$06
000141CF                          M 	shift
000141CF                          M 	pelimusa_fm34_volume2	4
000141CF                          M 	ssvol	$7f
000141CF EE7F                     M 	dc.b	$ee,$7f
000141D1 06                       M 	dc.b	$06
000141D2                          M 	shift
000141D2                          M 	pelimusa_fm34_volume2	16
000141D2                          M 	ssvol	$0c
000141D2 EE0C                     M 	dc.b	$ee,$0c
000141D4 06                       M 	dc.b	$06
000141D5                          M 	shift
000141D5                          M 	pelimusa_fm34_volume2	4
000141D5                          M 	ssvol	$7f
000141D5 EE7F                     M 	dc.b	$ee,$7f
000141D7 06                       M 	dc.b	$06
000141D8                          M 	shift
000141D8                            	Pelimusa_FM34_Volume nB4, 24, 4, 16, 4, 16, 4
000141D8                          M 	pelimusa_fm34_volume2	24
000141D8                          M 	ssvol	$0a
000141D8 EE0A                     M 	dc.b	$ee,$0a
000141DA BC06                     M 	dc.b	nb4,$06
000141DC                          M 	shift
000141DC                          M 	rept	narg-2
000141DC                          M 	pelimusa_fm34_volume2	4
000141DC                          M 	ssvol	$7f
000141DC EE7F                     M 	dc.b	$ee,$7f
000141DE 06                       M 	dc.b	$06
000141DF                          M 	shift
000141DF                          M 	pelimusa_fm34_volume2	16
000141DF                          M 	ssvol	$0c
000141DF EE0C                     M 	dc.b	$ee,$0c
000141E1 06                       M 	dc.b	$06
000141E2                          M 	shift
000141E2                          M 	pelimusa_fm34_volume2	4
000141E2                          M 	ssvol	$7f
000141E2 EE7F                     M 	dc.b	$ee,$7f
000141E4 06                       M 	dc.b	$06
000141E5                          M 	shift
000141E5                          M 	pelimusa_fm34_volume2	16
000141E5                          M 	ssvol	$0c
000141E5 EE0C                     M 	dc.b	$ee,$0c
000141E7 06                       M 	dc.b	$06
000141E8                          M 	shift
000141E8                          M 	pelimusa_fm34_volume2	4
000141E8                          M 	ssvol	$7f
000141E8 EE7F                     M 	dc.b	$ee,$7f
000141EA 06                       M 	dc.b	$06
000141EB                          M 	shift
000141EB                            	Pelimusa_FM34_Volume nC5, 24, 4
000141EB                          M 	pelimusa_fm34_volume2	24
000141EB                          M 	ssvol	$0a
000141EB EE0A                     M 	dc.b	$ee,$0a
000141ED BD06                     M 	dc.b	nc5,$06
000141EF                          M 	shift
000141EF                          M 	rept	narg-2
000141EF                          M 	pelimusa_fm34_volume2	4
000141EF                          M 	ssvol	$7f
000141EF EE7F                     M 	dc.b	$ee,$7f
000141F1 06                       M 	dc.b	$06
000141F2                          M 	shift
000141F2                            	Pelimusa_FM34_Volume nB4, 24, 4
000141F2                          M 	pelimusa_fm34_volume2	24
000141F2                          M 	ssvol	$0a
000141F2 EE0A                     M 	dc.b	$ee,$0a
000141F4 BC06                     M 	dc.b	nb4,$06
000141F6                          M 	shift
000141F6                          M 	rept	narg-2
000141F6                          M 	pelimusa_fm34_volume2	4
000141F6                          M 	ssvol	$7f
000141F6 EE7F                     M 	dc.b	$ee,$7f
000141F8 06                       M 	dc.b	$06
000141F9                          M 	shift
000141F9                            	Pelimusa_FM34_Volume nA4, 24, 4, 24, 4, 24, 4, 24, 4
000141F9                          M 	pelimusa_fm34_volume2	24
000141F9                          M 	ssvol	$0a
000141F9 EE0A                     M 	dc.b	$ee,$0a
000141FB BA06                     M 	dc.b	na4,$06
000141FD                          M 	shift
000141FD                          M 	rept	narg-2
000141FD                          M 	pelimusa_fm34_volume2	4
000141FD                          M 	ssvol	$7f
000141FD EE7F                     M 	dc.b	$ee,$7f
000141FF 06                       M 	dc.b	$06
00014200                          M 	shift
00014200                          M 	pelimusa_fm34_volume2	24
00014200                          M 	ssvol	$0a
00014200 EE0A                     M 	dc.b	$ee,$0a
00014202 06                       M 	dc.b	$06
00014203                          M 	shift
00014203                          M 	pelimusa_fm34_volume2	4
00014203                          M 	ssvol	$7f
00014203 EE7F                     M 	dc.b	$ee,$7f
00014205 06                       M 	dc.b	$06
00014206                          M 	shift
00014206                          M 	pelimusa_fm34_volume2	24
00014206                          M 	ssvol	$0a
00014206 EE0A                     M 	dc.b	$ee,$0a
00014208 06                       M 	dc.b	$06
00014209                          M 	shift
00014209                          M 	pelimusa_fm34_volume2	4
00014209                          M 	ssvol	$7f
00014209 EE7F                     M 	dc.b	$ee,$7f
0001420B 06                       M 	dc.b	$06
0001420C                          M 	shift
0001420C                          M 	pelimusa_fm34_volume2	24
0001420C                          M 	ssvol	$0a
0001420C EE0A                     M 	dc.b	$ee,$0a
0001420E 06                       M 	dc.b	$06
0001420F                          M 	shift
0001420F                          M 	pelimusa_fm34_volume2	4
0001420F                          M 	ssvol	$7f
0001420F EE7F                     M 	dc.b	$ee,$7f
00014211 06                       M 	dc.b	$06
00014212                          M 	shift
00014212                            	Pelimusa_FM34_Volume nF4, 24, 4, 24, 4
00014212                          M 	pelimusa_fm34_volume2	24
00014212                          M 	ssvol	$0a
00014212 EE0A                     M 	dc.b	$ee,$0a
00014214 B606                     M 	dc.b	nf4,$06
00014216                          M 	shift
00014216                          M 	rept	narg-2
00014216                          M 	pelimusa_fm34_volume2	4
00014216                          M 	ssvol	$7f
00014216 EE7F                     M 	dc.b	$ee,$7f
00014218 06                       M 	dc.b	$06
00014219                          M 	shift
00014219                          M 	pelimusa_fm34_volume2	24
00014219                          M 	ssvol	$0a
00014219 EE0A                     M 	dc.b	$ee,$0a
0001421B 06                       M 	dc.b	$06
0001421C                          M 	shift
0001421C                          M 	pelimusa_fm34_volume2	4
0001421C                          M 	ssvol	$7f
0001421C EE7F                     M 	dc.b	$ee,$7f
0001421E 06                       M 	dc.b	$06
0001421F                          M 	shift
0001421F                            	Pelimusa_FM34_Volume nA4, 24, 4
0001421F                          M 	pelimusa_fm34_volume2	24
0001421F                          M 	ssvol	$0a
0001421F EE0A                     M 	dc.b	$ee,$0a
00014221 BA06                     M 	dc.b	na4,$06
00014223                          M 	shift
00014223                          M 	rept	narg-2
00014223                          M 	pelimusa_fm34_volume2	4
00014223                          M 	ssvol	$7f
00014223 EE7F                     M 	dc.b	$ee,$7f
00014225 06                       M 	dc.b	$06
00014226                          M 	shift
00014226                            	Pelimusa_FM34_Volume nF4, 24, 4
00014226                          M 	pelimusa_fm34_volume2	24
00014226                          M 	ssvol	$0a
00014226 EE0A                     M 	dc.b	$ee,$0a
00014228 B606                     M 	dc.b	nf4,$06
0001422A                          M 	shift
0001422A                          M 	rept	narg-2
0001422A                          M 	pelimusa_fm34_volume2	4
0001422A                          M 	ssvol	$7f
0001422A EE7F                     M 	dc.b	$ee,$7f
0001422C 06                       M 	dc.b	$06
0001422D                          M 	shift
0001422D                            	Pelimusa_FM34_Volume nG4, 24, 4, 24, 4, 24, 4
0001422D                          M 	pelimusa_fm34_volume2	24
0001422D                          M 	ssvol	$0a
0001422D EE0A                     M 	dc.b	$ee,$0a
0001422F B806                     M 	dc.b	ng4,$06
00014231                          M 	shift
00014231                          M 	rept	narg-2
00014231                          M 	pelimusa_fm34_volume2	4
00014231                          M 	ssvol	$7f
00014231 EE7F                     M 	dc.b	$ee,$7f
00014233 06                       M 	dc.b	$06
00014234                          M 	shift
00014234                          M 	pelimusa_fm34_volume2	24
00014234                          M 	ssvol	$0a
00014234 EE0A                     M 	dc.b	$ee,$0a
00014236 06                       M 	dc.b	$06
00014237                          M 	shift
00014237                          M 	pelimusa_fm34_volume2	4
00014237                          M 	ssvol	$7f
00014237 EE7F                     M 	dc.b	$ee,$7f
00014239 06                       M 	dc.b	$06
0001423A                          M 	shift
0001423A                          M 	pelimusa_fm34_volume2	24
0001423A                          M 	ssvol	$0a
0001423A EE0A                     M 	dc.b	$ee,$0a
0001423C 06                       M 	dc.b	$06
0001423D                          M 	shift
0001423D                          M 	pelimusa_fm34_volume2	4
0001423D                          M 	ssvol	$7f
0001423D EE7F                     M 	dc.b	$ee,$7f
0001423F 06                       M 	dc.b	$06
00014240                          M 	shift
00014240                            	Pelimusa_FM34_Volume nB4, 24, 4, 24, 4, 24, 4
00014240                          M 	pelimusa_fm34_volume2	24
00014240                          M 	ssvol	$0a
00014240 EE0A                     M 	dc.b	$ee,$0a
00014242 BC06                     M 	dc.b	nb4,$06
00014244                          M 	shift
00014244                          M 	rept	narg-2
00014244                          M 	pelimusa_fm34_volume2	4
00014244                          M 	ssvol	$7f
00014244 EE7F                     M 	dc.b	$ee,$7f
00014246 06                       M 	dc.b	$06
00014247                          M 	shift
00014247                          M 	pelimusa_fm34_volume2	24
00014247                          M 	ssvol	$0a
00014247 EE0A                     M 	dc.b	$ee,$0a
00014249 06                       M 	dc.b	$06
0001424A                          M 	shift
0001424A                          M 	pelimusa_fm34_volume2	4
0001424A                          M 	ssvol	$7f
0001424A EE7F                     M 	dc.b	$ee,$7f
0001424C 06                       M 	dc.b	$06
0001424D                          M 	shift
0001424D                          M 	pelimusa_fm34_volume2	24
0001424D                          M 	ssvol	$0a
0001424D EE0A                     M 	dc.b	$ee,$0a
0001424F 06                       M 	dc.b	$06
00014250                          M 	shift
00014250                          M 	pelimusa_fm34_volume2	4
00014250                          M 	ssvol	$7f
00014250 EE7F                     M 	dc.b	$ee,$7f
00014252 06                       M 	dc.b	$06
00014253                          M 	shift
00014253                            	Pelimusa_FM34_Volume nC5, 24, 4, 24
00014253                          M 	pelimusa_fm34_volume2	24
00014253                          M 	ssvol	$0a
00014253 EE0A                     M 	dc.b	$ee,$0a
00014255 BD06                     M 	dc.b	nc5,$06
00014257                          M 	shift
00014257                          M 	rept	narg-2
00014257                          M 	pelimusa_fm34_volume2	4
00014257                          M 	ssvol	$7f
00014257 EE7F                     M 	dc.b	$ee,$7f
00014259 06                       M 	dc.b	$06
0001425A                          M 	shift
0001425A                          M 	pelimusa_fm34_volume2	24
0001425A                          M 	ssvol	$0a
0001425A EE0A                     M 	dc.b	$ee,$0a
0001425C 06                       M 	dc.b	$06
0001425D                          M 	shift
0001425D                            	sLoop		$01, $02, .loop
0001425D F701                     M 	dc.b	$f7,$01
0001425F FF2F                     M 	dc.w	.loop-*-1
00014261 02                       M 	dc.b	$02
00014262                            	sRet
00014262 F9                       M 	dc.b	$f9
00014263                            ; ===========================================================================
00014263                            ; ---------------------------------------------------------------------------
00014263                            ; FM5: Jousi
00014263                            ; ---------------------------------------------------------------------------
00014263                            
00014263                            Pelimusa_FM5:
00014263                            	sCall		Pelimusa_Delay2
00014263 F8                       M 	dc.b	$f8
00014264 FC9E                     M 	dc.w	pelimusa_delay2-*-1
00014266                            	sVoice		pJousi
00014266 E804                     M 	dc.b	$e8,pjousi
00014268                            
00014268                            .loop	sCall		Pelimusa_Delay2
00014268 F8                       M 	dc.b	$f8
00014269 FC99                     M 	dc.w	pelimusa_delay2-*-1
0001426B                            	sCall		.jousi
0001426B F8                       M 	dc.b	$f8
0001426C 0000                     M 	dc.w	.jousi-*-1
0001426E                            	sCall		Pelimusa_Delay4
0001426E F8                       M 	dc.b	$f8
0001426F FC90                     M 	dc.w	pelimusa_delay4-*-1
00014271                            	sCall		.jousi
00014271 F8                       M 	dc.b	$f8
00014272 0000                     M 	dc.w	.jousi-*-1
00014274                            	sCall		Pelimusa_Delay2
00014274 F8                       M 	dc.b	$f8
00014275 FC8D                     M 	dc.w	pelimusa_delay2-*-1
00014277                            	sCall		.jousi
00014277 F8                       M 	dc.b	$f8
00014278 0000                     M 	dc.w	.jousi-*-1
0001427A                            	sJump		.loop
0001427A F6                       M 	dc.b	$f6
0001427B FFEC                     M 	dc.w	.loop-*-1
0001427D                            ; ---------------------------------------------------------------------------
0001427D                            
0001427D                            .jousi	ssMod68k	$03, $01, $03, $02
0001427D F003 0103 02             M 	dc.b	$f0,$03,$01,$03,$02
00014282 BD60                       .jousi2	dc.b nC5, $60
00014284 B530 BC                    	dc.b nE4, $30, nB4
00014287 BD60 BC                    	dc.b nC5, $60, nB4
0001428A                            	sLoop		$00, $02, .jousi2
0001428A F700                     M 	dc.b	$f7,$00
0001428C FFF5                     M 	dc.w	.jousi2-*-1
0001428E 02                       M 	dc.b	$02
0001428F                            	sModOff
0001428F EC                       M 	dc.b	$ec
00014290                            	sRet
00014290 F9                       M 	dc.b	$f9
00014291                            ; ===========================================================================
00014291                            ; ---------------------------------------------------------------------------
00014291                            ; PSG1: Kurzweil K2000
00014291                            ; ---------------------------------------------------------------------------
00014291                            
00014291                            Pelimusa_PSG1:
00014291 8001                       	dc.b nRst, $01
00014293                            ; ===========================================================================
00014293                            ; ---------------------------------------------------------------------------
00014293                            ; PSG2: Kurzweil K2000
00014293                            ; ---------------------------------------------------------------------------
00014293                            
00014293                            Pelimusa_PSG2:
00014293                            	; pattern 5 and 6
00014293 800C                       	dc.b nRst, $0C
00014295 C118 1818 1818 180C 0C06+  	dc.b nE5, $18, $18, $18, $18, $18, $18, $0C, $0C, $06, $06
000142A0                            	sLoop		$01, $04, Pelimusa_PSG2
000142A0 F701                     M 	dc.b	$f7,$01
000142A2 FFF0                     M 	dc.w	pelimusa_psg2-*-1
000142A4 04                       M 	dc.b	$04
000142A5                            
000142A5                            	; pattern 7 and 8
000142A5                            .loop	sCall		.main
000142A5 F8                       M 	dc.b	$f8
000142A6 0000                     M 	dc.w	.main-*-1
000142A8                            	sCall		.alt
000142A8 F8                       M 	dc.b	$f8
000142A9 0000                     M 	dc.w	.alt-*-1
000142AB                            	sCall		.main
000142AB F8                       M 	dc.b	$f8
000142AC 0000                     M 	dc.w	.main-*-1
000142AE                            	sJump		.loop
000142AE F6                       M 	dc.b	$f6
000142AF FFF5                     M 	dc.w	.loop-*-1
000142B1                            
000142B1 800C                       .main	dc.b nRst, $0C
000142B3 C118 1806 1218 1818 0C12+  	dc.b nE5, $18, $18, $06, $12, $18, $18, $18, $0C, $12, $06
000142BE                            	sLoop		$01, $0C, .main
000142BE F701                     M 	dc.b	$f7,$01
000142C0 FFF0                     M 	dc.w	.main-*-1
000142C2 0C                       M 	dc.b	$0c
000142C3                            	sRet
000142C3 F9                       M 	dc.b	$f9
000142C4                            
000142C4 18                         .alt	dc.b $18
000142C5                            	sLoop		$01, $20, .alt
000142C5 F701                     M 	dc.b	$f7,$01
000142C7 FFFC                     M 	dc.w	.alt-*-1
000142C9 20                       M 	dc.b	$20
000142CA                            	sRet
000142CA F9                       M 	dc.b	$f9
000142CB                            ; ===========================================================================
000142CB                            ; ---------------------------------------------------------------------------
000142CB                            ; PSG3: Kurzweil K2000 + 3HIHeAT.117
000142CB                            ; ---------------------------------------------------------------------------
000142CB                            
000142CB =FFFFFFFF                  Pelimusa_PSG3_State =	-1
000142CB                            Pelimusa_PSG3_Hat	macro	len
000142CB                            	if Pelimusa_PSG3_State<>0
000142CB                            		sNoisePSG	$E7
000142CB                            		ssVol		$00
000142CB                            
000142CB                            Pelimusa_PSG3_State = 0
000142CB                            	endif
000142CB                            
000142CB                            	dc.b nA5
000142CB                            	rept narg
000142CB                            		dc.b \len
000142CB                            	shift
000142CB                            	endr
000142CB                                endm
000142CB                            
000142CB                            Pelimusa_PSG3_Bell	macro	len
000142CB                            	if Pelimusa_PSG3_State<>1
000142CB                            		sNoisePSG	$00
000142CB                            		ssVol		$06
000142CB                            
000142CB                            Pelimusa_PSG3_State = 1
000142CB                            	endif
000142CB                            
000142CB                            	dc.b nC5
000142CB                            	rept narg
000142CB                            		dc.b  \len
000142CB                            	shift
000142CB                            	endr
000142CB                                endm
000142CB                            ; ---------------------------------------------------------------------------
000142CB                            
000142CB                            Pelimusa_PSG3:
000142CB                            	sVoice		vCol3_02
000142CB E811                     M 	dc.b	$e8,vcol3_02
000142CD                            	; pattern 5 and 6
000142CD                            	Pelimusa_PSG3_Hat	$0C
000142CD                          M 	snoisepsg	$e7
000142CD F3E7                     M 	dc.b	$f3,$e7
000142CF                          M 	ssvol	$00
000142CF EE00                     M 	dc.b	$ee,$00
000142D1 =00000000                M pelimusa_psg3_state	=	0
000142D1 C6                       M 	dc.b	na5
000142D2                          M 	rept	narg
000142D2 0C                       M 	dc.b	$0c
000142D3                          M 	shift
000142D3                            	Pelimusa_PSG3_Bell
000142D3                          M 	snoisepsg	$00
000142D3 F300                     M 	dc.b	$f3,$00
000142D5                          M 	ssvol	$06
000142D5 EE06                     M 	dc.b	$ee,$06
000142D7 =00000001                M pelimusa_psg3_state	=	1
000142D7 BD                       M 	dc.b	nc5
000142D8                          M 	rept	narg
000142D8                            	Pelimusa_PSG3_Hat	$06, $06
000142D8                          M 	snoisepsg	$e7
000142D8 F3E7                     M 	dc.b	$f3,$e7
000142DA                          M 	ssvol	$00
000142DA EE00                     M 	dc.b	$ee,$00
000142DC =00000000                M pelimusa_psg3_state	=	0
000142DC C6                       M 	dc.b	na5
000142DD                          M 	rept	narg
000142DD 06                       M 	dc.b	$06
000142DE                          M 	shift
000142DE 06                       M 	dc.b	$06
000142DF                          M 	shift
000142DF                            	Pelimusa_PSG3_Bell	$0C
000142DF                          M 	snoisepsg	$00
000142DF F300                     M 	dc.b	$f3,$00
000142E1                          M 	ssvol	$06
000142E1 EE06                     M 	dc.b	$ee,$06
000142E3 =00000001                M pelimusa_psg3_state	=	1
000142E3 BD                       M 	dc.b	nc5
000142E4                          M 	rept	narg
000142E4 0C                       M 	dc.b	$0c
000142E5                          M 	shift
000142E5                            	Pelimusa_PSG3_Hat
000142E5                          M 	snoisepsg	$e7
000142E5 F3E7                     M 	dc.b	$f3,$e7
000142E7                          M 	ssvol	$00
000142E7 EE00                     M 	dc.b	$ee,$00
000142E9 =00000000                M pelimusa_psg3_state	=	0
000142E9 C6                       M 	dc.b	na5
000142EA                          M 	rept	narg
000142EA                            	Pelimusa_PSG3_Bell	$06
000142EA                          M 	snoisepsg	$00
000142EA F300                     M 	dc.b	$f3,$00
000142EC                          M 	ssvol	$06
000142EC EE06                     M 	dc.b	$ee,$06
000142EE =00000001                M pelimusa_psg3_state	=	1
000142EE BD                       M 	dc.b	nc5
000142EF                          M 	rept	narg
000142EF 06                       M 	dc.b	$06
000142F0                          M 	shift
000142F0                            	Pelimusa_PSG3_Hat	$0C, $06
000142F0                          M 	snoisepsg	$e7
000142F0 F3E7                     M 	dc.b	$f3,$e7
000142F2                          M 	ssvol	$00
000142F2 EE00                     M 	dc.b	$ee,$00
000142F4 =00000000                M pelimusa_psg3_state	=	0
000142F4 C6                       M 	dc.b	na5
000142F5                          M 	rept	narg
000142F5 0C                       M 	dc.b	$0c
000142F6                          M 	shift
000142F6 06                       M 	dc.b	$06
000142F7                          M 	shift
000142F7                            	Pelimusa_PSG3_Bell	$0C
000142F7                          M 	snoisepsg	$00
000142F7 F300                     M 	dc.b	$f3,$00
000142F9                          M 	ssvol	$06
000142F9 EE06                     M 	dc.b	$ee,$06
000142FB =00000001                M pelimusa_psg3_state	=	1
000142FB BD                       M 	dc.b	nc5
000142FC                          M 	rept	narg
000142FC 0C                       M 	dc.b	$0c
000142FD                          M 	shift
000142FD                            	Pelimusa_PSG3_Hat
000142FD                          M 	snoisepsg	$e7
000142FD F3E7                     M 	dc.b	$f3,$e7
000142FF                          M 	ssvol	$00
000142FF EE00                     M 	dc.b	$ee,$00
00014301 =00000000                M pelimusa_psg3_state	=	0
00014301 C6                       M 	dc.b	na5
00014302                          M 	rept	narg
00014302                            	Pelimusa_PSG3_Bell
00014302                          M 	snoisepsg	$00
00014302 F300                     M 	dc.b	$f3,$00
00014304                          M 	ssvol	$06
00014304 EE06                     M 	dc.b	$ee,$06
00014306 =00000001                M pelimusa_psg3_state	=	1
00014306 BD                       M 	dc.b	nc5
00014307                          M 	rept	narg
00014307                            	Pelimusa_PSG3_Hat	$06, $06
00014307                          M 	snoisepsg	$e7
00014307 F3E7                     M 	dc.b	$f3,$e7
00014309                          M 	ssvol	$00
00014309 EE00                     M 	dc.b	$ee,$00
0001430B =00000000                M pelimusa_psg3_state	=	0
0001430B C6                       M 	dc.b	na5
0001430C                          M 	rept	narg
0001430C 06                       M 	dc.b	$06
0001430D                          M 	shift
0001430D 06                       M 	dc.b	$06
0001430E                          M 	shift
0001430E                            	Pelimusa_PSG3_Bell	$0C
0001430E                          M 	snoisepsg	$00
0001430E F300                     M 	dc.b	$f3,$00
00014310                          M 	ssvol	$06
00014310 EE06                     M 	dc.b	$ee,$06
00014312 =00000001                M pelimusa_psg3_state	=	1
00014312 BD                       M 	dc.b	nc5
00014313                          M 	rept	narg
00014313 0C                       M 	dc.b	$0c
00014314                          M 	shift
00014314                            	Pelimusa_PSG3_Hat
00014314                          M 	snoisepsg	$e7
00014314 F3E7                     M 	dc.b	$f3,$e7
00014316                          M 	ssvol	$00
00014316 EE00                     M 	dc.b	$ee,$00
00014318 =00000000                M pelimusa_psg3_state	=	0
00014318 C6                       M 	dc.b	na5
00014319                          M 	rept	narg
00014319                            	Pelimusa_PSG3_Bell	$0C, $0C, $06, $06
00014319                          M 	snoisepsg	$00
00014319 F300                     M 	dc.b	$f3,$00
0001431B                          M 	ssvol	$06
0001431B EE06                     M 	dc.b	$ee,$06
0001431D =00000001                M pelimusa_psg3_state	=	1
0001431D BD                       M 	dc.b	nc5
0001431E                          M 	rept	narg
0001431E 0C                       M 	dc.b	$0c
0001431F                          M 	shift
0001431F 0C                       M 	dc.b	$0c
00014320                          M 	shift
00014320 06                       M 	dc.b	$06
00014321                          M 	shift
00014321 06                       M 	dc.b	$06
00014322                          M 	shift
00014322                            	sLoop		$01, $04, Pelimusa_PSG3
00014322 F701                     M 	dc.b	$f7,$01
00014324 FFA6                     M 	dc.w	pelimusa_psg3-*-1
00014326 04                       M 	dc.b	$04
00014327                            
00014327                            	; pattern 7 and 8
00014327                            .loop	sCall		Pelimusa_PSG3_Main
00014327 F8                       M 	dc.b	$f8
00014328 0000                     M 	dc.w	pelimusa_psg3_main-*-1
0001432A                            	sCall		Pelimusa_PSG3_Alt
0001432A F8                       M 	dc.b	$f8
0001432B 0000                     M 	dc.w	pelimusa_psg3_alt-*-1
0001432D                            	sCall		Pelimusa_PSG3_Main
0001432D F8                       M 	dc.b	$f8
0001432E 0000                     M 	dc.w	pelimusa_psg3_main-*-1
00014330                            	sJump		.loop
00014330 F6                       M 	dc.b	$f6
00014331 FFF5                     M 	dc.w	.loop-*-1
00014333                            ; ---------------------------------------------------------------------------
00014333                            
00014333                            Pelimusa_PSG3_Main:
00014333                            	Pelimusa_PSG3_Hat	$0C
00014333                          M 	snoisepsg	$e7
00014333 F3E7                     M 	dc.b	$f3,$e7
00014335                          M 	ssvol	$00
00014335 EE00                     M 	dc.b	$ee,$00
00014337 =00000000                M pelimusa_psg3_state	=	0
00014337 C6                       M 	dc.b	na5
00014338                          M 	rept	narg
00014338 0C                       M 	dc.b	$0c
00014339                          M 	shift
00014339                            	Pelimusa_PSG3_Bell
00014339                          M 	snoisepsg	$00
00014339 F300                     M 	dc.b	$f3,$00
0001433B                          M 	ssvol	$06
0001433B EE06                     M 	dc.b	$ee,$06
0001433D =00000001                M pelimusa_psg3_state	=	1
0001433D BD                       M 	dc.b	nc5
0001433E                          M 	rept	narg
0001433E                            	Pelimusa_PSG3_Hat
0001433E                          M 	snoisepsg	$e7
0001433E F3E7                     M 	dc.b	$f3,$e7
00014340                          M 	ssvol	$00
00014340 EE00                     M 	dc.b	$ee,$00
00014342 =00000000                M pelimusa_psg3_state	=	0
00014342 C6                       M 	dc.b	na5
00014343                          M 	rept	narg
00014343                            	Pelimusa_PSG3_Bell
00014343                          M 	snoisepsg	$00
00014343 F300                     M 	dc.b	$f3,$00
00014345                          M 	ssvol	$06
00014345 EE06                     M 	dc.b	$ee,$06
00014347 =00000001                M pelimusa_psg3_state	=	1
00014347 BD                       M 	dc.b	nc5
00014348                          M 	rept	narg
00014348                            	Pelimusa_PSG3_Hat
00014348                          M 	snoisepsg	$e7
00014348 F3E7                     M 	dc.b	$f3,$e7
0001434A                          M 	ssvol	$00
0001434A EE00                     M 	dc.b	$ee,$00
0001434C =00000000                M pelimusa_psg3_state	=	0
0001434C C6                       M 	dc.b	na5
0001434D                          M 	rept	narg
0001434D                            	Pelimusa_PSG3_Bell	$06, $06
0001434D                          M 	snoisepsg	$00
0001434D F300                     M 	dc.b	$f3,$00
0001434F                          M 	ssvol	$06
0001434F EE06                     M 	dc.b	$ee,$06
00014351 =00000001                M pelimusa_psg3_state	=	1
00014351 BD                       M 	dc.b	nc5
00014352                          M 	rept	narg
00014352 06                       M 	dc.b	$06
00014353                          M 	shift
00014353 06                       M 	dc.b	$06
00014354                          M 	shift
00014354                            	Pelimusa_PSG3_Hat	$0C
00014354                          M 	snoisepsg	$e7
00014354 F3E7                     M 	dc.b	$f3,$e7
00014356                          M 	ssvol	$00
00014356 EE00                     M 	dc.b	$ee,$00
00014358 =00000000                M pelimusa_psg3_state	=	0
00014358 C6                       M 	dc.b	na5
00014359                          M 	rept	narg
00014359 0C                       M 	dc.b	$0c
0001435A                          M 	shift
0001435A                            	Pelimusa_PSG3_Bell
0001435A                          M 	snoisepsg	$00
0001435A F300                     M 	dc.b	$f3,$00
0001435C                          M 	ssvol	$06
0001435C EE06                     M 	dc.b	$ee,$06
0001435E =00000001                M pelimusa_psg3_state	=	1
0001435E BD                       M 	dc.b	nc5
0001435F                          M 	rept	narg
0001435F                            	Pelimusa_PSG3_Hat
0001435F                          M 	snoisepsg	$e7
0001435F F3E7                     M 	dc.b	$f3,$e7
00014361                          M 	ssvol	$00
00014361 EE00                     M 	dc.b	$ee,$00
00014363 =00000000                M pelimusa_psg3_state	=	0
00014363 C6                       M 	dc.b	na5
00014364                          M 	rept	narg
00014364                            	Pelimusa_PSG3_Bell
00014364                          M 	snoisepsg	$00
00014364 F300                     M 	dc.b	$f3,$00
00014366                          M 	ssvol	$06
00014366 EE06                     M 	dc.b	$ee,$06
00014368 =00000001                M pelimusa_psg3_state	=	1
00014368 BD                       M 	dc.b	nc5
00014369                          M 	rept	narg
00014369                            	Pelimusa_PSG3_Hat
00014369                          M 	snoisepsg	$e7
00014369 F3E7                     M 	dc.b	$f3,$e7
0001436B                          M 	ssvol	$00
0001436B EE00                     M 	dc.b	$ee,$00
0001436D =00000000                M pelimusa_psg3_state	=	0
0001436D C6                       M 	dc.b	na5
0001436E                          M 	rept	narg
0001436E                            	Pelimusa_PSG3_Bell
0001436E                          M 	snoisepsg	$00
0001436E F300                     M 	dc.b	$f3,$00
00014370                          M 	ssvol	$06
00014370 EE06                     M 	dc.b	$ee,$06
00014372 =00000001                M pelimusa_psg3_state	=	1
00014372 BD                       M 	dc.b	nc5
00014373                          M 	rept	narg
00014373                            	Pelimusa_PSG3_Hat
00014373                          M 	snoisepsg	$e7
00014373 F3E7                     M 	dc.b	$f3,$e7
00014375                          M 	ssvol	$00
00014375 EE00                     M 	dc.b	$ee,$00
00014377 =00000000                M pelimusa_psg3_state	=	0
00014377 C6                       M 	dc.b	na5
00014378                          M 	rept	narg
00014378                            	Pelimusa_PSG3_Bell
00014378                          M 	snoisepsg	$00
00014378 F300                     M 	dc.b	$f3,$00
0001437A                          M 	ssvol	$06
0001437A EE06                     M 	dc.b	$ee,$06
0001437C =00000001                M pelimusa_psg3_state	=	1
0001437C BD                       M 	dc.b	nc5
0001437D                          M 	rept	narg
0001437D                            	Pelimusa_PSG3_Bell
0001437D BD                       M 	dc.b	nc5
0001437E                          M 	rept	narg
0001437E                            	Pelimusa_PSG3_Hat	$06
0001437E                          M 	snoisepsg	$e7
0001437E F3E7                     M 	dc.b	$f3,$e7
00014380                          M 	ssvol	$00
00014380 EE00                     M 	dc.b	$ee,$00
00014382 =00000000                M pelimusa_psg3_state	=	0
00014382 C6                       M 	dc.b	na5
00014383                          M 	rept	narg
00014383 06                       M 	dc.b	$06
00014384                          M 	shift
00014384                            	Pelimusa_PSG3_Bell
00014384                          M 	snoisepsg	$00
00014384 F300                     M 	dc.b	$f3,$00
00014386                          M 	ssvol	$06
00014386 EE06                     M 	dc.b	$ee,$06
00014388 =00000001                M pelimusa_psg3_state	=	1
00014388 BD                       M 	dc.b	nc5
00014389                          M 	rept	narg
00014389                            	sLoop		$01, $0C, Pelimusa_PSG3_Main
00014389 F701                     M 	dc.b	$f7,$01
0001438B FFA7                     M 	dc.w	pelimusa_psg3_main-*-1
0001438D 0C                       M 	dc.b	$0c
0001438E                            	sRet
0001438E F9                       M 	dc.b	$f9
0001438F                            ; ---------------------------------------------------------------------------
0001438F                            
0001438F                            Pelimusa_PSG3_Alt:
0001438F                            	Pelimusa_PSG3_Bell	$18, $18, $18, $0C
0001438F BD                       M 	dc.b	nc5
00014390                          M 	rept	narg
00014390 18                       M 	dc.b	$18
00014391                          M 	shift
00014391 18                       M 	dc.b	$18
00014392                          M 	shift
00014392 18                       M 	dc.b	$18
00014393                          M 	shift
00014393 0C                       M 	dc.b	$0c
00014394                          M 	shift
00014394                            	Pelimusa_PSG3_Hat
00014394                          M 	snoisepsg	$e7
00014394 F3E7                     M 	dc.b	$f3,$e7
00014396                          M 	ssvol	$00
00014396 EE00                     M 	dc.b	$ee,$00
00014398 =00000000                M pelimusa_psg3_state	=	0
00014398 C6                       M 	dc.b	na5
00014399                          M 	rept	narg
00014399                            	Pelimusa_PSG3_Bell	$18, $18, $18, $18
00014399                          M 	snoisepsg	$00
00014399 F300                     M 	dc.b	$f3,$00
0001439B                          M 	ssvol	$06
0001439B EE06                     M 	dc.b	$ee,$06
0001439D =00000001                M pelimusa_psg3_state	=	1
0001439D BD                       M 	dc.b	nc5
0001439E                          M 	rept	narg
0001439E 18                       M 	dc.b	$18
0001439F                          M 	shift
0001439F 18                       M 	dc.b	$18
000143A0                          M 	shift
000143A0 18                       M 	dc.b	$18
000143A1                          M 	shift
000143A1 18                       M 	dc.b	$18
000143A2                          M 	shift
000143A2                            	sLoop		$01, $04, Pelimusa_PSG3_Alt
000143A2 F701                     M 	dc.b	$f7,$01
000143A4 FFEA                     M 	dc.w	pelimusa_psg3_alt-*-1
000143A6 04                       M 	dc.b	$04
000143A7                            	sRet
000143A7 F9                       M 	dc.b	$f9
000143A8 =0000000B                M a	=	a+1
000143A8                          M 	even
000143A8                          M b	equs	dmusb
000143A8                          M _mus_mysticcave
000143A8                          M dmusab	include	"driver/music/mysticcave.asm"
000143A8                            MysticCave_Header:
000143A8                            	sHeaderInit						; Z80 offset is $1380
000143A8 =000143A8                M spointzero	=	*
000143A8 =00000000                M spatnum	=	0
000143A8                            	sHeaderTempo	$01, $4A
000143A8 004A                     M 	dc.b	$01-1,$4a
000143AA                            	sHeaderCh	$05, $03
000143AA 04                       M 	dc.b	$05-1
000143AB 02                       M 	dc.b	$03-1
000143AC                            	sHeaderDAC	MysticCave_DAC1, $08
000143AC 0000                     M 	dc.w	mysticcave_dac1-spointzero
000143AE 08                       M 	dc.b	$08
000143AF 00                       M 	dc.b	$00
000143B0                            	sHeaderDAC	MysticCave_DAC2, $00, dMeow
000143B0 0000                     M 	dc.w	mysticcave_dac2-spointzero
000143B2 00                       M 	dc.b	$00
000143B3 98                       M 	dc.b	dmeow
000143B4                            	sHeaderFM	MysticCave_FM1, $00, $0C
000143B4 0000                     M 	dc.w	mysticcave_fm1-spointzero
000143B6 000C                     M 	dc.b	$00,$0c
000143B8                            	sHeaderFM	MysticCave_FM2, $00, $0A
000143B8 0000                     M 	dc.w	mysticcave_fm2-spointzero
000143BA 000A                     M 	dc.b	$00,$0a
000143BC                            	sHeaderFM	MysticCave_FM3, $00, $0C
000143BC 0000                     M 	dc.w	mysticcave_fm3-spointzero
000143BE 000C                     M 	dc.b	$00,$0c
000143C0                            	sHeaderFM	MysticCave_FM4, $00, $10
000143C0 0000                     M 	dc.w	mysticcave_fm4-spointzero
000143C2 0010                     M 	dc.b	$00,$10
000143C4                            	sHeaderFM	MysticCave_FM5, $00, $10
000143C4 0000                     M 	dc.w	mysticcave_fm5-spointzero
000143C6 0010                     M 	dc.b	$00,$10
000143C8                            	sHeaderPSG	MysticCave_PSG1, $DC, $04, $00, vS2_0B
000143C8 0000                     M 	dc.w	mysticcave_psg1-spointzero
000143CA DC04 001C                M 	dc.b	$dc,$04,$00,vs2_0b
000143CE                            	sHeaderPSG	MysticCave_PSG2, $DC, $02, $00, vS2_01
000143CE 0000                     M 	dc.w	mysticcave_psg2-spointzero
000143D0 DC02 001B                M 	dc.b	$dc,$02,$00,vs2_01
000143D4                            	sHeaderPSG	MysticCave_PSG3, $00, $03, $00, vS2_02
000143D4 0000                     M 	dc.w	mysticcave_psg3-spointzero
000143D6 0003 001A                M 	dc.b	$00,$03,$00,vs2_02
000143DA                            
000143DA                            	; Patch $00
000143DA                            	; $04
000143DA                            	; $35, $54, $72, $46,	$1F, $1F, $1F, $1F
000143DA                            	; $07, $07, $0A, $0D,	$00, $00, $0B, $0B
000143DA                            	; $1F, $1F, $0F, $0F,	$23, $1D, $14, $80
000143DA                            	spAlgorithm	$04
000143DA =00000001                M spatnum	=	spatnum+1
000143DA =00000004                M spal	=	val
000143DA                            	spFeedback	$00
000143DA =00000000                M spfe	=	val
000143DA                            	spDetune	$03, $05, $07, $04
000143DA =00000003                M spde1	=	op1
000143DA =00000005                M spde2	=	op2
000143DA =00000007                M spde3	=	op3
000143DA =00000004                M spde4	=	op4
000143DA                            	spMultiple	$05, $04, $02, $06
000143DA =00000005                M spmu1	=	op1
000143DA =00000004                M spmu2	=	op2
000143DA =00000002                M spmu3	=	op3
000143DA =00000006                M spmu4	=	op4
000143DA                            	spRateScale	$00, $00, $00, $00
000143DA =00000000                M sprs1	=	op1
000143DA =00000000                M sprs2	=	op2
000143DA =00000000                M sprs3	=	op3
000143DA =00000000                M sprs4	=	op4
000143DA                            	spAttackRt	$1F, $1F, $1F, $1F
000143DA =0000001F                M spar1	=	op1
000143DA =0000001F                M spar2	=	op2
000143DA =0000001F                M spar3	=	op3
000143DA =0000001F                M spar4	=	op4
000143DA                            	spAmpMod	$00, $00, $00, $00
000143DA =00000000                M spam1	=	op1
000143DA =00000000                M spam2	=	op2
000143DA =00000000                M spam3	=	op3
000143DA =00000000                M spam4	=	op4
000143DA                            	spSustainRt	$07, $07, $0A, $0D
000143DA =00000007                M spsr1	=	op1
000143DA =00000007                M spsr2	=	op2
000143DA =0000000A                M spsr3	=	op3
000143DA =0000000D                M spsr4	=	op4
000143DA                            	spDecayRt	$00, $00, $0B, $0B
000143DA =00000000                M spdr1	=	op1
000143DA =00000000                M spdr2	=	op2
000143DA =0000000B                M spdr3	=	op3
000143DA =0000000B                M spdr4	=	op4
000143DA                            	spSustainLv	$01, $01, $00, $00
000143DA =00000001                M spsl1	=	op1
000143DA =00000001                M spsl2	=	op2
000143DA =00000000                M spsl3	=	op3
000143DA =00000000                M spsl4	=	op4
000143DA                            	spReleaseRt	$0F, $0F, $0F, $0F
000143DA =0000000F                M sprr1	=	op1
000143DA =0000000F                M sprr2	=	op2
000143DA =0000000F                M sprr3	=	op3
000143DA =0000000F                M sprr4	=	op4
000143DA                            	spTotalLv	$23, $1D, $14, $00
000143DA =00000023                M sptl1	=	op1
000143DA =0000001D                M sptl2	=	op2
000143DA =00000014                M sptl3	=	op3
000143DA =00000000                M sptl4	=	op4
000143DA 04                       M 	dc.b	(spfe<<3)+spal
000143DB =00000080                M sptlmask4	set	$80
000143DB =00000000                M sptlmask2	set	((spal>=5)<<7)
000143DB =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
000143DB =00000000                M sptlmask1	set	((spal=7)<<7)
000143DB 3572 5446                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
000143DF 1F1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
000143E3 070A 070D                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
000143E7 000B 000B                M 	dc.b	spdr1,spdr3,spdr2,spdr4
000143EB 1F0F 1F0F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
000143EF 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
000143F3 2394 1D80                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
000143F7 4E41 54                  M 	dc.b	'NAT'
000143FA                            
000143FA                            	; Patch $01
000143FA                            	; $3A
000143FA                            	; $01, $01, $01, $02,	$8D, $07, $07, $52
000143FA                            	; $09, $00, $00, $03,	$01, $02, $02, $00
000143FA                            	; $5F, $0F, $0F, $2F,	$18, $18, $22, $80
000143FA                            	spAlgorithm	$02
000143FA =00000002                M spatnum	=	spatnum+1
000143FA =00000002                M spal	=	val
000143FA                            	spFeedback	$07
000143FA =00000007                M spfe	=	val
000143FA                            	spDetune	$00, $00, $00, $00
000143FA =00000000                M spde1	=	op1
000143FA =00000000                M spde2	=	op2
000143FA =00000000                M spde3	=	op3
000143FA =00000000                M spde4	=	op4
000143FA                            	spMultiple	$01, $01, $01, $02
000143FA =00000001                M spmu1	=	op1
000143FA =00000001                M spmu2	=	op2
000143FA =00000001                M spmu3	=	op3
000143FA =00000002                M spmu4	=	op4
000143FA                            	spRateScale	$02, $00, $00, $01
000143FA =00000002                M sprs1	=	op1
000143FA =00000000                M sprs2	=	op2
000143FA =00000000                M sprs3	=	op3
000143FA =00000001                M sprs4	=	op4
000143FA                            	spAttackRt	$0D, $07, $07, $12
000143FA =0000000D                M spar1	=	op1
000143FA =00000007                M spar2	=	op2
000143FA =00000007                M spar3	=	op3
000143FA =00000012                M spar4	=	op4
000143FA                            	spAmpMod	$00, $00, $00, $00
000143FA =00000000                M spam1	=	op1
000143FA =00000000                M spam2	=	op2
000143FA =00000000                M spam3	=	op3
000143FA =00000000                M spam4	=	op4
000143FA                            	spSustainRt	$09, $00, $00, $03
000143FA =00000009                M spsr1	=	op1
000143FA =00000000                M spsr2	=	op2
000143FA =00000000                M spsr3	=	op3
000143FA =00000003                M spsr4	=	op4
000143FA                            	spDecayRt	$01, $02, $02, $00
000143FA =00000001                M spdr1	=	op1
000143FA =00000002                M spdr2	=	op2
000143FA =00000002                M spdr3	=	op3
000143FA =00000000                M spdr4	=	op4
000143FA                            	spSustainLv	$05, $00, $00, $02
000143FA =00000005                M spsl1	=	op1
000143FA =00000000                M spsl2	=	op2
000143FA =00000000                M spsl3	=	op3
000143FA =00000002                M spsl4	=	op4
000143FA                            	spReleaseRt	$0F, $0F, $0F, $0F
000143FA =0000000F                M sprr1	=	op1
000143FA =0000000F                M sprr2	=	op2
000143FA =0000000F                M sprr3	=	op3
000143FA =0000000F                M sprr4	=	op4
000143FA                            	spTotalLv	$18, $18, $22, $00
000143FA =00000018                M sptl1	=	op1
000143FA =00000018                M sptl2	=	op2
000143FA =00000022                M sptl3	=	op3
000143FA =00000000                M sptl4	=	op4
000143FA 3A                       M 	dc.b	(spfe<<3)+spal
000143FB =00000080                M sptlmask4	set	$80
000143FB =00000000                M sptlmask2	set	((spal>=5)<<7)
000143FB =00000000                M sptlmask3	set	((spal>=4)<<7)
000143FB =00000000                M sptlmask1	set	((spal=7)<<7)
000143FB 0101 0102                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
000143FF 8D07 0752                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00014403 0900 0003                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00014407 0102 0200                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001440B 5F0F 0F2F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001440F 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00014413 1822 1880                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00014417 4E41 54                  M 	dc.b	'NAT'
0001441A                            
0001441A                            	; Patch $02
0001441A                            	; $3C
0001441A                            	; $42, $32, $41, $41,	$12, $12, $12, $12
0001441A                            	; $00, $00, $00, $00,	$00, $00, $00, $00
0001441A                            	; $06, $06, $08, $08,	$24, $24, $08, $08
0001441A                            	spAlgorithm	$04
0001441A =00000003                M spatnum	=	spatnum+1
0001441A =00000004                M spal	=	val
0001441A                            	spFeedback	$07
0001441A =00000007                M spfe	=	val
0001441A                            	spDetune	$04, $03, $04, $04
0001441A =00000004                M spde1	=	op1
0001441A =00000003                M spde2	=	op2
0001441A =00000004                M spde3	=	op3
0001441A =00000004                M spde4	=	op4
0001441A                            	spMultiple	$02, $02, $01, $01
0001441A =00000002                M spmu1	=	op1
0001441A =00000002                M spmu2	=	op2
0001441A =00000001                M spmu3	=	op3
0001441A =00000001                M spmu4	=	op4
0001441A                            	spRateScale	$00, $00, $00, $00
0001441A =00000000                M sprs1	=	op1
0001441A =00000000                M sprs2	=	op2
0001441A =00000000                M sprs3	=	op3
0001441A =00000000                M sprs4	=	op4
0001441A                            	spAttackRt	$12, $12, $12, $12
0001441A =00000012                M spar1	=	op1
0001441A =00000012                M spar2	=	op2
0001441A =00000012                M spar3	=	op3
0001441A =00000012                M spar4	=	op4
0001441A                            	spAmpMod	$00, $00, $00, $00
0001441A =00000000                M spam1	=	op1
0001441A =00000000                M spam2	=	op2
0001441A =00000000                M spam3	=	op3
0001441A =00000000                M spam4	=	op4
0001441A                            	spSustainRt	$00, $00, $00, $00
0001441A =00000000                M spsr1	=	op1
0001441A =00000000                M spsr2	=	op2
0001441A =00000000                M spsr3	=	op3
0001441A =00000000                M spsr4	=	op4
0001441A                            	spDecayRt	$00, $00, $00, $00
0001441A =00000000                M spdr1	=	op1
0001441A =00000000                M spdr2	=	op2
0001441A =00000000                M spdr3	=	op3
0001441A =00000000                M spdr4	=	op4
0001441A                            	spSustainLv	$00, $00, $00, $00
0001441A =00000000                M spsl1	=	op1
0001441A =00000000                M spsl2	=	op2
0001441A =00000000                M spsl3	=	op3
0001441A =00000000                M spsl4	=	op4
0001441A                            	spReleaseRt	$06, $06, $08, $08
0001441A =00000006                M sprr1	=	op1
0001441A =00000006                M sprr2	=	op2
0001441A =00000008                M sprr3	=	op3
0001441A =00000008                M sprr4	=	op4
0001441A                            	spTotalLv	$24, $24, $08, $08
0001441A =00000024                M sptl1	=	op1
0001441A =00000024                M sptl2	=	op2
0001441A =00000008                M sptl3	=	op3
0001441A =00000008                M sptl4	=	op4
0001441A 3C                       M 	dc.b	(spfe<<3)+spal
0001441B =00000080                M sptlmask4	set	$80
0001441B =00000000                M sptlmask2	set	((spal>=5)<<7)
0001441B =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
0001441B =00000000                M sptlmask1	set	((spal=7)<<7)
0001441B 4241 3241                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001441F 1212 1212                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00014423 0000 0000                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00014427 0000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001442B 0608 0608                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001442F 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00014433 2488 2488                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00014437 4E41 54                  M 	dc.b	'NAT'
0001443A                            
0001443A                            	; Patch $03
0001443A                            	; $3C
0001443A                            	; $51, $11, $51, $11,	$12, $11, $14, $0F
0001443A                            	; $0A, $05, $05, $05,	$00, $00, $00, $00
0001443A                            	; $A6, $56, $1A, $1A,	$13, $0D, $00, $00
0001443A                            	spAlgorithm	$04
0001443A =00000004                M spatnum	=	spatnum+1
0001443A =00000004                M spal	=	val
0001443A                            	spFeedback	$07
0001443A =00000007                M spfe	=	val
0001443A                            	spDetune	$05, $01, $05, $01
0001443A =00000005                M spde1	=	op1
0001443A =00000001                M spde2	=	op2
0001443A =00000005                M spde3	=	op3
0001443A =00000001                M spde4	=	op4
0001443A                            	spMultiple	$01, $01, $01, $01
0001443A =00000001                M spmu1	=	op1
0001443A =00000001                M spmu2	=	op2
0001443A =00000001                M spmu3	=	op3
0001443A =00000001                M spmu4	=	op4
0001443A                            	spRateScale	$00, $00, $00, $00
0001443A =00000000                M sprs1	=	op1
0001443A =00000000                M sprs2	=	op2
0001443A =00000000                M sprs3	=	op3
0001443A =00000000                M sprs4	=	op4
0001443A                            	spAttackRt	$12, $11, $14, $0F
0001443A =00000012                M spar1	=	op1
0001443A =00000011                M spar2	=	op2
0001443A =00000014                M spar3	=	op3
0001443A =0000000F                M spar4	=	op4
0001443A                            	spAmpMod	$00, $00, $00, $00
0001443A =00000000                M spam1	=	op1
0001443A =00000000                M spam2	=	op2
0001443A =00000000                M spam3	=	op3
0001443A =00000000                M spam4	=	op4
0001443A                            	spSustainRt	$0A, $05, $05, $05
0001443A =0000000A                M spsr1	=	op1
0001443A =00000005                M spsr2	=	op2
0001443A =00000005                M spsr3	=	op3
0001443A =00000005                M spsr4	=	op4
0001443A                            	spDecayRt	$00, $00, $00, $00
0001443A =00000000                M spdr1	=	op1
0001443A =00000000                M spdr2	=	op2
0001443A =00000000                M spdr3	=	op3
0001443A =00000000                M spdr4	=	op4
0001443A                            	spSustainLv	$0A, $05, $01, $01
0001443A =0000000A                M spsl1	=	op1
0001443A =00000005                M spsl2	=	op2
0001443A =00000001                M spsl3	=	op3
0001443A =00000001                M spsl4	=	op4
0001443A                            	spReleaseRt	$06, $06, $0A, $0A
0001443A =00000006                M sprr1	=	op1
0001443A =00000006                M sprr2	=	op2
0001443A =0000000A                M sprr3	=	op3
0001443A =0000000A                M sprr4	=	op4
0001443A                            	spTotalLv	$13, $0D, $00, $00
0001443A =00000013                M sptl1	=	op1
0001443A =0000000D                M sptl2	=	op2
0001443A =00000000                M sptl3	=	op3
0001443A =00000000                M sptl4	=	op4
0001443A 3C                       M 	dc.b	(spfe<<3)+spal
0001443B =00000080                M sptlmask4	set	$80
0001443B =00000000                M sptlmask2	set	((spal>=5)<<7)
0001443B =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
0001443B =00000000                M sptlmask1	set	((spal=7)<<7)
0001443B 5151 1111                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001443F 1214 110F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00014443 0A05 0505                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00014447 0000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001444B A61A 561A                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001444F 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00014453 1380 0D80                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00014457 4E41 54                  M 	dc.b	'NAT'
0001445A                            
0001445A                            	; Patch $04
0001445A                            	; $24
0001445A                            	; $70, $30, $74, $38,	$12, $1F, $1F, $1F
0001445A                            	; $05, $05, $03, $03,	$05, $05, $03, $03
0001445A                            	; $36, $26, $2C, $2C,	$0A, $06, $08, $08
0001445A                            	spAlgorithm	$04
0001445A =00000005                M spatnum	=	spatnum+1
0001445A =00000004                M spal	=	val
0001445A                            	spFeedback	$04
0001445A =00000004                M spfe	=	val
0001445A                            	spDetune	$07, $03, $07, $03
0001445A =00000007                M spde1	=	op1
0001445A =00000003                M spde2	=	op2
0001445A =00000007                M spde3	=	op3
0001445A =00000003                M spde4	=	op4
0001445A                            	spMultiple	$00, $00, $04, $08
0001445A =00000000                M spmu1	=	op1
0001445A =00000000                M spmu2	=	op2
0001445A =00000004                M spmu3	=	op3
0001445A =00000008                M spmu4	=	op4
0001445A                            	spRateScale	$00, $00, $00, $00
0001445A =00000000                M sprs1	=	op1
0001445A =00000000                M sprs2	=	op2
0001445A =00000000                M sprs3	=	op3
0001445A =00000000                M sprs4	=	op4
0001445A                            	spAttackRt	$12, $1F, $1F, $1F
0001445A =00000012                M spar1	=	op1
0001445A =0000001F                M spar2	=	op2
0001445A =0000001F                M spar3	=	op3
0001445A =0000001F                M spar4	=	op4
0001445A                            	spAmpMod	$00, $00, $00, $00
0001445A =00000000                M spam1	=	op1
0001445A =00000000                M spam2	=	op2
0001445A =00000000                M spam3	=	op3
0001445A =00000000                M spam4	=	op4
0001445A                            	spSustainRt	$05, $05, $03, $03
0001445A =00000005                M spsr1	=	op1
0001445A =00000005                M spsr2	=	op2
0001445A =00000003                M spsr3	=	op3
0001445A =00000003                M spsr4	=	op4
0001445A                            	spDecayRt	$05, $05, $03, $03
0001445A =00000005                M spdr1	=	op1
0001445A =00000005                M spdr2	=	op2
0001445A =00000003                M spdr3	=	op3
0001445A =00000003                M spdr4	=	op4
0001445A                            	spSustainLv	$03, $02, $02, $02
0001445A =00000003                M spsl1	=	op1
0001445A =00000002                M spsl2	=	op2
0001445A =00000002                M spsl3	=	op3
0001445A =00000002                M spsl4	=	op4
0001445A                            	spReleaseRt	$06, $06, $0C, $0C
0001445A =00000006                M sprr1	=	op1
0001445A =00000006                M sprr2	=	op2
0001445A =0000000C                M sprr3	=	op3
0001445A =0000000C                M sprr4	=	op4
0001445A                            	spTotalLv	$0A, $06, $08, $08
0001445A =0000000A                M sptl1	=	op1
0001445A =00000006                M sptl2	=	op2
0001445A =00000008                M sptl3	=	op3
0001445A =00000008                M sptl4	=	op4
0001445A 24                       M 	dc.b	(spfe<<3)+spal
0001445B =00000080                M sptlmask4	set	$80
0001445B =00000000                M sptlmask2	set	((spal>=5)<<7)
0001445B =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
0001445B =00000000                M sptlmask1	set	((spal=7)<<7)
0001445B 7074 3038                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001445F 121F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00014463 0503 0503                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00014467 0503 0503                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001446B 362C 262C                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001446F 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00014473 0A88 0688                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00014477 4E41 54                  M 	dc.b	'NAT'
0001447A                            
0001447A                            	; Patch $05
0001447A                            	; $31
0001447A                            	; $34, $30, $35, $31,	$DF, $9F, $DF, $9F
0001447A                            	; $0C, $0C, $07, $09,	$07, $07, $07, $08
0001447A                            	; $2F, $1F, $1F, $2F,	$17, $14, $32, $80
0001447A                            	spAlgorithm	$01
0001447A =00000006                M spatnum	=	spatnum+1
0001447A =00000001                M spal	=	val
0001447A                            	spFeedback	$06
0001447A =00000006                M spfe	=	val
0001447A                            	spDetune	$03, $03, $03, $03
0001447A =00000003                M spde1	=	op1
0001447A =00000003                M spde2	=	op2
0001447A =00000003                M spde3	=	op3
0001447A =00000003                M spde4	=	op4
0001447A                            	spMultiple	$04, $00, $05, $01
0001447A =00000004                M spmu1	=	op1
0001447A =00000000                M spmu2	=	op2
0001447A =00000005                M spmu3	=	op3
0001447A =00000001                M spmu4	=	op4
0001447A                            	spRateScale	$03, $02, $03, $02
0001447A =00000003                M sprs1	=	op1
0001447A =00000002                M sprs2	=	op2
0001447A =00000003                M sprs3	=	op3
0001447A =00000002                M sprs4	=	op4
0001447A                            	spAttackRt	$1F, $1F, $1F, $1F
0001447A =0000001F                M spar1	=	op1
0001447A =0000001F                M spar2	=	op2
0001447A =0000001F                M spar3	=	op3
0001447A =0000001F                M spar4	=	op4
0001447A                            	spAmpMod	$00, $00, $00, $00
0001447A =00000000                M spam1	=	op1
0001447A =00000000                M spam2	=	op2
0001447A =00000000                M spam3	=	op3
0001447A =00000000                M spam4	=	op4
0001447A                            	spSustainRt	$0C, $0C, $07, $09
0001447A =0000000C                M spsr1	=	op1
0001447A =0000000C                M spsr2	=	op2
0001447A =00000007                M spsr3	=	op3
0001447A =00000009                M spsr4	=	op4
0001447A                            	spDecayRt	$07, $07, $07, $08
0001447A =00000007                M spdr1	=	op1
0001447A =00000007                M spdr2	=	op2
0001447A =00000007                M spdr3	=	op3
0001447A =00000008                M spdr4	=	op4
0001447A                            	spSustainLv	$02, $01, $01, $02
0001447A =00000002                M spsl1	=	op1
0001447A =00000001                M spsl2	=	op2
0001447A =00000001                M spsl3	=	op3
0001447A =00000002                M spsl4	=	op4
0001447A                            	spReleaseRt	$0F, $0F, $0F, $0F
0001447A =0000000F                M sprr1	=	op1
0001447A =0000000F                M sprr2	=	op2
0001447A =0000000F                M sprr3	=	op3
0001447A =0000000F                M sprr4	=	op4
0001447A                            	spTotalLv	$17, $14, $32, $00
0001447A =00000017                M sptl1	=	op1
0001447A =00000014                M sptl2	=	op2
0001447A =00000032                M sptl3	=	op3
0001447A =00000000                M sptl4	=	op4
0001447A 31                       M 	dc.b	(spfe<<3)+spal
0001447B =00000080                M sptlmask4	set	$80
0001447B =00000000                M sptlmask2	set	((spal>=5)<<7)
0001447B =00000000                M sptlmask3	set	((spal>=4)<<7)
0001447B =00000000                M sptlmask1	set	((spal=7)<<7)
0001447B 3435 3031                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001447F DFDF 9F9F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00014483 0C07 0C09                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00014487 0707 0708                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001448B 2F1F 1F2F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001448F 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00014493 1732 1480                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00014497 4E41 54                  M 	dc.b	'NAT'
0001449A                            
0001449A                            	; Patch $06
0001449A                            	; $3D
0001449A                            	; $01, $01, $01, $01,	$10, $50, $50, $50
0001449A                            	; $07, $08, $08, $08,	$01, $00, $00, $00
0001449A                            	; $20, $1A, $1A, $1A,	$19, $84, $84, $84
0001449A                            	spAlgorithm	$05
0001449A =00000007                M spatnum	=	spatnum+1
0001449A =00000005                M spal	=	val
0001449A                            	spFeedback	$07
0001449A =00000007                M spfe	=	val
0001449A                            	spDetune	$00, $00, $00, $00
0001449A =00000000                M spde1	=	op1
0001449A =00000000                M spde2	=	op2
0001449A =00000000                M spde3	=	op3
0001449A =00000000                M spde4	=	op4
0001449A                            	spMultiple	$01, $01, $01, $01
0001449A =00000001                M spmu1	=	op1
0001449A =00000001                M spmu2	=	op2
0001449A =00000001                M spmu3	=	op3
0001449A =00000001                M spmu4	=	op4
0001449A                            	spRateScale	$00, $01, $01, $01
0001449A =00000000                M sprs1	=	op1
0001449A =00000001                M sprs2	=	op2
0001449A =00000001                M sprs3	=	op3
0001449A =00000001                M sprs4	=	op4
0001449A                            	spAttackRt	$10, $10, $10, $10
0001449A =00000010                M spar1	=	op1
0001449A =00000010                M spar2	=	op2
0001449A =00000010                M spar3	=	op3
0001449A =00000010                M spar4	=	op4
0001449A                            	spAmpMod	$00, $00, $00, $00
0001449A =00000000                M spam1	=	op1
0001449A =00000000                M spam2	=	op2
0001449A =00000000                M spam3	=	op3
0001449A =00000000                M spam4	=	op4
0001449A                            	spSustainRt	$07, $08, $08, $08
0001449A =00000007                M spsr1	=	op1
0001449A =00000008                M spsr2	=	op2
0001449A =00000008                M spsr3	=	op3
0001449A =00000008                M spsr4	=	op4
0001449A                            	spDecayRt	$01, $00, $00, $00
0001449A =00000001                M spdr1	=	op1
0001449A =00000000                M spdr2	=	op2
0001449A =00000000                M spdr3	=	op3
0001449A =00000000                M spdr4	=	op4
0001449A                            	spSustainLv	$02, $01, $01, $01
0001449A =00000002                M spsl1	=	op1
0001449A =00000001                M spsl2	=	op2
0001449A =00000001                M spsl3	=	op3
0001449A =00000001                M spsl4	=	op4
0001449A                            	spReleaseRt	$00, $0A, $0A, $0A
0001449A =00000000                M sprr1	=	op1
0001449A =0000000A                M sprr2	=	op2
0001449A =0000000A                M sprr3	=	op3
0001449A =0000000A                M sprr4	=	op4
0001449A                            	spTotalLv	$19, $04, $04, $04
0001449A =00000019                M sptl1	=	op1
0001449A =00000004                M sptl2	=	op2
0001449A =00000004                M sptl3	=	op3
0001449A =00000004                M sptl4	=	op4
0001449A 3D                       M 	dc.b	(spfe<<3)+spal
0001449B =00000080                M sptlmask4	set	$80
0001449B =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
0001449B =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
0001449B =00000000                M sptlmask1	set	((spal=7)<<7)
0001449B 0101 0101                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001449F 1050 5050                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
000144A3 0708 0808                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
000144A7 0100 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
000144AB 201A 1A1A                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
000144AF 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
000144B3 1984 8484                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
000144B7 4E41 54                  M 	dc.b	'NAT'
000144BA                            
000144BA                            MysticCave_Call5:
000144BA                            	sVoice		$04
000144BA E804                     M 	dc.b	$e8,$04
000144BC A214 A404 A504 8008        	dc.b nA2, $14, nB2, $04, nC3, $04, nRst, $08
000144C4 A904 8008 A804 8008        	dc.b nE3, $04, nRst, $08, nEb3, $04, nRst, $08
000144CC A904 8008 AC08 A910        	dc.b nE3, $04, nRst, $08, nG3, $08, nE3, $10
000144D4                            	sVoice		$03
000144D4 E803                     M 	dc.b	$e8,$03
000144D6                            	sRet
000144D6 F9                       M 	dc.b	$f9
000144D7                            
000144D7                            MysticCave_Call3:
000144D7                            	saTranspose	$FE
000144D7 E4FE                     M 	dc.b	$e4,$fe
000144D9 C604 E7C5 E7C6 04E7        	dc.b nA5, $04, sHold, nAb5, sHold, nA5, $04, sHold
000144E1 C5E7 C6E7 C5E7 C6E7        	dc.b nAb5, sHold, nA5, sHold, nAb5, sHold, nA5, sHold
000144E9 C5                         	dc.b nAb5
000144EA                            	saTranspose	$01
000144EA E401                     M 	dc.b	$e4,$01
000144EC E7C6 E7C5 E7C6 E7C5        	dc.b sHold, nA5, sHold, nAb5, sHold, nA5, sHold, nAb5
000144F4 E7C6 E7C5                  	dc.b sHold, nA5, sHold, nAb5
000144F8                            	saTranspose	$01
000144F8 E401                     M 	dc.b	$e4,$01
000144FA E7C6 E7C5 E7C6 E7C5        	dc.b sHold, nA5, sHold, nAb5, sHold, nA5, sHold, nAb5
00014502 E7C6 05E7 C5E7 C605        	dc.b sHold, nA5, $05, sHold, nAb5, sHold, nA5, $05
0001450A E7C5 8004                  	dc.b sHold, nAb5, nRst, $04
0001450E                            	sRet
0001450E F9                       M 	dc.b	$f9
0001450F                            
0001450F                            MysticCave_Call4:
0001450F                            	saTranspose	$FD
0001450F E4FD                     M 	dc.b	$e4,$fd
00014511 C604 E7C5 E7C6 E7C5        	dc.b nA5, $04, sHold, nAb5, sHold, nA5, sHold, nAb5
00014519 E7C6 E7C5 E7C6 E7C5        	dc.b sHold, nA5, sHold, nAb5, sHold, nA5, sHold, nAb5
00014521                            	saTranspose	$FF
00014521 E4FF                     M 	dc.b	$e4,$ff
00014523 E7C6 E7C5 E7C6 E7C5        	dc.b sHold, nA5, sHold, nAb5, sHold, nA5, sHold, nAb5
0001452B                            	saTranspose	$FF
0001452B E4FF                     M 	dc.b	$e4,$ff
0001452D E7C6 E7C5 E7C6 E7C5        	dc.b sHold, nA5, sHold, nAb5, sHold, nA5, sHold, nAb5
00014535 E7C6 E7C5                  	dc.b sHold, nA5, sHold, nAb5
00014539                            	saTranspose	$FF
00014539 E4FF                     M 	dc.b	$e4,$ff
0001453B E7C6 05E7 C5E7 C605        	dc.b sHold, nA5, $05, sHold, nAb5, sHold, nA5, $05
00014543 E7C5 8004                  	dc.b sHold, nAb5, nRst, $04
00014547                            	saTranspose	$06
00014547 E406                     M 	dc.b	$e4,$06
00014549                            	sRet
00014549 F9                       M 	dc.b	$f9
0001454A                            
0001454A                            MysticCave_FM5:
0001454A                            	sVoice		$01
0001454A E801                     M 	dc.b	$e8,$01
0001454C                            	sPan		spLeft, $00
0001454C E080                     M 	dc.b	$e0,spleft|$00
0001454E 8001                       	dc.b nRst, $01
00014550                            	sCall		MysticCave_Call5
00014550 F8                       M 	dc.b	$f8
00014551 FF68                     M 	dc.w	mysticcave_call5-*-1
00014553                            
00014553                            MysticCave_Jump3:
00014553 802F 801E                  	dc.b nRst, $2F, nRst, $1E
00014557                            	sVoice		$06
00014557 E806                     M 	dc.b	$e8,$06
00014559 A412 A506                  	dc.b nB2, $12, nC3, $06
0001455D                            	sVoice		$01
0001455D E801                     M 	dc.b	$e8,$01
0001455F 8030 8006 BD08 BC04        	dc.b nRst, $30, nRst, $06, nC5, $08, nB4, $04
00014567 BB08 BA04 B908 B804        	dc.b nBb4, $08, nA4, $04, nAb4, $08, nG4, $04
0001456F 8030 801E                  	dc.b nRst, $30, nRst, $1E
00014573                            	sVoice		$06
00014573 E806                     M 	dc.b	$e8,$06
00014575 A412 A506                  	dc.b nB2, $12, nC3, $06
00014579                            	sVoice		$01
00014579 E801                     M 	dc.b	$e8,$01
0001457B 8030 8006 BD08 BC04        	dc.b nRst, $30, nRst, $06, nC5, $08, nB4, $04
00014583 BB08 BA04 B908 B804        	dc.b nBb4, $08, nA4, $04, nAb4, $08, nG4, $04
0001458B 8030 801E                  	dc.b nRst, $30, nRst, $1E
0001458F                            	sVoice		$06
0001458F E806                     M 	dc.b	$e8,$06
00014591 A412 A506                  	dc.b nB2, $12, nC3, $06
00014595                            	sVoice		$01
00014595 E801                     M 	dc.b	$e8,$01
00014597 8030 8006 BD08 BC04        	dc.b nRst, $30, nRst, $06, nC5, $08, nB4, $04
0001459F BB08 BA04 B908 B804        	dc.b nBb4, $08, nA4, $04, nAb4, $08, nG4, $04
000145A7 8030 801E                  	dc.b nRst, $30, nRst, $1E
000145AB                            	sVoice		$06
000145AB E806                     M 	dc.b	$e8,$06
000145AD A412 A506                  	dc.b nB2, $12, nC3, $06
000145B1                            	sVoice		$01
000145B1 E801                     M 	dc.b	$e8,$01
000145B3 8030 8006 BD08 BC04        	dc.b nRst, $30, nRst, $06, nC5, $08, nB4, $04
000145BB BB08 BA04 B908 B804        	dc.b nBb4, $08, nA4, $04, nAb4, $08, nG4, $04
000145C3                            
000145C3                            MysticCave_Loop6:
000145C3 800C C106 8012 0680        	dc.b nRst, $0C, nE5, $06, nRst, $12, $06, nRst
000145CB 12C1 0680 0C               	dc.b $12, nE5, $06, nRst, $0C
000145D0                            	sVoice		$06
000145D0 E806                     M 	dc.b	$e8,$06
000145D2 A412 A506 80               	dc.b nB2, $12, nC3, $06, nRst
000145D7                            	sVoice		$01
000145D7 E801                     M 	dc.b	$e8,$01
000145D9 C106 8012 0680 12C1        	dc.b nE5, $06, nRst, $12, $06, nRst, $12, nE5
000145E1 08C0 04C1 08C0 04C1        	dc.b $08, nEb5, $04, nE5, $08, nEb5, $04, nE5
000145E9 0C                         	dc.b $0C
000145EA                            	sLoop		$00, $04, MysticCave_Loop6
000145EA F700                     M 	dc.b	$f7,$00
000145EC FFD6                     M 	dc.w	mysticcave_loop6-*-1
000145EE 04                       M 	dc.b	$04
000145EF 8001                       	dc.b nRst, $01
000145F1                            	sCall		MysticCave_Call5
000145F1 F8                       M 	dc.b	$f8
000145F2 FEC7                     M 	dc.w	mysticcave_call5-*-1
000145F4 800B AE08 B004 B108        	dc.b nRst, $0B, nA3, $08, nB3, $04, nC4, $08
000145FC B004 AE0C 08B0 04B1        	dc.b nB3, $04, nA3, $0C, $08, nB3, $04, nC4
00014604 08B0 04AE 0680 1280        	dc.b $08, nB3, $04, nA3, $06, nRst, $12, nRst
0001460C 01                         	dc.b $01
0001460D                            	sCall		MysticCave_Call5
0001460D F8                       M 	dc.b	$f8
0001460E FEAB                     M 	dc.w	mysticcave_call5-*-1
00014610 A20C 80A0 809E 809D        	dc.b nA2, $0C, nRst, nG2, nRst, nF2, nRst, nE2
00014618 80                         	dc.b nRst
00014619                            	sCall		MysticCave_Call5
00014619 F8                       M 	dc.b	$f8
0001461A FE9F                     M 	dc.w	mysticcave_call5-*-1
0001461C 800B B108 B304 B508        	dc.b nRst, $0B, nC4, $08, nD4, $04, nE4, $08
00014624 B304 B10C 08B3 04B5        	dc.b nD4, $04, nC4, $0C, $08, nD4, $04, nE4
0001462C 08B3 04B1 0680 1280        	dc.b $08, nD4, $04, nC4, $06, nRst, $12, nRst
00014634 01                         	dc.b $01
00014635                            	sCall		MysticCave_Call5
00014635 F8                       M 	dc.b	$f8
00014636 FE83                     M 	dc.w	mysticcave_call5-*-1
00014638 A20C A29D 08A0 0CA2        	dc.b nA2, $0C, nA2, nE2, $08, nG2, $0C, nA2
00014640 0680 2E                    	dc.b $06, nRst, $2E
00014643                            	sJump		MysticCave_Jump3
00014643 F6                       M 	dc.b	$f6
00014644 FF0E                     M 	dc.w	mysticcave_jump3-*-1
00014646                            
00014646                            MysticCave_Call1:
00014646 C301 E7C4 E7C5 E7C6        	dc.b nFs5, $01, sHold, nG5, sHold, nAb5, sHold, nA5
0001464E 2D                         	dc.b $2D
0001464F                            	sRet
0001464F F9                       M 	dc.b	$f9
00014650                            
00014650                            MysticCave_Call2:
00014650 E724 E7C5 01E7 C4E7        	dc.b sHold, $24, sHold, nAb5, $01, sHold, nG5, sHold
00014658 C3E7 C2E7 C1E7 C0E7        	dc.b nFs5, sHold, nF5, sHold, nE5, sHold, nEb5, sHold
00014660 BFE7 BEE7 BDE7 BCE7        	dc.b nD5, sHold, nCs5, sHold, nC5, sHold, nB4, sHold
00014668 BBE7 BA                    	dc.b nBb4, sHold, nA4
0001466B                            	sRet
0001466B F9                       M 	dc.b	$f9
0001466C                            
0001466C                            MysticCave_FM1:
0001466C                            	sVoice		$02
0001466C E802                     M 	dc.b	$e8,$02
0001466E                            	ssMod68k	$18, $01, $0A, $04
0001466E F018 010A 04             M 	dc.b	$f0,$18,$01,$0a,$04
00014673 8060                       	dc.b nRst, $60
00014675                            
00014675                            MysticCave_Jump1:
00014675                            	sCall		MysticCave_Call1
00014675 F8                       M 	dc.b	$f8
00014676 FFCF                     M 	dc.w	mysticcave_call1-*-1
00014678                            	saTranspose	$02
00014678 E402                     M 	dc.b	$e4,$02
0001467A                            	sCall		MysticCave_Call1
0001467A F8                       M 	dc.b	$f8
0001467B FFCA                     M 	dc.w	mysticcave_call1-*-1
0001467D                            	saTranspose	$01
0001467D E401                     M 	dc.b	$e4,$01
0001467F                            	sCall		MysticCave_Call1
0001467F F8                       M 	dc.b	$f8
00014680 FFC5                     M 	dc.w	mysticcave_call1-*-1
00014682                            	saTranspose	$FC
00014682 E4FC                     M 	dc.b	$e4,$fc
00014684                            	sCall		MysticCave_Call1
00014684 F8                       M 	dc.b	$f8
00014685 FFC0                     M 	dc.w	mysticcave_call1-*-1
00014687                            	saTranspose	$01
00014687 E401                     M 	dc.b	$e4,$01
00014689                            	sCall		MysticCave_Call1
00014689 F8                       M 	dc.b	$f8
0001468A FFBB                     M 	dc.w	mysticcave_call1-*-1
0001468C E760                       	dc.b sHold, $60
0001468E                            	sCall		MysticCave_Call2
0001468E F8                       M 	dc.b	$f8
0001468F FFC0                     M 	dc.w	mysticcave_call2-*-1
00014691                            	sCall		MysticCave_Call1
00014691 F8                       M 	dc.b	$f8
00014692 FFB3                     M 	dc.w	mysticcave_call1-*-1
00014694                            	saTranspose	$03
00014694 E403                     M 	dc.b	$e4,$03
00014696                            	sCall		MysticCave_Call1
00014696 F8                       M 	dc.b	$f8
00014697 FFAE                     M 	dc.w	mysticcave_call1-*-1
00014699                            	saTranspose	$FF
00014699 E4FF                     M 	dc.b	$e4,$ff
0001469B                            	sCall		MysticCave_Call1
0001469B F8                       M 	dc.b	$f8
0001469C FFA9                     M 	dc.w	mysticcave_call1-*-1
0001469E                            	saTranspose	$FF
0001469E E4FF                     M 	dc.b	$e4,$ff
000146A0                            	sCall		MysticCave_Call1
000146A0 F8                       M 	dc.b	$f8
000146A1 FFA4                     M 	dc.w	mysticcave_call1-*-1
000146A3                            	saTranspose	$FF
000146A3 E4FF                     M 	dc.b	$e4,$ff
000146A5                            	sCall		MysticCave_Call1
000146A5 F8                       M 	dc.b	$f8
000146A6 FF9F                     M 	dc.w	mysticcave_call1-*-1
000146A8 E754                       	dc.b sHold, $54
000146AA                            	sCall		MysticCave_Call2
000146AA F8                       M 	dc.b	$f8
000146AB FFA4                     M 	dc.w	mysticcave_call2-*-1
000146AD 800C                       	dc.b nRst, $0C
000146AF                            
000146AF                            MysticCave_Loop1:
000146AF 8030 80                    	dc.b nRst, $30, nRst
000146B2                            	sLoop		$00, $09, MysticCave_Loop1
000146B2 F700                     M 	dc.b	$f7,$00
000146B4 FFFA                     M 	dc.w	mysticcave_loop1-*-1
000146B6 09                       M 	dc.b	$09
000146B7                            	sCall		MysticCave_Call3
000146B7 F8                       M 	dc.b	$f8
000146B8 FE1E                     M 	dc.w	mysticcave_call3-*-1
000146BA 8030 80                    	dc.b nRst, $30, nRst
000146BD                            	saTranspose	$03
000146BD E403                     M 	dc.b	$e4,$03
000146BF                            	sCall		MysticCave_Call4
000146BF F8                       M 	dc.b	$f8
000146C0 FE4E                     M 	dc.w	mysticcave_call4-*-1
000146C2 8030 80                    	dc.b nRst, $30, nRst
000146C5                            	saTranspose	$FD
000146C5 E4FD                     M 	dc.b	$e4,$fd
000146C7                            	sCall		MysticCave_Call3
000146C7 F8                       M 	dc.b	$f8
000146C8 FE0E                     M 	dc.w	mysticcave_call3-*-1
000146CA 8060 80                    	dc.b nRst, $60, nRst
000146CD                            	sJump		MysticCave_Jump1
000146CD F6                       M 	dc.b	$f6
000146CE FFA6                     M 	dc.w	mysticcave_jump1-*-1
000146D0                            
000146D0                            MysticCave_PSG1:
000146D0 8004 8030 80               	dc.b nRst, $04, nRst, $30, nRst
000146D5                            
000146D5                            MysticCave_Jump4:
000146D5                            	sCall		MysticCave_Call1
000146D5 F8                       M 	dc.b	$f8
000146D6 FF6F                     M 	dc.w	mysticcave_call1-*-1
000146D8                            	saTranspose	$02
000146D8 E402                     M 	dc.b	$e4,$02
000146DA                            	sCall		MysticCave_Call1
000146DA F8                       M 	dc.b	$f8
000146DB FF6A                     M 	dc.w	mysticcave_call1-*-1
000146DD                            	saTranspose	$01
000146DD E401                     M 	dc.b	$e4,$01
000146DF                            	sCall		MysticCave_Call1
000146DF F8                       M 	dc.b	$f8
000146E0 FF65                     M 	dc.w	mysticcave_call1-*-1
000146E2                            	saTranspose	$FC
000146E2 E4FC                     M 	dc.b	$e4,$fc
000146E4                            	sCall		MysticCave_Call1
000146E4 F8                       M 	dc.b	$f8
000146E5 FF60                     M 	dc.w	mysticcave_call1-*-1
000146E7                            	saTranspose	$01
000146E7 E401                     M 	dc.b	$e4,$01
000146E9                            	sCall		MysticCave_Call1
000146E9 F8                       M 	dc.b	$f8
000146EA FF5B                     M 	dc.w	mysticcave_call1-*-1
000146EC E730 E730                  	dc.b sHold, $30, sHold, $30
000146F0                            	sCall		MysticCave_Call2
000146F0 F8                       M 	dc.b	$f8
000146F1 FF5E                     M 	dc.w	mysticcave_call2-*-1
000146F3                            	sCall		MysticCave_Call1
000146F3 F8                       M 	dc.b	$f8
000146F4 FF51                     M 	dc.w	mysticcave_call1-*-1
000146F6                            	saTranspose	$03
000146F6 E403                     M 	dc.b	$e4,$03
000146F8                            	sCall		MysticCave_Call1
000146F8 F8                       M 	dc.b	$f8
000146F9 FF4C                     M 	dc.w	mysticcave_call1-*-1
000146FB                            	saTranspose	$FF
000146FB E4FF                     M 	dc.b	$e4,$ff
000146FD                            	sCall		MysticCave_Call1
000146FD F8                       M 	dc.b	$f8
000146FE FF47                     M 	dc.w	mysticcave_call1-*-1
00014700                            	saTranspose	$FF
00014700 E4FF                     M 	dc.b	$e4,$ff
00014702                            	sCall		MysticCave_Call1
00014702 F8                       M 	dc.b	$f8
00014703 FF42                     M 	dc.w	mysticcave_call1-*-1
00014705                            	saTranspose	$FF
00014705 E4FF                     M 	dc.b	$e4,$ff
00014707                            	sCall		MysticCave_Call1
00014707 F8                       M 	dc.b	$f8
00014708 FF3D                     M 	dc.w	mysticcave_call1-*-1
0001470A E730 E724                  	dc.b sHold, $30, sHold, $24
0001470E                            	sCall		MysticCave_Call2
0001470E F8                       M 	dc.b	$f8
0001470F FF40                     M 	dc.w	mysticcave_call2-*-1
00014711 800C                       	dc.b nRst, $0C
00014713                            
00014713                            MysticCave_Loop7:
00014713 8030 80                    	dc.b nRst, $30, nRst
00014716                            	sLoop		$00, $09, MysticCave_Loop7
00014716 F700                     M 	dc.b	$f7,$00
00014718 FFFA                     M 	dc.w	mysticcave_loop7-*-1
0001471A 09                       M 	dc.b	$09
0001471B                            	sCall		MysticCave_Call3
0001471B F8                       M 	dc.b	$f8
0001471C FDBA                     M 	dc.w	mysticcave_call3-*-1
0001471E 8030 80                    	dc.b nRst, $30, nRst
00014721                            	saTranspose	$03
00014721 E403                     M 	dc.b	$e4,$03
00014723                            	sCall		MysticCave_Call4
00014723 F8                       M 	dc.b	$f8
00014724 FDEA                     M 	dc.w	mysticcave_call4-*-1
00014726 8030 80                    	dc.b nRst, $30, nRst
00014729                            	saTranspose	$FD
00014729 E4FD                     M 	dc.b	$e4,$fd
0001472B                            	sCall		MysticCave_Call3
0001472B F8                       M 	dc.b	$f8
0001472C FDAA                     M 	dc.w	mysticcave_call3-*-1
0001472E 8030 8080 80               	dc.b nRst, $30, nRst, nRst, nRst
00014733                            	sJump		MysticCave_Jump4
00014733 F6                       M 	dc.b	$f6
00014734 FFA0                     M 	dc.w	mysticcave_jump4-*-1
00014736                            
00014736                            MysticCave_PSG2:
00014736 8030 80                    	dc.b nRst, $30, nRst
00014739                            
00014739                            MysticCave_Loop8:
00014739 8030 80                    	dc.b nRst, $30, nRst
0001473C                            	sLoop		$00, $08, MysticCave_Loop8
0001473C F700                     M 	dc.b	$f7,$00
0001473E FFFA                     M 	dc.w	mysticcave_loop8-*-1
00014740 08                       M 	dc.b	$08
00014741 C60C C5C4 08C5 04C4        	dc.b nA5, $0C, nAb5, nG5, $08, nAb5, $04, nG5
00014749 08C3 04C2 0804 C10C        	dc.b $08, nFs5, $04, nF5, $08, $04, nE5, $0C
00014751 C008 BF10 BD0C BDBC        	dc.b nEb5, $08, nD5, $10, nC5, $0C, nC5, nB4
00014759 08BD 0CC1 0680 2EC6        	dc.b $08, nC5, $0C, nE5, $06, nRst, $2E, nA5
00014761 0CC5 C408 C504 C408        	dc.b $0C, nAb5, nG5, $08, nAb5, $04, nG5, $08
00014769 C304 C208 04C1 0CC0        	dc.b nFs5, $04, nF5, $08, $04, nE5, $0C, nEb5
00014771 08BF 10BD 0CBD BC08        	dc.b $08, nD5, $10, nC5, $0C, nC5, nB4, $08
00014779 BD0C BA06 802E C90C        	dc.b nC5, $0C, nA4, $06, nRst, $2E, nC6, $0C
00014781 C8C7 08C8 04C7 08C6        	dc.b nB5, nBb5, $08, nB5, $04, nBb5, $08, nA5
00014789 04C5 0804 C40C C308        	dc.b $04, nAb5, $08, $04, nG5, $0C, nFs5, $08
00014791 C210 C10C C1BF 08C1        	dc.b nF5, $10, nE5, $0C, nE5, nD5, $08, nE5
00014799 0CC4 0680 2EC9 0CC8        	dc.b $0C, nG5, $06, nRst, $2E, nC6, $0C, nB5
000147A1 C708 C804 C708 C604        	dc.b nBb5, $08, nB5, $04, nBb5, $08, nA5, $04
000147A9 C508 04C4 0CC3 08C2        	dc.b nAb5, $08, $04, nG5, $0C, nFs5, $08, nF5
000147B1 10C1 0CC1 BF08 C10C        	dc.b $10, nE5, $0C, nE5, nD5, $08, nE5, $0C
000147B9 BD06 802E                  	dc.b nC5, $06, nRst, $2E
000147BD                            
000147BD                            MysticCave_Loop9:
000147BD C60C CD08 C60C CBC6        	dc.b nA5, $0C, nE6, $08, nA5, $0C, nD6, nA5
000147C5 04C9 0CC6 08C8 0CC6        	dc.b $04, nC6, $0C, nA5, $08, nB5, $0C, nA5
000147CD 04C9 0C                    	dc.b $04, nC6, $0C
000147D0                            	sLoop		$00, $07, MysticCave_Loop9
000147D0 F700                     M 	dc.b	$f7,$00
000147D2 FFEA                     M 	dc.w	mysticcave_loop9-*-1
000147D4 07                       M 	dc.b	$07
000147D5 C60C CD08 C60C C9C6        	dc.b nA5, $0C, nE6, $08, nA5, $0C, nC6, nA5
000147DD 0680 2E                    	dc.b $06, nRst, $2E
000147E0                            	sJump		MysticCave_Loop8
000147E0 F6                       M 	dc.b	$f6
000147E1 FF57                     M 	dc.w	mysticcave_loop8-*-1
000147E3                            
000147E3                            MysticCave_FM3:
000147E3                            	ssMod68k	$18, $01, $03, $04
000147E3 F018 0103 04             M 	dc.b	$f0,$18,$01,$03,$04
000147E8                            	sVoice		$06
000147E8 E806                     M 	dc.b	$e8,$06
000147EA A214 A404 A504 8008        	dc.b nA2, $14, nB2, $04, nC3, $04, nRst, $08
000147F2 A904 8008 A804 8008        	dc.b nE3, $04, nRst, $08, nEb3, $04, nRst, $08
000147FA A904 8008 AC08 A910        	dc.b nE3, $04, nRst, $08, nG3, $08, nE3, $10
00014802                            	sPan		spRight, $00
00014802 E040                     M 	dc.b	$e0,spright|$00
00014804                            	sVoice		$00
00014804 E800                     M 	dc.b	$e8,$00
00014806                            
00014806                            MysticCave_Loop3:
00014806 8030 80                    	dc.b nRst, $30, nRst
00014809                            	sLoop		$00, $08, MysticCave_Loop3
00014809 F700                     M 	dc.b	$f7,$00
0001480B FFFA                     M 	dc.w	mysticcave_loop3-*-1
0001480D 08                       M 	dc.b	$08
0001480E                            	sCall		MysticCave_FM3DAC2_1
0001480E F8                       M 	dc.b	$f8
0001480F 0000                     M 	dc.w	mysticcave_fm3dac2_1-*-1
00014811                            	sPan		spCenter, $00
00014811 E0C0                     M 	dc.b	$e0,spcenter|$00
00014813                            	saVol		$06
00014813 ED06                     M 	dc.b	$ed,$06
00014815                            
00014815                            MysticCave_Loop4:
00014815 C60C CDC6 08CB 0CC6        	dc.b nA5, $0C, nE6, nA5, $08, nD6, $0C, nA5
0001481D 04C9 08C6 0CC8 C604        	dc.b $04, nC6, $08, nA5, $0C, nB5, nA5, $04
00014825 C90C                       	dc.b nC6, $0C
00014827                            	sLoop		$00, $07, MysticCave_Loop4
00014827 F700                     M 	dc.b	$f7,$00
00014829 FFEB                     M 	dc.w	mysticcave_loop4-*-1
0001482B 07                       M 	dc.b	$07
0001482C                            	saVol		$FA
0001482C EDFA                     M 	dc.b	$ed,$fa
0001482E                            	sCall		MysticCave_FM3DAC2_2
0001482E F8                       M 	dc.b	$f8
0001482F 0000                     M 	dc.w	mysticcave_fm3dac2_2-*-1
00014831                            	sPan		spRight, $00
00014831 E040                     M 	dc.b	$e0,spright|$00
00014833                            	sJump		MysticCave_Loop3
00014833 F6                       M 	dc.b	$f6
00014834 FFD1                     M 	dc.w	mysticcave_loop3-*-1
00014836                            
00014836                            MysticCave_FM2:
00014836                            	sVoice		$05
00014836 E805                     M 	dc.b	$e8,$05
00014838 8030 80                    	dc.b nRst, $30, nRst
0001483B                            
0001483B                            MysticCave_Loop2:
0001483B A20C AEAC 08AE 04AC        	dc.b nA2, $0C, nA3, nG3, $08, nA3, $04, nG3
00014843 08A9 04A7 0804 A80C        	dc.b $08, nE3, $04, nD3, $08, $04, nEb3, $0C
0001484B A908 A110 A20C AEAC        	dc.b nE3, $08, nAb2, $10, nA2, $0C, nA3, nG3
00014853 08AE 04AC 08A9 04A7        	dc.b $08, nA3, $04, nG3, $08, nE3, $04, nD3
0001485B 0804 A808 A904 8018        	dc.b $08, $04, nEb3, $08, nE3, $04, nRst, $18
00014863                            	sLoop		$00, $08, MysticCave_Loop2
00014863 F700                     M 	dc.b	$f7,$00
00014865 FFD5                     M 	dc.w	mysticcave_loop2-*-1
00014867 08                       M 	dc.b	$08
00014868 8030 80A2 0804 A40C        	dc.b nRst, $30, nRst, nA2, $08, $04, nB2, $0C
00014870 A5A7 A8A7 A5A4 8030        	dc.b nC3, nD3, nEb3, nD3, nC3, nB2, nRst, $30
00014878 80A2 0C80 A080 9E80        	dc.b nRst, nA2, $0C, nRst, nG2, nRst, nF2, nRst
00014880 9D80 8030 80A2 0804        	dc.b nE2, nRst, nRst, $30, nRst, nA2, $08, $04
00014888 A40C A5A7 A8A7 A5A4        	dc.b nB2, $0C, nC3, nD3, nEb3, nD3, nC3, nB2
00014890 8030 80A2 0CA2 9D08        	dc.b nRst, $30, nRst, nA2, $0C, nA2, nE2, $08
00014898 A00C A2A2 049F 0CA0        	dc.b nG2, $0C, nA2, nA2, $04, nFs2, $0C, nG2
000148A0 A1                         	dc.b nAb2
000148A1                            	sJump		MysticCave_Loop2
000148A1 F6                       M 	dc.b	$f6
000148A2 FF98                     M 	dc.w	mysticcave_loop2-*-1
000148A4                            
000148A4                            MysticCave_FM3DAC2_1:
000148A4 C60C C5C4 08C5 04C4        	dc.b nA5, $0C, nAb5, nG5, $08, nAb5, $04, nG5
000148AC 08C3 04C2 0804 C10C        	dc.b $08, nFs5, $04, nF5, $08, $04, nE5, $0C
000148B4 C008 BF10 BD0C BDBC        	dc.b nEb5, $08, nD5, $10, nC5, $0C, nC5, nB4
000148BC 08BD 0CC1 06E7 2EC6        	dc.b $08, nC5, $0C, nE5, $06, sHold, $2E, nA5
000148C4 0CC5 C408 C504 C408        	dc.b $0C, nAb5, nG5, $08, nAb5, $04, nG5, $08
000148CC C304 C208 04C1 0CC0        	dc.b nFs5, $04, nF5, $08, $04, nE5, $0C, nEb5
000148D4 08BF 10BD 0CBD BC08        	dc.b $08, nD5, $10, nC5, $0C, nC5, nB4, $08
000148DC BD0C BA06 E72E C60C        	dc.b nC5, $0C, nA4, $06, sHold, $2E, nA5, $0C
000148E4 C5C4 08C5 04C4 08C3        	dc.b nAb5, nG5, $08, nAb5, $04, nG5, $08, nFs5
000148EC 04C2 0804 C10C C008        	dc.b $04, nF5, $08, $04, nE5, $0C, nEb5, $08
000148F4 BF10 BD0C BDBC 08BD        	dc.b nD5, $10, nC5, $0C, nC5, nB4, $08, nC5
000148FC 0CC1 06E7 2EC6 0CC5        	dc.b $0C, nE5, $06, sHold, $2E, nA5, $0C, nAb5
00014904 C408 C504 C408 C304        	dc.b nG5, $08, nAb5, $04, nG5, $08, nFs5, $04
0001490C C208 04C1 0CC0 08BF        	dc.b nF5, $08, $04, nE5, $0C, nEb5, $08, nD5
00014914 10BD 0CBD BC08 BD0C        	dc.b $10, nC5, $0C, nC5, nB4, $08, nC5, $0C
0001491C BA06 E72E                  	dc.b nA4, $06, sHold, $2E
00014920                            	sRet
00014920 F9                       M 	dc.b	$f9
00014921                            
00014921                            MysticCave_FM3DAC2_2:
00014921 C60C CD08 C60C C9C6        	dc.b nA5, $0C, nE6, $08, nA5, $0C, nC6, nA5
00014929 0680 2E                    	dc.b $06, nRst, $2E
0001492C                            	sRet
0001492C F9                       M 	dc.b	$f9
0001492D                            
0001492D                            MysticCave_FM4:
0001492D                            	sVoice		$01
0001492D E801                     M 	dc.b	$e8,$01
0001492F                            	sPan		spRight, $00
0001492F E040                     M 	dc.b	$e0,spright|$00
00014931                            	sCall		MysticCave_Call5
00014931 F8                       M 	dc.b	$f8
00014932 FB87                     M 	dc.w	mysticcave_call5-*-1
00014934                            
00014934                            MysticCave_Jump2:
00014934 8030 801E                  	dc.b nRst, $30, nRst, $1E
00014938                            	sPan		spRight, $00
00014938 E040                     M 	dc.b	$e0,spright|$00
0001493A                            	sVoice		$06
0001493A E806                     M 	dc.b	$e8,$06
0001493C A112 A206                  	dc.b nAb2, $12, nA2, $06
00014940                            	sPan		spCenter, $00
00014940 E0C0                     M 	dc.b	$e0,spcenter|$00
00014942                            	sVoice		$01
00014942 E801                     M 	dc.b	$e8,$01
00014944 8030 8006 BA08 B904        	dc.b nRst, $30, nRst, $06, nA4, $08, nAb4, $04
0001494C B808 B704 B608 B504        	dc.b nG4, $08, nFs4, $04, nF4, $08, nE4, $04
00014954 8030 801E                  	dc.b nRst, $30, nRst, $1E
00014958                            	sPan		spRight, $00
00014958 E040                     M 	dc.b	$e0,spright|$00
0001495A                            	sVoice		$06
0001495A E806                     M 	dc.b	$e8,$06
0001495C A112 A206                  	dc.b nAb2, $12, nA2, $06
00014960                            	sPan		spCenter, $00
00014960 E0C0                     M 	dc.b	$e0,spcenter|$00
00014962                            	sVoice		$01
00014962 E801                     M 	dc.b	$e8,$01
00014964 8030 8006 BA08 B904        	dc.b nRst, $30, nRst, $06, nA4, $08, nAb4, $04
0001496C B808 B704 B608 B504        	dc.b nG4, $08, nFs4, $04, nF4, $08, nE4, $04
00014974 8030 801E                  	dc.b nRst, $30, nRst, $1E
00014978                            	sPan		spRight, $00
00014978 E040                     M 	dc.b	$e0,spright|$00
0001497A                            	sVoice		$06
0001497A E806                     M 	dc.b	$e8,$06
0001497C A112 A206                  	dc.b nAb2, $12, nA2, $06
00014980                            	sPan		spCenter, $00
00014980 E0C0                     M 	dc.b	$e0,spcenter|$00
00014982                            	sVoice		$01
00014982 E801                     M 	dc.b	$e8,$01
00014984 8030 8006 BA08 B904        	dc.b nRst, $30, nRst, $06, nA4, $08, nAb4, $04
0001498C B808 B704 B608 B504        	dc.b nG4, $08, nFs4, $04, nF4, $08, nE4, $04
00014994 8030 801E                  	dc.b nRst, $30, nRst, $1E
00014998                            	sPan		spRight, $00
00014998 E040                     M 	dc.b	$e0,spright|$00
0001499A                            	sVoice		$06
0001499A E806                     M 	dc.b	$e8,$06
0001499C A112 A206                  	dc.b nAb2, $12, nA2, $06
000149A0                            	sPan		spCenter, $00
000149A0 E0C0                     M 	dc.b	$e0,spcenter|$00
000149A2                            	sVoice		$01
000149A2 E801                     M 	dc.b	$e8,$01
000149A4 8030 8006 BA08 B904        	dc.b nRst, $30, nRst, $06, nA4, $08, nAb4, $04
000149AC B808 B704 B608 B504        	dc.b nG4, $08, nFs4, $04, nF4, $08, nE4, $04
000149B4                            
000149B4                            MysticCave_Loop5:
000149B4 800C BD06 8012 0680        	dc.b nRst, $0C, nC5, $06, nRst, $12, $06, nRst
000149BC 12BD 0680 0C               	dc.b $12, nC5, $06, nRst, $0C
000149C1                            	sVoice		$06
000149C1 E806                     M 	dc.b	$e8,$06
000149C3 A112 A206 80               	dc.b nAb2, $12, nA2, $06, nRst
000149C8                            	sVoice		$01
000149C8 E801                     M 	dc.b	$e8,$01
000149CA BD06 8012 0680 12          	dc.b nC5, $06, nRst, $12, $06, nRst, $12
000149D1                            	sCall		MysticCave_FM45DAC2_1
000149D1 F8                       M 	dc.b	$f8
000149D2 0000                     M 	dc.w	mysticcave_fm45dac2_1-*-1
000149D4                            	sLoop		$00, $04, MysticCave_Loop5
000149D4 F700                     M 	dc.b	$f7,$00
000149D6 FFDD                     M 	dc.w	mysticcave_loop5-*-1
000149D8 04                       M 	dc.b	$04
000149D9                            	sCall		MysticCave_Call5
000149D9 F8                       M 	dc.b	$f8
000149DA FADF                     M 	dc.w	mysticcave_call5-*-1
000149DC                            	sPan		spRight, $00
000149DC E040                     M 	dc.b	$e0,spright|$00
000149DE                            	saTranspose	$F4
000149DE E4F4                     M 	dc.b	$e4,$f4
000149E0 800C AE08 B004 B108        	dc.b nRst, $0C, nA3, $08, nB3, $04, nC4, $08
000149E8 B004 AE0C 08B0 04B1        	dc.b nB3, $04, nA3, $0C, $08, nB3, $04, nC4
000149F0 08B0 04AE 0680 12          	dc.b $08, nB3, $04, nA3, $06, nRst, $12
000149F7                            	sPan		spCenter, $00
000149F7 E0C0                     M 	dc.b	$e0,spcenter|$00
000149F9                            	saTranspose	$0C
000149F9 E40C                     M 	dc.b	$e4,$0c
000149FB                            	sCall		MysticCave_Call5
000149FB F8                       M 	dc.b	$f8
000149FC FABD                     M 	dc.w	mysticcave_call5-*-1
000149FE                            	sPan		spRight, $00
000149FE E040                     M 	dc.b	$e0,spright|$00
00014A00 A20C 80A0 809E 809D        	dc.b nA2, $0C, nRst, nG2, nRst, nF2, nRst, nE2
00014A08 80                         	dc.b nRst
00014A09                            	sPan		spCenter, $00
00014A09 E0C0                     M 	dc.b	$e0,spcenter|$00
00014A0B                            	sCall		MysticCave_Call5
00014A0B F8                       M 	dc.b	$f8
00014A0C FAAD                     M 	dc.w	mysticcave_call5-*-1
00014A0E                            	sPan		spRight, $00
00014A0E E040                     M 	dc.b	$e0,spright|$00
00014A10 800C AE08 B004 B108        	dc.b nRst, $0C, nA3, $08, nB3, $04, nC4, $08
00014A18 B004 AE0C 08B0 04B1        	dc.b nB3, $04, nA3, $0C, $08, nB3, $04, nC4
00014A20 08B0 04AE 0680 12          	dc.b $08, nB3, $04, nA3, $06, nRst, $12
00014A27                            	sPan		spCenter, $00
00014A27 E0C0                     M 	dc.b	$e0,spcenter|$00
00014A29                            	sCall		MysticCave_Call5
00014A29 F8                       M 	dc.b	$f8
00014A2A FA8F                     M 	dc.w	mysticcave_call5-*-1
00014A2C                            	sPan		spRight, $00
00014A2C E040                     M 	dc.b	$e0,spright|$00
00014A2E A20C A29D 08A0 0CA2        	dc.b nA2, $0C, nA2, nE2, $08, nG2, $0C, nA2
00014A36 0680 2E                    	dc.b $06, nRst, $2E
00014A39                            	sPan		spCenter, $00
00014A39 E0C0                     M 	dc.b	$e0,spcenter|$00
00014A3B                            	sJump		MysticCave_Jump2
00014A3B F6                       M 	dc.b	$f6
00014A3C FEF7                     M 	dc.w	mysticcave_jump2-*-1
00014A3E                            
00014A3E                            MysticCave_FM45DAC2_1:
00014A3E BD08 BC04 BD08 BC04        	dc.b nC5, $08, nB4, $04, nC5, $08, nB4, $04
00014A46 BD0C                       	dc.b nC5, $0C
00014A48                            	sRet
00014A48 F9                       M 	dc.b	$f9
00014A49                            
00014A49                            MysticCave_PSG3:
00014A49                            	sNoisePSG	$E7
00014A49 F3E7                     M 	dc.b	$f3,$e7
00014A4B 8030 80                    	dc.b nRst, $30, nRst
00014A4E                            
00014A4E                            MysticCave_Jump5:
00014A4E C60C 0804                  	dc.b nA5, $0C, $08, $04
00014A52                            	sJump		MysticCave_Jump5
00014A52 F6                       M 	dc.b	$f6
00014A53 FFFA                     M 	dc.w	mysticcave_jump5-*-1
00014A55                            
00014A55                            MysticCave_DAC1:
00014A55 8030 1882 0C08 04          	dc.b nRst, $30, $18, dLowKick, $0C, $08, $04
00014A5C                            
00014A5C 8208 0C04 830C 8208        .loop	dc.b dLowKick, $08, $0C, $04, dSnare, $0C, dLowKick, $08
00014A64 0C83 0482 0C83 8282        	dc.b $0C, dSnare, $04, dLowKick, $0C, dSnare, dLowKick, dLowKick
00014A6C 080C 0483 0C82 080C        	dc.b $08, $0C, $04, dSnare, $0C, dLowKick, $08, $0C
00014A74 8304                       	dc.b dSnare, $04
00014A76                            
00014A76                            	sModePitchDAC
00014A76 F2                       M 	dc.b	$f2
00014A77                            	sVoice		dClap
00014A77 E884                     M 	dc.b	$e8,dclap
00014A79                            	ssTranspose	-$0C
00014A79 E3F4                     M 	dc.b	$e3,-$0c
00014A7B                            	sCall		MysticCave_FM45DAC2_1
00014A7B F8                       M 	dc.b	$f8
00014A7C FFC1                     M 	dc.w	mysticcave_fm45dac2_1-*-1
00014A7E                            
00014A7E                            	sModeSampDAC
00014A7E F1                       M 	dc.b	$f1
00014A7F                            	ssTranspose	$00
00014A7F E300                     M 	dc.b	$e3,$00
00014A81                            	ssFreqNote	nC4
00014A81 FF03 31                  M 	dc.b	$ff,$03,nc4^$80
00014A84                            	sJump		.loop
00014A84 F6                       M 	dc.b	$f6
00014A85 FFD6                     M 	dc.w	.loop-*-1
00014A87                            	sStop
00014A87 F5                       M 	dc.b	$f5
00014A88                            
00014A88                            MysticCave_DAC2:
00014A88                            	sVoice		dMeow
00014A88 E898                     M 	dc.b	$e8,dmeow
00014A8A AE14 B004 B10C B50C        	dc.b nA3, $14, nB3, $04, nC4, $0C, nE4, $0C
00014A92 B40C B50C B808 B510        	dc.b nEb4, $0C, nE4, $0C, nG4, $08, nE4, $10
00014A9A                            
00014A9A                            .loop	sVoice		dWooh
00014A9A E899                     M 	dc.b	$e8,dwooh
00014A9C                            	ssMod68k	$18, $01, $0A, $04
00014A9C F018 010A 04             M 	dc.b	$f0,$18,$01,$0a,$04
00014AA1                            	ssTranspose	-$18
00014AA1 E3E8                     M 	dc.b	$e3,-$18
00014AA3                            	sCall		MysticCave_Call1
00014AA3 F8                       M 	dc.b	$f8
00014AA4 FBA1                     M 	dc.w	mysticcave_call1-*-1
00014AA6                            	saTranspose	$02
00014AA6 E402                     M 	dc.b	$e4,$02
00014AA8                            	sCall		MysticCave_Call1
00014AA8 F8                       M 	dc.b	$f8
00014AA9 FB9C                     M 	dc.w	mysticcave_call1-*-1
00014AAB                            	saTranspose	$01
00014AAB E401                     M 	dc.b	$e4,$01
00014AAD                            	sCall		MysticCave_Call1
00014AAD F8                       M 	dc.b	$f8
00014AAE FB97                     M 	dc.w	mysticcave_call1-*-1
00014AB0                            	saTranspose	$FC
00014AB0 E4FC                     M 	dc.b	$e4,$fc
00014AB2                            	sCall		MysticCave_Call1
00014AB2 F8                       M 	dc.b	$f8
00014AB3 FB92                     M 	dc.w	mysticcave_call1-*-1
00014AB5                            	saTranspose	$01
00014AB5 E401                     M 	dc.b	$e4,$01
00014AB7                            	sCall		MysticCave_Call1
00014AB7 F8                       M 	dc.b	$f8
00014AB8 FB8D                     M 	dc.w	mysticcave_call1-*-1
00014ABA E760                       	dc.b sHold, $60
00014ABC                            	ssTranspose	-$0C
00014ABC E3F4                     M 	dc.b	$e3,-$0c
00014ABE                            	sCall		MysticCave_Call2
00014ABE F8                       M 	dc.b	$f8
00014ABF FB90                     M 	dc.w	mysticcave_call2-*-1
00014AC1                            	ssTranspose	-$18
00014AC1 E3E8                     M 	dc.b	$e3,-$18
00014AC3                            	sCall		MysticCave_Call1
00014AC3 F8                       M 	dc.b	$f8
00014AC4 FB81                     M 	dc.w	mysticcave_call1-*-1
00014AC6                            	saTranspose	$03
00014AC6 E403                     M 	dc.b	$e4,$03
00014AC8                            	sCall		MysticCave_Call1
00014AC8 F8                       M 	dc.b	$f8
00014AC9 FB7C                     M 	dc.w	mysticcave_call1-*-1
00014ACB                            	saTranspose	$FF
00014ACB E4FF                     M 	dc.b	$e4,$ff
00014ACD                            	sCall		MysticCave_Call1
00014ACD F8                       M 	dc.b	$f8
00014ACE FB77                     M 	dc.w	mysticcave_call1-*-1
00014AD0                            	saTranspose	$FF
00014AD0 E4FF                     M 	dc.b	$e4,$ff
00014AD2                            	sCall		MysticCave_Call1
00014AD2 F8                       M 	dc.b	$f8
00014AD3 FB72                     M 	dc.w	mysticcave_call1-*-1
00014AD5                            	saTranspose	$FF
00014AD5 E4FF                     M 	dc.b	$e4,$ff
00014AD7                            	sCall		MysticCave_Call1
00014AD7 F8                       M 	dc.b	$f8
00014AD8 FB6D                     M 	dc.w	mysticcave_call1-*-1
00014ADA E754                       	dc.b sHold, $54
00014ADC                            	ssTranspose	-$0C
00014ADC E3F4                     M 	dc.b	$e3,-$0c
00014ADE                            	sCall		MysticCave_Call2
00014ADE F8                       M 	dc.b	$f8
00014ADF FB70                     M 	dc.w	mysticcave_call2-*-1
00014AE1                            	ssTranspose	$00
00014AE1 E300                     M 	dc.b	$e3,$00
00014AE3 800C                       	dc.b nRst, $0C
00014AE5                            
00014AE5                            	sVoice		dLazer
00014AE5 E89A                     M 	dc.b	$e8,dlazer
00014AE7                            	ssTranspose	-$0C
00014AE7 E3F4                     M 	dc.b	$e3,-$0c
00014AE9                            	sModOff
00014AE9 EC                       M 	dc.b	$ec
00014AEA                            	sCall		MysticCave_FM3DAC2_1
00014AEA F8                       M 	dc.b	$f8
00014AEB FDB8                     M 	dc.w	mysticcave_fm3dac2_1-*-1
00014AED                            
00014AED E780 60                    	dc.b sHold, nRst, $60
00014AF0                            	sVoice		dWooh
00014AF0 E899                     M 	dc.b	$e8,dwooh
00014AF2                            	sModOn
00014AF2 EB                       M 	dc.b	$eb
00014AF3                            	ssTranspose	-$18
00014AF3 E3E8                     M 	dc.b	$e3,-$18
00014AF5                            	sCall		MysticCave_Call3
00014AF5 F8                       M 	dc.b	$f8
00014AF6 F9E0                     M 	dc.w	mysticcave_call3-*-1
00014AF8 8060                       	dc.b nRst, $60
00014AFA                            	saTranspose	$03
00014AFA E403                     M 	dc.b	$e4,$03
00014AFC                            	sCall		MysticCave_Call4
00014AFC F8                       M 	dc.b	$f8
00014AFD FA11                     M 	dc.w	mysticcave_call4-*-1
00014AFF 8060                       	dc.b nRst, $60
00014B01                            	saTranspose	$FD
00014B01 E4FD                     M 	dc.b	$e4,$fd
00014B03                            	sCall		MysticCave_Call3
00014B03 F8                       M 	dc.b	$f8
00014B04 F9D2                     M 	dc.w	mysticcave_call3-*-1
00014B06 8060                       	dc.b nRst, $60
00014B08                            
00014B08                            	sVoice		dLazer
00014B08 E89A                     M 	dc.b	$e8,dlazer
00014B0A                            	ssTranspose	-$0C
00014B0A E3F4                     M 	dc.b	$e3,-$0c
00014B0C                            	sModOff
00014B0C EC                       M 	dc.b	$ec
00014B0D                            	sCall		MysticCave_FM3DAC2_2
00014B0D F8                       M 	dc.b	$f8
00014B0E FE12                     M 	dc.w	mysticcave_fm3dac2_2-*-1
00014B10                            	sJump		.loop
00014B10 F6                       M 	dc.b	$f6
00014B11 FF88                     M 	dc.w	.loop-*-1
00014B13 =0000000C                M a	=	a+1
00014B14 00                       M 	even
00014B14                          M b	equs	dmusc
00014B14                          M _mus_dis
00014B14                          M dmusac	include	"driver/music/dis.asm"
00014B14                            Dis_Header:
00014B14                            	sHeaderInit						; Z80 offset is $8000
00014B14 =00014B14                M spointzero	=	*
00014B14 =00000000                M spatnum	=	0
00014B14                            	sHeaderTempo	$01, $25
00014B14 0025                     M 	dc.b	$01-1,$25
00014B16                            	sHeaderCh	$05, $03
00014B16 04                       M 	dc.b	$05-1
00014B17 02                       M 	dc.b	$03-1
00014B18                            	sHeaderDAC	Dis_DAC1
00014B18 0000                     M 	dc.w	dis_dac1-spointzero
00014B1A 0000                     M 	dc.w	$00
00014B1C                            	sHeaderDAC	Dis_DAC2
00014B1C 0000                     M 	dc.w	dis_dac2-spointzero
00014B1E 0000                     M 	dc.w	$00
00014B20                            	sHeaderFM	Dis_FM1, $00, $09
00014B20 0000                     M 	dc.w	dis_fm1-spointzero
00014B22 0009                     M 	dc.b	$00,$09
00014B24                            	sHeaderFM	Dis_FM2, $0C, $10
00014B24 0000                     M 	dc.w	dis_fm2-spointzero
00014B26 0C10                     M 	dc.b	$0c,$10
00014B28                            	sHeaderFM	Dis_FM3, $0C, $10
00014B28 0000                     M 	dc.w	dis_fm3-spointzero
00014B2A 0C10                     M 	dc.b	$0c,$10
00014B2C                            	sHeaderFM	Dis_FM4, $00, $10
00014B2C 0000                     M 	dc.w	dis_fm4-spointzero
00014B2E 0010                     M 	dc.b	$00,$10
00014B30                            	sHeaderFM	Dis_FM5, $00, $10
00014B30 0000                     M 	dc.w	dis_fm5-spointzero
00014B32 0010                     M 	dc.b	$00,$10
00014B34                            	sHeaderPSG	Dis_PSG1, $F4-$0C, $00, $00, vKc08
00014B34 0000                     M 	dc.w	dis_psg1-spointzero
00014B36 E800 0018                M 	dc.b	$f4-$0c,$00,$00,vkc08
00014B3A                            	sHeaderPSG	Dis_PSG2, $F4-$0C, $03, $00, vKc08
00014B3A 0000                     M 	dc.w	dis_psg2-spointzero
00014B3C E803 0018                M 	dc.b	$f4-$0c,$03,$00,vkc08
00014B40                            	sHeaderPSG	Dis_PSG3, $21-$0C, $01, $00, vKc02
00014B40 0000                     M 	dc.w	dis_psg3-spointzero
00014B42 1501 0016                M 	dc.b	$21-$0c,$01,$00,vkc02
00014B46                            
00014B46                            	; Patch $00
00014B46                            	; $3A
00014B46                            	; $01, $05, $32, $71,	$CF, $95, $1F, $1F
00014B46                            	; $0E, $0F, $05, $0C,	$17, $06, $06, $07
00014B46                            	; $8F, $4F, $4F, $4F,	$21, $13, $24, $80
00014B46                            	spAlgorithm	$02
00014B46 =00000001                M spatnum	=	spatnum+1
00014B46 =00000002                M spal	=	val
00014B46                            	spFeedback	$07
00014B46 =00000007                M spfe	=	val
00014B46                            	spDetune	$00, $03, $00, $07
00014B46 =00000000                M spde1	=	op1
00014B46 =00000003                M spde2	=	op2
00014B46 =00000000                M spde3	=	op3
00014B46 =00000007                M spde4	=	op4
00014B46                            	spMultiple	$01, $02, $05, $01
00014B46 =00000001                M spmu1	=	op1
00014B46 =00000002                M spmu2	=	op2
00014B46 =00000005                M spmu3	=	op3
00014B46 =00000001                M spmu4	=	op4
00014B46                            	spRateScale	$03, $00, $02, $00
00014B46 =00000003                M sprs1	=	op1
00014B46 =00000000                M sprs2	=	op2
00014B46 =00000002                M sprs3	=	op3
00014B46 =00000000                M sprs4	=	op4
00014B46                            	spAttackRt	$0F, $1F, $15, $1F
00014B46 =0000000F                M spar1	=	op1
00014B46 =0000001F                M spar2	=	op2
00014B46 =00000015                M spar3	=	op3
00014B46 =0000001F                M spar4	=	op4
00014B46                            	spAmpMod	$00, $00, $00, $00
00014B46 =00000000                M spam1	=	op1
00014B46 =00000000                M spam2	=	op2
00014B46 =00000000                M spam3	=	op3
00014B46 =00000000                M spam4	=	op4
00014B46                            	spSustainRt	$0E, $05, $0F, $0C
00014B46 =0000000E                M spsr1	=	op1
00014B46 =00000005                M spsr2	=	op2
00014B46 =0000000F                M spsr3	=	op3
00014B46 =0000000C                M spsr4	=	op4
00014B46                            	spSustainLv	$08, $04, $04, $04
00014B46 =00000008                M spsl1	=	op1
00014B46 =00000004                M spsl2	=	op2
00014B46 =00000004                M spsl3	=	op3
00014B46 =00000004                M spsl4	=	op4
00014B46                            	spDecayRt	$17, $06, $06, $07
00014B46 =00000017                M spdr1	=	op1
00014B46 =00000006                M spdr2	=	op2
00014B46 =00000006                M spdr3	=	op3
00014B46 =00000007                M spdr4	=	op4
00014B46                            	spReleaseRt	$0F, $0F, $0F, $0F
00014B46 =0000000F                M sprr1	=	op1
00014B46 =0000000F                M sprr2	=	op2
00014B46 =0000000F                M sprr3	=	op3
00014B46 =0000000F                M sprr4	=	op4
00014B46                            	spSSGEG		$00, $00, $00, $00
00014B46 =00000000                M spss1	=	op1
00014B46 =00000000                M spss2	=	op2
00014B46 =00000000                M spss3	=	op3
00014B46 =00000000                M spss4	=	op4
00014B46                            	spTotalLv	$21, $24, $13, $00
00014B46 =00000021                M sptl1	=	op1
00014B46 =00000024                M sptl2	=	op2
00014B46 =00000013                M sptl3	=	op3
00014B46 =00000000                M sptl4	=	op4
00014B46 3A                       M 	dc.b	(spfe<<3)+spal
00014B47 =00000080                M sptlmask4	set	$80
00014B47 =00000000                M sptlmask2	set	((spal>=5)<<7)
00014B47 =00000000                M sptlmask3	set	((spal>=4)<<7)
00014B47 =00000000                M sptlmask1	set	((spal=7)<<7)
00014B47 0105 3271                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00014B4B CF95 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00014B4F 0E0F 050C                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00014B53 1706 0607                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00014B57 8F4F 4F4F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00014B5B 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00014B5F 2113 2480                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00014B63 4E41 54                  M 	dc.b	'NAT'
00014B66                            
00014B66                            	; Patch $01
00014B66                            	; $1C
00014B66                            	; $32, $02, $04, $34,	$5F, $FF, $5F, $FF
00014B66                            	; $05, $05, $05, $07,	$15, $10, $21, $13
00014B66                            	; $9F, $3F, $5F, $AF,	$30, $80, $02, $84
00014B66                            	spAlgorithm	$04
00014B66 =00000002                M spatnum	=	spatnum+1
00014B66 =00000004                M spal	=	val
00014B66                            	spFeedback	$03
00014B66 =00000003                M spfe	=	val
00014B66                            	spDetune	$03, $00, $00, $03
00014B66 =00000003                M spde1	=	op1
00014B66 =00000000                M spde2	=	op2
00014B66 =00000000                M spde3	=	op3
00014B66 =00000003                M spde4	=	op4
00014B66                            	spMultiple	$02, $04, $02, $04
00014B66 =00000002                M spmu1	=	op1
00014B66 =00000004                M spmu2	=	op2
00014B66 =00000002                M spmu3	=	op3
00014B66 =00000004                M spmu4	=	op4
00014B66                            	spRateScale	$01, $01, $03, $03
00014B66 =00000001                M sprs1	=	op1
00014B66 =00000001                M sprs2	=	op2
00014B66 =00000003                M sprs3	=	op3
00014B66 =00000003                M sprs4	=	op4
00014B66                            	spAttackRt	$1F, $1F, $1F, $1F
00014B66 =0000001F                M spar1	=	op1
00014B66 =0000001F                M spar2	=	op2
00014B66 =0000001F                M spar3	=	op3
00014B66 =0000001F                M spar4	=	op4
00014B66                            	spAmpMod	$00, $00, $00, $00
00014B66 =00000000                M spam1	=	op1
00014B66 =00000000                M spam2	=	op2
00014B66 =00000000                M spam3	=	op3
00014B66 =00000000                M spam4	=	op4
00014B66                            	spSustainRt	$05, $05, $05, $07
00014B66 =00000005                M spsr1	=	op1
00014B66 =00000005                M spsr2	=	op2
00014B66 =00000005                M spsr3	=	op3
00014B66 =00000007                M spsr4	=	op4
00014B66                            	spSustainLv	$09, $05, $03, $0A
00014B66 =00000009                M spsl1	=	op1
00014B66 =00000005                M spsl2	=	op2
00014B66 =00000003                M spsl3	=	op3
00014B66 =0000000A                M spsl4	=	op4
00014B66                            	spDecayRt	$15, $21, $10, $13
00014B66 =00000015                M spdr1	=	op1
00014B66 =00000021                M spdr2	=	op2
00014B66 =00000010                M spdr3	=	op3
00014B66 =00000013                M spdr4	=	op4
00014B66                            	spReleaseRt	$0F, $0F, $0F, $0F
00014B66 =0000000F                M sprr1	=	op1
00014B66 =0000000F                M sprr2	=	op2
00014B66 =0000000F                M sprr3	=	op3
00014B66 =0000000F                M sprr4	=	op4
00014B66                            	spSSGEG		$00, $00, $00, $00
00014B66 =00000000                M spss1	=	op1
00014B66 =00000000                M spss2	=	op2
00014B66 =00000000                M spss3	=	op3
00014B66 =00000000                M spss4	=	op4
00014B66                            	spTotalLv	$30, $02, $00, $04
00014B66 =00000030                M sptl1	=	op1
00014B66 =00000002                M sptl2	=	op2
00014B66 =00000000                M sptl3	=	op3
00014B66 =00000004                M sptl4	=	op4
00014B66 1C                       M 	dc.b	(spfe<<3)+spal
00014B67 =00000080                M sptlmask4	set	$80
00014B67 =00000000                M sptlmask2	set	((spal>=5)<<7)
00014B67 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00014B67 =00000000                M sptlmask1	set	((spal=7)<<7)
00014B67 3202 0434                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00014B6B 5FDF 5FDF                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00014B6F 0505 0507                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00014B73 1510 2113                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00014B77 9F3F 5FAF                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00014B7B 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00014B7F 3080 0284                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00014B83 4E41 54                  M 	dc.b	'NAT'
00014B86                            
00014B86                            	; Patch $02
00014B86                            	; $2D
00014B86                            	; $06, $05, $04, $10,	$1F, $5F, $5F, $5F
00014B86                            	; $05, $07, $0C, $0C,	$17, $17, $12, $18
00014B86                            	; $9F, $9C, $9C, $9C,	$2D, $80, $80, $80
00014B86                            	spAlgorithm	$05
00014B86 =00000003                M spatnum	=	spatnum+1
00014B86 =00000005                M spal	=	val
00014B86                            	spFeedback	$05
00014B86 =00000005                M spfe	=	val
00014B86                            	spDetune	$00, $00, $00, $01
00014B86 =00000000                M spde1	=	op1
00014B86 =00000000                M spde2	=	op2
00014B86 =00000000                M spde3	=	op3
00014B86 =00000001                M spde4	=	op4
00014B86                            	spMultiple	$06, $04, $05, $00
00014B86 =00000006                M spmu1	=	op1
00014B86 =00000004                M spmu2	=	op2
00014B86 =00000005                M spmu3	=	op3
00014B86 =00000000                M spmu4	=	op4
00014B86                            	spRateScale	$00, $01, $01, $01
00014B86 =00000000                M sprs1	=	op1
00014B86 =00000001                M sprs2	=	op2
00014B86 =00000001                M sprs3	=	op3
00014B86 =00000001                M sprs4	=	op4
00014B86                            	spAttackRt	$1F, $1F, $1F, $1F
00014B86 =0000001F                M spar1	=	op1
00014B86 =0000001F                M spar2	=	op2
00014B86 =0000001F                M spar3	=	op3
00014B86 =0000001F                M spar4	=	op4
00014B86                            	spAmpMod	$00, $00, $00, $00
00014B86 =00000000                M spam1	=	op1
00014B86 =00000000                M spam2	=	op2
00014B86 =00000000                M spam3	=	op3
00014B86 =00000000                M spam4	=	op4
00014B86                            	spSustainRt	$05, $0C, $07, $0C
00014B86 =00000005                M spsr1	=	op1
00014B86 =0000000C                M spsr2	=	op2
00014B86 =00000007                M spsr3	=	op3
00014B86 =0000000C                M spsr4	=	op4
00014B86                            	spSustainLv	$09, $09, $09, $09
00014B86 =00000009                M spsl1	=	op1
00014B86 =00000009                M spsl2	=	op2
00014B86 =00000009                M spsl3	=	op3
00014B86 =00000009                M spsl4	=	op4
00014B86                            	spDecayRt	$17, $12, $17, $18
00014B86 =00000017                M spdr1	=	op1
00014B86 =00000012                M spdr2	=	op2
00014B86 =00000017                M spdr3	=	op3
00014B86 =00000018                M spdr4	=	op4
00014B86                            	spReleaseRt	$0F, $0C, $0C, $0C
00014B86 =0000000F                M sprr1	=	op1
00014B86 =0000000C                M sprr2	=	op2
00014B86 =0000000C                M sprr3	=	op3
00014B86 =0000000C                M sprr4	=	op4
00014B86                            	spSSGEG		$00, $00, $00, $00
00014B86 =00000000                M spss1	=	op1
00014B86 =00000000                M spss2	=	op2
00014B86 =00000000                M spss3	=	op3
00014B86 =00000000                M spss4	=	op4
00014B86                            	spTotalLv	$2D, $00, $00, $00
00014B86 =0000002D                M sptl1	=	op1
00014B86 =00000000                M sptl2	=	op2
00014B86 =00000000                M sptl3	=	op3
00014B86 =00000000                M sptl4	=	op4
00014B86 2D                       M 	dc.b	(spfe<<3)+spal
00014B87 =00000080                M sptlmask4	set	$80
00014B87 =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
00014B87 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00014B87 =00000000                M sptlmask1	set	((spal=7)<<7)
00014B87 0605 0410                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00014B8B 1F5F 5F5F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00014B8F 0507 0C0C                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00014B93 1717 1218                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00014B97 9F9C 9C9C                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00014B9B 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00014B9F 2D80 8080                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00014BA3 4E41 54                  M 	dc.b	'NAT'
00014BA6                            
00014BA6                            	; Patch $03
00014BA6                            	; $3D
00014BA6                            	; $01, $01, $01, $01,	$94, $19, $19, $19
00014BA6                            	; $0F, $0D, $0D, $0D,	$07, $04, $04, $04
00014BA6                            	; $25, $1A, $1A, $1A,	$15, $80, $80, $80
00014BA6                            	spAlgorithm	$05
00014BA6 =00000004                M spatnum	=	spatnum+1
00014BA6 =00000005                M spal	=	val
00014BA6                            	spFeedback	$07
00014BA6 =00000007                M spfe	=	val
00014BA6                            	spDetune	$00, $00, $00, $00
00014BA6 =00000000                M spde1	=	op1
00014BA6 =00000000                M spde2	=	op2
00014BA6 =00000000                M spde3	=	op3
00014BA6 =00000000                M spde4	=	op4
00014BA6                            	spMultiple	$01, $01, $01, $01
00014BA6 =00000001                M spmu1	=	op1
00014BA6 =00000001                M spmu2	=	op2
00014BA6 =00000001                M spmu3	=	op3
00014BA6 =00000001                M spmu4	=	op4
00014BA6                            	spRateScale	$02, $00, $00, $00
00014BA6 =00000002                M sprs1	=	op1
00014BA6 =00000000                M sprs2	=	op2
00014BA6 =00000000                M sprs3	=	op3
00014BA6 =00000000                M sprs4	=	op4
00014BA6                            	spAttackRt	$14, $19, $19, $19
00014BA6 =00000014                M spar1	=	op1
00014BA6 =00000019                M spar2	=	op2
00014BA6 =00000019                M spar3	=	op3
00014BA6 =00000019                M spar4	=	op4
00014BA6                            	spAmpMod	$00, $00, $00, $00
00014BA6 =00000000                M spam1	=	op1
00014BA6 =00000000                M spam2	=	op2
00014BA6 =00000000                M spam3	=	op3
00014BA6 =00000000                M spam4	=	op4
00014BA6                            	spSustainRt	$0F, $0D, $0D, $0D
00014BA6 =0000000F                M spsr1	=	op1
00014BA6 =0000000D                M spsr2	=	op2
00014BA6 =0000000D                M spsr3	=	op3
00014BA6 =0000000D                M spsr4	=	op4
00014BA6                            	spSustainLv	$02, $01, $01, $01
00014BA6 =00000002                M spsl1	=	op1
00014BA6 =00000001                M spsl2	=	op2
00014BA6 =00000001                M spsl3	=	op3
00014BA6 =00000001                M spsl4	=	op4
00014BA6                            	spDecayRt	$07, $04, $04, $04
00014BA6 =00000007                M spdr1	=	op1
00014BA6 =00000004                M spdr2	=	op2
00014BA6 =00000004                M spdr3	=	op3
00014BA6 =00000004                M spdr4	=	op4
00014BA6                            	spReleaseRt	$05, $0A, $0A, $0A
00014BA6 =00000005                M sprr1	=	op1
00014BA6 =0000000A                M sprr2	=	op2
00014BA6 =0000000A                M sprr3	=	op3
00014BA6 =0000000A                M sprr4	=	op4
00014BA6                            	spSSGEG		$00, $00, $00, $00
00014BA6 =00000000                M spss1	=	op1
00014BA6 =00000000                M spss2	=	op2
00014BA6 =00000000                M spss3	=	op3
00014BA6 =00000000                M spss4	=	op4
00014BA6                            	spTotalLv	$15, $00, $00, $00
00014BA6 =00000015                M sptl1	=	op1
00014BA6 =00000000                M sptl2	=	op2
00014BA6 =00000000                M sptl3	=	op3
00014BA6 =00000000                M sptl4	=	op4
00014BA6 3D                       M 	dc.b	(spfe<<3)+spal
00014BA7 =00000080                M sptlmask4	set	$80
00014BA7 =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
00014BA7 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00014BA7 =00000000                M sptlmask1	set	((spal=7)<<7)
00014BA7 0101 0101                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00014BAB 9419 1919                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00014BAF 0F0D 0D0D                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00014BB3 0704 0404                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00014BB7 251A 1A1A                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00014BBB 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00014BBF 1580 8080                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00014BC3 4E41 54                  M 	dc.b	'NAT'
00014BC6                            
00014BC6                            	; Patch $04
00014BC6                            	; $3C
00014BC6                            	; $07, $01, $08, $04,	$5F, $9F, $9F, $5F
00014BC6                            	; $16, $1F, $16, $1F,	$09, $0F, $16, $11
00014BC6                            	; $6F, $0F, $AF, $0F,	$16, $80, $11, $80
00014BC6                            	spAlgorithm	$04
00014BC6 =00000005                M spatnum	=	spatnum+1
00014BC6 =00000004                M spal	=	val
00014BC6                            	spFeedback	$07
00014BC6 =00000007                M spfe	=	val
00014BC6                            	spDetune	$00, $00, $00, $00
00014BC6 =00000000                M spde1	=	op1
00014BC6 =00000000                M spde2	=	op2
00014BC6 =00000000                M spde3	=	op3
00014BC6 =00000000                M spde4	=	op4
00014BC6                            	spMultiple	$07, $08, $01, $04
00014BC6 =00000007                M spmu1	=	op1
00014BC6 =00000008                M spmu2	=	op2
00014BC6 =00000001                M spmu3	=	op3
00014BC6 =00000004                M spmu4	=	op4
00014BC6                            	spRateScale	$01, $02, $02, $01
00014BC6 =00000001                M sprs1	=	op1
00014BC6 =00000002                M sprs2	=	op2
00014BC6 =00000002                M sprs3	=	op3
00014BC6 =00000001                M sprs4	=	op4
00014BC6                            	spAttackRt	$1F, $1F, $1F, $1F
00014BC6 =0000001F                M spar1	=	op1
00014BC6 =0000001F                M spar2	=	op2
00014BC6 =0000001F                M spar3	=	op3
00014BC6 =0000001F                M spar4	=	op4
00014BC6                            	spAmpMod	$00, $00, $00, $00
00014BC6 =00000000                M spam1	=	op1
00014BC6 =00000000                M spam2	=	op2
00014BC6 =00000000                M spam3	=	op3
00014BC6 =00000000                M spam4	=	op4
00014BC6                            	spSustainRt	$16, $16, $1F, $1F
00014BC6 =00000016                M spsr1	=	op1
00014BC6 =00000016                M spsr2	=	op2
00014BC6 =0000001F                M spsr3	=	op3
00014BC6 =0000001F                M spsr4	=	op4
00014BC6                            	spSustainLv	$06, $0A, $00, $00
00014BC6 =00000006                M spsl1	=	op1
00014BC6 =0000000A                M spsl2	=	op2
00014BC6 =00000000                M spsl3	=	op3
00014BC6 =00000000                M spsl4	=	op4
00014BC6                            	spDecayRt	$09, $16, $0F, $11
00014BC6 =00000009                M spdr1	=	op1
00014BC6 =00000016                M spdr2	=	op2
00014BC6 =0000000F                M spdr3	=	op3
00014BC6 =00000011                M spdr4	=	op4
00014BC6                            	spReleaseRt	$0F, $0F, $0F, $0F
00014BC6 =0000000F                M sprr1	=	op1
00014BC6 =0000000F                M sprr2	=	op2
00014BC6 =0000000F                M sprr3	=	op3
00014BC6 =0000000F                M sprr4	=	op4
00014BC6                            	spSSGEG		$00, $00, $00, $00
00014BC6 =00000000                M spss1	=	op1
00014BC6 =00000000                M spss2	=	op2
00014BC6 =00000000                M spss3	=	op3
00014BC6 =00000000                M spss4	=	op4
00014BC6                            	spTotalLv	$16, $11, $00, $00
00014BC6 =00000016                M sptl1	=	op1
00014BC6 =00000011                M sptl2	=	op2
00014BC6 =00000000                M sptl3	=	op3
00014BC6 =00000000                M sptl4	=	op4
00014BC6 3C                       M 	dc.b	(spfe<<3)+spal
00014BC7 =00000080                M sptlmask4	set	$80
00014BC7 =00000000                M sptlmask2	set	((spal>=5)<<7)
00014BC7 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00014BC7 =00000000                M sptlmask1	set	((spal=7)<<7)
00014BC7 0701 0804                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00014BCB 5F9F 9F5F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00014BCF 161F 161F                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00014BD3 090F 1611                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00014BD7 6F0F AF0F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00014BDB 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00014BDF 1680 1180                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00014BE3 4E41 54                  M 	dc.b	'NAT'
00014BE6                            
00014BE6                            Dis_FM1:
00014BE6                            	sVoice		$00
00014BE6 E800                     M 	dc.b	$e8,$00
00014BE8                            
00014BE8                            Dis_Loop1:
00014BE8                            	sCall		Dis_Call1
00014BE8 F8                       M 	dc.b	$f8
00014BE9 0000                     M 	dc.w	dis_call1-*-1
00014BEB                            	sLoop		$00, $03, Dis_Loop1
00014BEB F700                     M 	dc.b	$f7,$00
00014BED FFFA                     M 	dc.w	dis_loop1-*-1
00014BEF 03                       M 	dc.b	$03
00014BF0 9212 9E06 8012 9206        	dc.b nF1, $12, nF2, $06, nRst, $12, nF1, $06
00014BF8 8030                       	dc.b nRst, $30
00014BFA                            
00014BFA                            Dis_Loop2:
00014BFA                            	sCall		Dis_Call2
00014BFA F8                       M 	dc.b	$f8
00014BFB 0000                     M 	dc.w	dis_call2-*-1
00014BFD                            	sLoop		$00, $07, Dis_Loop2
00014BFD F700                     M 	dc.b	$f7,$00
00014BFF FFFA                     M 	dc.w	dis_loop2-*-1
00014C01 07                       M 	dc.b	$07
00014C02 9912 A506 8012 9906        	dc.b nC2, $12, nC3, $06, nRst, $12, nC2, $06
00014C0A 8030                       	dc.b nRst, $30
00014C0C                            	sCall		Dis_Call3
00014C0C F8                       M 	dc.b	$f8
00014C0D 0000                     M 	dc.w	dis_call3-*-1
00014C0F A224 9499 18               	dc.b nA2, $24, nG1, nC2, $18
00014C14                            	sCall		Dis_Call3
00014C14 F8                       M 	dc.b	$f8
00014C15 0000                     M 	dc.w	dis_call3-*-1
00014C17 9618 A206 8096 180C        	dc.b nA1, $18, nA2, $06, nRst, nA1, $18, $0C
00014C1F 9406 A080 A0               	dc.b nG1, $06, nG2, nRst, nG2
00014C24                            	sCall		Dis_Call3
00014C24 F8                       M 	dc.b	$f8
00014C25 0000                     M 	dc.w	dis_call3-*-1
00014C27 A224 9499 18               	dc.b nA2, $24, nG1, nC2, $18
00014C2C                            	sCall		Dis_Call3
00014C2C F8                       M 	dc.b	$f8
00014C2D 0000                     M 	dc.w	dis_call3-*-1
00014C2F 9B24 9D18 A906 8096        	dc.b nD2, $24, nE2, $18, nE3, $06, nRst, nA1
00014C37 0CA2 0680                  	dc.b $0C, nA2, $06, nRst
00014C3B                            
00014C3B                            Dis_Loop3:
00014C3B                            	sCall		Dis_Call1
00014C3B F8                       M 	dc.b	$f8
00014C3C 0000                     M 	dc.w	dis_call1-*-1
00014C3E                            	sLoop		$00, $03, Dis_Loop3
00014C3E F700                     M 	dc.b	$f7,$00
00014C40 FFFA                     M 	dc.w	dis_loop3-*-1
00014C42 03                       M 	dc.b	$03
00014C43 9212 9E06 8012 9206        	dc.b nF1, $12, nF2, $06, nRst, $12, nF1, $06
00014C4B 8092 060C 0CA0 9612        	dc.b nRst, nF1, $06, $0C, $0C, nG2, nA1, $12
00014C53 A206 8012 9606 8096        	dc.b nA2, $06, nRst, $12, nA1, $06, nRst, nA1
00014C5B 060C 0CA2 0680 9512        	dc.b $06, $0C, $0C, nA2, $06, nRst, nAb1, $12
00014C63 A106 8012 9506 8095        	dc.b nAb2, $06, nRst, $12, nAb1, $06, nRst, nAb1
00014C6B 060C 1894 12A0 0680        	dc.b $06, $0C, $18, nG1, $12, nG2, $06, nRst
00014C73 1294 0680 9406 0C0C        	dc.b $12, nG1, $06, nRst, nG1, $06, $0C, $0C
00014C7B 9193 129F 0680 129B        	dc.b nE1, nFs1, $12, nFs2, $06, nRst, $12, nD2
00014C83 0680 9B06 0C0C A706        	dc.b $06, nRst, nD2, $06, $0C, $0C, nD3, $06
00014C8B 80                         	dc.b nRst
00014C8C                            	sLoop		$01, $02, Dis_Loop3
00014C8C F701                     M 	dc.b	$f7,$01
00014C8E FFAC                     M 	dc.w	dis_loop3-*-1
00014C90 02                       M 	dc.b	$02
00014C91                            
00014C91                            Dis_Loop4:
00014C91                            	sCall		Dis_Call1
00014C91 F8                       M 	dc.b	$f8
00014C92 0000                     M 	dc.w	dis_call1-*-1
00014C94                            	sLoop		$00, $03, Dis_Loop4
00014C94 F700                     M 	dc.b	$f7,$00
00014C96 FFFA                     M 	dc.w	dis_loop4-*-1
00014C98 03                       M 	dc.b	$03
00014C99 9212 9E06 800C 0692        	dc.b nF1, $12, nF2, $06, nRst, $0C, $06, nF1
00014CA1 0680 30                    	dc.b $06, nRst, $30
00014CA4                            	sJump		Dis_Loop2
00014CA4 F6                       M 	dc.b	$f6
00014CA5 FF54                     M 	dc.w	dis_loop2-*-1
00014CA7                            
00014CA7                            Dis_FM2:	; Fuse FM2 and FM6
00014CA7                            	sVoice		$01
00014CA7 E801                     M 	dc.b	$e8,$01
00014CA9 800C 9606                  	dc.b nRst, $0C, nE3-7-$0C, $06	; FM6
00014CAD                            	saVol		$0F
00014CAD ED0F                     M 	dc.b	$ed,$0f
00014CAF 06                         	dc.b $06			; FM6
00014CB0                            	saVol		-$0F
00014CB0 EDF1                     M 	dc.b	$ed,-$0f
00014CB2                            	sVoice		$02
00014CB2 E802                     M 	dc.b	$e8,$02
00014CB4 C4                         	dc.b nG5			; FM2
00014CB5                            	sVoice		$01
00014CB5 E801                     M 	dc.b	$e8,$01
00014CB7 96                         	dc.b nE3-7-$0C			; FM6
00014CB8                            	saVol		$0F
00014CB8 ED0F                     M 	dc.b	$ed,$0f
00014CBA 0680                       	dc.b $06, nRst			; FM6
00014CBC                            	saVol		-$0F
00014CBC EDF1                     M 	dc.b	$ed,-$0f
00014CBE 960C                       	dc.b nE3-7-$0C, $0C		; FM6
00014CC0                            	saVol		$0F
00014CC0 ED0F                     M 	dc.b	$ed,$0f
00014CC2 06                         	dc.b $06			; FM6
00014CC3                            	saVol		-$0F
00014CC3 EDF1                     M 	dc.b	$ed,-$0f
00014CC5 960C                       	dc.b nE3-7-$0C, $0C		; FM6
00014CC7                            	saVol		$0F
00014CC7 ED0F                     M 	dc.b	$ed,$0f
00014CC9 06                         	dc.b $06			; FM6
00014CCA                            	saVol		-$0F
00014CCA EDF1                     M 	dc.b	$ed,-$0f
00014CCC 96                         	dc.b nE3-7-$0C			; FM2
00014CCD                            	saVol		$0F
00014CCD ED0F                     M 	dc.b	$ed,$0f
00014CCF 06                         	dc.b $06			; FM6
00014CD0                            	saVol		-$0F
00014CD0 EDF1                     M 	dc.b	$ed,-$0f
00014CD2                            
00014CD2 800C 9406                  	dc.b nRst, $0C, nE3-9-$0C, $06	; FM6
00014CD6                            	saVol		$0F
00014CD6 ED0F                     M 	dc.b	$ed,$0f
00014CD8 06                         	dc.b $06			; FM6
00014CD9                            	saVol		-$0F
00014CD9 EDF1                     M 	dc.b	$ed,-$0f
00014CDB                            	sVoice		$02
00014CDB E802                     M 	dc.b	$e8,$02
00014CDD C4                         	dc.b nG5			; FM2
00014CDE                            	sVoice		$01
00014CDE E801                     M 	dc.b	$e8,$01
00014CE0 94                         	dc.b nE3-9-$0C			; FM6
00014CE1                            	saVol		$0F
00014CE1 ED0F                     M 	dc.b	$ed,$0f
00014CE3 0680                       	dc.b $06, nRst			; FM6
00014CE5                            	saVol		-$0F
00014CE5 EDF1                     M 	dc.b	$ed,-$0f
00014CE7 940C                       	dc.b nE3-9-$0C, $0C		; FM6
00014CE9                            	saVol		$0F
00014CE9 ED0F                     M 	dc.b	$ed,$0f
00014CEB 06                         	dc.b $06			; FM6
00014CEC                            	saVol		-$0F
00014CEC EDF1                     M 	dc.b	$ed,-$0f
00014CEE 940C                       	dc.b nE3-9-$0C, $0C		; FM6
00014CF0                            	saVol		$0F
00014CF0 ED0F                     M 	dc.b	$ed,$0f
00014CF2 06                         	dc.b $06			; FM6
00014CF3                            	saVol		-$0F
00014CF3 EDF1                     M 	dc.b	$ed,-$0f
00014CF5 94                         	dc.b nE3-9-$0C			; FM2
00014CF6                            	saVol		$0F
00014CF6 ED0F                     M 	dc.b	$ed,$0f
00014CF8 06                         	dc.b $06			; FM6
00014CF9                            	saVol		-$0F
00014CF9 EDF1                     M 	dc.b	$ed,-$0f
00014CFB                            
00014CFB 800C 9606                  	dc.b nRst, $0C, nE3-7-$0C, $06	; FM6
00014CFF                            	saVol		$0F
00014CFF ED0F                     M 	dc.b	$ed,$0f
00014D01 06                         	dc.b $06			; FM6
00014D02                            	saVol		-$0F
00014D02 EDF1                     M 	dc.b	$ed,-$0f
00014D04                            	sVoice		$02
00014D04 E802                     M 	dc.b	$e8,$02
00014D06 C4                         	dc.b nG5			; FM2
00014D07                            	sVoice		$01
00014D07 E801                     M 	dc.b	$e8,$01
00014D09 96                         	dc.b nE3-7-$0C			; FM6
00014D0A                            	saVol		$0F
00014D0A ED0F                     M 	dc.b	$ed,$0f
00014D0C 0680                       	dc.b $06, nRst			; FM6
00014D0E                            	saVol		-$0F
00014D0E EDF1                     M 	dc.b	$ed,-$0f
00014D10 960C                       	dc.b nE3-7-$0C, $0C		; FM6
00014D12                            	saVol		$0F
00014D12 ED0F                     M 	dc.b	$ed,$0f
00014D14 06                         	dc.b $06			; FM6
00014D15                            	saVol		-$0F
00014D15 EDF1                     M 	dc.b	$ed,-$0f
00014D17 960C                       	dc.b nE3-7-$0C, $0C		; FM6
00014D19                            	saVol		$0F
00014D19 ED0F                     M 	dc.b	$ed,$0f
00014D1B 06                         	dc.b $06			; FM6
00014D1C                            	saVol		-$0F
00014D1C EDF1                     M 	dc.b	$ed,-$0f
00014D1E 96                         	dc.b nE3-7-$0C			; FM2
00014D1F                            	saVol		$0F
00014D1F ED0F                     M 	dc.b	$ed,$0f
00014D21 06                         	dc.b $06			; FM6
00014D22                            	saVol		-$0F
00014D22 EDF1                     M 	dc.b	$ed,-$0f
00014D24                            
00014D24 800C 9406                  	dc.b nRst, $0C, nE3-9-$0C, $06	; FM6
00014D28                            	saVol		$0F
00014D28 ED0F                     M 	dc.b	$ed,$0f
00014D2A 06                         	dc.b $06			; FM6
00014D2B                            	saVol		-$0F
00014D2B EDF1                     M 	dc.b	$ed,-$0f
00014D2D                            	sVoice		$02
00014D2D E802                     M 	dc.b	$e8,$02
00014D2F C4                         	dc.b nG5			; FM2
00014D30                            	sVoice		$01
00014D30 E801                     M 	dc.b	$e8,$01
00014D32 94                         	dc.b nE3-9-$0C			; FM6
00014D33                            	saVol		$0F
00014D33 ED0F                     M 	dc.b	$ed,$0f
00014D35 06                         	dc.b $06			; FM6
00014D36                            	saVol		-$0F
00014D36 EDF1                     M 	dc.b	$ed,-$0f
00014D38 94                         	dc.b nE3-9-$0C			; FM6
00014D39                            	saVol		$0F
00014D39 ED0F                     M 	dc.b	$ed,$0f
00014D3B 06                         	dc.b $06			; FM6
00014D3C                            	saVol		-$0F
00014D3C EDF1                     M 	dc.b	$ed,-$0f
00014D3E 8012                       	dc.b nRst, $12
00014D40                            	sVoice		$02
00014D40 E802                     M 	dc.b	$e8,$02
00014D42 C418                       	dc.b nG5, $18			; FM2
00014D44                            
00014D44                            Dis_Jump1:
00014D44                            	saTranspose	-$0C
00014D44 E4F4                     M 	dc.b	$e4,-$0c
00014D46                            	sVoice		$01
00014D46 E801                     M 	dc.b	$e8,$01
00014D48                            
00014D48                            Dis_Loop13:
00014D48 800C A006                  	dc.b nRst, $0C, nG2, $06
00014D4C                            	saVol		$0F
00014D4C ED0F                     M 	dc.b	$ed,$0f
00014D4E 06                         	dc.b $06
00014D4F                            	saVol		$F1
00014D4F EDF1                     M 	dc.b	$ed,$f1
00014D51 80A0 06                    	dc.b nRst, nG2, $06
00014D54                            	saVol		$0F
00014D54 ED0F                     M 	dc.b	$ed,$0f
00014D56 06                         	dc.b $06
00014D57                            	saVol		$F1
00014D57 EDF1                     M 	dc.b	$ed,$f1
00014D59 80A0 0C                    	dc.b nRst, nG2, $0C
00014D5C                            	saVol		$0F
00014D5C ED0F                     M 	dc.b	$ed,$0f
00014D5E 06                         	dc.b $06
00014D5F                            	saVol		$F1
00014D5F EDF1                     M 	dc.b	$ed,$f1
00014D61 A00C                       	dc.b nG2, $0C
00014D63                            	saVol		$0F
00014D63 ED0F                     M 	dc.b	$ed,$0f
00014D65 06                         	dc.b $06
00014D66                            	saVol		$F1
00014D66 EDF1                     M 	dc.b	$ed,$f1
00014D68 A00C 800C 9E06             	dc.b nG2, $0C, nRst, $0C, nF2, $06
00014D6E                            	saVol		$0F
00014D6E ED0F                     M 	dc.b	$ed,$0f
00014D70 06                         	dc.b $06
00014D71                            	saVol		$F1
00014D71 EDF1                     M 	dc.b	$ed,$f1
00014D73 809E 06                    	dc.b nRst, nF2, $06
00014D76                            	saVol		$0F
00014D76 ED0F                     M 	dc.b	$ed,$0f
00014D78 06                         	dc.b $06
00014D79                            	saVol		$F1
00014D79 EDF1                     M 	dc.b	$ed,$f1
00014D7B 809E 0C                    	dc.b nRst, nF2, $0C
00014D7E                            	saVol		$0F
00014D7E ED0F                     M 	dc.b	$ed,$0f
00014D80 06                         	dc.b $06
00014D81                            	saVol		$F1
00014D81 EDF1                     M 	dc.b	$ed,$f1
00014D83 9E0C                       	dc.b nF2, $0C
00014D85                            	saVol		$0F
00014D85 ED0F                     M 	dc.b	$ed,$0f
00014D87 06                         	dc.b $06
00014D88                            	saVol		$F1
00014D88 EDF1                     M 	dc.b	$ed,$f1
00014D8A A00C                       	dc.b nG2, $0C
00014D8C                            	sLoop		$00, $03, Dis_Loop13
00014D8C F700                     M 	dc.b	$f7,$00
00014D8E FFB9                     M 	dc.w	dis_loop13-*-1
00014D90 03                       M 	dc.b	$03
00014D91 800C A006                  	dc.b nRst, $0C, nG2, $06
00014D95                            	saVol		$0F
00014D95 ED0F                     M 	dc.b	$ed,$0f
00014D97 06                         	dc.b $06
00014D98                            	saVol		$F1
00014D98 EDF1                     M 	dc.b	$ed,$f1
00014D9A 80A0 06                    	dc.b nRst, nG2, $06
00014D9D                            	saVol		$0F
00014D9D ED0F                     M 	dc.b	$ed,$0f
00014D9F 06                         	dc.b $06
00014DA0                            	saVol		$F1
00014DA0 EDF1                     M 	dc.b	$ed,$f1
00014DA2 80A0 0C                    	dc.b nRst, nG2, $0C
00014DA5                            	saVol		$0F
00014DA5 ED0F                     M 	dc.b	$ed,$0f
00014DA7 06                         	dc.b $06
00014DA8                            	saVol		$F1
00014DA8 EDF1                     M 	dc.b	$ed,$f1
00014DAA A00C                       	dc.b nG2, $0C
00014DAC                            	saVol		$0F
00014DAC ED0F                     M 	dc.b	$ed,$0f
00014DAE 06                         	dc.b $06
00014DAF                            	saVol		$F1
00014DAF EDF1                     M 	dc.b	$ed,$f1
00014DB1 A00C 800C 9E06             	dc.b nG2, $0C, nRst, $0C, nF2, $06
00014DB7                            	saVol		$0F
00014DB7 ED0F                     M 	dc.b	$ed,$0f
00014DB9 06                         	dc.b $06
00014DBA                            	saVol		$F1
00014DBA EDF1                     M 	dc.b	$ed,$f1
00014DBC 809E 06                    	dc.b nRst, nF2, $06
00014DBF                            	saVol		$0F
00014DBF ED0F                     M 	dc.b	$ed,$0f
00014DC1 06                         	dc.b $06
00014DC2                            	saVol		$F1
00014DC2 EDF1                     M 	dc.b	$ed,$f1
00014DC4 A006                       	dc.b nG2, $06
00014DC6                            	saVol		$0F
00014DC6 ED0F                     M 	dc.b	$ed,$0f
00014DC8 06                         	dc.b $06
00014DC9                            	saVol		$F1
00014DC9 EDF1                     M 	dc.b	$ed,$f1
00014DCB 802A                       	dc.b nRst, $2A			; FM6 above
00014DCD                            
00014DCD                            ;	sVoice		$01
00014DCD 800C A20C                  	dc.b nRst, $0C, nA2, $0C
00014DD1                            	saVol		$0F
00014DD1 ED0F                     M 	dc.b	$ed,$0f
00014DD3 06                         	dc.b $06
00014DD4                            	saVol		-$0F
00014DD4 EDF1                     M 	dc.b	$ed,-$0f
00014DD6 A20C A106                  	dc.b nA2, $0C, nAb2, $06
00014DDA                            	saVol		$0F
00014DDA ED0F                     M 	dc.b	$ed,$0f
00014DDC 06                         	dc.b $06
00014DDD                            	saVol		-$0F		; more FM6 above
00014DDD EDF1                     M 	dc.b	$ed,-$0f
00014DDF                            	saTranspose	$0C
00014DDF E40C                     M 	dc.b	$e4,$0c
00014DE1                            
00014DE1                            	sVoice		$03
00014DE1 E803                     M 	dc.b	$e8,$03
00014DE3                            	sPan		spRight, $00
00014DE3 E040                     M 	dc.b	$e0,spright|$00
00014DE5 8006 B80C                  	dc.b nRst, $06, nG4, $0C
00014DE9                            	saVol		$0A
00014DE9 ED0A                     M 	dc.b	$ed,$0a
00014DEB 0680                       	dc.b $06, nRst
00014DED                            	saVol		-$01
00014DED EDFF                     M 	dc.b	$ed,-$01
00014DEF B80C                       	dc.b nG4, $0C
00014DF1                            ;	saVol		$0A
00014DF1                            ;	dc.b $06
00014DF1                            	saVol		-$09		; FM2 above, clip 1 note out
00014DF1 EDF7                     M 	dc.b	$ed,-$09
00014DF3                            
00014DF3                            	saTranspose	-$0C
00014DF3 E4F4                     M 	dc.b	$e4,-$0c
00014DF5                            	sVoice		$01
00014DF5 E801                     M 	dc.b	$e8,$01
00014DF7                            	sPan		spCentre, $00
00014DF7 E0C0                     M 	dc.b	$e0,spcentre|$00
00014DF9 A01E                       	dc.b nG2, $1E
00014DFB                            	saVol		$0F
00014DFB ED0F                     M 	dc.b	$ed,$0f
00014DFD 06                         	dc.b $06
00014DFE                            	saVol		-$0F
00014DFE EDF1                     M 	dc.b	$ed,-$0f
00014E00 A01E                       	dc.b nG2, $1E
00014E02                            	saVol		$0F
00014E02 ED0F                     M 	dc.b	$ed,$0f
00014E04 06                         	dc.b $06
00014E05                            	saVol		-$0F
00014E05 EDF1                     M 	dc.b	$ed,-$0f
00014E07 A018                       	dc.b nG2, $18			; FM6 above
00014E09                            
00014E09                            ;	dc.b nRst, $5A
00014E09                            ;	saVol		-$09
00014E09                            
00014E09 800C A20C                  	dc.b nRst, $0C, nA2, $0C
00014E0D                            	saVol		$0F
00014E0D ED0F                     M 	dc.b	$ed,$0f
00014E0F 06                         	dc.b $06
00014E10                            	saVol		-$0F
00014E10 EDF1                     M 	dc.b	$ed,-$0f
00014E12 A20C A106                  	dc.b nA2, $0C, nAb2, $06
00014E16                            	saVol		$0F
00014E16 ED0F                     M 	dc.b	$ed,$0f
00014E18 06                         	dc.b $06
00014E19                            	saVol		-$0F		; FM6 above
00014E19 EDF1                     M 	dc.b	$ed,-$0f
00014E1B                            	saTranspose	$0C
00014E1B E40C                     M 	dc.b	$e4,$0c
00014E1D                            
00014E1D                            	sVoice		$03
00014E1D E803                     M 	dc.b	$e8,$03
00014E1F                            	sPan		spRight, $00
00014E1F E040                     M 	dc.b	$e0,spright|$00
00014E21 8006 BF0C                  	dc.b nRst, $06, nD5, $0C
00014E25                            	saVol		$0A
00014E25 ED0A                     M 	dc.b	$ed,$0a
00014E27 0680                       	dc.b $06, nRst
00014E29                            	saVol		-$01
00014E29 EDFF                     M 	dc.b	$ed,-$01
00014E2B BF0C                       	dc.b nD5, $0C
00014E2D                            ;	saVol		$0A
00014E2D                            ;	dc.b $06
00014E2D                            	saVol		-$09		; FM2 above, clip 1 note out
00014E2D EDF7                     M 	dc.b	$ed,-$09
00014E2F                            
00014E2F                            	saTranspose	-$0C
00014E2F E4F4                     M 	dc.b	$e4,-$0c
00014E31                            	sVoice		$01
00014E31 E801                     M 	dc.b	$e8,$01
00014E33                            	sPan		spCentre, $00
00014E33 E0C0                     M 	dc.b	$e0,spcentre|$00
00014E35 A01E                       	dc.b nG2, $1E
00014E37                            	saVol		$0F
00014E37 ED0F                     M 	dc.b	$ed,$0f
00014E39 06                         	dc.b $06
00014E3A                            	saVol		-$0F
00014E3A EDF1                     M 	dc.b	$ed,-$0f
00014E3C A012                       	dc.b nG2, $12
00014E3E                            	saVol		$0F
00014E3E ED0F                     M 	dc.b	$ed,$0f
00014E40 06                         	dc.b $06
00014E41                            	saVol		-$0F
00014E41 EDF1                     M 	dc.b	$ed,-$0f
00014E43                            ;	dc.b nG2, $0C
00014E43                            ;	saVol		$0F
00014E43                            ;	dc.b $06
00014E43                            ;	saVol		$F1
00014E43                            ;	dc.b nG2, $0C, $06		; FM6 above, removed several notes
00014E43                            	saTranspose	$0C
00014E43 E40C                     M 	dc.b	$e4,$0c
00014E45                            
00014E45                            	sVoice		$03
00014E45 E803                     M 	dc.b	$e8,$03
00014E47                            	sPan		spRight, $00
00014E47 E040                     M 	dc.b	$e0,spright|$00
00014E49 B806 BAB5 B30C             	dc.b nG4, $06, nA4, nE4, nD4, $0C
00014E4F B106                       	dc.b nC4, $06
00014E51                            	saVol		$0A
00014E51 ED0A                     M 	dc.b	$ed,$0a
00014E53 06                         	dc.b $06
00014E54                            	saVol		-$0A		; FM2 above
00014E54 EDF6                     M 	dc.b	$ed,-$0a
00014E56                            
00014E56                            	saTranspose	-$0C
00014E56 E4F4                     M 	dc.b	$e4,-$0c
00014E58                            	sVoice		$01
00014E58 E801                     M 	dc.b	$e8,$01
00014E5A                            	sPan		spCentre, $00
00014E5A E0C0                     M 	dc.b	$e0,spcentre|$00
00014E5C 8006 A20C                  	dc.b nRst, $06, nA2, $0C
00014E60                            	saVol		$0F
00014E60 ED0F                     M 	dc.b	$ed,$0f
00014E62 06                         	dc.b $06
00014E63                            	saVol		-$0F
00014E63 EDF1                     M 	dc.b	$ed,-$0f
00014E65 A20C A106                  	dc.b nA2, $0C, nAb2, $06
00014E69                            	saVol		$0F
00014E69 ED0F                     M 	dc.b	$ed,$0f
00014E6B 0680                       	dc.b $06, nRst
00014E6D                            	saVol		-$0F		; FM6 above
00014E6D EDF1                     M 	dc.b	$ed,-$0f
00014E6F                            	saTranspose	$0C
00014E6F E40C                     M 	dc.b	$e4,$0c
00014E71                            
00014E71                            	sVoice		$03
00014E71 E803                     M 	dc.b	$e8,$03
00014E73                            	sPan		spRight, $00
00014E73 E040                     M 	dc.b	$e0,spright|$00
00014E75 B80C                       	dc.b nG4, $0C
00014E77                            	saVol		$0A
00014E77 ED0A                     M 	dc.b	$ed,$0a
00014E79 0680                       	dc.b $06, nRst
00014E7B                            	saVol		-$01
00014E7B EDFF                     M 	dc.b	$ed,-$01
00014E7D B80C                       	dc.b nG4, $0C
00014E7F                            ;	saVol		$0A
00014E7F                            ;	dc.b $06
00014E7F                            	saVol		-$09		; FM2 above, clip 1 note out
00014E7F EDF7                     M 	dc.b	$ed,-$09
00014E81                            
00014E81                            	saTranspose	-$0C
00014E81 E4F4                     M 	dc.b	$e4,-$0c
00014E83                            	sVoice		$01
00014E83 E801                     M 	dc.b	$e8,$01
00014E85                            	sPan		spCentre, $00
00014E85 E0C0                     M 	dc.b	$e0,spcentre|$00
00014E87 A01E                       	dc.b nG2, $1E
00014E89                            	saVol		$0F
00014E89 ED0F                     M 	dc.b	$ed,$0f
00014E8B 06                         	dc.b $06
00014E8C                            	saVol		-$0F
00014E8C EDF1                     M 	dc.b	$ed,-$0f
00014E8E A01E                       	dc.b nG2, $1E
00014E90                            	saVol		$0F
00014E90 ED0F                     M 	dc.b	$ed,$0f
00014E92 06                         	dc.b $06
00014E93                            	saVol		-$0F
00014E93 EDF1                     M 	dc.b	$ed,-$0f
00014E95 A018                       	dc.b nG2, $18			; FM6 above
00014E97                            
00014E97 800C A20C                  	dc.b nRst, $0C, nA2, $0C
00014E9B                            	saVol		$0F
00014E9B ED0F                     M 	dc.b	$ed,$0f
00014E9D 06                         	dc.b $06
00014E9E                            	saVol		-$0F
00014E9E EDF1                     M 	dc.b	$ed,-$0f
00014EA0 A20C A106                  	dc.b nA2, $0C, nAb2, $06
00014EA4                            	saVol		$0F
00014EA4 ED0F                     M 	dc.b	$ed,$0f
00014EA6 0680                       	dc.b $06, nRst
00014EA8                            	saVol		-$0F		; FM6 above
00014EA8 EDF1                     M 	dc.b	$ed,-$0f
00014EAA                            	saTranspose	$0C
00014EAA E40C                     M 	dc.b	$e4,$0c
00014EAC                            
00014EAC                            	sVoice		$03
00014EAC E803                     M 	dc.b	$e8,$03
00014EAE                            	sPan		spRight, $00
00014EAE E040                     M 	dc.b	$e0,spright|$00
00014EB0 BF0C                       	dc.b nD5, $0C
00014EB2                            	saVol		$0A
00014EB2 ED0A                     M 	dc.b	$ed,$0a
00014EB4 0680                       	dc.b $06, nRst
00014EB6                            	saVol		-$01
00014EB6 EDFF                     M 	dc.b	$ed,-$01
00014EB8 BF0C                       	dc.b nD5, $0C
00014EBA                            	saVol		-$07
00014EBA EDF9                     M 	dc.b	$ed,-$07
00014EBC B124                       	dc.b nC4, $24
00014EBE                            	saVol		-$02
00014EBE EDFE                     M 	dc.b	$ed,-$02
00014EC0 B3                         	dc.b nD4
00014EC1 B518                       	dc.b nE4, $18			; FM2 above
00014EC3                            
00014EC3                            Dis_Loop6:
00014EC3                            	sVoice		$02
00014EC3 E802                     M 	dc.b	$e8,$02
00014EC5                            	sPan		spCenter, $00
00014EC5 E0C0                     M 	dc.b	$e0,spcenter|$00
00014EC7 8018 C4                    	dc.b nRst, $18, nG5
00014ECA                            	sVoice		$03
00014ECA E803                     M 	dc.b	$e8,$03
00014ECC                            	sPan		spRight, $00
00014ECC E040                     M 	dc.b	$e0,spright|$00
00014ECE 8006 ACAE                  	dc.b nRst, $06, nG3, nA3
00014ED2                            	saVol		$0A
00014ED2 ED0A                     M 	dc.b	$ed,$0a
00014ED4 06                         	dc.b $06
00014ED5                            	saVol		$F6
00014ED5 EDF6                     M 	dc.b	$ed,$f6
00014ED7 B10C AE06                  	dc.b nC4, $0C, nA3, $06
00014EDB                            	saVol		$0A
00014EDB ED0A                     M 	dc.b	$ed,$0a
00014EDD 06                         	dc.b $06
00014EDE                            	saVol		$F6
00014EDE EDF6                     M 	dc.b	$ed,$f6
00014EE0                            	sVoice		$02
00014EE0 E802                     M 	dc.b	$e8,$02
00014EE2                            	sPan		spCenter, $00
00014EE2 E0C0                     M 	dc.b	$e0,spcenter|$00
00014EE4 8018 C4                    	dc.b nRst, $18, nG5
00014EE7                            	sVoice		$03
00014EE7 E803                     M 	dc.b	$e8,$03
00014EE9                            	sPan		spRight, $00
00014EE9 E040                     M 	dc.b	$e0,spright|$00
00014EEB 8006 ACAE                  	dc.b nRst, $06, nG3, nA3
00014EEF                            	saVol		$0A
00014EEF ED0A                     M 	dc.b	$ed,$0a
00014EF1 06                         	dc.b $06
00014EF2                            	saVol		$F6
00014EF2 EDF6                     M 	dc.b	$ed,$f6
00014EF4 B1B3                       	dc.b nC4, nD4
00014EF6                            	saVol		$0A
00014EF6 ED0A                     M 	dc.b	$ed,$0a
00014EF8 06                         	dc.b $06
00014EF9                            	saVol		$F6
00014EF9 EDF6                     M 	dc.b	$ed,$f6
00014EFB B5                         	dc.b nE4
00014EFC                            	sVoice		$02
00014EFC E802                     M 	dc.b	$e8,$02
00014EFE                            	sPan		spCenter, $00
00014EFE E0C0                     M 	dc.b	$e0,spcenter|$00
00014F00 BA18 BCBD BFB8 C4C2        	dc.b nA4, $18, nB4, nC5, nD5, nG4, nG5, nF5
00014F08 C1                         	dc.b nE5
00014F09                            	sVoice		$03
00014F09 E803                     M 	dc.b	$e8,$03
00014F0B                            	sPan		spRight, $00
00014F0B E040                     M 	dc.b	$e0,spright|$00
00014F0D B512                       	dc.b nE4, $12
00014F0F                            	saVol		$0A
00014F0F ED0A                     M 	dc.b	$ed,$0a
00014F11 06                         	dc.b $06
00014F12                            	saVol		$F6
00014F12 EDF6                     M 	dc.b	$ed,$f6
00014F14 B312                       	dc.b nD4, $12
00014F16                            	saVol		$0A
00014F16 ED0A                     M 	dc.b	$ed,$0a
00014F18 06                         	dc.b $06
00014F19                            	saVol		$F6
00014F19 EDF6                     M 	dc.b	$ed,$f6
00014F1B B112 B0AF 06               	dc.b nC4, $12, nB3, nBb3, $06
00014F20                            	saVol		$0A
00014F20 ED0A                     M 	dc.b	$ed,$0a
00014F22 06                         	dc.b $06
00014F23                            	saVol		$F6
00014F23 EDF6                     M 	dc.b	$ed,$f6
00014F25 AD0C ACAD AEAF B006        	dc.b nAb3, $0C, nG3, nAb3, nA3, nBb3, nB3, $06
00014F2D                            	saVol		$0A
00014F2D ED0A                     M 	dc.b	$ed,$0a
00014F2F 06                         	dc.b $06
00014F30                            	saVol		$F6
00014F30 EDF6                     M 	dc.b	$ed,$f6
00014F32 B50C B306                  	dc.b nE4, $0C, nD4, $06
00014F36                            	saVol		$0A
00014F36 ED0A                     M 	dc.b	$ed,$0a
00014F38 06                         	dc.b $06
00014F39                            	saVol		$F6
00014F39 EDF6                     M 	dc.b	$ed,$f6
00014F3B 800C ACAE B106 B836        	dc.b nRst, $0C, nG3, nA3, nC4, $06, nG4, $36
00014F43                            	saVol		$0A
00014F43 ED0A                     M 	dc.b	$ed,$0a
00014F45 06                         	dc.b $06
00014F46                            	saVol		$F6
00014F46 EDF6                     M 	dc.b	$ed,$f6
00014F48 8012 B53C B30C             	dc.b nRst, $12, nE4, $3C, nD4, $0C
00014F4E                            	sLoop		$00, $02, Dis_Loop6
00014F4E F700                     M 	dc.b	$f7,$00
00014F50 FF72                     M 	dc.w	dis_loop6-*-1
00014F52 02                       M 	dc.b	$02
00014F53                            	sVoice		$02
00014F53 E802                     M 	dc.b	$e8,$02
00014F55                            	sPan		spCenter, $00
00014F55 E0C0                     M 	dc.b	$e0,spcenter|$00
00014F57                            	sCall		Dis_Call4
00014F57 F8                       M 	dc.b	$f8
00014F58 0000                     M 	dc.w	dis_call4-*-1
00014F5A                            	sJump		Dis_Jump1
00014F5A F6                       M 	dc.b	$f6
00014F5B FDE8                     M 	dc.w	dis_jump1-*-1
00014F5D                            
00014F5D                            Dis_FM3:
00014F5D                            	sVoice		$02
00014F5D E802                     M 	dc.b	$e8,$02
00014F5F                            	sCall		Dis_Call5
00014F5F F8                       M 	dc.b	$f8
00014F60 0000                     M 	dc.w	dis_call5-*-1
00014F62                            
00014F62                            Dis_Jump2:
00014F62                            	sVoice		$04
00014F62 E804                     M 	dc.b	$e8,$04
00014F64                            	saTranspose	$F4
00014F64 E4F4                     M 	dc.b	$e4,$f4
00014F66 800C AC06 06               	dc.b nRst, $0C, nG3, $06, $06
00014F6B                            	sCall		Dis_Call6
00014F6B F8                       M 	dc.b	$f8
00014F6C 0000                     M 	dc.w	dis_call6-*-1
00014F6E                            	sCall		Dis_Call6
00014F6E F8                       M 	dc.b	$f8
00014F6F 0000                     M 	dc.w	dis_call6-*-1
00014F71                            	sCall		Dis_Call6
00014F71 F8                       M 	dc.b	$f8
00014F72 0000                     M 	dc.w	dis_call6-*-1
00014F74                            	saTranspose	$02
00014F74 E402                     M 	dc.b	$e4,$02
00014F76                            	sCall		Dis_Call6
00014F76 F8                       M 	dc.b	$f8
00014F77 0000                     M 	dc.w	dis_call6-*-1
00014F79                            	sCall		Dis_Call6
00014F79 F8                       M 	dc.b	$f8
00014F7A 0000                     M 	dc.w	dis_call6-*-1
00014F7C                            	sCall		Dis_Call6
00014F7C F8                       M 	dc.b	$f8
00014F7D 0000                     M 	dc.w	dis_call6-*-1
00014F7F                            	saTranspose	$FE
00014F7F E4FE                     M 	dc.b	$e4,$fe
00014F81                            	sCall		Dis_Call6
00014F81 F8                       M 	dc.b	$f8
00014F82 0000                     M 	dc.w	dis_call6-*-1
00014F84                            
00014F84                            Dis_Loop7:
00014F84                            	sCall		Dis_Call6
00014F84 F8                       M 	dc.b	$f8
00014F85 0000                     M 	dc.w	dis_call6-*-1
00014F87                            	sLoop		$00, $04, Dis_Loop7
00014F87 F700                     M 	dc.b	$f7,$00
00014F89 FFFA                     M 	dc.w	dis_loop7-*-1
00014F8B 04                       M 	dc.b	$04
00014F8C                            	saTranspose	$02
00014F8C E402                     M 	dc.b	$e4,$02
00014F8E                            	sCall		Dis_Call6
00014F8E F8                       M 	dc.b	$f8
00014F8F 0000                     M 	dc.w	dis_call6-*-1
00014F91                            	sCall		Dis_Call6
00014F91 F8                       M 	dc.b	$f8
00014F92 0000                     M 	dc.w	dis_call6-*-1
00014F94                            	sCall		Dis_Call6
00014F94 F8                       M 	dc.b	$f8
00014F95 0000                     M 	dc.w	dis_call6-*-1
00014F97                            	saTranspose	$FE
00014F97 E4FE                     M 	dc.b	$e4,$fe
00014F99                            	sCall		Dis_Call6
00014F99 F8                       M 	dc.b	$f8
00014F9A 0000                     M 	dc.w	dis_call6-*-1
00014F9C                            	sLoop		$01, $02, Dis_Loop7
00014F9C F701                     M 	dc.b	$f7,$01
00014F9E FFE5                     M 	dc.w	dis_loop7-*-1
00014FA0 02                       M 	dc.b	$02
00014FA1                            	sCall		Dis_Call6
00014FA1 F8                       M 	dc.b	$f8
00014FA2 0000                     M 	dc.w	dis_call6-*-1
00014FA4                            	sCall		Dis_Call6
00014FA4 F8                       M 	dc.b	$f8
00014FA5 0000                     M 	dc.w	dis_call6-*-1
00014FA7                            	sCall		Dis_Call6
00014FA7 F8                       M 	dc.b	$f8
00014FA8 0000                     M 	dc.w	dis_call6-*-1
00014FAA                            	sCall		Dis_Call6
00014FAA F8                       M 	dc.b	$f8
00014FAB 0000                     M 	dc.w	dis_call6-*-1
00014FAD                            	saTranspose	$02
00014FAD E402                     M 	dc.b	$e4,$02
00014FAF                            	sCall		Dis_Call6
00014FAF F8                       M 	dc.b	$f8
00014FB0 0000                     M 	dc.w	dis_call6-*-1
00014FB2                            	saTranspose	$FE
00014FB2 E4FE                     M 	dc.b	$e4,$fe
00014FB4                            	saVol		$0A
00014FB4 ED0A                     M 	dc.b	$ed,$0a
00014FB6                            	sPan		spLeft, $00
00014FB6 E080                     M 	dc.b	$e0,spleft|$00
00014FB8 06                         	dc.b $06
00014FB9                            	saVol		$F6
00014FB9 EDF6                     M 	dc.b	$ed,$f6
00014FBB                            	sPan		spCenter, $00
00014FBB E0C0                     M 	dc.b	$e0,spcenter|$00
00014FBD 80AE AC                    	dc.b nRst, nA3, nG3
00014FC0                            	saVol		$0A
00014FC0 ED0A                     M 	dc.b	$ed,$0a
00014FC2                            	sPan		spLeft, $00
00014FC2 E080                     M 	dc.b	$e0,spleft|$00
00014FC4 06                         	dc.b $06
00014FC5                            	saVol		$F6
00014FC5 EDF6                     M 	dc.b	$ed,$f6
00014FC7                            	sPan		spCenter, $00
00014FC7 E0C0                     M 	dc.b	$e0,spcenter|$00
00014FC9 802A                       	dc.b nRst, $2A
00014FCB                            	saTranspose	$0C
00014FCB E40C                     M 	dc.b	$e4,$0c
00014FCD                            	sVoice		$03
00014FCD E803                     M 	dc.b	$e8,$03
00014FCF                            	sPan		spLeft, $00
00014FCF E080                     M 	dc.b	$e0,spleft|$00
00014FD1 803C B30C                  	dc.b nRst, $3C, nD4, $0C
00014FD5                            	saVol		$0A
00014FD5 ED0A                     M 	dc.b	$ed,$0a
00014FD7 0680                       	dc.b $06, nRst
00014FD9                            	saVol		$F6
00014FD9 EDF6                     M 	dc.b	$ed,$f6
00014FDB                            	saVol		$09
00014FDB ED09                     M 	dc.b	$ed,$09
00014FDD B30C                       	dc.b nD4, $0C
00014FDF                            	saVol		$0A
00014FDF ED0A                     M 	dc.b	$ed,$0a
00014FE1 06                         	dc.b $06
00014FE2                            	saVol		$F6
00014FE2 EDF6                     M 	dc.b	$ed,$f6
00014FE4 805A                       	dc.b nRst, $5A
00014FE6                            	saVol		$F7
00014FE6 EDF7                     M 	dc.b	$ed,$f7
00014FE8 803C B80C                  	dc.b nRst, $3C, nG4, $0C
00014FEC                            	saVol		$0A
00014FEC ED0A                     M 	dc.b	$ed,$0a
00014FEE 0680                       	dc.b $06, nRst
00014FF0                            	saVol		$F6
00014FF0 EDF6                     M 	dc.b	$ed,$f6
00014FF2                            	saVol		$09
00014FF2 ED09                     M 	dc.b	$ed,$09
00014FF4 B80C                       	dc.b nG4, $0C
00014FF6                            	saVol		$0A
00014FF6 ED0A                     M 	dc.b	$ed,$0a
00014FF8 06                         	dc.b $06
00014FF9                            	saVol		$ED
00014FF9 EDED                     M 	dc.b	$ed,$ed
00014FFB 8036 B006 B1B1 AE0C        	dc.b nRst, $36, nB3, $06, nC4, nC4, nA3, $0C
00015003 AE06                       	dc.b nA3, $06
00015005                            	saVol		$0A
00015005 ED0A                     M 	dc.b	$ed,$0a
00015007 06                         	dc.b $06
00015008                            	saVol		$F6
00015008 EDF6                     M 	dc.b	$ed,$f6
0001500A 8036 B30C                  	dc.b nRst, $36, nD4, $0C
0001500E                            	saVol		$0A
0001500E ED0A                     M 	dc.b	$ed,$0a
00015010 0680                       	dc.b $06, nRst
00015012                            	saVol		$F6
00015012 EDF6                     M 	dc.b	$ed,$f6
00015014                            	saVol		$09
00015014 ED09                     M 	dc.b	$ed,$09
00015016 B30C                       	dc.b nD4, $0C
00015018                            	saVol		$0A
00015018 ED0A                     M 	dc.b	$ed,$0a
0001501A 06                         	dc.b $06
0001501B                            	saVol		$F6
0001501B EDF6                     M 	dc.b	$ed,$f6
0001501D 805A                       	dc.b nRst, $5A
0001501F                            	saVol		$F7
0001501F EDF7                     M 	dc.b	$ed,$f7
00015021 803C B80C                  	dc.b nRst, $3C, nG4, $0C
00015025                            	saVol		$0A
00015025 ED0A                     M 	dc.b	$ed,$0a
00015027 0680                       	dc.b $06, nRst
00015029                            	saVol		$F6
00015029 EDF6                     M 	dc.b	$ed,$f6
0001502B                            	saVol		$09
0001502B ED09                     M 	dc.b	$ed,$09
0001502D B80C                       	dc.b nG4, $0C
0001502F                            	saVol		$F7
0001502F EDF7                     M 	dc.b	$ed,$f7
00015031                            	saVol		$02
00015031 ED02                     M 	dc.b	$ed,$02
00015033 AC24                       	dc.b nG3, $24
00015035                            	saVol		$FE
00015035 EDFE                     M 	dc.b	$ed,$fe
00015037 AE                         	dc.b nA3
00015038                            	saVol		$FE
00015038 EDFE                     M 	dc.b	$ed,$fe
0001503A AF18                       	dc.b nBb3, $18
0001503C                            	saVol		$02
0001503C ED02                     M 	dc.b	$ed,$02
0001503E                            
0001503E                            Dis_Loop8:
0001503E                            	sVoice		$02
0001503E E802                     M 	dc.b	$e8,$02
00015040                            	saVol		$05
00015040 ED05                     M 	dc.b	$ed,$05
00015042                            	ssMod68k	$01, $01, $04, $05
00015042 F001 0104 05             M 	dc.b	$f0,$01,$01,$04,$05
00015047 801E C412                  	dc.b nRst, $1E, nG5, $12
0001504B                            	sVoice		$03
0001504B E803                     M 	dc.b	$e8,$03
0001504D                            	saVol		$FB
0001504D EDFB                     M 	dc.b	$ed,$fb
0001504F                            	ssMod68k	$00, $00, $00, $00
0001504F F000 0000 00             M 	dc.b	$f0,$00,$00,$00,$00
00015054 8006 A5A7                  	dc.b nRst, $06, nC3, nD3
00015058                            	saVol		$0A
00015058 ED0A                     M 	dc.b	$ed,$0a
0001505A 06                         	dc.b $06
0001505B                            	saVol		$F6
0001505B EDF6                     M 	dc.b	$ed,$f6
0001505D AA0C A506                  	dc.b nF3, $0C, nC3, $06
00015061                            	saVol		$0A
00015061 ED0A                     M 	dc.b	$ed,$0a
00015063 06                         	dc.b $06
00015064                            	saVol		$F6
00015064 EDF6                     M 	dc.b	$ed,$f6
00015066                            	sVoice		$02
00015066 E802                     M 	dc.b	$e8,$02
00015068                            	saVol		$05
00015068 ED05                     M 	dc.b	$ed,$05
0001506A                            	ssMod68k	$01, $01, $04, $05
0001506A F001 0104 05             M 	dc.b	$f0,$01,$01,$04,$05
0001506F 801E C412                  	dc.b nRst, $1E, nG5, $12
00015073                            	sVoice		$03
00015073 E803                     M 	dc.b	$e8,$03
00015075                            	saVol		$FB
00015075 EDFB                     M 	dc.b	$ed,$fb
00015077                            	ssMod68k	$00, $00, $00, $00
00015077 F000 0000 00             M 	dc.b	$f0,$00,$00,$00,$00
0001507C 8006 A7A9                  	dc.b nRst, $06, nD3, nE3
00015080                            	saVol		$0A
00015080 ED0A                     M 	dc.b	$ed,$0a
00015082 06                         	dc.b $06
00015083                            	saVol		$F6
00015083 EDF6                     M 	dc.b	$ed,$f6
00015085 ACAE                       	dc.b nG3, nA3
00015087                            	saVol		$0A
00015087 ED0A                     M 	dc.b	$ed,$0a
00015089 06                         	dc.b $06
0001508A                            	saVol		$F6
0001508A EDF6                     M 	dc.b	$ed,$f6
0001508C B0                         	dc.b nB3
0001508D                            	sVoice		$02
0001508D E802                     M 	dc.b	$e8,$02
0001508F                            	saVol		$05
0001508F ED05                     M 	dc.b	$ed,$05
00015091                            	ssMod68k	$01, $01, $04, $05
00015091 F001 0104 05             M 	dc.b	$f0,$01,$01,$04,$05
00015096 8006 BA18 BCBD BFB8        	dc.b nRst, $06, nA4, $18, nB4, nC5, nD5, nG4
0001509E C4C2 C112                  	dc.b nG5, nF5, nE5, $12
000150A2                            	sVoice		$03
000150A2 E803                     M 	dc.b	$e8,$03
000150A4                            	saVol		$FB
000150A4 EDFB                     M 	dc.b	$ed,$fb
000150A6                            	ssMod68k	$00, $00, $00, $00
000150A6 F000 0000 00             M 	dc.b	$f0,$00,$00,$00,$00
000150AB AE12                       	dc.b nA3, $12
000150AD                            	saVol		$0A
000150AD ED0A                     M 	dc.b	$ed,$0a
000150AF 06                         	dc.b $06
000150B0                            	saVol		$F6
000150B0 EDF6                     M 	dc.b	$ed,$f6
000150B2 AC12                       	dc.b nG3, $12
000150B4                            	saVol		$0A
000150B4 ED0A                     M 	dc.b	$ed,$0a
000150B6 06                         	dc.b $06
000150B7                            	saVol		$F6
000150B7 EDF6                     M 	dc.b	$ed,$f6
000150B9 AA12 A9A8 06               	dc.b nF3, $12, nE3, nEb3, $06
000150BE                            	saVol		$0A
000150BE ED0A                     M 	dc.b	$ed,$0a
000150C0 06                         	dc.b $06
000150C1                            	saVol		$F6
000150C1 EDF6                     M 	dc.b	$ed,$f6
000150C3 A70C A5A7 A8A9 AA06        	dc.b nD3, $0C, nC3, nD3, nEb3, nE3, nF3, $06
000150CB                            	saVol		$0A
000150CB ED0A                     M 	dc.b	$ed,$0a
000150CD 06                         	dc.b $06
000150CE                            	saVol		$F6
000150CE EDF6                     M 	dc.b	$ed,$f6
000150D0 B10C AD06                  	dc.b nC4, $0C, nAb3, $06
000150D4                            	saVol		$0A
000150D4 ED0A                     M 	dc.b	$ed,$0a
000150D6 06                         	dc.b $06
000150D7                            	saVol		$F6
000150D7 EDF6                     M 	dc.b	$ed,$f6
000150D9 800C A5A7 AC06 B136        	dc.b nRst, $0C, nC3, nD3, nG3, $06, nC4, $36
000150E1                            	saVol		$0A
000150E1 ED0A                     M 	dc.b	$ed,$0a
000150E3 06                         	dc.b $06
000150E4                            	saVol		$F6
000150E4 EDF6                     M 	dc.b	$ed,$f6
000150E6 8012 B13C 0C               	dc.b nRst, $12, nC4, $3C, $0C
000150EB                            	sLoop		$00, $02, Dis_Loop8
000150EB F700                     M 	dc.b	$f7,$00
000150ED FF50                     M 	dc.w	dis_loop8-*-1
000150EF 02                       M 	dc.b	$02
000150F0                            	sVoice		$02
000150F0 E802                     M 	dc.b	$e8,$02
000150F2                            	sCall		Dis_Call5
000150F2 F8                       M 	dc.b	$f8
000150F3 0000                     M 	dc.w	dis_call5-*-1
000150F5                            	sJump		Dis_Jump2
000150F5 F6                       M 	dc.b	$f6
000150F6 FE6B                     M 	dc.w	dis_jump2-*-1
000150F8                            
000150F8                            Dis_FM4:
000150F8                            	sVoice		$01
000150F8 E801                     M 	dc.b	$e8,$01
000150FA                            	sCall		Dis_Call7
000150FA F8                       M 	dc.b	$f8
000150FB 0000                     M 	dc.w	dis_call7-*-1
000150FD                            	saTranspose	$FE
000150FD E4FE                     M 	dc.b	$e4,$fe
000150FF                            	sCall		Dis_Call7
000150FF F8                       M 	dc.b	$f8
00015100 0000                     M 	dc.w	dis_call7-*-1
00015102                            	saTranspose	$02
00015102 E402                     M 	dc.b	$e4,$02
00015104                            	sCall		Dis_Call7
00015104 F8                       M 	dc.b	$f8
00015105 0000                     M 	dc.w	dis_call7-*-1
00015107                            	saTranspose	$FE
00015107 E4FE                     M 	dc.b	$e4,$fe
00015109                            	sCall		Dis_Call8
00015109 F8                       M 	dc.b	$f8
0001510A 0000                     M 	dc.w	dis_call8-*-1
0001510C                            	saTranspose	$02
0001510C E402                     M 	dc.b	$e4,$02
0001510E                            
0001510E                            Dis_Loop9:
0001510E 800C A906                  	dc.b nRst, $0C, nE3, $06
00015112                            	saVol		$0F
00015112 ED0F                     M 	dc.b	$ed,$0f
00015114 06                         	dc.b $06
00015115                            	saVol		$F1
00015115 EDF1                     M 	dc.b	$ed,$f1
00015117 80A9 06                    	dc.b nRst, nE3, $06
0001511A                            	saVol		$0F
0001511A ED0F                     M 	dc.b	$ed,$0f
0001511C 06                         	dc.b $06
0001511D                            	saVol		$F1
0001511D EDF1                     M 	dc.b	$ed,$f1
0001511F 80A7 0C                    	dc.b nRst, nD3, $0C
00015122                            	saVol		$0F
00015122 ED0F                     M 	dc.b	$ed,$0f
00015124 06                         	dc.b $06
00015125                            	saVol		$F1
00015125 EDF1                     M 	dc.b	$ed,$f1
00015127 A70C                       	dc.b nD3, $0C
00015129                            	saVol		$0F
00015129 ED0F                     M 	dc.b	$ed,$0f
0001512B 06                         	dc.b $06
0001512C                            	saVol		$F1
0001512C EDF1                     M 	dc.b	$ed,$f1
0001512E A70C 800C A506             	dc.b nD3, $0C, nRst, $0C, nC3, $06
00015134                            	saVol		$0F
00015134 ED0F                     M 	dc.b	$ed,$0f
00015136 06                         	dc.b $06
00015137                            	saVol		$F1
00015137 EDF1                     M 	dc.b	$ed,$f1
00015139 80A5 06                    	dc.b nRst, nC3, $06
0001513C                            	saVol		$0F
0001513C ED0F                     M 	dc.b	$ed,$0f
0001513E 06                         	dc.b $06
0001513F                            	saVol		$F1
0001513F EDF1                     M 	dc.b	$ed,$f1
00015141 80A5 0C                    	dc.b nRst, nC3, $0C
00015144                            	saVol		$0F
00015144 ED0F                     M 	dc.b	$ed,$0f
00015146 06                         	dc.b $06
00015147                            	saVol		$F1
00015147 EDF1                     M 	dc.b	$ed,$f1
00015149 A50C                       	dc.b nC3, $0C
0001514B                            	saVol		$0F
0001514B ED0F                     M 	dc.b	$ed,$0f
0001514D 06                         	dc.b $06
0001514E                            	saVol		$F1
0001514E EDF1                     M 	dc.b	$ed,$f1
00015150 A70C                       	dc.b nD3, $0C
00015152                            	sLoop		$00, $03, Dis_Loop9
00015152 F700                     M 	dc.b	$f7,$00
00015154 FFB9                     M 	dc.w	dis_loop9-*-1
00015156 03                       M 	dc.b	$03
00015157 800C A906                  	dc.b nRst, $0C, nE3, $06
0001515B                            	saVol		$0F
0001515B ED0F                     M 	dc.b	$ed,$0f
0001515D 06                         	dc.b $06
0001515E                            	saVol		$F1
0001515E EDF1                     M 	dc.b	$ed,$f1
00015160 80A9 06                    	dc.b nRst, nE3, $06
00015163                            	saVol		$0F
00015163 ED0F                     M 	dc.b	$ed,$0f
00015165 06                         	dc.b $06
00015166                            	saVol		$F1
00015166 EDF1                     M 	dc.b	$ed,$f1
00015168 80A7 0C                    	dc.b nRst, nD3, $0C
0001516B                            	saVol		$0F
0001516B ED0F                     M 	dc.b	$ed,$0f
0001516D 06                         	dc.b $06
0001516E                            	saVol		$F1
0001516E EDF1                     M 	dc.b	$ed,$f1
00015170 A70C                       	dc.b nD3, $0C
00015172                            	saVol		$0F
00015172 ED0F                     M 	dc.b	$ed,$0f
00015174 06                         	dc.b $06
00015175                            	saVol		$F1
00015175 EDF1                     M 	dc.b	$ed,$f1
00015177 A70C 800C A506             	dc.b nD3, $0C, nRst, $0C, nC3, $06
0001517D                            	saVol		$0F
0001517D ED0F                     M 	dc.b	$ed,$0f
0001517F 06                         	dc.b $06
00015180                            	saVol		$F1
00015180 EDF1                     M 	dc.b	$ed,$f1
00015182 80A5 06                    	dc.b nRst, nC3, $06
00015185                            	saVol		$0F
00015185 ED0F                     M 	dc.b	$ed,$0f
00015187 06                         	dc.b $06
00015188                            	saVol		$F1
00015188 EDF1                     M 	dc.b	$ed,$f1
0001518A A706                       	dc.b nD3, $06
0001518C                            	saVol		$0F
0001518C ED0F                     M 	dc.b	$ed,$0f
0001518E 06                         	dc.b $06
0001518F                            	saVol		$F1
0001518F EDF1                     M 	dc.b	$ed,$f1
00015191 802A                       	dc.b nRst, $2A
00015193                            	sCall		Dis_Call9
00015193 F8                       M 	dc.b	$f8
00015194 0000                     M 	dc.w	dis_call9-*-1
00015196 A91E                       	dc.b nE3, $1E
00015198                            	saVol		$0F
00015198 ED0F                     M 	dc.b	$ed,$0f
0001519A 06                         	dc.b $06
0001519B                            	saVol		$F1
0001519B EDF1                     M 	dc.b	$ed,$f1
0001519D A71E                       	dc.b nD3, $1E
0001519F                            	saVol		$0F
0001519F ED0F                     M 	dc.b	$ed,$0f
000151A1 06                         	dc.b $06
000151A2                            	saVol		$F1
000151A2 EDF1                     M 	dc.b	$ed,$f1
000151A4 A918                       	dc.b nE3, $18
000151A6                            	sCall		Dis_Call9
000151A6 F8                       M 	dc.b	$f8
000151A7 0000                     M 	dc.w	dis_call9-*-1
000151A9 A91E                       	dc.b nE3, $1E
000151AB                            	saVol		$0F
000151AB ED0F                     M 	dc.b	$ed,$0f
000151AD 06                         	dc.b $06
000151AE                            	saVol		$F1
000151AE EDF1                     M 	dc.b	$ed,$f1
000151B0 A912                       	dc.b nE3, $12
000151B2                            	saVol		$0F
000151B2 ED0F                     M 	dc.b	$ed,$0f
000151B4 06                         	dc.b $06
000151B5                            	saVol		$F1
000151B5 EDF1                     M 	dc.b	$ed,$f1
000151B7 A90C                       	dc.b nE3, $0C
000151B9                            	saVol		$0F
000151B9 ED0F                     M 	dc.b	$ed,$0f
000151BB 06                         	dc.b $06
000151BC                            	saVol		$F1
000151BC EDF1                     M 	dc.b	$ed,$f1
000151BE A70C 06                    	dc.b nD3, $0C, $06
000151C1                            	sCall		Dis_Call9
000151C1 F8                       M 	dc.b	$f8
000151C2 0000                     M 	dc.w	dis_call9-*-1
000151C4 A91E                       	dc.b nE3, $1E
000151C6                            	saVol		$0F
000151C6 ED0F                     M 	dc.b	$ed,$0f
000151C8 06                         	dc.b $06
000151C9                            	saVol		$F1
000151C9 EDF1                     M 	dc.b	$ed,$f1
000151CB A71E                       	dc.b nD3, $1E
000151CD                            	saVol		$0F
000151CD ED0F                     M 	dc.b	$ed,$0f
000151CF 06                         	dc.b $06
000151D0                            	saVol		$F1
000151D0 EDF1                     M 	dc.b	$ed,$f1
000151D2 A918                       	dc.b nE3, $18
000151D4                            	sCall		Dis_Call9
000151D4 F8                       M 	dc.b	$f8
000151D5 0000                     M 	dc.w	dis_call9-*-1
000151D7 A51E                       	dc.b nC3, $1E
000151D9                            	saVol		$0F
000151D9 ED0F                     M 	dc.b	$ed,$0f
000151DB 06                         	dc.b $06
000151DC                            	saVol		$F1
000151DC EDF1                     M 	dc.b	$ed,$f1
000151DE A71E                       	dc.b nD3, $1E
000151E0                            	saVol		$0F
000151E0 ED0F                     M 	dc.b	$ed,$0f
000151E2 06                         	dc.b $06
000151E3                            	saVol		$F1
000151E3 EDF1                     M 	dc.b	$ed,$f1
000151E5 A912                       	dc.b nE3, $12
000151E7                            	saVol		$0F
000151E7 ED0F                     M 	dc.b	$ed,$0f
000151E9 06                         	dc.b $06
000151EA                            	saVol		$F1
000151EA EDF1                     M 	dc.b	$ed,$f1
000151EC                            
000151EC                            Dis_Loop10:
000151EC                            	sCall		Dis_Call7
000151EC F8                       M 	dc.b	$f8
000151ED 0000                     M 	dc.w	dis_call7-*-1
000151EF                            	saTranspose	$FE
000151EF E4FE                     M 	dc.b	$e4,$fe
000151F1                            	sCall		Dis_Call7
000151F1 F8                       M 	dc.b	$f8
000151F2 0000                     M 	dc.w	dis_call7-*-1
000151F4                            	saTranspose	$02
000151F4 E402                     M 	dc.b	$e4,$02
000151F6                            	sCall		Dis_Call7
000151F6 F8                       M 	dc.b	$f8
000151F7 0000                     M 	dc.w	dis_call7-*-1
000151F9                            	saTranspose	$FE
000151F9 E4FE                     M 	dc.b	$e4,$fe
000151FB                            	sCall		Dis_Call7
000151FB F8                       M 	dc.b	$f8
000151FC 0000                     M 	dc.w	dis_call7-*-1
000151FE                            	saTranspose	$02
000151FE E402                     M 	dc.b	$e4,$02
00015200                            	sCall		Dis_Call7
00015200 F8                       M 	dc.b	$f8
00015201 0000                     M 	dc.w	dis_call7-*-1
00015203                            	saTranspose	$FE
00015203 E4FE                     M 	dc.b	$e4,$fe
00015205                            	sCall		Dis_Call7
00015205 F8                       M 	dc.b	$f8
00015206 0000                     M 	dc.w	dis_call7-*-1
00015208                            	saTranspose	$02
00015208 E402                     M 	dc.b	$e4,$02
0001520A                            	sCall		Dis_Call7
0001520A F8                       M 	dc.b	$f8
0001520B 0000                     M 	dc.w	dis_call7-*-1
0001520D                            	sCall		Dis_Call7
0001520D F8                       M 	dc.b	$f8
0001520E 0000                     M 	dc.w	dis_call7-*-1
00015210                            	sLoop		$00, $02, Dis_Loop10
00015210 F700                     M 	dc.b	$f7,$00
00015212 FFD9                     M 	dc.w	dis_loop10-*-1
00015214 02                       M 	dc.b	$02
00015215                            	sCall		Dis_Call7
00015215 F8                       M 	dc.b	$f8
00015216 0000                     M 	dc.w	dis_call7-*-1
00015218                            	saTranspose	$FE
00015218 E4FE                     M 	dc.b	$e4,$fe
0001521A                            	sCall		Dis_Call7
0001521A F8                       M 	dc.b	$f8
0001521B 0000                     M 	dc.w	dis_call7-*-1
0001521D                            	saTranspose	$02
0001521D E402                     M 	dc.b	$e4,$02
0001521F                            	sCall		Dis_Call7
0001521F F8                       M 	dc.b	$f8
00015220 0000                     M 	dc.w	dis_call7-*-1
00015222                            	saTranspose	$FE
00015222 E4FE                     M 	dc.b	$e4,$fe
00015224                            	sCall		Dis_Call8
00015224 F8                       M 	dc.b	$f8
00015225 0000                     M 	dc.w	dis_call8-*-1
00015227                            	saTranspose	$02
00015227 E402                     M 	dc.b	$e4,$02
00015229                            	sJump		Dis_Loop9
00015229 F6                       M 	dc.b	$f6
0001522A FEE3                     M 	dc.w	dis_loop9-*-1
0001522C                            
0001522C                            Dis_FM5:
0001522C                            	sVoice		$01
0001522C E801                     M 	dc.b	$e8,$01
0001522E                            	saTranspose	$FC
0001522E E4FC                     M 	dc.b	$e4,$fc
00015230                            	sCall		Dis_Call7
00015230 F8                       M 	dc.b	$f8
00015231 0000                     M 	dc.w	dis_call7-*-1
00015233                            	saTranspose	$FF
00015233 E4FF                     M 	dc.b	$e4,$ff
00015235                            	sCall		Dis_Call7
00015235 F8                       M 	dc.b	$f8
00015236 0000                     M 	dc.w	dis_call7-*-1
00015238                            	saTranspose	$01
00015238 E401                     M 	dc.b	$e4,$01
0001523A                            	sCall		Dis_Call7
0001523A F8                       M 	dc.b	$f8
0001523B 0000                     M 	dc.w	dis_call7-*-1
0001523D                            	saTranspose	$FF
0001523D E4FF                     M 	dc.b	$e4,$ff
0001523F                            	sCall		Dis_Call8
0001523F F8                       M 	dc.b	$f8
00015240 0000                     M 	dc.w	dis_call8-*-1
00015242                            	saTranspose	$05
00015242 E405                     M 	dc.b	$e4,$05
00015244                            
00015244                            Dis_Loop11:
00015244 800C A506                  	dc.b nRst, $0C, nC3, $06
00015248                            	saVol		$0F
00015248 ED0F                     M 	dc.b	$ed,$0f
0001524A 06                         	dc.b $06
0001524B                            	saVol		$F1
0001524B EDF1                     M 	dc.b	$ed,$f1
0001524D 80A5 06                    	dc.b nRst, nC3, $06
00015250                            	saVol		$0F
00015250 ED0F                     M 	dc.b	$ed,$0f
00015252 06                         	dc.b $06
00015253                            	saVol		$F1
00015253 EDF1                     M 	dc.b	$ed,$f1
00015255 80A4 0C                    	dc.b nRst, nB2, $0C
00015258                            	saVol		$0F
00015258 ED0F                     M 	dc.b	$ed,$0f
0001525A 06                         	dc.b $06
0001525B                            	saVol		$F1
0001525B EDF1                     M 	dc.b	$ed,$f1
0001525D A40C                       	dc.b nB2, $0C
0001525F                            	saVol		$0F
0001525F ED0F                     M 	dc.b	$ed,$0f
00015261 06                         	dc.b $06
00015262                            	saVol		$F1
00015262 EDF1                     M 	dc.b	$ed,$f1
00015264 A40C 800C A206             	dc.b nB2, $0C, nRst, $0C, nA2, $06
0001526A                            	saVol		$0F
0001526A ED0F                     M 	dc.b	$ed,$0f
0001526C 06                         	dc.b $06
0001526D                            	saVol		$F1
0001526D EDF1                     M 	dc.b	$ed,$f1
0001526F 80A2 06                    	dc.b nRst, nA2, $06
00015272                            	saVol		$0F
00015272 ED0F                     M 	dc.b	$ed,$0f
00015274 06                         	dc.b $06
00015275                            	saVol		$F1
00015275 EDF1                     M 	dc.b	$ed,$f1
00015277 80A2 0C                    	dc.b nRst, nA2, $0C
0001527A                            	saVol		$0F
0001527A ED0F                     M 	dc.b	$ed,$0f
0001527C 06                         	dc.b $06
0001527D                            	saVol		$F1
0001527D EDF1                     M 	dc.b	$ed,$f1
0001527F A20C                       	dc.b nA2, $0C
00015281                            	saVol		$0F
00015281 ED0F                     M 	dc.b	$ed,$0f
00015283 06                         	dc.b $06
00015284                            	saVol		$F1
00015284 EDF1                     M 	dc.b	$ed,$f1
00015286 A40C                       	dc.b nB2, $0C
00015288                            	sLoop		$00, $03, Dis_Loop11
00015288 F700                     M 	dc.b	$f7,$00
0001528A FFB9                     M 	dc.w	dis_loop11-*-1
0001528C 03                       M 	dc.b	$03
0001528D 800C A506                  	dc.b nRst, $0C, nC3, $06
00015291                            	saVol		$0F
00015291 ED0F                     M 	dc.b	$ed,$0f
00015293 06                         	dc.b $06
00015294                            	saVol		$F1
00015294 EDF1                     M 	dc.b	$ed,$f1
00015296 80A5 06                    	dc.b nRst, nC3, $06
00015299                            	saVol		$0F
00015299 ED0F                     M 	dc.b	$ed,$0f
0001529B 06                         	dc.b $06
0001529C                            	saVol		$F1
0001529C EDF1                     M 	dc.b	$ed,$f1
0001529E 80A4 0C                    	dc.b nRst, nB2, $0C
000152A1                            	saVol		$0F
000152A1 ED0F                     M 	dc.b	$ed,$0f
000152A3 06                         	dc.b $06
000152A4                            	saVol		$F1
000152A4 EDF1                     M 	dc.b	$ed,$f1
000152A6 A40C                       	dc.b nB2, $0C
000152A8                            	saVol		$0F
000152A8 ED0F                     M 	dc.b	$ed,$0f
000152AA 06                         	dc.b $06
000152AB                            	saVol		$F1
000152AB EDF1                     M 	dc.b	$ed,$f1
000152AD A40C 800C A206             	dc.b nB2, $0C, nRst, $0C, nA2, $06
000152B3                            	saVol		$0F
000152B3 ED0F                     M 	dc.b	$ed,$0f
000152B5 06                         	dc.b $06
000152B6                            	saVol		$F1
000152B6 EDF1                     M 	dc.b	$ed,$f1
000152B8 80A2 06                    	dc.b nRst, nA2, $06
000152BB                            	saVol		$0F
000152BB ED0F                     M 	dc.b	$ed,$0f
000152BD 06                         	dc.b $06
000152BE                            	saVol		$F1
000152BE EDF1                     M 	dc.b	$ed,$f1
000152C0 A406                       	dc.b nB2, $06
000152C2                            	saVol		$0F
000152C2 ED0F                     M 	dc.b	$ed,$0f
000152C4 06                         	dc.b $06
000152C5                            	saVol		$F1
000152C5 EDF1                     M 	dc.b	$ed,$f1
000152C7 802A                       	dc.b nRst, $2A
000152C9                            	sCall		Dis_Call10
000152C9 F8                       M 	dc.b	$f8
000152CA 0000                     M 	dc.w	dis_call10-*-1
000152CC A51E                       	dc.b nC3, $1E
000152CE                            	saVol		$0F
000152CE ED0F                     M 	dc.b	$ed,$0f
000152D0 06                         	dc.b $06
000152D1                            	saVol		$F1
000152D1 EDF1                     M 	dc.b	$ed,$f1
000152D3 A31E                       	dc.b nBb2, $1E
000152D5                            	saVol		$0F
000152D5 ED0F                     M 	dc.b	$ed,$0f
000152D7 06                         	dc.b $06
000152D8                            	saVol		$F1
000152D8 EDF1                     M 	dc.b	$ed,$f1
000152DA A318                       	dc.b nBb2, $18
000152DC                            	sCall		Dis_Call10
000152DC F8                       M 	dc.b	$f8
000152DD 0000                     M 	dc.w	dis_call10-*-1
000152DF A51E                       	dc.b nC3, $1E
000152E1                            	saVol		$0F
000152E1 ED0F                     M 	dc.b	$ed,$0f
000152E3 06                         	dc.b $06
000152E4                            	saVol		$F1
000152E4 EDF1                     M 	dc.b	$ed,$f1
000152E6 A512                       	dc.b nC3, $12
000152E8                            	saVol		$0F
000152E8 ED0F                     M 	dc.b	$ed,$0f
000152EA 06                         	dc.b $06
000152EB                            	saVol		$F1
000152EB EDF1                     M 	dc.b	$ed,$f1
000152ED A50C                       	dc.b nC3, $0C
000152EF                            	saVol		$0F
000152EF ED0F                     M 	dc.b	$ed,$0f
000152F1 06                         	dc.b $06
000152F2                            	saVol		$F1
000152F2 EDF1                     M 	dc.b	$ed,$f1
000152F4 A40C 06                    	dc.b nB2, $0C, $06
000152F7                            	sCall		Dis_Call10
000152F7 F8                       M 	dc.b	$f8
000152F8 0000                     M 	dc.w	dis_call10-*-1
000152FA A51E                       	dc.b nC3, $1E
000152FC                            	saVol		$0F
000152FC ED0F                     M 	dc.b	$ed,$0f
000152FE 06                         	dc.b $06
000152FF                            	saVol		$F1
000152FF EDF1                     M 	dc.b	$ed,$f1
00015301 A31E                       	dc.b nBb2, $1E
00015303                            	saVol		$0F
00015303 ED0F                     M 	dc.b	$ed,$0f
00015305 06                         	dc.b $06
00015306                            	saVol		$F1
00015306 EDF1                     M 	dc.b	$ed,$f1
00015308 A318                       	dc.b nBb2, $18
0001530A                            	sCall		Dis_Call10
0001530A F8                       M 	dc.b	$f8
0001530B 0000                     M 	dc.w	dis_call10-*-1
0001530D A21E                       	dc.b nA2, $1E
0001530F                            	saVol		$0F
0001530F ED0F                     M 	dc.b	$ed,$0f
00015311 06                         	dc.b $06
00015312                            	saVol		$F1
00015312 EDF1                     M 	dc.b	$ed,$f1
00015314 A41E                       	dc.b nB2, $1E
00015316                            	saVol		$0F
00015316 ED0F                     M 	dc.b	$ed,$0f
00015318 06                         	dc.b $06
00015319                            	saVol		$F1
00015319 EDF1                     M 	dc.b	$ed,$f1
0001531B A312                       	dc.b nBb2, $12
0001531D                            	saVol		$0F
0001531D ED0F                     M 	dc.b	$ed,$0f
0001531F 06                         	dc.b $06
00015320                            	saVol		$F1
00015320 EDF1                     M 	dc.b	$ed,$f1
00015322                            
00015322                            Dis_Loop12:
00015322                            	saTranspose	$FC
00015322 E4FC                     M 	dc.b	$e4,$fc
00015324                            	sCall		Dis_Call7
00015324 F8                       M 	dc.b	$f8
00015325 0000                     M 	dc.w	dis_call7-*-1
00015327                            	saTranspose	$FF
00015327 E4FF                     M 	dc.b	$e4,$ff
00015329                            	sCall		Dis_Call7
00015329 F8                       M 	dc.b	$f8
0001532A 0000                     M 	dc.w	dis_call7-*-1
0001532C                            	saTranspose	$01
0001532C E401                     M 	dc.b	$e4,$01
0001532E                            	sCall		Dis_Call7
0001532E F8                       M 	dc.b	$f8
0001532F 0000                     M 	dc.w	dis_call7-*-1
00015331                            	saTranspose	$FF
00015331 E4FF                     M 	dc.b	$e4,$ff
00015333                            	sCall		Dis_Call7
00015333 F8                       M 	dc.b	$f8
00015334 0000                     M 	dc.w	dis_call7-*-1
00015336                            	saTranspose	$01
00015336 E401                     M 	dc.b	$e4,$01
00015338                            	sCall		Dis_Call7
00015338 F8                       M 	dc.b	$f8
00015339 0000                     M 	dc.w	dis_call7-*-1
0001533B                            	sCall		Dis_Call7
0001533B F8                       M 	dc.b	$f8
0001533C 0000                     M 	dc.w	dis_call7-*-1
0001533E                            	sCall		Dis_Call7
0001533E F8                       M 	dc.b	$f8
0001533F 0000                     M 	dc.w	dis_call7-*-1
00015341                            	sCall		Dis_Call7
00015341 F8                       M 	dc.b	$f8
00015342 0000                     M 	dc.w	dis_call7-*-1
00015344                            	saTranspose	$04
00015344 E404                     M 	dc.b	$e4,$04
00015346                            	sLoop		$00, $02, Dis_Loop12
00015346 F700                     M 	dc.b	$f7,$00
00015348 FFD9                     M 	dc.w	dis_loop12-*-1
0001534A 02                       M 	dc.b	$02
0001534B                            	saTranspose	$FC
0001534B E4FC                     M 	dc.b	$e4,$fc
0001534D                            	sCall		Dis_Call7
0001534D F8                       M 	dc.b	$f8
0001534E 0000                     M 	dc.w	dis_call7-*-1
00015350                            	saTranspose	$FF
00015350 E4FF                     M 	dc.b	$e4,$ff
00015352                            	sCall		Dis_Call7
00015352 F8                       M 	dc.b	$f8
00015353 0000                     M 	dc.w	dis_call7-*-1
00015355                            	saTranspose	$01
00015355 E401                     M 	dc.b	$e4,$01
00015357                            	sCall		Dis_Call7
00015357 F8                       M 	dc.b	$f8
00015358 0000                     M 	dc.w	dis_call7-*-1
0001535A                            	saTranspose	$FF
0001535A E4FF                     M 	dc.b	$e4,$ff
0001535C                            	sCall		Dis_Call8
0001535C F8                       M 	dc.b	$f8
0001535D 0000                     M 	dc.w	dis_call8-*-1
0001535F                            	saTranspose	$05
0001535F E405                     M 	dc.b	$e4,$05
00015361                            	sJump		Dis_Loop11
00015361 F6                       M 	dc.b	$f6
00015362 FEE1                     M 	dc.w	dis_loop11-*-1
00015364                            
00015364                            Dis_Call1:
00015364 9212 9E06 8012 9206        	dc.b nF1, $12, nF2, $06, nRst, $12, nF1, $06
0001536C 8092 060C 0C9E 0680        	dc.b nRst, nF1, $06, $0C, $0C, nF2, $06, nRst
00015374                            	sRet
00015374 F9                       M 	dc.b	$f9
00015375                            
00015375                            Dis_Call2:
00015375 9912 A506 8012 9906        	dc.b nC2, $12, nC3, $06, nRst, $12, nC2, $06
0001537D 8099 060C 9798             	dc.b nRst, nC2, $06, $0C, nBb1, nB1
00015383                            	sRet
00015383 F9                       M 	dc.b	$f9
00015384                            
00015384                            Dis_Call3:
00015384 800C 9280 0692 0C91        	dc.b nRst, $0C, nF1, nRst, $06, nF1, $0C, nE1
0001538C 0680 30                    	dc.b $06, nRst, $30
0001538F                            	sRet
0001538F F9                       M 	dc.b	$f9
00015390                            
00015390                            Dis_Call4:
00015390 8018 C480 30               	dc.b nRst, $18, nG5, nRst, $30
00015395                            	sLoop		$00, $03, Dis_Call4
00015395 F700                     M 	dc.b	$f7,$00
00015397 FFF8                     M 	dc.w	dis_call4-*-1
00015399 03                       M 	dc.b	$03
0001539A 8018 C480 C4               	dc.b nRst, $18, nG5, nRst, nG5
0001539F                            	sRet
0001539F F9                       M 	dc.b	$f9
000153A0                            
000153A0                            Dis_Call5:
000153A0                            	sPan		spLeft, $00
000153A0 E080                     M 	dc.b	$e0,spleft|$00
000153A2                            	saVol		$05
000153A2 ED05                     M 	dc.b	$ed,$05
000153A4                            	ssMod68k	$01, $01, $04, $05
000153A4 F001 0104 05             M 	dc.b	$f0,$01,$01,$04,$05
000153A9 8006 8018 C480 3080        	dc.b nRst, $06, nRst, $18, nG5, nRst, $30, nRst
000153B1 18C4 8030 8018 C480        	dc.b $18, nG5, nRst, $30, nRst, $18, nG5, nRst
000153B9 3080 18C4 80C4 12          	dc.b $30, nRst, $18, nG5, nRst, nG5, $12
000153C0                            	sPan		spCenter, $00
000153C0 E0C0                     M 	dc.b	$e0,spcenter|$00
000153C2                            	saVol		$FB
000153C2 EDFB                     M 	dc.b	$ed,$fb
000153C4                            	ssMod68k	$00, $00, $00, $00
000153C4 F000 0000 00             M 	dc.b	$f0,$00,$00,$00,$00
000153C9                            	sRet
000153C9 F9                       M 	dc.b	$f9
000153CA                            
000153CA                            Dis_Call6:
000153CA                            	saVol		$0A
000153CA ED0A                     M 	dc.b	$ed,$0a
000153CC                            	sPan		spLeft, $00
000153CC E080                     M 	dc.b	$e0,spleft|$00
000153CE 06                         	dc.b $06
000153CF                            	saVol		$F6
000153CF EDF6                     M 	dc.b	$ed,$f6
000153D1                            	sPan		spCenter, $00
000153D1 E0C0                     M 	dc.b	$e0,spcenter|$00
000153D3 80AC 0606                  	dc.b nRst, nG3, $06, $06
000153D7                            	sRet
000153D7 F9                       M 	dc.b	$f9
000153D8                            
000153D8                            Dis_Call7:
000153D8 800C A906                  	dc.b nRst, $0C, nE3, $06
000153DC                            	saVol		$0F
000153DC ED0F                     M 	dc.b	$ed,$0f
000153DE 0680                       	dc.b $06, nRst
000153E0                            	saVol		$F1
000153E0 EDF1                     M 	dc.b	$ed,$f1
000153E2 A906                       	dc.b nE3, $06
000153E4                            	saVol		$0F
000153E4 ED0F                     M 	dc.b	$ed,$0f
000153E6 0680                       	dc.b $06, nRst
000153E8                            	saVol		$F1
000153E8 EDF1                     M 	dc.b	$ed,$f1
000153EA A90C                       	dc.b nE3, $0C
000153EC                            	saVol		$0F
000153EC ED0F                     M 	dc.b	$ed,$0f
000153EE 06                         	dc.b $06
000153EF                            	saVol		$F1
000153EF EDF1                     M 	dc.b	$ed,$f1
000153F1 A90C                       	dc.b nE3, $0C
000153F3                            	saVol		$0F
000153F3 ED0F                     M 	dc.b	$ed,$0f
000153F5 06                         	dc.b $06
000153F6                            	saVol		$F1
000153F6 EDF1                     M 	dc.b	$ed,$f1
000153F8 A906                       	dc.b nE3, $06
000153FA                            	saVol		$0F
000153FA ED0F                     M 	dc.b	$ed,$0f
000153FC 06                         	dc.b $06
000153FD                            	saVol		$F1
000153FD EDF1                     M 	dc.b	$ed,$f1
000153FF                            	sRet
000153FF F9                       M 	dc.b	$f9
00015400                            
00015400                            Dis_Call8:
00015400 800C A906                  	dc.b nRst, $0C, nE3, $06
00015404                            	saVol		$0F
00015404 ED0F                     M 	dc.b	$ed,$0f
00015406 06                         	dc.b $06
00015407                            	saVol		$F1
00015407 EDF1                     M 	dc.b	$ed,$f1
00015409 80A9                       	dc.b nRst, nE3
0001540B                            	saVol		$0F
0001540B ED0F                     M 	dc.b	$ed,$0f
0001540D 06                         	dc.b $06
0001540E                            	saVol		$F1
0001540E EDF1                     M 	dc.b	$ed,$f1
00015410 A9                         	dc.b nE3
00015411                            	saVol		$0F
00015411 ED0F                     M 	dc.b	$ed,$0f
00015413 06                         	dc.b $06
00015414                            	saVol		$F1
00015414 EDF1                     M 	dc.b	$ed,$f1
00015416 802A                       	dc.b nRst, $2A
00015418                            	sRet
00015418 F9                       M 	dc.b	$f9
00015419                            
00015419                            Dis_Call9:
00015419 800C A90C                  	dc.b nRst, $0C, nE3, $0C
0001541D                            	saVol		$0F
0001541D ED0F                     M 	dc.b	$ed,$0f
0001541F 06                         	dc.b $06
00015420                            	saVol		$F1
00015420 EDF1                     M 	dc.b	$ed,$f1
00015422 A90C A706                  	dc.b nE3, $0C, nD3, $06
00015426                            	saVol		$0F
00015426 ED0F                     M 	dc.b	$ed,$0f
00015428 06                         	dc.b $06
00015429                            	saVol		$F1
00015429 EDF1                     M 	dc.b	$ed,$f1
0001542B 802A                       	dc.b nRst, $2A
0001542D                            	sRet
0001542D F9                       M 	dc.b	$f9
0001542E                            
0001542E                            Dis_Call10:
0001542E 800C A50C                  	dc.b nRst, $0C, nC3, $0C
00015432                            	saVol		$0F
00015432 ED0F                     M 	dc.b	$ed,$0f
00015434 06                         	dc.b $06
00015435                            	saVol		$F1
00015435 EDF1                     M 	dc.b	$ed,$f1
00015437 A50C A406                  	dc.b nC3, $0C, nB2, $06
0001543B                            	saVol		$0F
0001543B ED0F                     M 	dc.b	$ed,$0f
0001543D 06                         	dc.b $06
0001543E                            	saVol		$F1
0001543E EDF1                     M 	dc.b	$ed,$f1
00015440 802A                       	dc.b nRst, $2A
00015442                            	sRet
00015442 F9                       M 	dc.b	$f9
00015443                            
00015443                            Dis_Call11:
00015443 800C A20C                  	dc.b nRst, $0C, nA2, $0C
00015447                            	saVol		$0F
00015447 ED0F                     M 	dc.b	$ed,$0f
00015449 06                         	dc.b $06
0001544A                            	saVol		$F1
0001544A EDF1                     M 	dc.b	$ed,$f1
0001544C A20C A106                  	dc.b nA2, $0C, nAb2, $06
00015450                            	saVol		$0F
00015450 ED0F                     M 	dc.b	$ed,$0f
00015452 06                         	dc.b $06
00015453                            	saVol		$F1
00015453 EDF1                     M 	dc.b	$ed,$f1
00015455 802A                       	dc.b nRst, $2A
00015457                            	sRet
00015457 F9                       M 	dc.b	$f9
00015458                            
00015458                            Dis_PSG2:
00015458                            	ssMod68k	$05, $01, $02, $04
00015458 F005 0102 04             M 	dc.b	$f0,$05,$01,$02,$04
0001545D 800C                       	dc.b nRst, $0C
0001545F                            
0001545F                            Dis_PSG1:
0001545F                            Dis_Jump4:
0001545F 8060 8080 804E AC06        	dc.b nRst, $60, nRst, nRst, nRst, $4E, nG3, $06
00015467 AEB0                       	dc.b nA3, nB3
00015469                            
00015469                            Dis_Jump3:
00015469                            	sCall		Dis_Call12
00015469 F8                       M 	dc.b	$f8
0001546A 0000                     M 	dc.w	dis_call12-*-1
0001546C B60C B5B3 B106 B30C        	dc.b nF4, $0C, nE4, nD4, nC4, $06, nD4, $0C
00015474 8006 B512 8006 AC0C        	dc.b nRst, $06, nE4, $12, nRst, $06, nG3, $0C
0001547C                            	sCall		Dis_Call12
0001547C F8                       M 	dc.b	$f8
0001547D 0000                     M 	dc.w	dis_call12-*-1
0001547F B80C BABC BD18 B506        	dc.b nG4, $0C, nA4, nB4, nC5, $18, nE4, $06
00015487 80B3 ACAE B0               	dc.b nRst, nD4, nG3, nA3, nB3
0001548C                            	sCall		Dis_Call12
0001548C F8                       M 	dc.b	$f8
0001548D 0000                     M 	dc.w	dis_call12-*-1
0001548F B60C B5B3 B106 B30C        	dc.b nF4, $0C, nE4, nD4, nC4, $06, nD4, $0C
00015497 8006 B512 8006 AC0C        	dc.b nRst, $06, nE4, $12, nRst, $06, nG3, $0C
0001549F                            	sCall		Dis_Call12
0001549F F8                       M 	dc.b	$f8
000154A0 0000                     M 	dc.w	dis_call12-*-1
000154A2 B60C B5B3 B106 B380        	dc.b nF4, $0C, nE4, nD4, nC4, $06, nD4, nRst
000154AA 1EAE 06B1 B3B4 03E7        	dc.b $1E, nA3, $06, nC4, nD4, nEb4, $03, sHold
000154B2 B527 B81E B60C B5B3        	dc.b nE4, $27, nG4, $1E, nF4, $0C, nE4, nD4
000154BA 12B5 B124 8006 AEB1        	dc.b $12, nE4, nC4, $24, nRst, $06, nA3, nC4
000154C2 B3B4 03E7 B527 B912        	dc.b nD4, nEb4, $03, sHold, nE4, $27, nAb4, $12
000154CA B50C B3B1 B312 B1B8        	dc.b nE4, $0C, nD4, nC4, nD4, $12, nC4, nG4
000154D2 2480 06AE B1B3 B405        	dc.b $24, nRst, $06, nA3, nC4, nD4, nEb4, $05
000154DA E7B5 25B8 1EB6 0CB5        	dc.b sHold, nE4, $25, nG4, $1E, nF4, $0C, nE4
000154E2 B312 B5B1 18AE 0CB0        	dc.b nD4, $12, nE4, nC4, $18, nA3, $0C, nB3
000154EA B1B3 12B5 4E80 0CAC        	dc.b nC4, nD4, $12, nE4, $4E, nRst, $0C, nG3
000154F2 ADAE B1AE B8B6             	dc.b nAb3, nA3, nC4, nA3, nG4, nF4
000154F8                            	sCall		Dis_Call13
000154F8 F8                       M 	dc.b	$f8
000154F9 0000                     M 	dc.w	dis_call13-*-1
000154FB 800C ACAD AEB1 AEB8        	dc.b nRst, $0C, nG3, nAb3, nA3, nC4, nA3, nG4
00015503 B6                         	dc.b nF4
00015504                            	sCall		Dis_Call13
00015504 F8                       M 	dc.b	$f8
00015505 0000                     M 	dc.w	dis_call13-*-1
00015507 8018 B53C B30C B160        	dc.b nRst, $18, nE4, $3C, nD4, $0C, nC4, $60
0001550F 8060 8080 4EAC 06AE        	dc.b nRst, $60, nRst, nRst, $4E, nG3, $06, nA3
00015517 B0                         	dc.b nB3
00015518                            	sJump		Dis_Jump3
00015518 F6                       M 	dc.b	$f6
00015519 FF4F                     M 	dc.w	dis_jump3-*-1
0001551B                            
0001551B                            Dis_Call12:
0001551B B10C B806 B180 B180        	dc.b nC4, $0C, nG4, $06, nC4, nRst, nC4, nRst
00015523 B1                         	dc.b nC4
00015524                            	sLoop		$00, $02, Dis_Call12
00015524 F700                     M 	dc.b	$f7,$00
00015526 FFF4                     M 	dc.w	dis_call12-*-1
00015528 02                       M 	dc.b	$02
00015529                            	sRet
00015529 F9                       M 	dc.b	$f9
0001552A                            
0001552A                            Dis_Call13:
0001552A B405 E7B5 1FB3 18AE        	dc.b nEb4, $05, sHold, nE4, $1F, nD4, $18, nA3
00015532 0680 B80C B606 80B4        	dc.b $06, nRst, nG4, $0C, nF4, $06, nRst, nEb4
0001553A 02E7 B522 B33C 800C        	dc.b $02, sHold, nE4, $22, nD4, $3C, nRst, $0C
00015542 B118 B806 80B6 12B5        	dc.b nC4, $18, nG4, $06, nRst, nF4, $12, nE4
0001554A 0680 0CB3 E706 80B5        	dc.b $06, nRst, $0C, nD4, sHold, $06, nRst, nE4
00015552 80B3 B580 AE12 AC0C        	dc.b nRst, nD4, nE4, nRst, nA3, $12, nG3, $0C
0001555A 80AC E70C AE06 80AE        	dc.b nRst, nG3, sHold, $0C, nA3, $06, nRst, nA3
00015562 24B0 0680 80B1 80B3        	dc.b $24, nB3, $06, nRst, nRst, nC4, nRst, nD4
0001556A E70C B1B3 B818 B106        	dc.b sHold, $0C, nC4, nD4, nG4, $18, nC4, $06
00015572 80B3 0CB5 E760             	dc.b nRst, nD4, $0C, nE4, sHold, $60
00015578                            	sRet
00015578 F9                       M 	dc.b	$f9
00015579                            
00015579                            Dis_PSG3:
00015579                            	sNoisePSG	$E7
00015579 F3E7                     M 	dc.b	$f3,$e7
0001557B                            	sCall		Dis_Call14
0001557B F8                       M 	dc.b	$f8
0001557C 0000                     M 	dc.w	dis_call14-*-1
0001557E                            	sCall		Dis_Call15
0001557E F8                       M 	dc.b	$f8
0001557F 0000                     M 	dc.w	dis_call15-*-1
00015581                            
00015581                            Dis_Loop15:
00015581                            	sCall		Dis_Call14
00015581 F8                       M 	dc.b	$f8
00015582 0000                     M 	dc.w	dis_call14-*-1
00015584                            	sLoop		$00, $03, Dis_Loop15
00015584 F700                     M 	dc.b	$f7,$00
00015586 FFFA                     M 	dc.w	dis_loop15-*-1
00015588 03                       M 	dc.b	$03
00015589                            	sCall		Dis_Call15
00015589 F8                       M 	dc.b	$f8
0001558A 0000                     M 	dc.w	dis_call15-*-1
0001558C                            	sVoice		vKc02
0001558C E816                     M 	dc.b	$e8,vkc02
0001558E B10C 8080 06               	dc.b nC4, $0C, nRst, nRst, $06
00015593                            	sVoice		vKc05
00015593 E817                     M 	dc.b	$e8,vkc05
00015595 B10C 06E7 0680             	dc.b nC4, $0C, $06, sHold, $06, nRst
0001559B                            	sVoice		vKc02
0001559B E816                     M 	dc.b	$e8,vkc02
0001559D B106 0680 B106 0C80        	dc.b nC4, $06, $06, nRst, nC4, $06, $0C, nRst
000155A5 06B1 B180 800C B106        	dc.b $06, nC4, nC4, nRst, nRst, $0C, nC4, $06
000155AD 0680                       	dc.b $06, nRst
000155AF                            	sVoice		vKc05
000155AF E817                     M 	dc.b	$e8,vkc05
000155B1 B106                       	dc.b nC4, $06
000155B3                            	sVoice		vKc02
000155B3 E816                     M 	dc.b	$e8,vkc02
000155B5 0680 B10C 0606 800C        	dc.b $06, nRst, nC4, $0C, $06, $06, nRst, $0C
000155BD                            	sVoice		vKc05
000155BD E817                     M 	dc.b	$e8,vkc05
000155BF B180 06B1 0C0C 8006        	dc.b nC4, nRst, $06, nC4, $0C, $0C, nRst, $06
000155C7                            	sVoice		vKc02
000155C7 E816                     M 	dc.b	$e8,vkc02
000155C9 B106 0680 B1B1 0C80        	dc.b nC4, $06, $06, nRst, nC4, nC4, $0C, nRst
000155D1 06B1 B180 80B1 B1          	dc.b $06, nC4, nC4, nRst, nRst, nC4, nC4
000155D8                            	sVoice		vKc05
000155D8 E817                     M 	dc.b	$e8,vkc05
000155DA B1                         	dc.b nC4
000155DB                            	sVoice		vKc02
000155DB E816                     M 	dc.b	$e8,vkc02
000155DD B1B1 0C06 8018 800C        	dc.b nC4, nC4, $0C, $06, nRst, $18, nRst, $0C
000155E5                            	sVoice		vKc05
000155E5 E817                     M 	dc.b	$e8,vkc05
000155E7 B180 06B1 0C0C 8006        	dc.b nC4, nRst, $06, nC4, $0C, $0C, nRst, $06
000155EF                            	sVoice		vKc02
000155EF E816                     M 	dc.b	$e8,vkc02
000155F1 B106 0680 B1B1 B180        	dc.b nC4, $06, $06, nRst, nC4, nC4, nC4, nRst
000155F9 B1B1 8080 B1B1 80B1        	dc.b nC4, nC4, nRst, nRst, nC4, nC4, nRst, nC4
00015601                            	sVoice		vKc05
00015601 E817                     M 	dc.b	$e8,vkc05
00015603 B1                         	dc.b nC4
00015604                            	sVoice		vKc02
00015604 E816                     M 	dc.b	$e8,vkc02
00015606 B180 B10C 0606 800C        	dc.b nC4, nRst, nC4, $0C, $06, $06, nRst, $0C
0001560E                            	sVoice		vKc05
0001560E E817                     M 	dc.b	$e8,vkc05
00015610 B10C 8006 B10C B180        	dc.b nC4, $0C, nRst, $06, nC4, $0C, nC4, nRst
00015618 2A80 60                    	dc.b $2A, nRst, $60
0001561B                            	saVol		$01
0001561B ED01                     M 	dc.b	$ed,$01
0001561D                            
0001561D                            Dis_Loop16:
0001561D B00C 0C0C 0C0C 0C0C        	dc.b nB3, $0C, $0C, $0C, $0C, $0C, $0C, $0C
00015625 0C                         	dc.b $0C
00015626                            	sLoop		$00, $10, Dis_Loop16
00015626 F700                     M 	dc.b	$f7,$00
00015628 FFF4                     M 	dc.w	dis_loop16-*-1
0001562A 10                       M 	dc.b	$10
0001562B                            
0001562B                            Dis_Loop17:
0001562B B00C 0C0C 0C0C 0C0C        	dc.b nB3, $0C, $0C, $0C, $0C, $0C, $0C, $0C
00015633 0C                         	dc.b $0C
00015634                            	sLoop		$00, $03, Dis_Loop17
00015634 F700                     M 	dc.b	$f7,$00
00015636 FFF4                     M 	dc.w	dis_loop17-*-1
00015638 03                       M 	dc.b	$03
00015639 B00C 0C0C 0C80 30          	dc.b nB3, $0C, $0C, $0C, $0C, nRst, $30
00015640                            	saVol		$FF
00015640 EDFF                     M 	dc.b	$ed,$ff
00015642                            	sJump		Dis_Loop15
00015642 F6                       M 	dc.b	$f6
00015643 FF3D                     M 	dc.w	dis_loop15-*-1
00015645                            
00015645                            Dis_Call14:
00015645                            	sVoice		vKc02
00015645 E816                     M 	dc.b	$e8,vkc02
00015647 B10C 0C0C 0C0C             	dc.b nC4, $0C, $0C, $0C, $0C, $0C
0001564D                            	sVoice		vKc05
0001564D E817                     M 	dc.b	$e8,vkc05
0001564F 0C                         	dc.b $0C
00015650                            	sVoice		vKc02
00015650 E816                     M 	dc.b	$e8,vkc02
00015652 0C0C 0C0C 0C06 060C        	dc.b $0C, $0C, $0C, $0C, $0C, $06, $06, $0C
0001565A                            	sVoice		vKc05
0001565A E817                     M 	dc.b	$e8,vkc05
0001565C 0C                         	dc.b $0C
0001565D                            	sVoice		vKc02
0001565D E816                     M 	dc.b	$e8,vkc02
0001565F 0C                         	dc.b $0C
00015660                            	sVoice		vKc05
00015660 E817                     M 	dc.b	$e8,vkc05
00015662 0C                         	dc.b $0C
00015663                            	sRet
00015663 F9                       M 	dc.b	$f9
00015664                            
00015664                            Dis_Call15:
00015664                            	sVoice		vKc02
00015664 E816                     M 	dc.b	$e8,vkc02
00015666 B10C 0C0C 0C0C             	dc.b nC4, $0C, $0C, $0C, $0C, $0C
0001566C                            	sVoice		vKc05
0001566C E817                     M 	dc.b	$e8,vkc05
0001566E 0C                         	dc.b $0C
0001566F                            	sVoice		vKc02
0001566F E816                     M 	dc.b	$e8,vkc02
00015671 0C0C 0C0C 0C06 0680        	dc.b $0C, $0C, $0C, $0C, $0C, $06, $06, nRst
00015679 30                         	dc.b $30
0001567A                            	sRet
0001567A F9                       M 	dc.b	$f9
0001567B                            
0001567B =00000082                  p81 =	dLowKick
0001567B =00000094                  p82 =	dKcSnare
0001567B =00000095                  p83 =	dKcTamb
0001567B =00000093                  p84 =	dKcCymbal
0001567B =00000090                  p85 =	dKcTom
0001567B =00000091                  p86 =	dKcLowTom
0001567B =00000092                  p87 =	dKcFloorTom
0001567B =00000096                  p88 =	dKc87
0001567B =00000097                  p89 =	dKcCrash
0001567B =00000080                  p96 =	nRst
0001567B                            
0001567B                            Dis_DAC1:
0001567B 8218 8012 8206 8082        	dc.b p81, $18, nRst, $12, p81, $06, nRst, p81	; PWM1		; $180
00015683 8280 800C 8282 1880        	dc.b p81, nRst, nRst, $0C, p81, p81, $18, nRst
0001568B 1282 0680 8282 8080        	dc.b $12, p81, $06, nRst, p81, p81, nRst, nRst
00015693 1882 1880 1282 0680        	dc.b $18, p81, $18, nRst, $12, p81, $06, nRst
0001569B 8282 8080 0C82             	dc.b p81, p81, nRst, nRst, $0C, p81
000156A1 8218 8006 8280 8280        	dc.b p81, $18, nRst, $06, p81, nRst, p81, nRst	; PWM1
000156A9 1882                       	dc.b $18, p81
000156AB                            
000156AB                            .loop	sCall		Dis_PWM12_1			; PWM1 and 2	; $120
000156AB F8                       M 	dc.b	$f8
000156AC 0000                     M 	dc.w	dis_pwm12_1-*-1
000156AE 8218 9412 8206 8082        	dc.b p81, $18, p82, $12, p81, $06, nRst, p81	; PWM1 and 2	; $60
000156B6 8280 9406 9491 0C          	dc.b p81, nRst, p82, $06, p82, p86, $0C
000156BD                            
000156BD                            	sCall		Dis_PWM12_1			; PWM1 and 2	; $120
000156BD F8                       M 	dc.b	$f8
000156BE 0000                     M 	dc.w	dis_pwm12_1-*-1
000156C0 8218 9406 8280 82          	dc.b p81, $18, p82, $06, p81, nRst, p81		; PWM1 and 2
000156C7 800C 9494 0694 910C        	dc.b nRst, $0C, p82, p82, $06, p82, p86, $0C	; PWM2		; $60
000156CF                            
000156CF 800C 8280 0682 8082        .loop1	dc.b nRst, $0C, p81, nRst, $06, p81, nRst, p81	; PWM1		; $C0 * 3 = $240
000156D7 8030 8218 800C 8280        	dc.b nRst, $30, p81, $18, nRst, $0C, p81, nRst
000156DF 8280 0682 8082             	dc.b p81, nRst, $06, p81, nRst, p81
000156E5                            	sLoop		$00, $03, .loop1
000156E5 F700                     M 	dc.b	$f7,$00
000156E7 FFE7                     M 	dc.w	.loop1-*-1
000156E9 03                       M 	dc.b	$03
000156EA                            
000156EA 800C 8280 0682 8082        	dc.b nRst, $0C, p81, nRst, $06, p81, nRst, p81	; PWM1 and 3	; $C0
000156F2 8018 920C 9282 12          	dc.b nRst, $18, p87, $0C, p87, p81, $12
000156F9 9506 800C 8280 0695        	dc.b p83, $06, nRst, $0C, p81, nRst, $06, p83
00015701 820C 8218                  	dc.b p81, $0C, p81, $18
00015705                            
00015705                            .loop2	sCall		Dis_PWM12_1			; PWM1 and 2	; $120
00015705 F8                       M 	dc.b	$f8
00015706 0000                     M 	dc.w	dis_pwm12_1-*-1
00015708 8218 9412 8206 8082        	dc.b p81, $18, p82, $12, p81, $06, nRst, p81	; PWM1 and 2	; $60
00015710 8280 9406 9491 0C          	dc.b p81, nRst, p82, $06, p82, p86, $0C
00015717                            	sLoop		$00, $04, .loop2		; $180 * 4 = $600
00015717 F700                     M 	dc.b	$f7,$00
00015719 FFEB                     M 	dc.w	.loop2-*-1
0001571B 04                       M 	dc.b	$04
0001571C                            
0001571C 8218 9412 8206 8082        	dc.b p81, $18, p82, $12, p81, $06, nRst, p81	; PWM1 and 2	; $180
00015724 8280 940C 8282 1894        	dc.b p81, nRst, p82, $0C, p81, p81, $18, p82
0001572C 1282 0680 8282 8094        	dc.b $12, p81, $06, nRst, p81, p81, nRst, p82
00015734 1882 1894 1282 0680        	dc.b $18, p81, $18, p82, $12, p81, $06, nRst
0001573C 8282 8094 0C82             	dc.b p81, p81, nRst, p82, $0C, p81
00015742 8218 9406 8280 8280        	dc.b p81, $18, p82, $06, p81, nRst, p81, nRst
0001574A 1882                       	dc.b $18, p81
0001574C                            	sJump		.loop				; TOTAL $D80
0001574C F6                       M 	dc.b	$f6
0001574D FF5D                     M 	dc.w	.loop-*-1
0001574F                            
0001574F                            Dis_DAC2:
0001574F 8018                       	dc.b p96, $18					; PWM 2, 3, and 4?; $180
00015751 9480 9480 9480             	dc.b p82, nRst, p82, p96, p82, nRst		; PWM 2 and 4 occasionally
00015757 9480 9480 9480 9480        	dc.b p82, p96, p82, nRst, p82, p96, p82, nRst
0001575F 94                         	dc.b p82
00015760                            
00015760 970C                       .loop	dc.b p89, $0C					; PWM3
00015762                            	saVol		$0A
00015762 ED0A                     M 	dc.b	$ed,$0a
00015764 96                         	dc.b p88					; PWM4
00015765                            	sCall		Dis_PWM4_1			; PWM4		; $C0
00015765 F8                       M 	dc.b	$f8
00015766 0000                     M 	dc.w	dis_pwm4_1-*-1
00015768                            	sCall		Dis_PWM4_2			; PWM4		; $C0
00015768 F8                       M 	dc.b	$f8
00015769 0000                     M 	dc.w	dis_pwm4_2-*-1
0001576B                            	sCall		Dis_PWM4_2			; PWM4		; $C0
0001576B F8                       M 	dc.b	$f8
0001576C 0000                     M 	dc.w	dis_pwm4_2-*-1
0001576E                            
0001576E 800C 96                    .loop1	dc.b nRst, $0C, p88				; PWM4
00015771                            	sLoop		$00, $05, .loop1
00015771 F700                     M 	dc.b	$f7,$00
00015773 FFFA                     M 	dc.w	.loop1-*-1
00015775 05                       M 	dc.b	$05
00015776                            
00015776 8096 0606 8030             	dc.b nRst, p88, $06, $06, nRst, $30		; PWM4		; $C0
0001577C                            	saVol		-$0A
0001577C EDF6                     M 	dc.b	$ed,-$0a
0001577E                            ; $300
0001577E 800C 973C                  	dc.b p96, $0C, p89, $3C				; PWM2, 3 and 4	; $C0
00015782 9418 8094 8094             	dc.b p82, $18, p96, p82, nRst, p82
00015788 8048 9418 8094 80          	dc.b p96, $48, p82, $18, p96, p82, nRst		; PWM2 and 4	; $C0
0001578F 9406 9091 92               	dc.b p82, $06, p85, p86, p87
00015794 8048 9418 800C 94          	dc.b p96, $48, p82, $18, p96, $0C, p82		; PWM2 and 4	; $C0
0001579B 9418 8094                  	dc.b p82, $18, nRst, p82
0001579F 803C 9204 9292             	dc.b p96, $3C, p87, $04, p87, p87		; PWM2 and 4	; $C0
000157A5 940C 94                    	dc.b p82, $0C, p82
000157A8 8048 9406 9494 94          	dc.b p96, $48, p82, $06, p82, p82, p82
000157AF                            ; now at $600
000157AF                            
000157AF                            .loop2	sCall		Dis_PWM4_3			; PWM3 and 4
000157AF F8                       M 	dc.b	$f8
000157B0 0000                     M 	dc.w	dis_pwm4_3-*-1
000157B2 8093 9380 9393 93          	dc.b nRst, p84, p84, nRst, p84, p84, p84	; $180 * 4 = $600
000157B9 93                         	dc.b p84
000157BA                            	sLoop		$00, $04, .loop2
000157BA F700                     M 	dc.b	$f7,$00
000157BC FFF2                     M 	dc.w	.loop2-*-1
000157BE 04                       M 	dc.b	$04
000157BF                            
000157BF                            	sCall		Dis_PWM4_3			; PWM4		; $180
000157BF F8                       M 	dc.b	$f8
000157C0 0000                     M 	dc.w	dis_pwm4_3-*-1
000157C2 8030                       	dc.b nRst, $30
000157C4                            	sJump		.loop				; TOTAL $D80
000157C4 F6                       M 	dc.b	$f6
000157C5 FF9A                     M 	dc.w	.loop-*-1
000157C7                            
000157C7                            Dis_PWM12_1:
000157C7 8218 9412 8206 8082        	dc.b p81, $18, p82, $12, p81, $06, nRst, p81
000157CF 8280 940C 8282 1894        	dc.b p81, nRst, p82, $0C, p81, p81, $18, p82
000157D7 1282 0680 8282 8094        	dc.b $12, p81, $06, nRst, p81, p81, nRst, p82
000157DF 1882 1894 1282 0680        	dc.b $18, p81, $18, p82, $12, p81, $06, nRst
000157E7 8282 8094 0C82             	dc.b p81, p81, nRst, p82, $0C, p81
000157ED                            	sRet
000157ED F9                       M 	dc.b	$f9
000157EE                            
000157EE                            Dis_PWM4_2:
000157EE 800C 96                    	dc.b nRst, $0C, p88
000157F1                            
000157F1                            Dis_PWM4_1:
000157F1 8096                       	dc.b nRst, p88
000157F3                            	sLoop		$00, $06, Dis_PWM4_1
000157F3 F700                     M 	dc.b	$f7,$00
000157F5 FFFB                     M 	dc.w	dis_pwm4_1-*-1
000157F7 06                       M 	dc.b	$06
000157F8 E70C 9606 06               	dc.b sHold, $0C, p88, $06, $06
000157FD                            	sRet
000157FD F9                       M 	dc.b	$f9
000157FE                            
000157FE                            Dis_PWM4_3:
000157FE 9706 9380 9380 9393        	dc.b p89, $06, p84, nRst, p84, nRst, p84, p84
00015806 8093 8093 8093 8093        	dc.b nRst, p84, nRst, p84, nRst, p84, nRst, p84
0001580E 8093 8093 9380 9393        	dc.b nRst, p84, nRst, p84, p84, nRst, p84, p84
00015816 8093 8093 8093 8093        	dc.b nRst, p84, nRst, p84, nRst, p84, nRst, p84
0001581E 9380 9380 9393 8093        	dc.b p84, nRst, p84, nRst, p84, p84, nRst, p84
00015826 9380 9393 8093 9380        	dc.b p84, nRst, p84, p84, nRst, p84, p84, nRst
0001582E 9380 9380 9393 8093        	dc.b p84, nRst, p84, nRst, p84, p84, nRst, p84
00015836 93                         	dc.b p84
00015837                            	sRet
00015837 F9                       M 	dc.b	$f9
00015838 =0000000D                M a	=	a+1
00015838                          M 	even
00015838                          M b	equs	dmusd
00015838                          M _mus_zaxxremix
00015838                          M dmusad	include	"driver/music/zaxxremix.asm"
00015838                            Zaxx_Header:
00015838                            	sHeaderInit						; Z80 offset is $DD5A
00015838 =00015838                M spointzero	=	*
00015838 =00000000                M spatnum	=	0
00015838                            	sHeaderTempo	$01, $00
00015838 0000                     M 	dc.b	$01-1,$00
0001583A                            	sHeaderCh	$05, $03
0001583A 04                       M 	dc.b	$05-1
0001583B 02                       M 	dc.b	$03-1
0001583C                            	sHeaderDAC	Zaxx_DAC1
0001583C 0000                     M 	dc.w	zaxx_dac1-spointzero
0001583E 0000                     M 	dc.w	$00
00015840                            	sHeaderDAC	Zaxx_DAC2
00015840 0000                     M 	dc.w	zaxx_dac2-spointzero
00015842 0000                     M 	dc.w	$00
00015844                            	sHeaderFM	Zaxx_FM1, $00, $00
00015844 0000                     M 	dc.w	zaxx_fm1-spointzero
00015846 0000                     M 	dc.b	$00,$00
00015848                            	sHeaderFM	Zaxx_FM2, $00, $11
00015848 0000                     M 	dc.w	zaxx_fm2-spointzero
0001584A 0011                     M 	dc.b	$00,$11
0001584C                            	sHeaderFM	Zaxx_FM3, $00, $10
0001584C 0000                     M 	dc.w	zaxx_fm3-spointzero
0001584E 0010                     M 	dc.b	$00,$10
00015850                            	sHeaderFM	Zaxx_FM4, $00, $0B
00015850 0000                     M 	dc.w	zaxx_fm4-spointzero
00015852 000B                     M 	dc.b	$00,$0b
00015854                            	sHeaderFM	Zaxx_FM5, $00, $04
00015854 0000                     M 	dc.w	zaxx_fm5-spointzero
00015856 0004                     M 	dc.b	$00,$04
00015858                            	sHeaderPSG	Zaxx_PSG1, $00-$0C, $03, $00, vZaxx04
00015858 0000                     M 	dc.w	zaxx_psg1-spointzero
0001585A F403 000D                M 	dc.b	$00-$0c,$03,$00,vzaxx04
0001585E                            	sHeaderPSG	Zaxx_PSG2, $00-$0C, $03, $00, vZaxx04
0001585E 0000                     M 	dc.w	zaxx_psg2-spointzero
00015860 F403 000D                M 	dc.b	$00-$0c,$03,$00,vzaxx04
00015864                            	sHeaderPSG	Zaxx_PSG3, $00-$0C, $00, $00, vZaxx04
00015864 0000                     M 	dc.w	zaxx_psg3-spointzero
00015866 F400 000D                M 	dc.b	$00-$0c,$00,$00,vzaxx04
0001586A                            
0001586A                            	; Patch $00
0001586A                            	; $04
0001586A                            	; $30, $40, $70, $20,	$1F, $1F, $1F, $1F
0001586A                            	; $17, $1F, $00, $00,	$10, $10, $10, $10
0001586A                            	; $0F, $0F, $0F, $0F,	$10, $80, $06, $80
0001586A                            	spAlgorithm	$04, LowKick
0001586A =00000000                M plowkick	=	spatnum
0001586A =00000001                M spatnum	=	spatnum+1
0001586A =00000004                M spal	=	val
0001586A                            	spFeedback	$00
0001586A =00000000                M spfe	=	val
0001586A                            	spDetune	$03, $07, $04, $02
0001586A =00000003                M spde1	=	op1
0001586A =00000007                M spde2	=	op2
0001586A =00000004                M spde3	=	op3
0001586A =00000002                M spde4	=	op4
0001586A                            	spMultiple	$00, $00, $00, $00
0001586A =00000000                M spmu1	=	op1
0001586A =00000000                M spmu2	=	op2
0001586A =00000000                M spmu3	=	op3
0001586A =00000000                M spmu4	=	op4
0001586A                            	spRateScale	$00, $00, $00, $00
0001586A =00000000                M sprs1	=	op1
0001586A =00000000                M sprs2	=	op2
0001586A =00000000                M sprs3	=	op3
0001586A =00000000                M sprs4	=	op4
0001586A                            	spAttackRt	$1F, $1F, $1F, $1F
0001586A =0000001F                M spar1	=	op1
0001586A =0000001F                M spar2	=	op2
0001586A =0000001F                M spar3	=	op3
0001586A =0000001F                M spar4	=	op4
0001586A                            	spAmpMod	$00, $00, $00, $00
0001586A =00000000                M spam1	=	op1
0001586A =00000000                M spam2	=	op2
0001586A =00000000                M spam3	=	op3
0001586A =00000000                M spam4	=	op4
0001586A                            	spSustainRt	$17, $00, $1F, $00
0001586A =00000017                M spsr1	=	op1
0001586A =00000000                M spsr2	=	op2
0001586A =0000001F                M spsr3	=	op3
0001586A =00000000                M spsr4	=	op4
0001586A                            	spSustainLv	$00, $00, $00, $00
0001586A =00000000                M spsl1	=	op1
0001586A =00000000                M spsl2	=	op2
0001586A =00000000                M spsl3	=	op3
0001586A =00000000                M spsl4	=	op4
0001586A                            	spDecayRt	$10, $10, $10, $10
0001586A =00000010                M spdr1	=	op1
0001586A =00000010                M spdr2	=	op2
0001586A =00000010                M spdr3	=	op3
0001586A =00000010                M spdr4	=	op4
0001586A                            	spReleaseRt	$0F, $0F, $0F, $0F
0001586A =0000000F                M sprr1	=	op1
0001586A =0000000F                M sprr2	=	op2
0001586A =0000000F                M sprr3	=	op3
0001586A =0000000F                M sprr4	=	op4
0001586A                            	spSSGEG		$00, $00, $00, $00
0001586A =00000000                M spss1	=	op1
0001586A =00000000                M spss2	=	op2
0001586A =00000000                M spss3	=	op3
0001586A =00000000                M spss4	=	op4
0001586A                            	spTotalLv	$10, $06, $00, $00
0001586A =00000010                M sptl1	=	op1
0001586A =00000006                M sptl2	=	op2
0001586A =00000000                M sptl3	=	op3
0001586A =00000000                M sptl4	=	op4
0001586A 04                       M 	dc.b	(spfe<<3)+spal
0001586B =00000080                M sptlmask4	set	$80
0001586B =00000000                M sptlmask2	set	((spal>=5)<<7)
0001586B =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
0001586B =00000000                M sptlmask1	set	((spal=7)<<7)
0001586B 3040 7020                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001586F 1F1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00015873 171F 0000                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00015877 1010 1010                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001587B 0F0F 0F0F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001587F 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00015883 1080 0680                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00015887 4E41 54                  M 	dc.b	'NAT'
0001588A                            
0001588A                            	; Patch $01
0001588A                            	; $34
0001588A                            	; $55, $55, $21, $21,	$1F, $1F, $1F, $1F
0001588A                            	; $07, $10, $16, $1B,	$00, $0F, $00, $15
0001588A                            	; $0F, $0F, $0F, $0F,	$03, $90, $10, $80
0001588A                            	spAlgorithm	$04, Snare
0001588A =00000001                M psnare	=	spatnum
0001588A =00000002                M spatnum	=	spatnum+1
0001588A =00000004                M spal	=	val
0001588A                            	spFeedback	$06
0001588A =00000006                M spfe	=	val
0001588A                            	spDetune	$05, $02, $05, $02
0001588A =00000005                M spde1	=	op1
0001588A =00000002                M spde2	=	op2
0001588A =00000005                M spde3	=	op3
0001588A =00000002                M spde4	=	op4
0001588A                            	spMultiple	$05, $01, $05, $01
0001588A =00000005                M spmu1	=	op1
0001588A =00000001                M spmu2	=	op2
0001588A =00000005                M spmu3	=	op3
0001588A =00000001                M spmu4	=	op4
0001588A                            	spRateScale	$00, $00, $00, $00
0001588A =00000000                M sprs1	=	op1
0001588A =00000000                M sprs2	=	op2
0001588A =00000000                M sprs3	=	op3
0001588A =00000000                M sprs4	=	op4
0001588A                            	spAttackRt	$1F, $1F, $1F, $1F
0001588A =0000001F                M spar1	=	op1
0001588A =0000001F                M spar2	=	op2
0001588A =0000001F                M spar3	=	op3
0001588A =0000001F                M spar4	=	op4
0001588A                            	spAmpMod	$00, $00, $00, $00
0001588A =00000000                M spam1	=	op1
0001588A =00000000                M spam2	=	op2
0001588A =00000000                M spam3	=	op3
0001588A =00000000                M spam4	=	op4
0001588A                            	spSustainRt	$07, $16, $10, $1B
0001588A =00000007                M spsr1	=	op1
0001588A =00000016                M spsr2	=	op2
0001588A =00000010                M spsr3	=	op3
0001588A =0000001B                M spsr4	=	op4
0001588A                            	spSustainLv	$00, $00, $00, $00
0001588A =00000000                M spsl1	=	op1
0001588A =00000000                M spsl2	=	op2
0001588A =00000000                M spsl3	=	op3
0001588A =00000000                M spsl4	=	op4
0001588A                            	spDecayRt	$00, $00, $0F, $15
0001588A =00000000                M spdr1	=	op1
0001588A =00000000                M spdr2	=	op2
0001588A =0000000F                M spdr3	=	op3
0001588A =00000015                M spdr4	=	op4
0001588A                            	spReleaseRt	$0F, $0F, $0F, $0F
0001588A =0000000F                M sprr1	=	op1
0001588A =0000000F                M sprr2	=	op2
0001588A =0000000F                M sprr3	=	op3
0001588A =0000000F                M sprr4	=	op4
0001588A                            	spSSGEG		$00, $00, $00, $00
0001588A =00000000                M spss1	=	op1
0001588A =00000000                M spss2	=	op2
0001588A =00000000                M spss3	=	op3
0001588A =00000000                M spss4	=	op4
0001588A                            	spTotalLv	$03, $10, $10, $00
0001588A =00000003                M sptl1	=	op1
0001588A =00000010                M sptl2	=	op2
0001588A =00000010                M sptl3	=	op3
0001588A =00000000                M sptl4	=	op4
0001588A 34                       M 	dc.b	(spfe<<3)+spal
0001588B =00000080                M sptlmask4	set	$80
0001588B =00000000                M sptlmask2	set	((spal>=5)<<7)
0001588B =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
0001588B =00000000                M sptlmask1	set	((spal=7)<<7)
0001588B 5555 2121                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001588F 1F1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00015893 0710 161B                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00015897 000F 0015                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001589B 0F0F 0F0F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001589F 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
000158A3 0390 1080                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
000158A7 4E41 54                  M 	dc.b	'NAT'
000158AA                            
000158AA                            	; Patch $02
000158AA                            	; $0B
000158AA                            	; $2C, $30, $21, $31,	$1F, $14, $1F, $1F
000158AA                            	; $1F, $10, $1F, $1F,	$0F, $0E, $09, $0B
000158AA                            	; $0F, $1F, $1F, $1F,	$30, $10, $10, $80
000158AA                            	spAlgorithm	$03
000158AA =00000003                M spatnum	=	spatnum+1
000158AA =00000003                M spal	=	val
000158AA                            	spFeedback	$01
000158AA =00000001                M spfe	=	val
000158AA                            	spDetune	$02, $02, $03, $03
000158AA =00000002                M spde1	=	op1
000158AA =00000002                M spde2	=	op2
000158AA =00000003                M spde3	=	op3
000158AA =00000003                M spde4	=	op4
000158AA                            	spMultiple	$0C, $01, $00, $01
000158AA =0000000C                M spmu1	=	op1
000158AA =00000001                M spmu2	=	op2
000158AA =00000000                M spmu3	=	op3
000158AA =00000001                M spmu4	=	op4
000158AA                            	spRateScale	$00, $00, $00, $00
000158AA =00000000                M sprs1	=	op1
000158AA =00000000                M sprs2	=	op2
000158AA =00000000                M sprs3	=	op3
000158AA =00000000                M sprs4	=	op4
000158AA                            	spAttackRt	$1F, $1F, $14, $1F
000158AA =0000001F                M spar1	=	op1
000158AA =0000001F                M spar2	=	op2
000158AA =00000014                M spar3	=	op3
000158AA =0000001F                M spar4	=	op4
000158AA                            	spAmpMod	$00, $00, $00, $00
000158AA =00000000                M spam1	=	op1
000158AA =00000000                M spam2	=	op2
000158AA =00000000                M spam3	=	op3
000158AA =00000000                M spam4	=	op4
000158AA                            	spSustainRt	$1F, $1F, $10, $1F
000158AA =0000001F                M spsr1	=	op1
000158AA =0000001F                M spsr2	=	op2
000158AA =00000010                M spsr3	=	op3
000158AA =0000001F                M spsr4	=	op4
000158AA                            	spSustainLv	$00, $01, $01, $01
000158AA =00000000                M spsl1	=	op1
000158AA =00000001                M spsl2	=	op2
000158AA =00000001                M spsl3	=	op3
000158AA =00000001                M spsl4	=	op4
000158AA                            	spDecayRt	$0F, $09, $0E, $0B
000158AA =0000000F                M spdr1	=	op1
000158AA =00000009                M spdr2	=	op2
000158AA =0000000E                M spdr3	=	op3
000158AA =0000000B                M spdr4	=	op4
000158AA                            	spReleaseRt	$0F, $0F, $0F, $0F
000158AA =0000000F                M sprr1	=	op1
000158AA =0000000F                M sprr2	=	op2
000158AA =0000000F                M sprr3	=	op3
000158AA =0000000F                M sprr4	=	op4
000158AA                            	spSSGEG		$00, $00, $00, $00
000158AA =00000000                M spss1	=	op1
000158AA =00000000                M spss2	=	op2
000158AA =00000000                M spss3	=	op3
000158AA =00000000                M spss4	=	op4
000158AA                            	spTotalLv	$30, $10, $10, $00
000158AA =00000030                M sptl1	=	op1
000158AA =00000010                M sptl2	=	op2
000158AA =00000010                M sptl3	=	op3
000158AA =00000000                M sptl4	=	op4
000158AA 0B                       M 	dc.b	(spfe<<3)+spal
000158AB =00000080                M sptlmask4	set	$80
000158AB =00000000                M sptlmask2	set	((spal>=5)<<7)
000158AB =00000000                M sptlmask3	set	((spal>=4)<<7)
000158AB =00000000                M sptlmask1	set	((spal=7)<<7)
000158AB 2C30 2131                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
000158AF 1F14 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
000158B3 1F10 1F1F                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
000158B7 0F0E 090B                M 	dc.b	spdr1,spdr3,spdr2,spdr4
000158BB 0F1F 1F1F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
000158BF 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
000158C3 3010 1080                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
000158C7 4E41 54                  M 	dc.b	'NAT'
000158CA                            
000158CA                            	; Patch $03
000158CA                            	; $3C
000158CA                            	; $20, $21, $53, $52,	$13, $10, $11, $13
000158CA                            	; $10, $00, $10, $10,	$10, $00, $00, $00
000158CA                            	; $1F, $1F, $1F, $1F,	$1D, $85, $00, $85
000158CA                            	spAlgorithm	$04
000158CA =00000004                M spatnum	=	spatnum+1
000158CA =00000004                M spal	=	val
000158CA                            	spFeedback	$07
000158CA =00000007                M spfe	=	val
000158CA                            	spDetune	$02, $05, $02, $05
000158CA =00000002                M spde1	=	op1
000158CA =00000005                M spde2	=	op2
000158CA =00000002                M spde3	=	op3
000158CA =00000005                M spde4	=	op4
000158CA                            	spMultiple	$00, $03, $01, $02
000158CA =00000000                M spmu1	=	op1
000158CA =00000003                M spmu2	=	op2
000158CA =00000001                M spmu3	=	op3
000158CA =00000002                M spmu4	=	op4
000158CA                            	spRateScale	$00, $00, $00, $00
000158CA =00000000                M sprs1	=	op1
000158CA =00000000                M sprs2	=	op2
000158CA =00000000                M sprs3	=	op3
000158CA =00000000                M sprs4	=	op4
000158CA                            	spAttackRt	$13, $11, $10, $13
000158CA =00000013                M spar1	=	op1
000158CA =00000011                M spar2	=	op2
000158CA =00000010                M spar3	=	op3
000158CA =00000013                M spar4	=	op4
000158CA                            	spAmpMod	$00, $00, $00, $00
000158CA =00000000                M spam1	=	op1
000158CA =00000000                M spam2	=	op2
000158CA =00000000                M spam3	=	op3
000158CA =00000000                M spam4	=	op4
000158CA                            	spSustainRt	$10, $10, $00, $10
000158CA =00000010                M spsr1	=	op1
000158CA =00000010                M spsr2	=	op2
000158CA =00000000                M spsr3	=	op3
000158CA =00000010                M spsr4	=	op4
000158CA                            	spSustainLv	$01, $01, $01, $01
000158CA =00000001                M spsl1	=	op1
000158CA =00000001                M spsl2	=	op2
000158CA =00000001                M spsl3	=	op3
000158CA =00000001                M spsl4	=	op4
000158CA                            	spDecayRt	$10, $00, $00, $00
000158CA =00000010                M spdr1	=	op1
000158CA =00000000                M spdr2	=	op2
000158CA =00000000                M spdr3	=	op3
000158CA =00000000                M spdr4	=	op4
000158CA                            	spReleaseRt	$0F, $0F, $0F, $0F
000158CA =0000000F                M sprr1	=	op1
000158CA =0000000F                M sprr2	=	op2
000158CA =0000000F                M sprr3	=	op3
000158CA =0000000F                M sprr4	=	op4
000158CA                            	spSSGEG		$00, $00, $00, $00
000158CA =00000000                M spss1	=	op1
000158CA =00000000                M spss2	=	op2
000158CA =00000000                M spss3	=	op3
000158CA =00000000                M spss4	=	op4
000158CA                            	spTotalLv	$1D, $00, $05, $05
000158CA =0000001D                M sptl1	=	op1
000158CA =00000000                M sptl2	=	op2
000158CA =00000005                M sptl3	=	op3
000158CA =00000005                M sptl4	=	op4
000158CA 3C                       M 	dc.b	(spfe<<3)+spal
000158CB =00000080                M sptlmask4	set	$80
000158CB =00000000                M sptlmask2	set	((spal>=5)<<7)
000158CB =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
000158CB =00000000                M sptlmask1	set	((spal=7)<<7)
000158CB 2021 5352                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
000158CF 1310 1113                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
000158D3 1000 1010                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
000158D7 1000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
000158DB 1F1F 1F1F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
000158DF 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
000158E3 1D85 0085                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
000158E7 4E41 54                  M 	dc.b	'NAT'
000158EA                            
000158EA                            	; Patch $04
000158EA                            	; $3C
000158EA                            	; $43, $74, $53, $74,	$1F, $1F, $1F, $1D
000158EA                            	; $1F, $1F, $1F, $1F,	$00, $00, $00, $00
000158EA                            	; $0F, $0F, $0F, $0F,	$10, $86, $10, $86
000158EA                            	spAlgorithm	$04
000158EA =00000005                M spatnum	=	spatnum+1
000158EA =00000004                M spal	=	val
000158EA                            	spFeedback	$07
000158EA =00000007                M spfe	=	val
000158EA                            	spDetune	$04, $05, $07, $07
000158EA =00000004                M spde1	=	op1
000158EA =00000005                M spde2	=	op2
000158EA =00000007                M spde3	=	op3
000158EA =00000007                M spde4	=	op4
000158EA                            	spMultiple	$03, $03, $04, $04
000158EA =00000003                M spmu1	=	op1
000158EA =00000003                M spmu2	=	op2
000158EA =00000004                M spmu3	=	op3
000158EA =00000004                M spmu4	=	op4
000158EA                            	spRateScale	$00, $00, $00, $00
000158EA =00000000                M sprs1	=	op1
000158EA =00000000                M sprs2	=	op2
000158EA =00000000                M sprs3	=	op3
000158EA =00000000                M sprs4	=	op4
000158EA                            	spAttackRt	$1F, $1F, $1F, $1D
000158EA =0000001F                M spar1	=	op1
000158EA =0000001F                M spar2	=	op2
000158EA =0000001F                M spar3	=	op3
000158EA =0000001D                M spar4	=	op4
000158EA                            	spAmpMod	$00, $00, $00, $00
000158EA =00000000                M spam1	=	op1
000158EA =00000000                M spam2	=	op2
000158EA =00000000                M spam3	=	op3
000158EA =00000000                M spam4	=	op4
000158EA                            	spSustainRt	$1F, $1F, $1F, $1F
000158EA =0000001F                M spsr1	=	op1
000158EA =0000001F                M spsr2	=	op2
000158EA =0000001F                M spsr3	=	op3
000158EA =0000001F                M spsr4	=	op4
000158EA                            	spSustainLv	$00, $00, $00, $00
000158EA =00000000                M spsl1	=	op1
000158EA =00000000                M spsl2	=	op2
000158EA =00000000                M spsl3	=	op3
000158EA =00000000                M spsl4	=	op4
000158EA                            	spDecayRt	$00, $00, $00, $00
000158EA =00000000                M spdr1	=	op1
000158EA =00000000                M spdr2	=	op2
000158EA =00000000                M spdr3	=	op3
000158EA =00000000                M spdr4	=	op4
000158EA                            	spReleaseRt	$0F, $0F, $0F, $0F
000158EA =0000000F                M sprr1	=	op1
000158EA =0000000F                M sprr2	=	op2
000158EA =0000000F                M sprr3	=	op3
000158EA =0000000F                M sprr4	=	op4
000158EA                            	spSSGEG		$00, $00, $00, $00
000158EA =00000000                M spss1	=	op1
000158EA =00000000                M spss2	=	op2
000158EA =00000000                M spss3	=	op3
000158EA =00000000                M spss4	=	op4
000158EA                            	spTotalLv	$10, $10, $06, $06
000158EA =00000010                M sptl1	=	op1
000158EA =00000010                M sptl2	=	op2
000158EA =00000006                M sptl3	=	op3
000158EA =00000006                M sptl4	=	op4
000158EA 3C                       M 	dc.b	(spfe<<3)+spal
000158EB =00000080                M sptlmask4	set	$80
000158EB =00000000                M sptlmask2	set	((spal>=5)<<7)
000158EB =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
000158EB =00000000                M sptlmask1	set	((spal=7)<<7)
000158EB 4374 5374                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
000158EF 1F1F 1F1D                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
000158F3 1F1F 1F1F                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
000158F7 0000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
000158FB 0F0F 0F0F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
000158FF 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00015903 1086 1086                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00015907 4E41 54                  M 	dc.b	'NAT'
0001590A                            
0001590A                            	; Patch $05
0001590A                            	; $22
0001590A                            	; $34, $14, $08, $1C,	$1E, $1F, $1F, $1F
0001590A                            	; $13, $1F, $0B, $1D,	$00, $0E, $00, $10
0001590A                            	; $1C, $1A, $1B, $19,	$10, $04, $00, $80
0001590A                            	spAlgorithm	$02
0001590A =00000006                M spatnum	=	spatnum+1
0001590A =00000002                M spal	=	val
0001590A                            	spFeedback	$04
0001590A =00000004                M spfe	=	val
0001590A                            	spDetune	$03, $00, $01, $01
0001590A =00000003                M spde1	=	op1
0001590A =00000000                M spde2	=	op2
0001590A =00000001                M spde3	=	op3
0001590A =00000001                M spde4	=	op4
0001590A                            	spMultiple	$04, $08, $04, $0C
0001590A =00000004                M spmu1	=	op1
0001590A =00000008                M spmu2	=	op2
0001590A =00000004                M spmu3	=	op3
0001590A =0000000C                M spmu4	=	op4
0001590A                            	spRateScale	$00, $00, $00, $00
0001590A =00000000                M sprs1	=	op1
0001590A =00000000                M sprs2	=	op2
0001590A =00000000                M sprs3	=	op3
0001590A =00000000                M sprs4	=	op4
0001590A                            	spAttackRt	$1E, $1F, $1F, $1F
0001590A =0000001E                M spar1	=	op1
0001590A =0000001F                M spar2	=	op2
0001590A =0000001F                M spar3	=	op3
0001590A =0000001F                M spar4	=	op4
0001590A                            	spAmpMod	$00, $00, $00, $00
0001590A =00000000                M spam1	=	op1
0001590A =00000000                M spam2	=	op2
0001590A =00000000                M spam3	=	op3
0001590A =00000000                M spam4	=	op4
0001590A                            	spSustainRt	$13, $0B, $1F, $1D
0001590A =00000013                M spsr1	=	op1
0001590A =0000000B                M spsr2	=	op2
0001590A =0000001F                M spsr3	=	op3
0001590A =0000001D                M spsr4	=	op4
0001590A                            	spSustainLv	$01, $01, $01, $01
0001590A =00000001                M spsl1	=	op1
0001590A =00000001                M spsl2	=	op2
0001590A =00000001                M spsl3	=	op3
0001590A =00000001                M spsl4	=	op4
0001590A                            	spDecayRt	$00, $00, $0E, $10
0001590A =00000000                M spdr1	=	op1
0001590A =00000000                M spdr2	=	op2
0001590A =0000000E                M spdr3	=	op3
0001590A =00000010                M spdr4	=	op4
0001590A                            	spReleaseRt	$0C, $0B, $0A, $09
0001590A =0000000C                M sprr1	=	op1
0001590A =0000000B                M sprr2	=	op2
0001590A =0000000A                M sprr3	=	op3
0001590A =00000009                M sprr4	=	op4
0001590A                            	spSSGEG		$00, $00, $00, $00
0001590A =00000000                M spss1	=	op1
0001590A =00000000                M spss2	=	op2
0001590A =00000000                M spss3	=	op3
0001590A =00000000                M spss4	=	op4
0001590A                            	spTotalLv	$10, $00, $04, $00
0001590A =00000010                M sptl1	=	op1
0001590A =00000000                M sptl2	=	op2
0001590A =00000004                M sptl3	=	op3
0001590A =00000000                M sptl4	=	op4
0001590A 22                       M 	dc.b	(spfe<<3)+spal
0001590B =00000080                M sptlmask4	set	$80
0001590B =00000000                M sptlmask2	set	((spal>=5)<<7)
0001590B =00000000                M sptlmask3	set	((spal>=4)<<7)
0001590B =00000000                M sptlmask1	set	((spal=7)<<7)
0001590B 3414 081C                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001590F 1E1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00015913 131F 0B1D                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00015917 000E 0010                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001591B 1C1A 1B19                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001591F 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00015923 1004 0080                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00015927 4E41 54                  M 	dc.b	'NAT'
0001592A                            
0001592A                            	; Patch $06
0001592A                            	; $04
0001592A                            	; $23, $28, $53, $58,	$1E, $1F, $1F, $1F
0001592A                            	; $13, $1F, $0B, $1D,	$00, $08, $00, $08
0001592A                            	; $1C, $1A, $1B, $19,	$00, $86, $10, $86
0001592A                            	spAlgorithm	$04
0001592A =00000007                M spatnum	=	spatnum+1
0001592A =00000004                M spal	=	val
0001592A                            	spFeedback	$00
0001592A =00000000                M spfe	=	val
0001592A                            	spDetune	$02, $05, $02, $05
0001592A =00000002                M spde1	=	op1
0001592A =00000005                M spde2	=	op2
0001592A =00000002                M spde3	=	op3
0001592A =00000005                M spde4	=	op4
0001592A                            	spMultiple	$03, $03, $08, $08
0001592A =00000003                M spmu1	=	op1
0001592A =00000003                M spmu2	=	op2
0001592A =00000008                M spmu3	=	op3
0001592A =00000008                M spmu4	=	op4
0001592A                            	spRateScale	$00, $00, $00, $00
0001592A =00000000                M sprs1	=	op1
0001592A =00000000                M sprs2	=	op2
0001592A =00000000                M sprs3	=	op3
0001592A =00000000                M sprs4	=	op4
0001592A                            	spAttackRt	$1E, $1F, $1F, $1F
0001592A =0000001E                M spar1	=	op1
0001592A =0000001F                M spar2	=	op2
0001592A =0000001F                M spar3	=	op3
0001592A =0000001F                M spar4	=	op4
0001592A                            	spAmpMod	$00, $00, $00, $00
0001592A =00000000                M spam1	=	op1
0001592A =00000000                M spam2	=	op2
0001592A =00000000                M spam3	=	op3
0001592A =00000000                M spam4	=	op4
0001592A                            	spSustainRt	$13, $0B, $1F, $1D
0001592A =00000013                M spsr1	=	op1
0001592A =0000000B                M spsr2	=	op2
0001592A =0000001F                M spsr3	=	op3
0001592A =0000001D                M spsr4	=	op4
0001592A                            	spSustainLv	$01, $01, $01, $01
0001592A =00000001                M spsl1	=	op1
0001592A =00000001                M spsl2	=	op2
0001592A =00000001                M spsl3	=	op3
0001592A =00000001                M spsl4	=	op4
0001592A                            	spDecayRt	$00, $00, $08, $08
0001592A =00000000                M spdr1	=	op1
0001592A =00000000                M spdr2	=	op2
0001592A =00000008                M spdr3	=	op3
0001592A =00000008                M spdr4	=	op4
0001592A                            	spReleaseRt	$0C, $0B, $0A, $09
0001592A =0000000C                M sprr1	=	op1
0001592A =0000000B                M sprr2	=	op2
0001592A =0000000A                M sprr3	=	op3
0001592A =00000009                M sprr4	=	op4
0001592A                            	spSSGEG		$00, $00, $00, $00
0001592A =00000000                M spss1	=	op1
0001592A =00000000                M spss2	=	op2
0001592A =00000000                M spss3	=	op3
0001592A =00000000                M spss4	=	op4
0001592A                            	spTotalLv	$00, $10, $06, $06
0001592A =00000000                M sptl1	=	op1
0001592A =00000010                M sptl2	=	op2
0001592A =00000006                M sptl3	=	op3
0001592A =00000006                M sptl4	=	op4
0001592A 04                       M 	dc.b	(spfe<<3)+spal
0001592B =00000080                M sptlmask4	set	$80
0001592B =00000000                M sptlmask2	set	((spal>=5)<<7)
0001592B =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
0001592B =00000000                M sptlmask1	set	((spal=7)<<7)
0001592B 2328 5358                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001592F 1E1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00015933 131F 0B1D                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00015937 0008 0008                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001593B 1C1A 1B19                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001593F 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00015943 0086 1086                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00015947 4E41 54                  M 	dc.b	'NAT'
0001594A                            
0001594A                            	; Patch $07
0001594A                            	; $34
0001594A                            	; $54, $55, $21, $21,	$1F, $1F, $1F, $1F
0001594A                            	; $07, $00, $16, $1B,	$00, $0E, $10, $15
0001594A                            	; $0F, $0F, $0F, $0F,	$03, $80, $10, $80
0001594A                            	spAlgorithm	$04, Crash
0001594A =00000007                M pcrash	=	spatnum
0001594A =00000008                M spatnum	=	spatnum+1
0001594A =00000004                M spal	=	val
0001594A                            	spFeedback	$06
0001594A =00000006                M spfe	=	val
0001594A                            	spDetune	$05, $02, $05, $02
0001594A =00000005                M spde1	=	op1
0001594A =00000002                M spde2	=	op2
0001594A =00000005                M spde3	=	op3
0001594A =00000002                M spde4	=	op4
0001594A                            	spMultiple	$04, $01, $05, $01
0001594A =00000004                M spmu1	=	op1
0001594A =00000001                M spmu2	=	op2
0001594A =00000005                M spmu3	=	op3
0001594A =00000001                M spmu4	=	op4
0001594A                            	spRateScale	$00, $00, $00, $00
0001594A =00000000                M sprs1	=	op1
0001594A =00000000                M sprs2	=	op2
0001594A =00000000                M sprs3	=	op3
0001594A =00000000                M sprs4	=	op4
0001594A                            	spAttackRt	$1F, $1F, $1F, $1F
0001594A =0000001F                M spar1	=	op1
0001594A =0000001F                M spar2	=	op2
0001594A =0000001F                M spar3	=	op3
0001594A =0000001F                M spar4	=	op4
0001594A                            	spAmpMod	$00, $00, $00, $00
0001594A =00000000                M spam1	=	op1
0001594A =00000000                M spam2	=	op2
0001594A =00000000                M spam3	=	op3
0001594A =00000000                M spam4	=	op4
0001594A                            	spSustainRt	$07, $16, $00, $1B
0001594A =00000007                M spsr1	=	op1
0001594A =00000016                M spsr2	=	op2
0001594A =00000000                M spsr3	=	op3
0001594A =0000001B                M spsr4	=	op4
0001594A                            	spSustainLv	$00, $00, $00, $00
0001594A =00000000                M spsl1	=	op1
0001594A =00000000                M spsl2	=	op2
0001594A =00000000                M spsl3	=	op3
0001594A =00000000                M spsl4	=	op4
0001594A                            	spDecayRt	$00, $10, $0E, $15
0001594A =00000000                M spdr1	=	op1
0001594A =00000010                M spdr2	=	op2
0001594A =0000000E                M spdr3	=	op3
0001594A =00000015                M spdr4	=	op4
0001594A                            	spReleaseRt	$0F, $0F, $0F, $0F
0001594A =0000000F                M sprr1	=	op1
0001594A =0000000F                M sprr2	=	op2
0001594A =0000000F                M sprr3	=	op3
0001594A =0000000F                M sprr4	=	op4
0001594A                            	spSSGEG		$00, $00, $00, $00
0001594A =00000000                M spss1	=	op1
0001594A =00000000                M spss2	=	op2
0001594A =00000000                M spss3	=	op3
0001594A =00000000                M spss4	=	op4
0001594A                            	spTotalLv	$03, $10, $00, $00
0001594A =00000003                M sptl1	=	op1
0001594A =00000010                M sptl2	=	op2
0001594A =00000000                M sptl3	=	op3
0001594A =00000000                M sptl4	=	op4
0001594A 34                       M 	dc.b	(spfe<<3)+spal
0001594B =00000080                M sptlmask4	set	$80
0001594B =00000000                M sptlmask2	set	((spal>=5)<<7)
0001594B =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
0001594B =00000000                M sptlmask1	set	((spal=7)<<7)
0001594B 5455 2121                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001594F 1F1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00015953 0700 161B                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00015957 000E 1015                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001595B 0F0F 0F0F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001595F 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00015963 0380 1080                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00015967 4E41 54                  M 	dc.b	'NAT'
0001596A                            
0001596A                            	; Patch $08
0001596A                            	; $34
0001596A                            	; $56, $54, $20, $20,	$1F, $1F, $1F, $1F
0001596A                            	; $07, $00, $16, $1B,	$00, $0F, $10, $15
0001596A                            	; $0F, $0F, $0F, $0E,	$05, $80, $00, $80
0001596A                            	spAlgorithm	$04
0001596A =00000009                M spatnum	=	spatnum+1
0001596A =00000004                M spal	=	val
0001596A                            	spFeedback	$06
0001596A =00000006                M spfe	=	val
0001596A                            	spDetune	$05, $02, $05, $02
0001596A =00000005                M spde1	=	op1
0001596A =00000002                M spde2	=	op2
0001596A =00000005                M spde3	=	op3
0001596A =00000002                M spde4	=	op4
0001596A                            	spMultiple	$06, $00, $04, $00
0001596A =00000006                M spmu1	=	op1
0001596A =00000000                M spmu2	=	op2
0001596A =00000004                M spmu3	=	op3
0001596A =00000000                M spmu4	=	op4
0001596A                            	spRateScale	$00, $00, $00, $00
0001596A =00000000                M sprs1	=	op1
0001596A =00000000                M sprs2	=	op2
0001596A =00000000                M sprs3	=	op3
0001596A =00000000                M sprs4	=	op4
0001596A                            	spAttackRt	$1F, $1F, $1F, $1F
0001596A =0000001F                M spar1	=	op1
0001596A =0000001F                M spar2	=	op2
0001596A =0000001F                M spar3	=	op3
0001596A =0000001F                M spar4	=	op4
0001596A                            	spAmpMod	$00, $00, $00, $00
0001596A =00000000                M spam1	=	op1
0001596A =00000000                M spam2	=	op2
0001596A =00000000                M spam3	=	op3
0001596A =00000000                M spam4	=	op4
0001596A                            	spSustainRt	$07, $16, $00, $1B
0001596A =00000007                M spsr1	=	op1
0001596A =00000016                M spsr2	=	op2
0001596A =00000000                M spsr3	=	op3
0001596A =0000001B                M spsr4	=	op4
0001596A                            	spSustainLv	$00, $00, $00, $00
0001596A =00000000                M spsl1	=	op1
0001596A =00000000                M spsl2	=	op2
0001596A =00000000                M spsl3	=	op3
0001596A =00000000                M spsl4	=	op4
0001596A                            	spDecayRt	$00, $10, $0F, $15
0001596A =00000000                M spdr1	=	op1
0001596A =00000010                M spdr2	=	op2
0001596A =0000000F                M spdr3	=	op3
0001596A =00000015                M spdr4	=	op4
0001596A                            	spReleaseRt	$0F, $0F, $0F, $0E
0001596A =0000000F                M sprr1	=	op1
0001596A =0000000F                M sprr2	=	op2
0001596A =0000000F                M sprr3	=	op3
0001596A =0000000E                M sprr4	=	op4
0001596A                            	spSSGEG		$00, $00, $00, $00
0001596A =00000000                M spss1	=	op1
0001596A =00000000                M spss2	=	op2
0001596A =00000000                M spss3	=	op3
0001596A =00000000                M spss4	=	op4
0001596A                            	spTotalLv	$05, $00, $00, $00
0001596A =00000005                M sptl1	=	op1
0001596A =00000000                M sptl2	=	op2
0001596A =00000000                M sptl3	=	op3
0001596A =00000000                M sptl4	=	op4
0001596A 34                       M 	dc.b	(spfe<<3)+spal
0001596B =00000080                M sptlmask4	set	$80
0001596B =00000000                M sptlmask2	set	((spal>=5)<<7)
0001596B =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
0001596B =00000000                M sptlmask1	set	((spal=7)<<7)
0001596B 5654 2020                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001596F 1F1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00015973 0700 161B                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00015977 000F 1015                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001597B 0F0F 0F0E                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001597F 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00015983 0580 0080                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00015987 4E41 54                  M 	dc.b	'NAT'
0001598A                            ; ===========================================================================
0001598A                            ; ---------------------------------------------------------------------------
0001598A                            ; FM5 data - Used for type of drums and clarinet?
0001598A                            ; ---------------------------------------------------------------------------
0001598A                            
0001598A                            Zaxx_FM5:
0001598A                            	sVoice		$05
0001598A E805                     M 	dc.b	$e8,$05
0001598C                            	ssDetune	$FB
0001598C E1FB                     M 	dc.b	$e1,$fb
0001598E                            	;sJump		.out1
0001598E                            
0001598E CA0C                       .drumsi	dc.b nCs6, $0C
00015990                            	saVol		$0A
00015990 ED0A                     M 	dc.b	$ed,$0a
00015992 0C                         	dc.b $0C
00015993                            	saVol		$F6
00015993 EDF6                     M 	dc.b	$ed,$f6
00015995                            	sLoop		$00, $0C, .drumsi
00015995 F700                     M 	dc.b	$f7,$00
00015997 FFF6                     M 	dc.w	.drumsi-*-1
00015999 0C                       M 	dc.b	$0c
0001599A 8060                       	dc.b nRst, $60
0001599C                            ; ---------------------------------------------------------------------------
0001599C                            ; Main loop point
0001599C                            
0001599C                            .loopj
0001599C                            ; ---------------------------------------------------------------------------
0001599C                            ; versus section
0001599C                            
0001599C                            	saVol		$0A
0001599C ED0A                     M 	dc.b	$ed,$0a
0001599E 800C                       .ver1	dc.b nRst, $0C
000159A0 CA0C                       	dc.b nCs6, $0C
000159A2                            	sLoop		$00, $06, .ver1
000159A2 F700                     M 	dc.b	$f7,$00
000159A4 FFF9                     M 	dc.w	.ver1-*-1
000159A6 06                       M 	dc.b	$06
000159A7                            
000159A7                            	saVol		-$0A
000159A7 EDF6                     M 	dc.b	$ed,-$0a
000159A9 1818                       	dc.b $18, $18
000159AB                            	saVol		$0A
000159AB ED0A                     M 	dc.b	$ed,$0a
000159AD                            	sLoop		$01, $03, .ver1
000159AD F701                     M 	dc.b	$f7,$01
000159AF FFEE                     M 	dc.w	.ver1-*-1
000159B1 03                       M 	dc.b	$03
000159B2                            	saVol		-$0A
000159B2 EDF6                     M 	dc.b	$ed,-$0a
000159B4                            
000159B4                            ; ---------------------------------------------------------------------------
000159B4                            ; double section
000159B4                            
000159B4                            	sCall		Zaxx_FM5_DblOut1
000159B4 F8                       M 	dc.b	$f8
000159B5 0000                     M 	dc.w	zaxx_fm5_dblout1-*-1
000159B7                            ; ---------------------------------------------------------------------------
000159B7                            ; light and dark section drums
000159B7                            
000159B7 CA06                       .lirk1	dc.b nCs6, $06
000159B9                            	saVol		$0A
000159B9 ED0A                     M 	dc.b	$ed,$0a
000159BB 06                         	dc.b $06
000159BC                            	saVol		$F6
000159BC EDF6                     M 	dc.b	$ed,$f6
000159BE                            	sLoop		$00, $C0, .lirk1
000159BE F700                     M 	dc.b	$f7,$00
000159C0 FFF6                     M 	dc.w	.lirk1-*-1
000159C2 C0                       M 	dc.b	$c0
000159C3                            ; ---------------------------------------------------------------------------
000159C3                            ; out section
000159C3                            
000159C3                            .out1	saVol		$0A
000159C3 ED0A                     M 	dc.b	$ed,$0a
000159C5 CA0C 0C0C                  	dc.b nCs6, $0C, $0C, $0C
000159C9                            	saVol		-$0A
000159C9 EDF6                     M 	dc.b	$ed,-$0a
000159CB CB06 06                    	dc.b nD6, $06, $06
000159CE                            	sLoop		$00, $04, .out1
000159CE F700                     M 	dc.b	$f7,$00
000159D0 FFF2                     M 	dc.w	.out1-*-1
000159D2 04                       M 	dc.b	$04
000159D3                            
000159D3 0C0C                       	dc.b $0C, $0C
000159D5                            	sLoop		$01, $02, .out1
000159D5 F701                     M 	dc.b	$f7,$01
000159D7 FFEB                     M 	dc.w	.out1-*-1
000159D9 02                       M 	dc.b	$02
000159DA                            	saVol		$08
000159DA ED08                     M 	dc.b	$ed,$08
000159DC                            
000159DC 8060                       	dc.b nRst, $60
000159DE                            	sCall		Zaxx_FM5_DblOut1
000159DE F8                       M 	dc.b	$f8
000159DF 0000                     M 	dc.w	zaxx_fm5_dblout1-*-1
000159E1                            
000159E1                            	;sStop
000159E1                            	sJump		.loopj
000159E1 F6                       M 	dc.b	$f6
000159E2 FFB9                     M 	dc.w	.loopj-*-1
000159E4                            ; ---------------------------------------------------------------------------
000159E4                            ; subroutines
000159E4                            
000159E4                            Zaxx_FM5_DblOut1:
000159E4                            	saVol		$0F
000159E4 ED0F                     M 	dc.b	$ed,$0f
000159E6                            	sVoice		$04
000159E6 E804                     M 	dc.b	$e8,$04
000159E8                            
000159E8 A906 A0A2 A3               .loop	dc.b nE3, $06, nG2, nA2, nBb2
000159ED                            	sLoop		$00, $20, .loop
000159ED F700                     M 	dc.b	$f7,$00
000159EF FFF8                     M 	dc.w	.loop-*-1
000159F1 20                       M 	dc.b	$20
000159F2                            	saVol		$F1
000159F2 EDF1                     M 	dc.b	$ed,$f1
000159F4                            	sVoice		$05
000159F4 E805                     M 	dc.b	$e8,$05
000159F6                            	sRet
000159F6 F9                       M 	dc.b	$f9
000159F7                            ; ===========================================================================
000159F7                            ; ---------------------------------------------------------------------------
000159F7                            ; FM 1 data - Used for drums and hi-hat
000159F7                            ; ---------------------------------------------------------------------------
000159F7                            
000159F7                            Zaxx_FM1:
000159F7                            	;sJump		.out1
000159F7                            	sVoice		pLowKick
000159F7 E800                     M 	dc.b	$e8,plowkick
000159F9 9918                       	dc.b nC2, $18
000159FB                            	sLoop		$00, $0C, Zaxx_FM1
000159FB F700                     M 	dc.b	$f7,$00
000159FD FFF9                     M 	dc.w	zaxx_fm1-*-1
000159FF 0C                       M 	dc.b	$0c
00015A00                            	sVoice		pLowKick
00015A00 E800                     M 	dc.b	$e8,plowkick
00015A02 1880 0C99 1880 0C99 18     	dc.b $18, nRst, $0C, nC2, $18, nRst, $0C, nC2, $18
00015A0B                            ; ---------------------------------------------------------------------------
00015A0B                            ; Main loop point
00015A0B                            
00015A0B                            .loopj
00015A0B                            ; ---------------------------------------------------------------------------
00015A0B                            ; versus section
00015A0B                            
00015A0B                            .ver1	sVoice		pLowKick
00015A0B E800                     M 	dc.b	$e8,plowkick
00015A0D 990C                       	dc.b nC2, $0C
00015A0F                            	sVoice		pSnare
00015A0F E801                     M 	dc.b	$e8,psnare
00015A11 0C                         	dc.b $0C
00015A12                            	sLoop		$00, $06, .ver1
00015A12 F700                     M 	dc.b	$f7,$00
00015A14 FFF6                     M 	dc.w	.ver1-*-1
00015A16 06                       M 	dc.b	$06
00015A17 8030                       	dc.b nRst, $30
00015A19                            	sLoop		$01, $03, .ver1
00015A19 F701                     M 	dc.b	$f7,$01
00015A1B FFEF                     M 	dc.w	.ver1-*-1
00015A1D 03                       M 	dc.b	$03
00015A1E                            ; ---------------------------------------------------------------------------
00015A1E                            ; double section
00015A1E                            
00015A1E                            	sCall		Zaxx_FM1_Dbl2
00015A1E F8                       M 	dc.b	$f8
00015A1F 0000                     M 	dc.w	zaxx_fm1_dbl2-*-1
00015A21                            ; ---------------------------------------------------------------------------
00015A21                            ; light and dark section
00015A21                            
00015A21                            .lirk1	sVoice		pLowKick
00015A21 E800                     M 	dc.b	$e8,plowkick
00015A23 06                         	dc.b $06
00015A24                            	saVol		$0A
00015A24 ED0A                     M 	dc.b	$ed,$0a
00015A26 06                         	dc.b $06
00015A27                            	saVol		$F6
00015A27 EDF6                     M 	dc.b	$ed,$f6
00015A29                            	sVoice		pSnare
00015A29 E801                     M 	dc.b	$e8,psnare
00015A2B 0C                         	dc.b $0C
00015A2C                            	sVoice		pLowKick
00015A2C E800                     M 	dc.b	$e8,plowkick
00015A2E 06                         	dc.b $06
00015A2F                            	saVol		$0A
00015A2F ED0A                     M 	dc.b	$ed,$0a
00015A31 06                         	dc.b $06
00015A32                            	saVol		$F6
00015A32 EDF6                     M 	dc.b	$ed,$f6
00015A34                            	sVoice		pSnare
00015A34 E801                     M 	dc.b	$e8,psnare
00015A36 0C                         	dc.b $0C
00015A37                            	sVoice		pLowKick
00015A37 E800                     M 	dc.b	$e8,plowkick
00015A39 0C                         	dc.b $0C
00015A3A                            	sVoice		pSnare
00015A3A E801                     M 	dc.b	$e8,psnare
00015A3C 0C                         	dc.b $0C
00015A3D                            	sVoice		pLowKick
00015A3D E800                     M 	dc.b	$e8,plowkick
00015A3F 0C                         	dc.b $0C
00015A40                            	sVoice		pSnare
00015A40 E801                     M 	dc.b	$e8,psnare
00015A42 06                         	dc.b $06
00015A43                            	sVoice		pLowKick
00015A43 E800                     M 	dc.b	$e8,plowkick
00015A45 06                         	dc.b $06
00015A46                            	sLoop		$00, $07, .lirk1
00015A46 F700                     M 	dc.b	$f7,$00
00015A48 FFD8                     M 	dc.w	.lirk1-*-1
00015A4A 07                       M 	dc.b	$07
00015A4B                            	sVoice		pLowKick
00015A4B E800                     M 	dc.b	$e8,plowkick
00015A4D 06                         	dc.b $06
00015A4E                            	saVol		$0A
00015A4E ED0A                     M 	dc.b	$ed,$0a
00015A50 06                         	dc.b $06
00015A51                            	saVol		$F6
00015A51 EDF6                     M 	dc.b	$ed,$f6
00015A53                            	sVoice		pSnare
00015A53 E801                     M 	dc.b	$e8,psnare
00015A55 0C                         	dc.b $0C
00015A56                            	sVoice		pLowKick
00015A56 E800                     M 	dc.b	$e8,plowkick
00015A58 06                         	dc.b $06
00015A59                            	saVol		$0A
00015A59 ED0A                     M 	dc.b	$ed,$0a
00015A5B 06                         	dc.b $06
00015A5C                            	saVol		$F6
00015A5C EDF6                     M 	dc.b	$ed,$f6
00015A5E                            	sVoice		pSnare
00015A5E E801                     M 	dc.b	$e8,psnare
00015A60 0C                         	dc.b $0C
00015A61                            	sVoice		pCrash
00015A61 E807                     M 	dc.b	$e8,pcrash
00015A63                            
00015A63 06                         .lirk2	dc.b $06
00015A64                            	saVol		$05
00015A64 ED05                     M 	dc.b	$ed,$05
00015A66 06                         	dc.b $06
00015A67                            	saVol		$FB
00015A67 EDFB                     M 	dc.b	$ed,$fb
00015A69                            	sLoop		$00, $04, .lirk2
00015A69 F700                     M 	dc.b	$f7,$00
00015A6B FFF7                     M 	dc.w	.lirk2-*-1
00015A6D 04                       M 	dc.b	$04
00015A6E                            	sLoop		$01, $03, .lirk1
00015A6E F701                     M 	dc.b	$f7,$01
00015A70 FFB0                     M 	dc.w	.lirk1-*-1
00015A72 03                       M 	dc.b	$03
00015A73                            ; ---------------------------------------------------------------------------
00015A73                            ; out section
00015A73                            
00015A73                            .out1	sVoice		pLowKick
00015A73 E800                     M 	dc.b	$e8,plowkick
00015A75 990C                       	dc.b nC2, $0C
00015A77                            	sVoice		pSnare
00015A77 E801                     M 	dc.b	$e8,psnare
00015A79 0C                         	dc.b $0C
00015A7A                            	sVoice		pCrash
00015A7A E807                     M 	dc.b	$e8,pcrash
00015A7C 0C                         	dc.b $0C
00015A7D                            	sVoice		pSnare
00015A7D E801                     M 	dc.b	$e8,psnare
00015A7F                            	saVol		$05
00015A7F ED05                     M 	dc.b	$ed,$05
00015A81 0C                         	dc.b $0C
00015A82                            	saVol		-$04
00015A82 EDFC                     M 	dc.b	$ed,-$04
00015A84                            	sLoop		$00, $04, .out1
00015A84 F700                     M 	dc.b	$f7,$00
00015A86 FFEC                     M 	dc.w	.out1-*-1
00015A88 04                       M 	dc.b	$04
00015A89                            
00015A89                            	sVoice		pCrash
00015A89 E807                     M 	dc.b	$e8,pcrash
00015A8B 0C                         	dc.b $0C
00015A8C                            	sVoice		pSnare
00015A8C E801                     M 	dc.b	$e8,psnare
00015A8E 0C                         	dc.b $0C
00015A8F                            	sLoop		$01, $02, .out1
00015A8F F701                     M 	dc.b	$f7,$01
00015A91 FFE1                     M 	dc.w	.out1-*-1
00015A93 02                       M 	dc.b	$02
00015A94                            	saVol		-$08
00015A94 EDF8                     M 	dc.b	$ed,-$08
00015A96                            
00015A96 8060 60                    	dc.b nRst, $60, $60
00015A99                            	sCall		Zaxx_FM1_Dbl3
00015A99 F8                       M 	dc.b	$f8
00015A9A 0000                     M 	dc.w	zaxx_fm1_dbl3-*-1
00015A9C                            	;sStop
00015A9C                            	sJump		.loopj
00015A9C F6                       M 	dc.b	$f6
00015A9D FF6D                     M 	dc.w	.loopj-*-1
00015A9F                            ; ---------------------------------------------------------------------------
00015A9F                            ; subroutines
00015A9F                            
00015A9F                            Zaxx_FM1_Dbl2:
00015A9F                            	sCall		Zaxx_FM1_Dbl1
00015A9F F8                       M 	dc.b	$f8
00015AA0 0000                     M 	dc.w	zaxx_fm1_dbl1-*-1
00015AA2 0C0C                       	dc.b $0C, $0C
00015AA4                            
00015AA4                            Zaxx_FM1_Dbl3:
00015AA4                            	sCall		Zaxx_FM1_Dbl1
00015AA4 F8                       M 	dc.b	$f8
00015AA5 0000                     M 	dc.w	zaxx_fm1_dbl1-*-1
00015AA7 06                         	dc.b $06
00015AA8                            	saVol		$0A
00015AA8 ED0A                     M 	dc.b	$ed,$0a
00015AAA 06                         	dc.b $06
00015AAB                            	saVol		$F6
00015AAB EDF6                     M 	dc.b	$ed,$f6
00015AAD 0606                       	dc.b $06, $06
00015AAF                            	sLoop		$00, $04, Zaxx_FM1_Dbl2
00015AAF F700                     M 	dc.b	$f7,$00
00015AB1 FFED                     M 	dc.w	zaxx_fm1_dbl2-*-1
00015AB3 04                       M 	dc.b	$04
00015AB4                            	sRet
00015AB4 F9                       M 	dc.b	$f9
00015AB5                            
00015AB5                            Zaxx_FM1_Dbl1:
00015AB5                            	sVoice		pSnare
00015AB5 E801                     M 	dc.b	$e8,psnare
00015AB7 990C                       	dc.b nC2, $0C
00015AB9                            	saVol		$05
00015AB9 ED05                     M 	dc.b	$ed,$05
00015ABB 06                         	dc.b $06
00015ABC                            	saVol		$FB
00015ABC EDFB                     M 	dc.b	$ed,$fb
00015ABE 0C                         	dc.b $0C
00015ABF                            	saVol		$05
00015ABF ED05                     M 	dc.b	$ed,$05
00015AC1 06                         	dc.b $06
00015AC2                            	saVol		$FB
00015AC2 EDFB                     M 	dc.b	$ed,$fb
00015AC4 0C                         	dc.b $0C
00015AC5                            	saVol		$05
00015AC5 ED05                     M 	dc.b	$ed,$05
00015AC7 06                         	dc.b $06
00015AC8                            	saVol		$FB
00015AC8 EDFB                     M 	dc.b	$ed,$fb
00015ACA 0C                         	dc.b $0C
00015ACB                            	saVol		$05
00015ACB ED05                     M 	dc.b	$ed,$05
00015ACD 06                         	dc.b $06
00015ACE                            	saVol		$FB
00015ACE EDFB                     M 	dc.b	$ed,$fb
00015AD0                            	sRet
00015AD0 F9                       M 	dc.b	$f9
00015AD1                            ; ===========================================================================
00015AD1                            ; ---------------------------------------------------------------------------
00015AD1                            ; FM2 data - Used for main instrumentation with FM4
00015AD1                            ; ---------------------------------------------------------------------------
00015AD1                            
00015AD1                            Zaxx_FM2:
00015AD1                            	;sJump		.out1
00015AD1                            	ssMod68k	$03, $01, $0A, $08
00015AD1 F003 010A 08             M 	dc.b	$f0,$03,$01,$0a,$08
00015AD6                            	sVoice		$02
00015AD6 E802                     M 	dc.b	$e8,$02
00015AD8                            	sCall		Zaxx_FM23_Intro1
00015AD8 F8                       M 	dc.b	$f8
00015AD9 0000                     M 	dc.w	zaxx_fm23_intro1-*-1
00015ADB                            	saVol		$FB
00015ADB EDFB                     M 	dc.b	$ed,$fb
00015ADD                            ; ---------------------------------------------------------------------------
00015ADD                            ; Main loop point
00015ADD                            
00015ADD                            .loopj
00015ADD                            ; ---------------------------------------------------------------------------
00015ADD                            ; versus section
00015ADD                            
00015ADD                            	sCall		Zaxx_FM24_Ver1
00015ADD F8                       M 	dc.b	$f8
00015ADE 0000                     M 	dc.w	zaxx_fm24_ver1-*-1
00015AE0                            ; ---------------------------------------------------------------------------
00015AE0                            ; double section
00015AE0                            
00015AE0                            	sVoice		$03
00015AE0 E803                     M 	dc.b	$e8,$03
00015AE2                            .dbl1	sCall		Zaxx_FM23_DblDark1
00015AE2 F8                       M 	dc.b	$f8
00015AE3 0000                     M 	dc.w	zaxx_fm23_dbldark1-*-1
00015AE5                            	sLoop		$01, $04, .dbl1
00015AE5 F701                     M 	dc.b	$f7,$01
00015AE7 FFFA                     M 	dc.w	.dbl1-*-1
00015AE9 04                       M 	dc.b	$04
00015AEA                            ; ---------------------------------------------------------------------------
00015AEA                            ; light section
00015AEA                            
00015AEA                            .lite1	sCall		Zaxx_FM24_Lite1
00015AEA F8                       M 	dc.b	$f8
00015AEB 0000                     M 	dc.w	zaxx_fm24_lite1-*-1
00015AED                            	sLoop		$00, $04, .lite1
00015AED F700                     M 	dc.b	$f7,$00
00015AEF FFFA                     M 	dc.w	.lite1-*-1
00015AF1 04                       M 	dc.b	$04
00015AF2                            	saTranspose	$01
00015AF2 E401                     M 	dc.b	$e4,$01
00015AF4                            	sLoop		$01, $02, .lite1
00015AF4 F701                     M 	dc.b	$f7,$01
00015AF6 FFF3                     M 	dc.w	.lite1-*-1
00015AF8 02                       M 	dc.b	$02
00015AF9                            	saTranspose	$FE
00015AF9 E4FE                     M 	dc.b	$e4,$fe
00015AFB                            ; ---------------------------------------------------------------------------
00015AFB                            ; dark section
00015AFB                            
00015AFB                            	sVoice		$03
00015AFB E803                     M 	dc.b	$e8,$03
00015AFD                            	sPan		spCenter, $00
00015AFD E0C0                     M 	dc.b	$e0,spcenter|$00
00015AFF                            	saVol		$FD
00015AFF EDFD                     M 	dc.b	$ed,$fd
00015B01                            
00015B01                            .dark1	sCall		Zaxx_FM23_DblDark1
00015B01 F8                       M 	dc.b	$f8
00015B02 0000                     M 	dc.w	zaxx_fm23_dbldark1-*-1
00015B04                            	sLoop		$01, $04, .dark1
00015B04 F701                     M 	dc.b	$f7,$01
00015B06 FFFA                     M 	dc.w	.dark1-*-1
00015B08 04                       M 	dc.b	$04
00015B09                            	saVol		$03
00015B09 ED03                     M 	dc.b	$ed,$03
00015B0B                            ; ---------------------------------------------------------------------------
00015B0B                            ; out section
00015B0B                            
00015B0B                            .out1	sCall		Zaxx_FM24_Out1
00015B0B F8                       M 	dc.b	$f8
00015B0C 0000                     M 	dc.w	zaxx_fm24_out1-*-1
00015B0E                            
00015B0E 8060 6060                  	dc.b nRst, $60, $60, $60
00015B12                            
00015B12                            	sVoice		$03
00015B12 E803                     M 	dc.b	$e8,$03
00015B14                            .out2	sCall		Zaxx_FM23_DblDark1
00015B14 F8                       M 	dc.b	$f8
00015B15 0000                     M 	dc.w	zaxx_fm23_dbldark1-*-1
00015B17                            	sLoop		$01, $03, .out2
00015B17 F701                     M 	dc.b	$f7,$01
00015B19 FFFA                     M 	dc.w	.out2-*-1
00015B1B 03                       M 	dc.b	$03
00015B1C                            	;sStop
00015B1C                            	sJump		.loopj
00015B1C F6                       M 	dc.b	$f6
00015B1D FFBF                     M 	dc.w	.loopj-*-1
00015B1F                            ; ---------------------------------------------------------------------------
00015B1F                            ; subroutines
00015B1F                            
00015B1F                            Zaxx_FM24_Ver1:
00015B1F                            	sVoice		$03
00015B1F E803                     M 	dc.b	$e8,$03
00015B21                            .ver2	ssMod68k	$00, $01, -$14, $FF
00015B21 F000 01EC FF             M 	dc.b	$f0,$00,$01,-$14,$ff
00015B26                            
00015B26 9D08                       .ver1	dc.b nE2, $08
00015B28                            	saVol		$08
00015B28 ED08                     M 	dc.b	$ed,$08
00015B2A E79E                       	dc.b sHold, nF2
00015B2C                            	saVol		$08
00015B2C ED08                     M 	dc.b	$ed,$08
00015B2E E7A2                       	dc.b sHold, nA2
00015B30                            	saVol		-$10
00015B30 EDF0                     M 	dc.b	$ed,-$10
00015B32                            	saDetune	-$08
00015B32 E2F8                     M 	dc.b	$e2,-$08
00015B34                            	sLoop		$00, $06, .ver1
00015B34 F700                     M 	dc.b	$f7,$00
00015B36 FFEF                     M 	dc.w	.ver1-*-1
00015B38 06                       M 	dc.b	$06
00015B39                            
00015B39                            	saDetune	$08*$06
00015B39 E230                     M 	dc.b	$e2,$08*$06
00015B3B                            	ssMod68k	$00, $01, -$20, $18
00015B3B F000 01E0 18             M 	dc.b	$f0,$00,$01,-$20,$18
00015B40                            
00015B40                            	ssLFO		$F8,1,2, spLeft
00015B40 EFF8 92                  M 	dc.b	$ef,$f8,(1<<4)|2|spleft
00015B43 A703                       	dc.b nD3, $03
00015B45                            	ssLFO		$FA,1,4, spLeft
00015B45 EFFA 94                  M 	dc.b	$ef,$fa,(1<<4)|4|spleft
00015B48 E7A7                       	dc.b sHold, nD3
00015B4A                            	ssLFO		$FD,1,5, spLeft
00015B4A EFFD 95                  M 	dc.b	$ef,$fd,(1<<4)|5|spleft
00015B4D E7A7                       	dc.b sHold, nD3
00015B4F                            	ssLFO		$FF,1,7, spLeft
00015B4F EFFF 97                  M 	dc.b	$ef,$ff,(1<<4)|7|spleft
00015B52 E7A7                       	dc.b sHold, nD3
00015B54                            
00015B54                            	ssLFO		$F8,1,2, spCenter
00015B54 EFF8 D2                  M 	dc.b	$ef,$f8,(1<<4)|2|spcenter
00015B57 E7A9                       	dc.b sHold, nE3
00015B59                            	ssLFO		$FA,1,4, spCenter
00015B59 EFFA D4                  M 	dc.b	$ef,$fa,(1<<4)|4|spcenter
00015B5C E7A9                       	dc.b sHold, nE3
00015B5E                            	ssLFO		$FD,1,5, spCenter
00015B5E EFFD D5                  M 	dc.b	$ef,$fd,(1<<4)|5|spcenter
00015B61 E7A9                       	dc.b sHold, nE3
00015B63                            	ssLFO		$FF,1,7, spCenter
00015B63 EFFF D7                  M 	dc.b	$ef,$ff,(1<<4)|7|spcenter
00015B66 E7A9                       	dc.b sHold, nE3
00015B68                            
00015B68                            	ssLFO		$F8,1,2, spRight
00015B68 EFF8 52                  M 	dc.b	$ef,$f8,(1<<4)|2|spright
00015B6B E7B0                       	dc.b sHold, nB3
00015B6D                            	ssLFO		$FA,1,4, spRight
00015B6D EFFA 54                  M 	dc.b	$ef,$fa,(1<<4)|4|spright
00015B70 E7B0                       	dc.b sHold, nB3
00015B72                            	ssLFO		$FD,1,5, spRight
00015B72 EFFD 55                  M 	dc.b	$ef,$fd,(1<<4)|5|spright
00015B75 E7B0                       	dc.b sHold, nB3
00015B77                            	ssLFO		$FF,1,7, spRight
00015B77 EFFF 57                  M 	dc.b	$ef,$ff,(1<<4)|7|spright
00015B7A E7B0                       	dc.b sHold, nB3
00015B7C                            
00015B7C                            	ssLFO		$F8,1,2, spCenter
00015B7C EFF8 D2                  M 	dc.b	$ef,$f8,(1<<4)|2|spcenter
00015B7F E7A9                       	dc.b sHold, nE3
00015B81                            	ssLFO		$FA,1,4, spCenter
00015B81 EFFA D4                  M 	dc.b	$ef,$fa,(1<<4)|4|spcenter
00015B84 E7A9                       	dc.b sHold, nE3
00015B86                            	ssLFO		$FD,1,5, spCenter
00015B86 EFFD D5                  M 	dc.b	$ef,$fd,(1<<4)|5|spcenter
00015B89 E7A9                       	dc.b sHold, nE3
00015B8B                            	ssLFO		$FF,1,7, spCenter
00015B8B EFFF D7                  M 	dc.b	$ef,$ff,(1<<4)|7|spcenter
00015B8E E7A9                       	dc.b sHold, nE3
00015B90                            
00015B90                            	ssLFO		$00,spCenter
00015B90 EF00 C0                  M 	dc.b	$ef,$00,spcenter
00015B93                            	sLoop		$01, $03, .ver2
00015B93 F701                     M 	dc.b	$f7,$01
00015B95 FF8B                     M 	dc.w	.ver2-*-1
00015B97 03                       M 	dc.b	$03
00015B98                            
00015B98                            	ssMod68k	$03, $01, $0A, $08
00015B98 F003 010A 08             M 	dc.b	$f0,$03,$01,$0a,$08
00015B9D                            	sRet
00015B9D F9                       M 	dc.b	$f9
00015B9E                            
00015B9E                            Zaxx_FM24_Out1:
00015B9E                            	sVoice		$03
00015B9E E803                     M 	dc.b	$e8,$03
00015BA0                            	ssMod68k	$00, $01, -$20, $18
00015BA0 F000 01E0 18             M 	dc.b	$f0,$00,$01,-$20,$18
00015BA5                            
00015BA5                            .loop	ssLFO		$F8,1,2, spCentre
00015BA5 EFF8 D2                  M 	dc.b	$ef,$f8,(1<<4)|2|spcentre
00015BA8 A50C                       	dc.b nC3, $0C
00015BAA                            	ssLFO		$FA,1,4, spCentre
00015BAA EFFA D4                  M 	dc.b	$ef,$fa,(1<<4)|4|spcentre
00015BAD E7A7                       	dc.b sHold, nD3
00015BAF                            	ssLFO		$FC,2,5, spCentre
00015BAF EFFC E5                  M 	dc.b	$ef,$fc,(2<<4)|5|spcentre
00015BB2 E7A9                       	dc.b sHold, nE3
00015BB4                            	ssLFO		$FE,2,7, spLeft
00015BB4 EFFE A7                  M 	dc.b	$ef,$fe,(2<<4)|7|spleft
00015BB7 E7AA                       	dc.b sHold, nF3
00015BB9                            	saVol		$01
00015BB9 ED01                     M 	dc.b	$ed,$01
00015BBB                            
00015BBB                            	ssLFO		$F8,1,2, spCentre
00015BBB EFF8 D2                  M 	dc.b	$ef,$f8,(1<<4)|2|spcentre
00015BBE 9A0C                       	dc.b nCs2, $0C
00015BC0                            	ssLFO		$FA,1,4, spCentre
00015BC0 EFFA D4                  M 	dc.b	$ef,$fa,(1<<4)|4|spcentre
00015BC3 E79C                       	dc.b sHold, nEb2
00015BC5                            	ssLFO		$FC,2,5, spCentre
00015BC5 EFFC E5                  M 	dc.b	$ef,$fc,(2<<4)|5|spcentre
00015BC8 E79E                       	dc.b sHold, nF2
00015BCA                            	ssLFO		$FE,2,7, spRight
00015BCA EFFE 67                  M 	dc.b	$ef,$fe,(2<<4)|7|spright
00015BCD E79F                       	dc.b sHold, nFs2
00015BCF                            	saVol		$01
00015BCF ED01                     M 	dc.b	$ed,$01
00015BD1                            
00015BD1                            	sLoop		$00, $02, .loop
00015BD1 F700                     M 	dc.b	$f7,$00
00015BD3 FFD1                     M 	dc.w	.loop-*-1
00015BD5 02                       M 	dc.b	$02
00015BD6                            	ssLFO		$FD,3,7, spCentre
00015BD6 EFFD F7                  M 	dc.b	$ef,$fd,(3<<4)|7|spcentre
00015BD9                            	sModOff
00015BD9 EC                       M 	dc.b	$ec
00015BDA AC18                       	dc.b nG3, $18
00015BDC                            	sModOn
00015BDC EB                       M 	dc.b	$eb
00015BDD                            	sLoop		$01, $02, .loop
00015BDD F701                     M 	dc.b	$f7,$01
00015BDF FFC5                     M 	dc.w	.loop-*-1
00015BE1 02                       M 	dc.b	$02
00015BE2                            
00015BE2                            	ssLFO		$00,spCenter
00015BE2 EF00 C0                  M 	dc.b	$ef,$00,spcenter
00015BE5                            	ssMod68k	$03, $01, $0A, $08
00015BE5 F003 010A 08             M 	dc.b	$f0,$03,$01,$0a,$08
00015BEA                            	saVol		-$08
00015BEA EDF8                     M 	dc.b	$ed,-$08
00015BEC                            	sRet
00015BEC F9                       M 	dc.b	$f9
00015BED                            
00015BED                            Zaxx_FM24_Lite1:
00015BED                            	sVoice		$06
00015BED E806                     M 	dc.b	$e8,$06
00015BEF                            	sPan		spLeft, $00
00015BEF E080                     M 	dc.b	$e0,spleft|$00
00015BF1 9D0C                       	dc.b nE2, $0C
00015BF3                            	sPan		spCenter, $00
00015BF3 E0C0                     M 	dc.b	$e0,spcenter|$00
00015BF5 9D                         	dc.b nE2
00015BF6                            	sPan		spRight, $00
00015BF6 E040                     M 	dc.b	$e0,spright|$00
00015BF8 A9                         	dc.b nE3
00015BF9                            	sPan		spCenter, $00
00015BF9 E0C0                     M 	dc.b	$e0,spcenter|$00
00015BFB 9D                         	dc.b nE2
00015BFC                            	sPan		spLeft, $00
00015BFC E080                     M 	dc.b	$e0,spleft|$00
00015BFE A7                         	dc.b nD3
00015BFF                            	sPan		spCenter, $00
00015BFF E0C0                     M 	dc.b	$e0,spcenter|$00
00015C01 9D06                       	dc.b nE2, $06
00015C03                            	sPan		spRight, $00
00015C03 E040                     M 	dc.b	$e0,spright|$00
00015C05 A412                       	dc.b nB2, $12
00015C07                            	sPan		spCenter, $00
00015C07 E0C0                     M 	dc.b	$e0,spcenter|$00
00015C09 9D0C                       	dc.b nE2, $0C
00015C0B                            	sPan		spLeft, $00
00015C0B E080                     M 	dc.b	$e0,spleft|$00
00015C0D 9D0C                       	dc.b nE2, $0C
00015C0F                            	sPan		spCenter, $00
00015C0F E0C0                     M 	dc.b	$e0,spcenter|$00
00015C11 9D                         	dc.b nE2
00015C12                            	sPan		spRight, $00
00015C12 E040                     M 	dc.b	$e0,spright|$00
00015C14 A9                         	dc.b nE3
00015C15                            	sPan		spCenter, $00
00015C15 E0C0                     M 	dc.b	$e0,spcenter|$00
00015C17 9D                         	dc.b nE2
00015C18                            	sPan		spLeft, $00
00015C18 E080                     M 	dc.b	$e0,spleft|$00
00015C1A AC                         	dc.b nG3
00015C1B                            	sPan		spCenter, $00
00015C1B E0C0                     M 	dc.b	$e0,spcenter|$00
00015C1D 9D06                       	dc.b nE2, $06
00015C1F                            	sPan		spRight, $00
00015C1F E040                     M 	dc.b	$e0,spright|$00
00015C21 A712                       	dc.b nD3, $12
00015C23                            	sPan		spCenter, $00
00015C23 E0C0                     M 	dc.b	$e0,spcenter|$00
00015C25 A90C                       	dc.b nE3, $0C
00015C27                            	sPan		spLeft, $00
00015C27 E080                     M 	dc.b	$e0,spleft|$00
00015C29                            	sRet
00015C29 F9                       M 	dc.b	$f9
00015C2A                            ; ===========================================================================
00015C2A                            ; ---------------------------------------------------------------------------
00015C2A                            ; FM4 data - Used for main instrumentation with FM2
00015C2A                            ; ---------------------------------------------------------------------------
00015C2A                            
00015C2A                            Zaxx_FM4:
00015C2A                            	;sJump		.out1
00015C2A                            	ssMod68k	$03, $01, $0A, $08
00015C2A F003 010A 08             M 	dc.b	$f0,$03,$01,$0a,$08
00015C2F                            	sVoice		$03
00015C2F E803                     M 	dc.b	$e8,$03
00015C31                            	ssDetune	$FB
00015C31 E1FB                     M 	dc.b	$e1,$fb
00015C33 8060 6060 60               	dc.b nRst, $60, $60, $60, $60
00015C38                            ; ---------------------------------------------------------------------------
00015C38                            ; Main loop point
00015C38                            
00015C38                            .loopj
00015C38                            ; ---------------------------------------------------------------------------
00015C38                            ; versus section
00015C38                            
00015C38                            	saTranspose	$0C
00015C38 E40C                     M 	dc.b	$e4,$0c
00015C3A                            	sCall		Zaxx_FM24_Ver1
00015C3A F8                       M 	dc.b	$f8
00015C3B FEE3                     M 	dc.w	zaxx_fm24_ver1-*-1
00015C3D                            	saTranspose	-$0C
00015C3D E4F4                     M 	dc.b	$e4,-$0c
00015C3F                            ; ---------------------------------------------------------------------------
00015C3F                            ; double section
00015C3F                            
00015C3F                            .dbl1	sCall		Zaxx_FM4_DblDark
00015C3F F8                       M 	dc.b	$f8
00015C40 0000                     M 	dc.w	zaxx_fm4_dbldark-*-1
00015C42                            	sLoop		$01, $04, .dbl1
00015C42 F701                     M 	dc.b	$f7,$01
00015C44 FFFA                     M 	dc.w	.dbl1-*-1
00015C46 04                       M 	dc.b	$04
00015C47                            ; ---------------------------------------------------------------------------
00015C47                            ; light section
00015C47                            
00015C47                            	sVoice		$06
00015C47 E806                     M 	dc.b	$e8,$06
00015C49                            	saTranspose	$0C
00015C49 E40C                     M 	dc.b	$e4,$0c
00015C4B                            
00015C4B                            .lite1	sCall		Zaxx_FM24_Lite1
00015C4B F8                       M 	dc.b	$f8
00015C4C FFA0                     M 	dc.w	zaxx_fm24_lite1-*-1
00015C4E                            	sLoop		$00, $04, .lite1
00015C4E F700                     M 	dc.b	$f7,$00
00015C50 FFFA                     M 	dc.w	.lite1-*-1
00015C52 04                       M 	dc.b	$04
00015C53                            	saTranspose	$01
00015C53 E401                     M 	dc.b	$e4,$01
00015C55                            	sLoop		$01, $02, .lite1
00015C55 F701                     M 	dc.b	$f7,$01
00015C57 FFF3                     M 	dc.w	.lite1-*-1
00015C59 02                       M 	dc.b	$02
00015C5A                            	saTranspose	$F2
00015C5A E4F2                     M 	dc.b	$e4,$f2
00015C5C                            ; ---------------------------------------------------------------------------
00015C5C                            ; dark section
00015C5C                            
00015C5C                            	sVoice		$03
00015C5C E803                     M 	dc.b	$e8,$03
00015C5E                            	sPan		spCenter, $00
00015C5E E0C0                     M 	dc.b	$e0,spcenter|$00
00015C60                            
00015C60                            .dark1	sCall		Zaxx_FM4_DblDark
00015C60 F8                       M 	dc.b	$f8
00015C61 0000                     M 	dc.w	zaxx_fm4_dbldark-*-1
00015C63                            	sLoop		$01, $04, .dark1
00015C63 F701                     M 	dc.b	$f7,$01
00015C65 FFFA                     M 	dc.w	.dark1-*-1
00015C67 04                       M 	dc.b	$04
00015C68                            ; ---------------------------------------------------------------------------
00015C68                            ; out section
00015C68                            
00015C68                            .out1	saTranspose	$0C
00015C68 E40C                     M 	dc.b	$e4,$0c
00015C6A                            	sCall		Zaxx_FM24_Out1
00015C6A F8                       M 	dc.b	$f8
00015C6B FF32                     M 	dc.w	zaxx_fm24_out1-*-1
00015C6D                            	saTranspose	-$0C
00015C6D E4F4                     M 	dc.b	$e4,-$0c
00015C6F 8060 6060                  	dc.b nRst, $60, $60, $60
00015C73                            
00015C73                            .out2	sCall		Zaxx_FM4_DblDark
00015C73 F8                       M 	dc.b	$f8
00015C74 0000                     M 	dc.w	zaxx_fm4_dbldark-*-1
00015C76                            	sLoop		$01, $03, .out2
00015C76 F701                     M 	dc.b	$f7,$01
00015C78 FFFA                     M 	dc.w	.out2-*-1
00015C7A 03                       M 	dc.b	$03
00015C7B                            	;sStop
00015C7B                            	sJump		.loopj
00015C7B F6                       M 	dc.b	$f6
00015C7C FFBB                     M 	dc.w	.loopj-*-1
00015C7E                            
00015C7E                            Zaxx_FM4_DblDark:
00015C7E A302 E7A4 0AA2 06          	dc.b nBb2, $02, sHold, nB2, $0A, nA2, $06
00015C85                            	sLoop		$00, $04, Zaxx_FM4_DblDark
00015C85 F700                     M 	dc.b	$f7,$00
00015C87 FFF6                     M 	dc.w	zaxx_fm4_dbldark-*-1
00015C89 04                       M 	dc.b	$04
00015C8A                            	sPan		spLeft, $00
00015C8A E080                     M 	dc.b	$e0,spleft|$00
00015C8C AA0C E7                    	dc.b nF3, $0C, sHold
00015C8F                            	sPan		spRight, $00
00015C8F E040                     M 	dc.b	$e0,spright|$00
00015C91 A9                         	dc.b nE3
00015C92                            	sPan		spCenter, $00
00015C92 E0C0                     M 	dc.b	$e0,spcenter|$00
00015C94 A40C A206 A40C A206        	dc.b nB2, $0C, nA2, $06, nB2, $0C, nA2, $06
00015C9C A302 E7A4 0AA2 06A4        	dc.b nBb2, $02, sHold, nB2, $0A, nA2, $06, nB2
00015CA4 0CA0 06A1 02E7 A20A        	dc.b $0C, nG2, $06, nAb2, $02, sHold, nA2, $0A
00015CAC A30C                       	dc.b nBb2, $0C
00015CAE                            	sRet
00015CAE F9                       M 	dc.b	$f9
00015CAF                            ; ===========================================================================
00015CAF                            ; ---------------------------------------------------------------------------
00015CAF                            ; PSG1 and PSG2 data - Used for boosting FM2 and FM4, or proving bg noise
00015CAF                            ; ---------------------------------------------------------------------------
00015CAF                            
00015CAF                            Zaxx_PSG2:
00015CAF                            	ssDetune	$FB
00015CAF E1FB                     M 	dc.b	$e1,$fb
00015CB1 8003                       	dc.b nRst, $03
00015CB3                            
00015CB3                            Zaxx_PSG1:
00015CB3                            	;sJump		.out1
00015CB3 8060                       .wait	dc.b nRst, $60
00015CB5                            	sLoop		$00, $04, .wait
00015CB5 F700                     M 	dc.b	$f7,$00
00015CB7 FFFB                     M 	dc.w	.wait-*-1
00015CB9 04                       M 	dc.b	$04
00015CBA                            ; ---------------------------------------------------------------------------
00015CBA                            ; Main loop point
00015CBA                            
00015CBA                            .loopj
00015CBA                            ; ---------------------------------------------------------------------------
00015CBA                            ; versus section
00015CBA                            
00015CBA                            .ver2	ssMod68k	$00, $01, -$06, $FF
00015CBA F000 01FA FF             M 	dc.b	$f0,$00,$01,-$06,$ff
00015CBF                            
00015CBF 9D08                       .ver1	dc.b nE2, $08
00015CC1                            	saVol		$03
00015CC1 ED03                     M 	dc.b	$ed,$03
00015CC3 E79E                       	dc.b sHold, nF2
00015CC5                            	saVol		$03
00015CC5 ED03                     M 	dc.b	$ed,$03
00015CC7 E7A2                       	dc.b sHold, nA2
00015CC9                            	saVol		-$06
00015CC9 EDFA                     M 	dc.b	$ed,-$06
00015CCB                            	saDetune	-$08
00015CCB E2F8                     M 	dc.b	$e2,-$08
00015CCD                            	sLoop		$00, $06, .ver1
00015CCD F700                     M 	dc.b	$f7,$00
00015CCF FFEF                     M 	dc.w	.ver1-*-1
00015CD1 06                       M 	dc.b	$06
00015CD2                            
00015CD2                            	saDetune	$08*$06
00015CD2 E230                     M 	dc.b	$e2,$08*$06
00015CD4 8030                       	dc.b nRst, $30
00015CD6                            	sLoop		$01, $03, .ver2
00015CD6 F701                     M 	dc.b	$f7,$01
00015CD8 FFE1                     M 	dc.w	.ver2-*-1
00015CDA 03                       M 	dc.b	$03
00015CDB                            ; ---------------------------------------------------------------------------
00015CDB                            ; double section
00015CDB                            
00015CDB                            	sCall		Zaxx_PSG12_DblOut1
00015CDB F8                       M 	dc.b	$f8
00015CDC 0000                     M 	dc.w	zaxx_psg12_dblout1-*-1
00015CDE                            ; ---------------------------------------------------------------------------
00015CDE                            ; light section
00015CDE                            
00015CDE                            .lite1	sCall		Zaxx_PSG12_Lite1
00015CDE F8                       M 	dc.b	$f8
00015CDF 0000                     M 	dc.w	zaxx_psg12_lite1-*-1
00015CE1                            	sLoop		$00, $04, .lite1
00015CE1 F700                     M 	dc.b	$f7,$00
00015CE3 FFFA                     M 	dc.w	.lite1-*-1
00015CE5 04                       M 	dc.b	$04
00015CE6                            	saTranspose	$01
00015CE6 E401                     M 	dc.b	$e4,$01
00015CE8                            	sLoop		$01, $02, .lite1
00015CE8 F701                     M 	dc.b	$f7,$01
00015CEA FFF3                     M 	dc.w	.lite1-*-1
00015CEC 02                       M 	dc.b	$02
00015CED                            	saTranspose	$FE
00015CED E4FE                     M 	dc.b	$e4,$fe
00015CEF                            ; ---------------------------------------------------------------------------
00015CEF                            ; dark section
00015CEF                            
00015CEF 8060                       .dark1	dc.b nRst, $60
00015CF1                            	sLoop		$00, $08, .dark1
00015CF1 F700                     M 	dc.b	$f7,$00
00015CF3 FFFB                     M 	dc.w	.dark1-*-1
00015CF5 08                       M 	dc.b	$08
00015CF6                            ; ---------------------------------------------------------------------------
00015CF6                            ; out section
00015CF6                            
00015CF6 8060 60                    .out1	dc.b nRst, $60, $60
00015CF9 A50C 9A                    	dc.b nC3, $0C, nCs2
00015CFC                            	saVol		$04
00015CFC ED04                     M 	dc.b	$ed,$04
00015CFE                            	sLoop		$00, $02, .out1
00015CFE F700                     M 	dc.b	$f7,$00
00015D00 FFF5                     M 	dc.w	.out1-*-1
00015D02 02                       M 	dc.b	$02
00015D03                            	saVol		-$08
00015D03 EDF8                     M 	dc.b	$ed,-$08
00015D05                            
00015D05 8060                       	dc.b nRst, $60
00015D07                            	sCall		Zaxx_PSG12_DblOut1
00015D07 F8                       M 	dc.b	$f8
00015D08 0000                     M 	dc.w	zaxx_psg12_dblout1-*-1
00015D0A                            	;sStop
00015D0A                            	sJump		.loopj
00015D0A F6                       M 	dc.b	$f6
00015D0B FFAE                     M 	dc.w	.loopj-*-1
00015D0D                            ; ---------------------------------------------------------------------------
00015D0D                            ; subroutines
00015D0D                            
00015D0D                            Zaxx_PSG12_DblOut1:
00015D0D                            	ssMod68k	$01, $01, $FF, $01
00015D0D F001 01FF 01             M 	dc.b	$f0,$01,$01,$ff,$01
00015D12 9160 E760                  .loop	dc.b nE1, $60, sHold, $60
00015D16                            	sLoop		$00, $04, .loop
00015D16 F700                     M 	dc.b	$f7,$00
00015D18 FFF9                     M 	dc.w	.loop-*-1
00015D1A 04                       M 	dc.b	$04
00015D1B                            
00015D1B                            	ssMod68k	$03, $01, $02, $03
00015D1B F003 0102 03             M 	dc.b	$f0,$03,$01,$02,$03
00015D20                            	sRet
00015D20 F9                       M 	dc.b	$f9
00015D21                            
00015D21                            Zaxx_PSG12_Lite1:	; <- actually same as Zaxx_FM24_Lite1
00015D21 9D0C 9DA9 9DA7 9D06 A412   	dc.b nE2, $0C, nE2, nE3, nE2, nD3, nE2, $06, nB2, $12
00015D2B 9D0C 9D9D A99D AC9D 06A7+  	dc.b nE2, $0C, nE2, nE2, nE3, nE2, nG3, nE2, $06, nD3, $12
00015D36 A90C                       	dc.b nE3, $0C
00015D38                            	sRet
00015D38 F9                       M 	dc.b	$f9
00015D39                            ; ===========================================================================
00015D39                            ; ---------------------------------------------------------------------------
00015D39                            ; FM 3 data - Used for background low pitch effect
00015D39                            ; ---------------------------------------------------------------------------
00015D39                            
00015D39                            Zaxx_FM3:
00015D39                            	sVoice		$02
00015D39 E802                     M 	dc.b	$e8,$02
00015D3B                            	ssMod68k	$10, $01, $10, $07
00015D3B F010 0110 07             M 	dc.b	$f0,$10,$01,$10,$07
00015D40                            	;sJump		.out1
00015D40                            	sCall		Zaxx_FM23_Intro1
00015D40 F8                       M 	dc.b	$f8
00015D41 0000                     M 	dc.w	zaxx_fm23_intro1-*-1
00015D43                            	saVol		$FB
00015D43 EDFB                     M 	dc.b	$ed,$fb
00015D45                            ; ---------------------------------------------------------------------------
00015D45                            ; Main loop point
00015D45                            
00015D45                            .loopj
00015D45                            ; ---------------------------------------------------------------------------
00015D45                            ; versus section
00015D45                            
00015D45 9D0C 9B9C 9D               .ver1	dc.b nE2, $0C, nD2, nEb2, nE2
00015D4A                            	sLoop		$00, $03, .ver1
00015D4A F700                     M 	dc.b	$f7,$00
00015D4C FFF8                     M 	dc.w	.ver1-*-1
00015D4E 03                       M 	dc.b	$03
00015D4F                            
00015D4F A7AA ACAA                  	dc.b nD3, nF3, nG3, nF3
00015D53                            	saTranspose	$01
00015D53 E401                     M 	dc.b	$e4,$01
00015D55                            	sLoop		$01, $03, .ver1
00015D55 F701                     M 	dc.b	$f7,$01
00015D57 FFED                     M 	dc.w	.ver1-*-1
00015D59 03                       M 	dc.b	$03
00015D5A                            	saTranspose	-$03
00015D5A E4FD                     M 	dc.b	$e4,-$03
00015D5C                            ; ---------------------------------------------------------------------------
00015D5C                            ; double section
00015D5C                            
00015D5C                            .dbl1	sCall		Zaxx_FM23_DblDark1
00015D5C F8                       M 	dc.b	$f8
00015D5D 0000                     M 	dc.w	zaxx_fm23_dbldark1-*-1
00015D5F                            	sLoop		$01, $04, .dbl1
00015D5F F701                     M 	dc.b	$f7,$01
00015D61 FFFA                     M 	dc.w	.dbl1-*-1
00015D63 04                       M 	dc.b	$04
00015D64                            ; ---------------------------------------------------------------------------
00015D64                            ; dark section
00015D64                            
00015D64 9D0C 9B9C 02E7 9D10        .dark1	dc.b nE2, $0C, nD2, nEb2, $02, sHold, nE2, $10
00015D6C A006 A206 8006 A306        	dc.b nG2, $06, nA2, $06, nRst, $06, nBb2, $06
00015D74 8006 A206 A00C 9C02        	dc.b nRst, $06, nA2, $06, nG2, $0C, nEb2, $02
00015D7C E79D 04E7 9D0C 9B9D        	dc.b sHold, nE2, $04, sHold, nE2, $0C, nD2, nE2
00015D84 A0A2 0680 06A3 0680        	dc.b nG2, nA2, $06, nRst, $06, nBb2, $06, nRst
00015D8C 06A0 06A2 0AE7 A101        	dc.b $06, nG2, $06, nA2, $0A, sHold, nAb2, $01
00015D94 E7A0 9C02 E79D 04          	dc.b sHold, nG2, nEb2, $02, sHold, nE2, $04
00015D9B                            	sLoop		$00, $04, .dark1
00015D9B F700                     M 	dc.b	$f7,$00
00015D9D FFC6                     M 	dc.w	.dark1-*-1
00015D9F 04                       M 	dc.b	$04
00015DA0                            	saTranspose	$01
00015DA0 E401                     M 	dc.b	$e4,$01
00015DA2                            	sLoop		$01, $02, .dark1
00015DA2 F701                     M 	dc.b	$f7,$01
00015DA4 FFBF                     M 	dc.w	.dark1-*-1
00015DA6 02                       M 	dc.b	$02
00015DA7                            	saTranspose	$FE
00015DA7 E4FE                     M 	dc.b	$e4,$fe
00015DA9                            ; ---------------------------------------------------------------------------
00015DA9                            ; light section
00015DA9                            
00015DA9                            .lite1	sCall		Zaxx_FM23_DblDark1
00015DA9 F8                       M 	dc.b	$f8
00015DAA 0000                     M 	dc.w	zaxx_fm23_dbldark1-*-1
00015DAC                            	sLoop		$01, $04, .lite1
00015DAC F701                     M 	dc.b	$f7,$01
00015DAE FFFA                     M 	dc.w	.lite1-*-1
00015DB0 04                       M 	dc.b	$04
00015DB1                            ; ---------------------------------------------------------------------------
00015DB1                            ; out section
00015DB1                            
00015DB1                            .out1	sCall		Zaxx_FM3_Out1
00015DB1 F8                       M 	dc.b	$f8
00015DB2 0000                     M 	dc.w	zaxx_fm3_out1-*-1
00015DB4 A50C A7                    	dc.b nC3, $0C, nD3
00015DB7                            	sCall		Zaxx_FM3_Out1
00015DB7 F8                       M 	dc.b	$f8
00015DB8 0000                     M 	dc.w	zaxx_fm3_out1-*-1
00015DBA 8078 6060                  	dc.b nRst, $78, $60, $60
00015DBE                            
00015DBE                            .out2	sCall		Zaxx_FM23_DblDark1
00015DBE F8                       M 	dc.b	$f8
00015DBF 0000                     M 	dc.w	zaxx_fm23_dbldark1-*-1
00015DC1                            	sLoop		$01, $03, .out2
00015DC1 F701                     M 	dc.b	$f7,$01
00015DC3 FFFA                     M 	dc.w	.out2-*-1
00015DC5 03                       M 	dc.b	$03
00015DC6                            	sJump		.loopj
00015DC6 F6                       M 	dc.b	$f6
00015DC7 FF7D                     M 	dc.w	.loopj-*-1
00015DC9                            ; ---------------------------------------------------------------------------
00015DC9                            ; subroutines
00015DC9                            
00015DC9                            Zaxx_FM3_Out1:
00015DC9 9B0C 999A 02E7 9B10        	dc.b nD2, $0C, nC2, nCs2, $02, sHold, nD2, $10
00015DD1 9E06 A080 9B80 A0          	dc.b nF2, $06, nG2, nRst, nD2, nRst, nG2
00015DD8 A402 E79F 10               	dc.b nB2, $02, sHold, nFs2, $10
00015DDD                            	sLoop		$00, $02, Zaxx_FM3_Out1
00015DDD F700                     M 	dc.b	$f7,$00
00015DDF FFE9                     M 	dc.w	zaxx_fm3_out1-*-1
00015DE1 02                       M 	dc.b	$02
00015DE2                            	sRet
00015DE2 F9                       M 	dc.b	$f9
00015DE3                            
00015DE3                            Zaxx_FM23_Intro1:
00015DE3 9B02 E79C E79D 089D        	dc.b nD2, $02, sHold, nEb2, sHold, nE2, $08, nE2
00015DEB 0C9B 9D9D A3A2 A09D        	dc.b $0C, nD2, nE2, nE2, nBb2, nA2, nG2, nE2
00015DF3 9D9B 9D9D A0A1 02E7        	dc.b nE2, nD2, nE2, nE2, nG2, nAb2, $02, sHold
00015DFB A216                       	dc.b nA2, $16
00015DFD 9D0C 9D9B 9D9D A0A1        	dc.b nE2, $0C, nE2, nD2, nE2, nE2, nG2, nAb2
00015E05 A2A3 24A2 A118             	dc.b nA2, nBb2, $24, nA2, nAb2, $18
00015E0B                            	sRet
00015E0B F9                       M 	dc.b	$f9
00015E0C                            
00015E0C                            Zaxx_FM23_DblDark1:
00015E0C 9C02 E79D 0A9B 06          	dc.b nEb2, $02, sHold, nE2, $0A, nD2, $06
00015E13                            	sLoop		$00, $04, Zaxx_FM23_DblDark1
00015E13 F700                     M 	dc.b	$f7,$00
00015E15 FFF6                     M 	dc.w	zaxx_fm23_dbldark1-*-1
00015E17 04                       M 	dc.b	$04
00015E18 A30C A29D 0C9B 069D        	dc.b nBb2, $0C, nA2, nE2, $0C, nD2, $06, nE2
00015E20 0C9B 069C 02E7 9D0A        	dc.b $0C, nD2, $06, nEb2, $02, sHold, nE2, $0A
00015E28 9B06 9D0C 9906 9A02        	dc.b nD2, $06, nE2, $0C, nC2, $06, nCs2, $02
00015E30 E79B 0A9C 0C               	dc.b sHold, nD2, $0A, nEb2, $0C
00015E35                            	sRet
00015E35 F9                       M 	dc.b	$f9
00015E36                            ; ===========================================================================
00015E36                            ; ---------------------------------------------------------------------------
00015E36                            ; PSG3 data
00015E36                            ; ---------------------------------------------------------------------------
00015E36                            
00015E36                            Zaxx_PSG3:
00015E36                            	;sJump		.out1
00015E36 8060 6060 60               	dc.b nRst, $60, $60, $60, $60
00015E3B                            ; ---------------------------------------------------------------------------
00015E3B                            ; Main loop point, and loop from 2pvs
00015E3B                            
00015E3B                            .loopj
00015E3B                            ; ---------------------------------------------------------------------------
00015E3B                            ; versus section
00015E3B 8060 6060 6060 60          	dc.b nRst, $60, $60, $60, $60, $60, $60
00015E42                            
00015E42                            ; ---------------------------------------------------------------------------
00015E42                            ; double section
00015E42                            
00015E42                            	sNoisePSG	$E7
00015E42 F3E7                     M 	dc.b	$f3,$e7
00015E44                            	sCall		Zaxx_PSG3_DblDark1
00015E44 F8                       M 	dc.b	$f8
00015E45 0000                     M 	dc.w	zaxx_psg3_dbldark1-*-1
00015E47                            ; ---------------------------------------------------------------------------
00015E47                            ; light section
00015E47                            
00015E47                            .lite1	sCall		Zaxx_PSG3_LiteOut1
00015E47 F8                       M 	dc.b	$f8
00015E48 0000                     M 	dc.w	zaxx_psg3_liteout1-*-1
00015E4A                            	sLoop		$00, $10, .lite1
00015E4A F700                     M 	dc.b	$f7,$00
00015E4C FFFA                     M 	dc.w	.lite1-*-1
00015E4E 10                       M 	dc.b	$10
00015E4F                            ; ---------------------------------------------------------------------------
00015E4F                            ; dark section
00015E4F                            
00015E4F                            	sCall		Zaxx_PSG3_DblDark1
00015E4F F8                       M 	dc.b	$f8
00015E50 0000                     M 	dc.w	zaxx_psg3_dbldark1-*-1
00015E52                            ; ---------------------------------------------------------------------------
00015E52                            ; out section
00015E52                            
00015E52                            
00015E52                            .out1	sCall		Zaxx_PSG3_LiteOut1
00015E52 F8                       M 	dc.b	$f8
00015E53 0000                     M 	dc.w	zaxx_psg3_liteout1-*-1
00015E55                            	sLoop		$00, $04, .out1
00015E55 F700                     M 	dc.b	$f7,$00
00015E57 FFFA                     M 	dc.w	.out1-*-1
00015E59 04                       M 	dc.b	$04
00015E5A                            
00015E5A                            	ssMod68k	$08, $04, $01, $04
00015E5A F008 0401 04             M 	dc.b	$f0,$08,$04,$01,$04
00015E5F                            	sVoice		vZaxx04
00015E5F E80D                     M 	dc.b	$e8,vzaxx04
00015E61 8030                       	dc.b nRst, $30
00015E63 D160                       	dc.b nAb6, $60
00015E65                            	ssMod68k	$00, $01, $01, $04
00015E65 F000 0101 04             M 	dc.b	$f0,$00,$01,$01,$04
00015E6A                            
00015E6A E706                       .out2	dc.b sHold, $06
00015E6C                            	saVol		$01
00015E6C ED01                     M 	dc.b	$ed,$01
00015E6E                            	sLoop		$00, $08, .out2
00015E6E F700                     M 	dc.b	$f7,$00
00015E70 FFF9                     M 	dc.w	.out2-*-1
00015E72 08                       M 	dc.b	$08
00015E73                            	saVol		-$08
00015E73 EDF8                     M 	dc.b	$ed,-$08
00015E75                            
00015E75 8060 6030                  	dc.b nRst, $60, $60, $30
00015E79                            	ssMod68k	$08, $04, $01, $04
00015E79 F008 0401 04             M 	dc.b	$f0,$08,$04,$01,$04
00015E7E                            
00015E7E D160                       .out3	dc.b nAb6, $60
00015E80                            	sLoop		$00, $05, .out3
00015E80 F700                     M 	dc.b	$f7,$00
00015E82 FFFB                     M 	dc.w	.out3-*-1
00015E84 05                       M 	dc.b	$05
00015E85                            	sJump		.loopj
00015E85 F6                       M 	dc.b	$f6
00015E86 FFB4                     M 	dc.w	.loopj-*-1
00015E88                            ; ---------------------------------------------------------------------------
00015E88                            ; subroutines
00015E88                            
00015E88                            Zaxx_PSG3_DblDark1:
00015E88                            	sVoice		vS3K_01
00015E88 E808                     M 	dc.b	$e8,vs3k_01
00015E8A D206 06                    	dc.b nA6, $06, $06
00015E8D                            	sVoice		vS3K_08
00015E8D E809                     M 	dc.b	$e8,vs3k_08
00015E8F 06                         	dc.b $06
00015E90                            	sVoice		vS3K_01
00015E90 E808                     M 	dc.b	$e8,vs3k_01
00015E92 0606                       	dc.b $06, $06
00015E94                            	sVoice		vS3K_08
00015E94 E809                     M 	dc.b	$e8,vs3k_08
00015E96 06                         	dc.b $06
00015E97                            	sVoice		vS3K_01
00015E97 E808                     M 	dc.b	$e8,vs3k_01
00015E99 0606 0606 0606 0606        	dc.b $06, $06, $06, $06, $06, $06, $06, $06
00015EA1 0606                       	dc.b $06, $06
00015EA3                            	sLoop		$00, $08, Zaxx_PSG3_DblDark1
00015EA3 F700                     M 	dc.b	$f7,$00
00015EA5 FFE2                     M 	dc.w	zaxx_psg3_dbldark1-*-1
00015EA7 08                       M 	dc.b	$08
00015EA8                            	sRet
00015EA8 F9                       M 	dc.b	$f9
00015EA9                            
00015EA9                            Zaxx_PSG3_LiteOut1:
00015EA9                            	sVoice		vS3K_01
00015EA9 E808                     M 	dc.b	$e8,vs3k_01
00015EAB D20C                       	dc.b nA6, $0C
00015EAD                            	sVoice		vS3K_08
00015EAD E809                     M 	dc.b	$e8,vs3k_08
00015EAF 0C                         	dc.b $0C
00015EB0                            	sVoice		vS3K_01
00015EB0 E808                     M 	dc.b	$e8,vs3k_01
00015EB2 0C                         	dc.b $0C
00015EB3                            	sVoice		vS3K_08
00015EB3 E809                     M 	dc.b	$e8,vs3k_08
00015EB5 0C                         	dc.b $0C
00015EB6                            	sVoice		vS3K_01
00015EB6 E808                     M 	dc.b	$e8,vs3k_01
00015EB8 0C                         	dc.b $0C
00015EB9                            	sVoice		vS3K_08
00015EB9 E809                     M 	dc.b	$e8,vs3k_08
00015EBB 0C                         	dc.b $0C
00015EBC                            	sVoice		vS3K_01
00015EBC E808                     M 	dc.b	$e8,vs3k_01
00015EBE 0C                         	dc.b $0C
00015EBF                            	sVoice		vS3K_08
00015EBF E809                     M 	dc.b	$e8,vs3k_08
00015EC1 0C                         	dc.b $0C
00015EC2                            	sRet
00015EC2 F9                       M 	dc.b	$f9
00015EC3                            ; ===========================================================================
00015EC3                            ; ---------------------------------------------------------------------------
00015EC3                            ; DAC1 data
00015EC3                            ; ---------------------------------------------------------------------------
00015EC3                            
00015EC3                            Zaxx_DAC1:
00015EC3                            	;sJump		.out1
00015EC3                            	sPan		spLeft, $00
00015EC3 E080                     M 	dc.b	$e0,spleft|$00
00015EC5 8F18                       	dc.b dZaxxEYO, $18
00015EC7                            	sPan		spRight, $00
00015EC7 E040                     M 	dc.b	$e0,spright|$00
00015EC9 8E                         	dc.b dZaxxIT
00015ECA                            	sLoop		$00, $06, Zaxx_DAC1
00015ECA F700                     M 	dc.b	$f7,$00
00015ECC FFF6                     M 	dc.w	zaxx_dac1-*-1
00015ECE 06                       M 	dc.b	$06
00015ECF 8D60                       	dc.b dZaxxDIS, $60
00015ED1                            ; ---------------------------------------------------------------------------
00015ED1                            ; Main loop point
00015ED1                            
00015ED1                            .loopj
00015ED1                            ; ---------------------------------------------------------------------------
00015ED1                            ; versus section
00015ED1                            
00015ED1                            .ver1	sPan		spCenter, $00
00015ED1 E0C0                     M 	dc.b	$e0,spcenter|$00
00015ED3 8C18                       	dc.b dZaxxGO, $18
00015ED5                            	sLoop		$00, $06, .ver1
00015ED5 F700                     M 	dc.b	$f7,$00
00015ED7 FFF9                     M 	dc.w	.ver1-*-1
00015ED9 06                       M 	dc.b	$06
00015EDA                            	sPan		spRight, $00
00015EDA E040                     M 	dc.b	$e0,spright|$00
00015EDC 8A                         	dc.b dZaxxOOH
00015EDD                            	sPan		spLeft, $00
00015EDD E080                     M 	dc.b	$e0,spleft|$00
00015EDF 8A                         	dc.b dZaxxOOH
00015EE0                            	sLoop		$01, $03, .ver1
00015EE0 F701                     M 	dc.b	$f7,$01
00015EE2 FFEE                     M 	dc.w	.ver1-*-1
00015EE4 03                       M 	dc.b	$03
00015EE5                            ; ---------------------------------------------------------------------------
00015EE5                            ; double section
00015EE5                            
00015EE5                            .dbl1	sPan		spCenter, $00
00015EE5 E0C0                     M 	dc.b	$e0,spcenter|$00
00015EE7 8048                       	dc.b nRst, $48
00015EE9 8A17 8001 8048             	dc.b dZaxxOOH, $17, nRst, $01, nRst, $48
00015EEF                            	sPan		spRight, $00
00015EEF E040                     M 	dc.b	$e0,spright|$00
00015EF1 8A0C                       	dc.b dZaxxOOH, $0C
00015EF3                            	sPan		spLeft, $00
00015EF3 E080                     M 	dc.b	$e0,spleft|$00
00015EF5 8A0B 8001                  	dc.b dZaxxOOH, $0B, nRst, $01
00015EF9                            	sLoop		$00, $04, .dbl1
00015EF9 F700                     M 	dc.b	$f7,$00
00015EFB FFE9                     M 	dc.w	.dbl1-*-1
00015EFD 04                       M 	dc.b	$04
00015EFE                            ; ---------------------------------------------------------------------------
00015EFE                            ; light section
00015EFE                            
00015EFE                            .lite1	sPan		spLeft, $00
00015EFE E080                     M 	dc.b	$e0,spleft|$00
00015F00 8B0C                       	dc.b dZaxxLoOOH, $0C
00015F02                            	sPan		spRight, $00
00015F02 E040                     M 	dc.b	$e0,spright|$00
00015F04 8B                         	dc.b dZaxxLoOOH
00015F05                            	sPan		spLeft, $00
00015F05 E080                     M 	dc.b	$e0,spleft|$00
00015F07 8B                         	dc.b dZaxxLoOOH
00015F08                            	sPan		spRight, $00
00015F08 E040                     M 	dc.b	$e0,spright|$00
00015F0A 8B06                       	dc.b dZaxxLoOOH, $06
00015F0C                            	sPan		spLeft, $00
00015F0C E080                     M 	dc.b	$e0,spleft|$00
00015F0E 8B                         	dc.b dZaxxLoOOH
00015F0F                            	sLoop		$00, $20, .lite1
00015F0F F700                     M 	dc.b	$f7,$00
00015F11 FFEC                     M 	dc.w	.lite1-*-1
00015F13 20                       M 	dc.b	$20
00015F14                            ; ---------------------------------------------------------------------------
00015F14                            ; dark section
00015F14                            
00015F14                            .dark1	sPan		spLeft, $00
00015F14 E080                     M 	dc.b	$e0,spleft|$00
00015F16 8A12                       	dc.b dZaxxOOH, $12
00015F18                            	sPan		spRight, $00
00015F18 E040                     M 	dc.b	$e0,spright|$00
00015F1A 8A                         	dc.b dZaxxOOH
00015F1B                            	sPan		spLeft, $00
00015F1B E080                     M 	dc.b	$e0,spleft|$00
00015F1D 8A                         	dc.b dZaxxOOH
00015F1E                            	sPan		spRight, $00
00015F1E E040                     M 	dc.b	$e0,spright|$00
00015F20 8A                         	dc.b dZaxxOOH
00015F21                            	sPan		spLeft, $00
00015F21 E080                     M 	dc.b	$e0,spleft|$00
00015F23 8A0C 0C                    	dc.b dZaxxOOH, $0C, $0C
00015F26                            	sLoop		$00, $08, .dark1
00015F26 F700                     M 	dc.b	$f7,$00
00015F28 FFEB                     M 	dc.w	.dark1-*-1
00015F2A 08                       M 	dc.b	$08
00015F2B                            ; ---------------------------------------------------------------------------
00015F2B                            ; out section
00015F2B                            
00015F2B                            .out1	sPan		spCenter, $00
00015F2B E0C0                     M 	dc.b	$e0,spcenter|$00
00015F2D 8A17 8019                  	dc.b dZaxxOOH, $17, nRst, $19
00015F31                            	sPan		spRight, $00
00015F31 E040                     M 	dc.b	$e0,spright|$00
00015F33 8A0C                       	dc.b dZaxxOOH, $0C
00015F35                            	sPan		spLeft, $00
00015F35 E080                     M 	dc.b	$e0,spleft|$00
00015F37 8A0B 8019                  	dc.b dZaxxOOH, $0B, nRst, $19
00015F3B                            	sLoop		$00, $02, .out1
00015F3B F700                     M 	dc.b	$f7,$00
00015F3D FFED                     M 	dc.w	.out1-*-1
00015F3F 02                       M 	dc.b	$02
00015F40                            
00015F40                            	sPan		spCentre, $00
00015F40 E0C0                     M 	dc.b	$e0,spcentre|$00
00015F42                            	ssMod68k	$01, $01, $10, $FF
00015F42 F001 0110 FF             M 	dc.b	$f0,$01,$01,$10,$ff
00015F47 8F18                       	dc.b dZaxxEYO, $18
00015F49                            	sModOff
00015F49 EC                       M 	dc.b	$ec
00015F4A                            	sLoop		$01, $02, .out1
00015F4A F701                     M 	dc.b	$f7,$01
00015F4C FFDE                     M 	dc.w	.out1-*-1
00015F4E 02                       M 	dc.b	$02
00015F4F                            
00015F4F                            	sPan		spRight, $00
00015F4F E040                     M 	dc.b	$e0,spright|$00
00015F51 8D60                       	dc.b dZaxxDIS, $60
00015F53                            	sPan		spCenter, $00
00015F53 E0C0                     M 	dc.b	$e0,spcenter|$00
00015F55 8C60 6060                  	dc.b dZaxxGO, $60, $60, $60
00015F59 8C18 1818 80               	dc.b dZaxxGO, $18, $18, $18, nRst
00015F5E                            
00015F5E                            .out2	sPan		spLeft, $00
00015F5E E080                     M 	dc.b	$e0,spleft|$00
00015F60 8A12                       	dc.b dZaxxOOH, $12
00015F62                            	sPan		spRight, $00
00015F62 E040                     M 	dc.b	$e0,spright|$00
00015F64 8A                         	dc.b dZaxxOOH
00015F65                            	sPan		spLeft, $00
00015F65 E080                     M 	dc.b	$e0,spleft|$00
00015F67 8A                         	dc.b dZaxxOOH
00015F68                            	sPan		spRight, $00
00015F68 E040                     M 	dc.b	$e0,spright|$00
00015F6A 8A                         	dc.b dZaxxOOH
00015F6B                            	sPan		spLeft, $00
00015F6B E080                     M 	dc.b	$e0,spleft|$00
00015F6D 8A0C 0C                    	dc.b dZaxxOOH, $0C, $0C
00015F70                            	sLoop		$00, $04, .out2
00015F70 F700                     M 	dc.b	$f7,$00
00015F72 FFEB                     M 	dc.w	.out2-*-1
00015F74 04                       M 	dc.b	$04
00015F75                            	;sStop
00015F75                            	sJump		.loopj
00015F75 F6                       M 	dc.b	$f6
00015F76 FF5A                     M 	dc.w	.loopj-*-1
00015F78                            
00015F78                            ; ===========================================================================
00015F78                            ; ---------------------------------------------------------------------------
00015F78                            ; DAC2 data
00015F78                            ; ---------------------------------------------------------------------------
00015F78                            
00015F78                            Zaxx_DAC2:
00015F78                            	sPan		spNone		; Allow DAC1 to control panning
00015F78 E000                     M 	dc.b	$e0,spnone
00015F7A                            
00015F7A                            	;sJump		.out1
00015F7A 820C                       .drumsi	dc.b dLowKick, $0C
00015F7C                            	saVol		$05
00015F7C ED05                     M 	dc.b	$ed,$05
00015F7E 840C                       	dc.b dClap, $0C
00015F80                            	saVol		-$05
00015F80 EDFB                     M 	dc.b	$ed,-$05
00015F82                            	sLoop		$00, $0C, .drumsi
00015F82 F700                     M 	dc.b	$f7,$00
00015F84 FFF5                     M 	dc.w	.drumsi-*-1
00015F86 0C                       M 	dc.b	$0c
00015F87 8424 2418                  	dc.b dClap, $24, $24, $18
00015F8B                            
00015F8B                            ; ---------------------------------------------------------------------------
00015F8B                            ; Main loop point, and loop from 2pvs
00015F8B                            
00015F8B                            .loopj
00015F8B                            ; ---------------------------------------------------------------------------
00015F8B                            ; versus section
00015F8B                            	ssVol		$0C
00015F8B EE0C                     M 	dc.b	$ee,$0c
00015F8D                            
00015F8D 8060 30                    .ver1	dc.b nRst, $60, $30
00015F90 8318 83                    	dc.b dSnare, $18, dSnare
00015F93                            	sLoop		$01, $03, .ver1
00015F93 F701                     M 	dc.b	$f7,$01
00015F95 FFF7                     M 	dc.w	.ver1-*-1
00015F97 03                       M 	dc.b	$03
00015F98                            ; ---------------------------------------------------------------------------
00015F98                            ; double section
00015F98                            
00015F98 8418 8030                  .dbl1	dc.b dClap, $18, nRst, $30
00015F9C 8418 8480 30               	dc.b dClap, $18, dClap, nRst, $30
00015FA1 8418                       	dc.b dClap, $18
00015FA3                            	sLoop		$00, $04, .dbl1
00015FA3 F700                     M 	dc.b	$f7,$00
00015FA5 FFF2                     M 	dc.w	.dbl1-*-1
00015FA7 04                       M 	dc.b	$04
00015FA8                            ; ---------------------------------------------------------------------------
00015FA8                            ; light section
00015FA8                            
00015FA8 8060                       .lite1	dc.b nRst, $60
00015FAA                            	sLoop		$00, $10, .lite1
00015FAA F700                     M 	dc.b	$f7,$00
00015FAC FFFB                     M 	dc.w	.lite1-*-1
00015FAE 10                       M 	dc.b	$10
00015FAF                            ; ---------------------------------------------------------------------------
00015FAF                            ; dark section
00015FAF                            
00015FAF 8060                       .dark1	dc.b nRst, $60
00015FB1                            	sLoop		$00, $08, .dark1
00015FB1 F700                     M 	dc.b	$f7,$00
00015FB3 FFFB                     M 	dc.w	.dark1-*-1
00015FB5 08                       M 	dc.b	$08
00015FB6                            ; ---------------------------------------------------------------------------
00015FB6                            ; out section
00015FB6                            
00015FB6 8418 8018                  .out1	dc.b dClap, $18, nRst, $18
00015FBA                            	saVol		$01
00015FBA ED01                     M 	dc.b	$ed,$01
00015FBC                            	sLoop		$00, $04, .out1
00015FBC F700                     M 	dc.b	$f7,$00
00015FBE FFF7                     M 	dc.w	.out1-*-1
00015FC0 04                       M 	dc.b	$04
00015FC1                            
00015FC1                            	ssFreqNote	$3F	; -$285
00015FC1 FF03 BF                  M 	dc.b	$ff,$03,$3f^$80
00015FC4 8618                       	dc.b dTom, $18
00015FC6                            	ssFreq	$1200	; $0100
00015FC6 FF02                     M 	dc.b	$ff,$02
00015FC8 1200                     M 	dc.w	$1200
00015FCA                            	sLoop		$01, $02, .out1
00015FCA F701                     M 	dc.b	$f7,$01
00015FCC FFE9                     M 	dc.w	.out1-*-1
00015FCE 02                       M 	dc.b	$02
00015FCF                            	saVol		-$08
00015FCF EDF8                     M 	dc.b	$ed,-$08
00015FD1 8060 6060 60               	dc.b nRst, $60, $60, $60, $60
00015FD6                            
00015FD6 8418 8384 80               .out2	dc.b dClap, $18, dSnare, dClap, nRst
00015FDB                            	sLoop		$00, $05, .out2
00015FDB F700                     M 	dc.b	$f7,$00
00015FDD FFF8                     M 	dc.w	.out2-*-1
00015FDF 05                       M 	dc.b	$05
00015FE0                            
00015FE0                            	;sStop
00015FE0                            	sJump		.loopj
00015FE0 F6                       M 	dc.b	$f6
00015FE1 FFA9                     M 	dc.w	.loopj-*-1
00015FE3 =0000000E                M a	=	a+1
00015FE4 00                       M 	even
00015FE4                          M b	equs	dmuse
00015FE4                          M _mus_columndive
00015FE4                          M dmusae	include	"driver/music/columndive.asm"
00015FE4                            ColumnDive_Header:
00015FE4                            	sHeaderInit						; Z80 offset is $ADA7
00015FE4 =00015FE4                M spointzero	=	*
00015FE4 =00000000                M spatnum	=	0
00015FE4                            	sHeaderTempo	$01, $45
00015FE4 0045                     M 	dc.b	$01-1,$45
00015FE6                            	sHeaderCh	$05, $03
00015FE6 04                       M 	dc.b	$05-1
00015FE7 02                       M 	dc.b	$03-1
00015FE8                            	sHeaderDAC	ColumnDive_DAC1, $08
00015FE8 0000                     M 	dc.w	columndive_dac1-spointzero
00015FEA 08                       M 	dc.b	$08
00015FEB 00                       M 	dc.b	$00
00015FEC                            	sHeaderDAC	ColumnDive_DAC2, $08
00015FEC 0000                     M 	dc.w	columndive_dac2-spointzero
00015FEE 08                       M 	dc.b	$08
00015FEF 00                       M 	dc.b	$00
00015FF0                            	sHeaderFM	ColumnDive_FM1, $0C, $08
00015FF0 0000                     M 	dc.w	columndive_fm1-spointzero
00015FF2 0C08                     M 	dc.b	$0c,$08
00015FF4                            	sHeaderFM	ColumnDive_FM2, $F4, $13
00015FF4 0000                     M 	dc.w	columndive_fm2-spointzero
00015FF6 F413                     M 	dc.b	$f4,$13
00015FF8                            	sHeaderFM	ColumnDive_FM3, $F4, $14
00015FF8 0000                     M 	dc.w	columndive_fm3-spointzero
00015FFA F414                     M 	dc.b	$f4,$14
00015FFC                            	sHeaderFM	ColumnDive_FM4, $F4, $1A
00015FFC 0000                     M 	dc.w	columndive_fm4-spointzero
00015FFE F41A                     M 	dc.b	$f4,$1a
00016000                            	sHeaderFM	ColumnDive_FM5, $F4, $14
00016000 0000                     M 	dc.w	columndive_fm5-spointzero
00016002 F414                     M 	dc.b	$f4,$14
00016004                            	sHeaderPSG	ColumnDive_PSG1, $E8-$0C, $04, $00, v00
00016004 0000                     M 	dc.w	columndive_psg1-spointzero
00016006 DC04 0000                M 	dc.b	$e8-$0c,$04,$00,v00
0001600A                            	sHeaderPSG	ColumnDive_PSG2, $E8-$0C, $04, $00, v00
0001600A 0000                     M 	dc.w	columndive_psg2-spointzero
0001600C DC04 0000                M 	dc.b	$e8-$0c,$04,$00,v00
00016010                            	sHeaderPSG	ColumnDive_PSG3, $00-$0D, $02, $00, v00
00016010 0000                     M 	dc.w	columndive_psg3-spointzero
00016012 F302 0000                M 	dc.b	$00-$0d,$02,$00,v00
00016016                            
00016016                            	; Patch $00
00016016                            	; $20
00016016                            	; $36, $35, $30, $31,	$DF, $DF, $9F, $9F
00016016                            	; $07, $06, $09, $07,	$07, $06, $06, $02
00016016                            	; $20, $10, $10, $F8,	$19, $37, $13, $80
00016016                            	spAlgorithm	$00
00016016 =00000001                M spatnum	=	spatnum+1
00016016 =00000000                M spal	=	val
00016016                            	spFeedback	$04
00016016 =00000004                M spfe	=	val
00016016                            	spDetune	$03, $03, $03, $03
00016016 =00000003                M spde1	=	op1
00016016 =00000003                M spde2	=	op2
00016016 =00000003                M spde3	=	op3
00016016 =00000003                M spde4	=	op4
00016016                            	spMultiple	$06, $00, $05, $01
00016016 =00000006                M spmu1	=	op1
00016016 =00000000                M spmu2	=	op2
00016016 =00000005                M spmu3	=	op3
00016016 =00000001                M spmu4	=	op4
00016016                            	spRateScale	$03, $02, $03, $02
00016016 =00000003                M sprs1	=	op1
00016016 =00000002                M sprs2	=	op2
00016016 =00000003                M sprs3	=	op3
00016016 =00000002                M sprs4	=	op4
00016016                            	spAttackRt	$1F, $1F, $1F, $1F
00016016 =0000001F                M spar1	=	op1
00016016 =0000001F                M spar2	=	op2
00016016 =0000001F                M spar3	=	op3
00016016 =0000001F                M spar4	=	op4
00016016                            	spAmpMod	$00, $00, $00, $00
00016016 =00000000                M spam1	=	op1
00016016 =00000000                M spam2	=	op2
00016016 =00000000                M spam3	=	op3
00016016 =00000000                M spam4	=	op4
00016016                            	spSustainRt	$07, $09, $06, $07
00016016 =00000007                M spsr1	=	op1
00016016 =00000009                M spsr2	=	op2
00016016 =00000006                M spsr3	=	op3
00016016 =00000007                M spsr4	=	op4
00016016                            	spSustainLv	$02, $01, $01, $0F
00016016 =00000002                M spsl1	=	op1
00016016 =00000001                M spsl2	=	op2
00016016 =00000001                M spsl3	=	op3
00016016 =0000000F                M spsl4	=	op4
00016016                            	spDecayRt	$07, $06, $06, $02
00016016 =00000007                M spdr1	=	op1
00016016 =00000006                M spdr2	=	op2
00016016 =00000006                M spdr3	=	op3
00016016 =00000002                M spdr4	=	op4
00016016                            	spReleaseRt	$00, $00, $00, $08
00016016 =00000000                M sprr1	=	op1
00016016 =00000000                M sprr2	=	op2
00016016 =00000000                M sprr3	=	op3
00016016 =00000008                M sprr4	=	op4
00016016                            	spSSGEG		$00, $00, $00, $00
00016016 =00000000                M spss1	=	op1
00016016 =00000000                M spss2	=	op2
00016016 =00000000                M spss3	=	op3
00016016 =00000000                M spss4	=	op4
00016016                            	spTotalLv	$19, $13, $37, $00
00016016 =00000019                M sptl1	=	op1
00016016 =00000013                M sptl2	=	op2
00016016 =00000037                M sptl3	=	op3
00016016 =00000000                M sptl4	=	op4
00016016 20                       M 	dc.b	(spfe<<3)+spal
00016017 =00000080                M sptlmask4	set	$80
00016017 =00000000                M sptlmask2	set	((spal>=5)<<7)
00016017 =00000000                M sptlmask3	set	((spal>=4)<<7)
00016017 =00000000                M sptlmask1	set	((spal=7)<<7)
00016017 3635 3031                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001601B DFDF 9F9F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001601F 0706 0907                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00016023 0706 0602                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00016027 2010 10F8                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001602B 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001602F 1937 1380                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00016033 4E41 54                  M 	dc.b	'NAT'
00016036                            
00016036                            	; Patch $01
00016036                            	; $2D
00016036                            	; $02, $02, $02, $02,	$10, $10, $10, $10
00016036                            	; $07, $08, $08, $08,	$01, $07, $07, $07
00016036                            	; $28, $18, $18, $18,	$13, $87, $87, $8B
00016036                            	spAlgorithm	$05
00016036 =00000002                M spatnum	=	spatnum+1
00016036 =00000005                M spal	=	val
00016036                            	spFeedback	$05
00016036 =00000005                M spfe	=	val
00016036                            	spDetune	$00, $00, $00, $00
00016036 =00000000                M spde1	=	op1
00016036 =00000000                M spde2	=	op2
00016036 =00000000                M spde3	=	op3
00016036 =00000000                M spde4	=	op4
00016036                            	spMultiple	$02, $02, $02, $02
00016036 =00000002                M spmu1	=	op1
00016036 =00000002                M spmu2	=	op2
00016036 =00000002                M spmu3	=	op3
00016036 =00000002                M spmu4	=	op4
00016036                            	spRateScale	$00, $00, $00, $00
00016036 =00000000                M sprs1	=	op1
00016036 =00000000                M sprs2	=	op2
00016036 =00000000                M sprs3	=	op3
00016036 =00000000                M sprs4	=	op4
00016036                            	spAttackRt	$10, $10, $10, $10
00016036 =00000010                M spar1	=	op1
00016036 =00000010                M spar2	=	op2
00016036 =00000010                M spar3	=	op3
00016036 =00000010                M spar4	=	op4
00016036                            	spAmpMod	$00, $00, $00, $00
00016036 =00000000                M spam1	=	op1
00016036 =00000000                M spam2	=	op2
00016036 =00000000                M spam3	=	op3
00016036 =00000000                M spam4	=	op4
00016036                            	spSustainRt	$07, $08, $08, $08
00016036 =00000007                M spsr1	=	op1
00016036 =00000008                M spsr2	=	op2
00016036 =00000008                M spsr3	=	op3
00016036 =00000008                M spsr4	=	op4
00016036                            	spSustainLv	$02, $01, $01, $01
00016036 =00000002                M spsl1	=	op1
00016036 =00000001                M spsl2	=	op2
00016036 =00000001                M spsl3	=	op3
00016036 =00000001                M spsl4	=	op4
00016036                            	spDecayRt	$01, $07, $07, $07
00016036 =00000001                M spdr1	=	op1
00016036 =00000007                M spdr2	=	op2
00016036 =00000007                M spdr3	=	op3
00016036 =00000007                M spdr4	=	op4
00016036                            	spReleaseRt	$08, $08, $08, $08
00016036 =00000008                M sprr1	=	op1
00016036 =00000008                M sprr2	=	op2
00016036 =00000008                M sprr3	=	op3
00016036 =00000008                M sprr4	=	op4
00016036                            	spSSGEG		$00, $00, $00, $00
00016036 =00000000                M spss1	=	op1
00016036 =00000000                M spss2	=	op2
00016036 =00000000                M spss3	=	op3
00016036 =00000000                M spss4	=	op4
00016036                            	spTotalLv	$13, $07, $07, $0B
00016036 =00000013                M sptl1	=	op1
00016036 =00000007                M sptl2	=	op2
00016036 =00000007                M sptl3	=	op3
00016036 =0000000B                M sptl4	=	op4
00016036 2D                       M 	dc.b	(spfe<<3)+spal
00016037 =00000080                M sptlmask4	set	$80
00016037 =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
00016037 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00016037 =00000000                M sptlmask1	set	((spal=7)<<7)
00016037 0202 0202                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001603B 1010 1010                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001603F 0708 0808                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00016043 0107 0707                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00016047 2818 1818                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001604B 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001604F 1387 878B                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00016053 4E41 54                  M 	dc.b	'NAT'
00016056                            
00016056                            	; Patch $02
00016056                            	; $2D
00016056                            	; $02, $02, $02, $02,	$10, $10, $10, $10
00016056                            	; $07, $08, $08, $08,	$01, $05, $05, $05
00016056                            	; $28, $1B, $1B, $1B,	$20, $80, $80, $83
00016056                            	spAlgorithm	$05
00016056 =00000003                M spatnum	=	spatnum+1
00016056 =00000005                M spal	=	val
00016056                            	spFeedback	$05
00016056 =00000005                M spfe	=	val
00016056                            	spDetune	$00, $00, $00, $00
00016056 =00000000                M spde1	=	op1
00016056 =00000000                M spde2	=	op2
00016056 =00000000                M spde3	=	op3
00016056 =00000000                M spde4	=	op4
00016056                            	spMultiple	$02, $02, $02, $02
00016056 =00000002                M spmu1	=	op1
00016056 =00000002                M spmu2	=	op2
00016056 =00000002                M spmu3	=	op3
00016056 =00000002                M spmu4	=	op4
00016056                            	spRateScale	$00, $00, $00, $00
00016056 =00000000                M sprs1	=	op1
00016056 =00000000                M sprs2	=	op2
00016056 =00000000                M sprs3	=	op3
00016056 =00000000                M sprs4	=	op4
00016056                            	spAttackRt	$10, $10, $10, $10
00016056 =00000010                M spar1	=	op1
00016056 =00000010                M spar2	=	op2
00016056 =00000010                M spar3	=	op3
00016056 =00000010                M spar4	=	op4
00016056                            	spAmpMod	$00, $00, $00, $00
00016056 =00000000                M spam1	=	op1
00016056 =00000000                M spam2	=	op2
00016056 =00000000                M spam3	=	op3
00016056 =00000000                M spam4	=	op4
00016056                            	spSustainRt	$07, $08, $08, $08
00016056 =00000007                M spsr1	=	op1
00016056 =00000008                M spsr2	=	op2
00016056 =00000008                M spsr3	=	op3
00016056 =00000008                M spsr4	=	op4
00016056                            	spSustainLv	$02, $01, $01, $01
00016056 =00000002                M spsl1	=	op1
00016056 =00000001                M spsl2	=	op2
00016056 =00000001                M spsl3	=	op3
00016056 =00000001                M spsl4	=	op4
00016056                            	spDecayRt	$01, $05, $05, $05
00016056 =00000001                M spdr1	=	op1
00016056 =00000005                M spdr2	=	op2
00016056 =00000005                M spdr3	=	op3
00016056 =00000005                M spdr4	=	op4
00016056                            	spReleaseRt	$08, $0B, $0B, $0B
00016056 =00000008                M sprr1	=	op1
00016056 =0000000B                M sprr2	=	op2
00016056 =0000000B                M sprr3	=	op3
00016056 =0000000B                M sprr4	=	op4
00016056                            	spSSGEG		$00, $00, $00, $00
00016056 =00000000                M spss1	=	op1
00016056 =00000000                M spss2	=	op2
00016056 =00000000                M spss3	=	op3
00016056 =00000000                M spss4	=	op4
00016056                            	spTotalLv	$20, $00, $00, $03
00016056 =00000020                M sptl1	=	op1
00016056 =00000000                M sptl2	=	op2
00016056 =00000000                M sptl3	=	op3
00016056 =00000003                M sptl4	=	op4
00016056 2D                       M 	dc.b	(spfe<<3)+spal
00016057 =00000080                M sptlmask4	set	$80
00016057 =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
00016057 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00016057 =00000000                M sptlmask1	set	((spal=7)<<7)
00016057 0202 0202                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001605B 1010 1010                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001605F 0708 0808                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00016063 0105 0505                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00016067 281B 1B1B                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001606B 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001606F 2080 8083                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00016073 4E41 54                  M 	dc.b	'NAT'
00016076                            
00016076                            	; Patch $03
00016076                            	; $2D
00016076                            	; $01, $02, $02, $02,	$1F, $1F, $1F, $1F
00016076                            	; $01, $0C, $0B, $0F,	$01, $0A, $0B, $0B
00016076                            	; $28, $18, $18, $18,	$12, $87, $87, $8F
00016076                            	spAlgorithm	$05
00016076 =00000004                M spatnum	=	spatnum+1
00016076 =00000005                M spal	=	val
00016076                            	spFeedback	$05
00016076 =00000005                M spfe	=	val
00016076                            	spDetune	$00, $00, $00, $00
00016076 =00000000                M spde1	=	op1
00016076 =00000000                M spde2	=	op2
00016076 =00000000                M spde3	=	op3
00016076 =00000000                M spde4	=	op4
00016076                            	spMultiple	$01, $02, $02, $02
00016076 =00000001                M spmu1	=	op1
00016076 =00000002                M spmu2	=	op2
00016076 =00000002                M spmu3	=	op3
00016076 =00000002                M spmu4	=	op4
00016076                            	spRateScale	$00, $00, $00, $00
00016076 =00000000                M sprs1	=	op1
00016076 =00000000                M sprs2	=	op2
00016076 =00000000                M sprs3	=	op3
00016076 =00000000                M sprs4	=	op4
00016076                            	spAttackRt	$1F, $1F, $1F, $1F
00016076 =0000001F                M spar1	=	op1
00016076 =0000001F                M spar2	=	op2
00016076 =0000001F                M spar3	=	op3
00016076 =0000001F                M spar4	=	op4
00016076                            	spAmpMod	$00, $00, $00, $00
00016076 =00000000                M spam1	=	op1
00016076 =00000000                M spam2	=	op2
00016076 =00000000                M spam3	=	op3
00016076 =00000000                M spam4	=	op4
00016076                            	spSustainRt	$01, $0B, $0C, $0F
00016076 =00000001                M spsr1	=	op1
00016076 =0000000B                M spsr2	=	op2
00016076 =0000000C                M spsr3	=	op3
00016076 =0000000F                M spsr4	=	op4
00016076                            	spSustainLv	$02, $01, $01, $01
00016076 =00000002                M spsl1	=	op1
00016076 =00000001                M spsl2	=	op2
00016076 =00000001                M spsl3	=	op3
00016076 =00000001                M spsl4	=	op4
00016076                            	spDecayRt	$01, $0B, $0A, $0B
00016076 =00000001                M spdr1	=	op1
00016076 =0000000B                M spdr2	=	op2
00016076 =0000000A                M spdr3	=	op3
00016076 =0000000B                M spdr4	=	op4
00016076                            	spReleaseRt	$08, $08, $08, $08
00016076 =00000008                M sprr1	=	op1
00016076 =00000008                M sprr2	=	op2
00016076 =00000008                M sprr3	=	op3
00016076 =00000008                M sprr4	=	op4
00016076                            	spSSGEG		$00, $00, $00, $00
00016076 =00000000                M spss1	=	op1
00016076 =00000000                M spss2	=	op2
00016076 =00000000                M spss3	=	op3
00016076 =00000000                M spss4	=	op4
00016076                            	spTotalLv	$12, $07, $07, $0F
00016076 =00000012                M sptl1	=	op1
00016076 =00000007                M sptl2	=	op2
00016076 =00000007                M sptl3	=	op3
00016076 =0000000F                M sptl4	=	op4
00016076 2D                       M 	dc.b	(spfe<<3)+spal
00016077 =00000080                M sptlmask4	set	$80
00016077 =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
00016077 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00016077 =00000000                M sptlmask1	set	((spal=7)<<7)
00016077 0102 0202                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001607B 1F1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001607F 010C 0B0F                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00016083 010A 0B0B                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00016087 2818 1818                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001608B 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001608F 1287 878F                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00016093 4E41 54                  M 	dc.b	'NAT'
00016096                            
00016096                            	; Patch $04
00016096                            	; $34
00016096                            	; $05, $04, $04, $04,	$1F, $1F, $1F, $1F
00016096                            	; $10, $06, $06, $06,	$01, $0A, $06, $0B
00016096                            	; $35, $1A, $15, $1A,	$10, $82, $18, $82
00016096                            	spAlgorithm	$04
00016096 =00000005                M spatnum	=	spatnum+1
00016096 =00000004                M spal	=	val
00016096                            	spFeedback	$06
00016096 =00000006                M spfe	=	val
00016096                            	spDetune	$00, $00, $00, $00
00016096 =00000000                M spde1	=	op1
00016096 =00000000                M spde2	=	op2
00016096 =00000000                M spde3	=	op3
00016096 =00000000                M spde4	=	op4
00016096                            	spMultiple	$05, $04, $04, $04
00016096 =00000005                M spmu1	=	op1
00016096 =00000004                M spmu2	=	op2
00016096 =00000004                M spmu3	=	op3
00016096 =00000004                M spmu4	=	op4
00016096                            	spRateScale	$00, $00, $00, $00
00016096 =00000000                M sprs1	=	op1
00016096 =00000000                M sprs2	=	op2
00016096 =00000000                M sprs3	=	op3
00016096 =00000000                M sprs4	=	op4
00016096                            	spAttackRt	$1F, $1F, $1F, $1F
00016096 =0000001F                M spar1	=	op1
00016096 =0000001F                M spar2	=	op2
00016096 =0000001F                M spar3	=	op3
00016096 =0000001F                M spar4	=	op4
00016096                            	spAmpMod	$00, $00, $00, $00
00016096 =00000000                M spam1	=	op1
00016096 =00000000                M spam2	=	op2
00016096 =00000000                M spam3	=	op3
00016096 =00000000                M spam4	=	op4
00016096                            	spSustainRt	$10, $06, $06, $06
00016096 =00000010                M spsr1	=	op1
00016096 =00000006                M spsr2	=	op2
00016096 =00000006                M spsr3	=	op3
00016096 =00000006                M spsr4	=	op4
00016096                            	spSustainLv	$03, $01, $01, $01
00016096 =00000003                M spsl1	=	op1
00016096 =00000001                M spsl2	=	op2
00016096 =00000001                M spsl3	=	op3
00016096 =00000001                M spsl4	=	op4
00016096                            	spDecayRt	$01, $06, $0A, $0B
00016096 =00000001                M spdr1	=	op1
00016096 =00000006                M spdr2	=	op2
00016096 =0000000A                M spdr3	=	op3
00016096 =0000000B                M spdr4	=	op4
00016096                            	spReleaseRt	$05, $05, $0A, $0A
00016096 =00000005                M sprr1	=	op1
00016096 =00000005                M sprr2	=	op2
00016096 =0000000A                M sprr3	=	op3
00016096 =0000000A                M sprr4	=	op4
00016096                            	spSSGEG		$00, $00, $00, $00
00016096 =00000000                M spss1	=	op1
00016096 =00000000                M spss2	=	op2
00016096 =00000000                M spss3	=	op3
00016096 =00000000                M spss4	=	op4
00016096                            	spTotalLv	$10, $18, $02, $02
00016096 =00000010                M sptl1	=	op1
00016096 =00000018                M sptl2	=	op2
00016096 =00000002                M sptl3	=	op3
00016096 =00000002                M sptl4	=	op4
00016096 34                       M 	dc.b	(spfe<<3)+spal
00016097 =00000080                M sptlmask4	set	$80
00016097 =00000000                M sptlmask2	set	((spal>=5)<<7)
00016097 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00016097 =00000000                M sptlmask1	set	((spal=7)<<7)
00016097 0504 0404                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001609B 1F1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001609F 1006 0606                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
000160A3 010A 060B                M 	dc.b	spdr1,spdr3,spdr2,spdr4
000160A7 351A 151A                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
000160AB 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
000160AF 1082 1882                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
000160B3 4E41 54                  M 	dc.b	'NAT'
000160B6                            
000160B6                            	; Patch $05
000160B6                            	; $2D
000160B6                            	; $02, $02, $02, $02,	$1F, $1F, $1F, $1F
000160B6                            	; $07, $08, $08, $08,	$01, $07, $07, $07
000160B6                            	; $28, $1A, $1A, $1A,	$10, $86, $86, $86
000160B6                            	spAlgorithm	$05
000160B6 =00000006                M spatnum	=	spatnum+1
000160B6 =00000005                M spal	=	val
000160B6                            	spFeedback	$05
000160B6 =00000005                M spfe	=	val
000160B6                            	spDetune	$00, $00, $00, $00
000160B6 =00000000                M spde1	=	op1
000160B6 =00000000                M spde2	=	op2
000160B6 =00000000                M spde3	=	op3
000160B6 =00000000                M spde4	=	op4
000160B6                            	spMultiple	$02, $02, $02, $02
000160B6 =00000002                M spmu1	=	op1
000160B6 =00000002                M spmu2	=	op2
000160B6 =00000002                M spmu3	=	op3
000160B6 =00000002                M spmu4	=	op4
000160B6                            	spRateScale	$00, $00, $00, $00
000160B6 =00000000                M sprs1	=	op1
000160B6 =00000000                M sprs2	=	op2
000160B6 =00000000                M sprs3	=	op3
000160B6 =00000000                M sprs4	=	op4
000160B6                            	spAttackRt	$1F, $1F, $1F, $1F
000160B6 =0000001F                M spar1	=	op1
000160B6 =0000001F                M spar2	=	op2
000160B6 =0000001F                M spar3	=	op3
000160B6 =0000001F                M spar4	=	op4
000160B6                            	spAmpMod	$00, $00, $00, $00
000160B6 =00000000                M spam1	=	op1
000160B6 =00000000                M spam2	=	op2
000160B6 =00000000                M spam3	=	op3
000160B6 =00000000                M spam4	=	op4
000160B6                            	spSustainRt	$07, $08, $08, $08
000160B6 =00000007                M spsr1	=	op1
000160B6 =00000008                M spsr2	=	op2
000160B6 =00000008                M spsr3	=	op3
000160B6 =00000008                M spsr4	=	op4
000160B6                            	spSustainLv	$02, $01, $01, $01
000160B6 =00000002                M spsl1	=	op1
000160B6 =00000001                M spsl2	=	op2
000160B6 =00000001                M spsl3	=	op3
000160B6 =00000001                M spsl4	=	op4
000160B6                            	spDecayRt	$01, $07, $07, $07
000160B6 =00000001                M spdr1	=	op1
000160B6 =00000007                M spdr2	=	op2
000160B6 =00000007                M spdr3	=	op3
000160B6 =00000007                M spdr4	=	op4
000160B6                            	spReleaseRt	$08, $0A, $0A, $0A
000160B6 =00000008                M sprr1	=	op1
000160B6 =0000000A                M sprr2	=	op2
000160B6 =0000000A                M sprr3	=	op3
000160B6 =0000000A                M sprr4	=	op4
000160B6                            	spSSGEG		$00, $00, $00, $00
000160B6 =00000000                M spss1	=	op1
000160B6 =00000000                M spss2	=	op2
000160B6 =00000000                M spss3	=	op3
000160B6 =00000000                M spss4	=	op4
000160B6                            	spTotalLv	$10, $06, $06, $06
000160B6 =00000010                M sptl1	=	op1
000160B6 =00000006                M sptl2	=	op2
000160B6 =00000006                M sptl3	=	op3
000160B6 =00000006                M sptl4	=	op4
000160B6 2D                       M 	dc.b	(spfe<<3)+spal
000160B7 =00000080                M sptlmask4	set	$80
000160B7 =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
000160B7 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
000160B7 =00000000                M sptlmask1	set	((spal=7)<<7)
000160B7 0202 0202                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
000160BB 1F1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
000160BF 0708 0808                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
000160C3 0107 0707                M 	dc.b	spdr1,spdr3,spdr2,spdr4
000160C7 281A 1A1A                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
000160CB 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
000160CF 1086 8686                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
000160D3 4E41 54                  M 	dc.b	'NAT'
000160D6                            
000160D6                            	; Patch $06
000160D6                            	; $2D
000160D6                            	; $01, $02, $02, $02,	$1F, $1F, $1F, $1F
000160D6                            	; $01, $0C, $0B, $0F,	$01, $0A, $0B, $0B
000160D6                            	; $28, $1A, $1A, $1A,	$12, $87, $87, $8B
000160D6                            	spAlgorithm	$05
000160D6 =00000007                M spatnum	=	spatnum+1
000160D6 =00000005                M spal	=	val
000160D6                            	spFeedback	$05
000160D6 =00000005                M spfe	=	val
000160D6                            	spDetune	$00, $00, $00, $00
000160D6 =00000000                M spde1	=	op1
000160D6 =00000000                M spde2	=	op2
000160D6 =00000000                M spde3	=	op3
000160D6 =00000000                M spde4	=	op4
000160D6                            	spMultiple	$01, $02, $02, $02
000160D6 =00000001                M spmu1	=	op1
000160D6 =00000002                M spmu2	=	op2
000160D6 =00000002                M spmu3	=	op3
000160D6 =00000002                M spmu4	=	op4
000160D6                            	spRateScale	$00, $00, $00, $00
000160D6 =00000000                M sprs1	=	op1
000160D6 =00000000                M sprs2	=	op2
000160D6 =00000000                M sprs3	=	op3
000160D6 =00000000                M sprs4	=	op4
000160D6                            	spAttackRt	$1F, $1F, $1F, $1F
000160D6 =0000001F                M spar1	=	op1
000160D6 =0000001F                M spar2	=	op2
000160D6 =0000001F                M spar3	=	op3
000160D6 =0000001F                M spar4	=	op4
000160D6                            	spAmpMod	$00, $00, $00, $00
000160D6 =00000000                M spam1	=	op1
000160D6 =00000000                M spam2	=	op2
000160D6 =00000000                M spam3	=	op3
000160D6 =00000000                M spam4	=	op4
000160D6                            	spSustainRt	$01, $0B, $0C, $0F
000160D6 =00000001                M spsr1	=	op1
000160D6 =0000000B                M spsr2	=	op2
000160D6 =0000000C                M spsr3	=	op3
000160D6 =0000000F                M spsr4	=	op4
000160D6                            	spSustainLv	$02, $01, $01, $01
000160D6 =00000002                M spsl1	=	op1
000160D6 =00000001                M spsl2	=	op2
000160D6 =00000001                M spsl3	=	op3
000160D6 =00000001                M spsl4	=	op4
000160D6                            	spDecayRt	$01, $0B, $0A, $0B
000160D6 =00000001                M spdr1	=	op1
000160D6 =0000000B                M spdr2	=	op2
000160D6 =0000000A                M spdr3	=	op3
000160D6 =0000000B                M spdr4	=	op4
000160D6                            	spReleaseRt	$08, $0A, $0A, $0A
000160D6 =00000008                M sprr1	=	op1
000160D6 =0000000A                M sprr2	=	op2
000160D6 =0000000A                M sprr3	=	op3
000160D6 =0000000A                M sprr4	=	op4
000160D6                            	spSSGEG		$00, $00, $00, $00
000160D6 =00000000                M spss1	=	op1
000160D6 =00000000                M spss2	=	op2
000160D6 =00000000                M spss3	=	op3
000160D6 =00000000                M spss4	=	op4
000160D6                            	spTotalLv	$12, $07, $07, $0B
000160D6 =00000012                M sptl1	=	op1
000160D6 =00000007                M sptl2	=	op2
000160D6 =00000007                M sptl3	=	op3
000160D6 =0000000B                M sptl4	=	op4
000160D6 2D                       M 	dc.b	(spfe<<3)+spal
000160D7 =00000080                M sptlmask4	set	$80
000160D7 =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
000160D7 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
000160D7 =00000000                M sptlmask1	set	((spal=7)<<7)
000160D7 0102 0202                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
000160DB 1F1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
000160DF 010C 0B0F                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
000160E3 010A 0B0B                M 	dc.b	spdr1,spdr3,spdr2,spdr4
000160E7 281A 1A1A                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
000160EB 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
000160EF 1287 878B                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
000160F3 4E41 54                  M 	dc.b	'NAT'
000160F6                            
000160F6                            ColumnDive_FM1:
000160F6                            	sVoice		$00
000160F6 E800                     M 	dc.b	$e8,$00
000160F8                            
000160F8                            ColumnDive_Loop1:
000160F8 9010 9C90 089C 1097        	dc.b nEb1, $10, nEb2, nEb1, $08, nEb2, $10, nBb1
00016100 9218 9710 9208 97          	dc.b nF1, $18, nBb1, $10, nF1, $08, nBb1
00016107                            	sLoop		$01, $03, ColumnDive_Loop1
00016107 F701                     M 	dc.b	$f7,$01
00016109 FFEE                     M 	dc.w	columndive_loop1-*-1
0001610B 03                       M 	dc.b	$03
0001610C 9010 9C90 089C 1097        	dc.b nEb1, $10, nEb2, nEb1, $08, nEb2, $10, nBb1
00016114 A308 9210 9708 80A3        	dc.b nBb2, $08, nF1, $10, nBb1, $08, nRst, nBb2
0001611C 9E                         	dc.b nF2
0001611D                            	sLoop		$00, $02, ColumnDive_Loop1
0001611D F700                     M 	dc.b	$f7,$00
0001611F FFD8                     M 	dc.w	columndive_loop1-*-1
00016121 02                       M 	dc.b	$02
00016122                            
00016122                            ColumnDive_Loop2:
00016122 9F08 9A97 109F 089A        	dc.b nFs2, $08, nCs2, nBb1, $10, nFs2, $08, nCs2
0001612A 9792 109C 0892 1092        	dc.b nBb1, nF1, $10, nEb2, $08, nF1, $10, nF1
00016132 9C08 909D 9191 109D        	dc.b nEb2, $08, nEb1, nE2, nE1, nE1, $10, nE2
0001613A 0898 959C 1097 0890        	dc.b $08, nB1, nAb1, nEb2, $10, nBb1, $08, nEb1
00016142 109C 9208 9C               	dc.b $10, nEb2, nF1, $08, nEb2
00016147                            	sLoop		$00, $03, ColumnDive_Loop2
00016147 F700                     M 	dc.b	$f7,$00
00016149 FFD8                     M 	dc.w	columndive_loop2-*-1
0001614B 03                       M 	dc.b	$03
0001614C 9F08 9A97 109F 089A        	dc.b nFs2, $08, nCs2, nBb1, $10, nFs2, $08, nCs2
00016154 9792 109C 0892 1092        	dc.b nBb1, nF1, $10, nEb2, $08, nF1, $10, nF1
0001615C 9C08 909D 9191 109D        	dc.b nEb2, $08, nEb1, nE2, nE1, nE1, $10, nE2
00016164 0898 959C 1090 089C        	dc.b $08, nB1, nAb1, nEb2, $10, nEb1, $08, nEb2
0001616C 1090 0880 9C90 109C        	dc.b $10, nEb1, $08, nRst, nEb2, nEb1, $10, nEb2
00016174 0890 109C 0880 9C9C        	dc.b $08, nEb1, $10, nEb2, $08, nRst, nEb2, nEb2
0001617C 1090 089C 1090 0880        	dc.b $10, nEb1, $08, nEb2, $10, nEb1, $08, nRst
00016184 9C90 8020 80               	dc.b nEb2, nEb1, nRst, $20, nRst
00016189                            	sJump		ColumnDive_Loop1
00016189 F6                       M 	dc.b	$f6
0001618A FF6D                     M 	dc.w	columndive_loop1-*-1
0001618C                            
0001618C                            ColumnDive_FM3:
0001618C                            	ssMod68k	$10, $01, $05, $05
0001618C F010 0105 05             M 	dc.b	$f0,$10,$01,$05,$05
00016191                            	sVoice		$03
00016191 E803                     M 	dc.b	$e8,$03
00016193                            	sPan		spLeft, $00
00016193 E080                     M 	dc.b	$e0,spleft|$00
00016195                            	sCall		ColumnDrive_Call20
00016195 F8                       M 	dc.b	$f8
00016196 0000                     M 	dc.w	columndrive_call20-*-1
00016198                            	sVoice		$01
00016198 E801                     M 	dc.b	$e8,$01
0001619A                            	sCall		ColumnDrive_Call21
0001619A F8                       M 	dc.b	$f8
0001619B 0000                     M 	dc.w	columndrive_call21-*-1
0001619D                            	sCall		ColumnDrive_Call22
0001619D F8                       M 	dc.b	$f8
0001619E 0000                     M 	dc.w	columndrive_call22-*-1
000161A0                            	sJump		ColumnDive_FM3
000161A0 F6                       M 	dc.b	$f6
000161A1 FFEA                     M 	dc.w	columndive_fm3-*-1
000161A3                            
000161A3                            ColumnDive_PSG1:
000161A3                            	sVoice		vCol3_03
000161A3 E812                     M 	dc.b	$e8,vcol3_03
000161A5                            	sCall		ColumnDrive_Call20
000161A5 F8                       M 	dc.b	$f8
000161A6 0000                     M 	dc.w	columndrive_call20-*-1
000161A8                            	sVoice		v00
000161A8 E800                     M 	dc.b	$e8,v00
000161AA                            	sCall		ColumnDrive_Call21
000161AA F8                       M 	dc.b	$f8
000161AB 0000                     M 	dc.w	columndrive_call21-*-1
000161AD                            	sVoice		vCol3_03
000161AD E812                     M 	dc.b	$e8,vcol3_03
000161AF                            	sCall		ColumnDrive_Call22
000161AF F8                       M 	dc.b	$f8
000161B0 0000                     M 	dc.w	columndrive_call22-*-1
000161B2                            	sJump		ColumnDive_PSG1
000161B2 F6                       M 	dc.b	$f6
000161B3 FFEF                     M 	dc.w	columndive_psg1-*-1
000161B5                            
000161B5                            ColumnDrive_Call20:
000161B5                            	saVol		$03
000161B5 ED03                     M 	dc.b	$ed,$03
000161B7                            
000161B7                            ColumnDive_Loop3:
000161B7 A810 BBA8 08BB 80A5        	dc.b nEb3, $10, nBb4, nEb3, $08, nBb4, nRst, nC3
000161BF E7A5 BA18 A510 BA08        	dc.b sHold, nC3, nA4, $18, nC3, $10, nA4, $08
000161C7 A5A8 10BB A808 BB80        	dc.b nC3, nEb3, $10, nBb4, nEb3, $08, nBb4, nRst
000161CF BAE7 BA20 E720 A810        	dc.b nA4, sHold, nA4, $20, sHold, $20, nEb3, $10
000161D7 BBA8 08BB 80A5 E7A5        	dc.b nBb4, nEb3, $08, nBb4, nRst, nC3, sHold, nC3
000161DF BA18 A510 BA08 A5A8        	dc.b nA4, $18, nC3, $10, nA4, $08, nC3, nEb3
000161E7 10BB A808 BB80 BFE7        	dc.b $10, nBb4, nEb3, $08, nBb4, nRst, nD5, sHold
000161EF BF20 E720                  	dc.b nD5, $20, sHold, $20
000161F3                            	sLoop		$00, $02, ColumnDive_Loop3
000161F3 F700                     M 	dc.b	$f7,$00
000161F5 FFC1                     M 	dc.w	columndive_loop3-*-1
000161F7 02                       M 	dc.b	$02
000161F8                            	saVol		$FD
000161F8 EDFD                     M 	dc.b	$ed,$fd
000161FA                            	sRet
000161FA F9                       M 	dc.b	$f9
000161FB                            
000161FB                            ColumnDrive_Call21:
000161FB BE20 E718 BD08 E720        	dc.b nCs5, $20, sHold, $18, nC5, $08, sHold, $20
00016203 E720 BCE7 18BB 08E7        	dc.b sHold, $20, nB4, sHold, $18, nBb4, $08, sHold
0001620B 20E7 20BE E718 BD08        	dc.b $20, sHold, $20, nCs5, sHold, $18, nC5, $08
00016213 E720 E718 BC20 E720        	dc.b sHold, $20, sHold, $18, nB4, $20, sHold, $20
0001621B BB08 E718 C020 E708        	dc.b nBb4, $08, sHold, $18, nEb5, $20, sHold, $08
00016223 BE20 E718 BD08 E720        	dc.b nCs5, $20, sHold, $18, nC5, $08, sHold, $20
0001622B E720 BCE7 18BB 08E7        	dc.b sHold, $20, nB4, sHold, $18, nBb4, $08, sHold
00016233 20E7 20BE E718 BD20        	dc.b $20, sHold, $20, nCs5, sHold, $18, nC5, $20
0001623B E720 BCE7 08BC C580        	dc.b sHold, $20, nB4, sHold, $08, nB4, nAb5, nRst
00016243 BEE7 BE20 E718             	dc.b nCs5, sHold, nCs5, $20, sHold, $18
00016249                            	sRet
00016249 F9                       M 	dc.b	$f9
0001624A                            
0001624A                            ColumnDrive_Call22:
0001624A BB20 E720 B808 E720        	dc.b nBb4, $20, sHold, $20, nG4, $08, sHold, $20
00016252 E718 C008 8020 80          	dc.b sHold, $18, nEb5, $08, nRst, $20, nRst
00016259                            	sRet
00016259 F9                       M 	dc.b	$f9
0001625A                            
0001625A                            ColumnDive_FM5:
0001625A                            	ssMod68k	$10, $01, $05, $05
0001625A F010 0105 05             M 	dc.b	$f0,$10,$01,$05,$05
0001625F                            	sVoice		$06
0001625F E806                     M 	dc.b	$e8,$06
00016261                            	sPan		spCenter, $00
00016261 E0C0                     M 	dc.b	$e0,spcenter|$00
00016263                            	sCall		ColumnDrive_Call24
00016263 F8                       M 	dc.b	$f8
00016264 0000                     M 	dc.w	columndrive_call24-*-1
00016266                            	sVoice		$01
00016266 E801                     M 	dc.b	$e8,$01
00016268                            	sPan		spRight, $00
00016268 E040                     M 	dc.b	$e0,spright|$00
0001626A                            	sCall		ColumnDrive_Call25
0001626A F8                       M 	dc.b	$f8
0001626B 0000                     M 	dc.w	columndrive_call25-*-1
0001626D                            	sCall		ColumnDrive_Call26
0001626D F8                       M 	dc.b	$f8
0001626E 0000                     M 	dc.w	columndrive_call26-*-1
00016270                            	sJump		ColumnDive_FM5
00016270 F6                       M 	dc.b	$f6
00016271 FFE8                     M 	dc.w	columndive_fm5-*-1
00016273                            
00016273                            ColumnDive_PSG2:
00016273                            	sVoice		vCol3_03
00016273 E812                     M 	dc.b	$e8,vcol3_03
00016275                            	sCall		ColumnDrive_Call24
00016275 F8                       M 	dc.b	$f8
00016276 0000                     M 	dc.w	columndrive_call24-*-1
00016278                            	sVoice		v00
00016278 E800                     M 	dc.b	$e8,v00
0001627A                            	sCall		ColumnDrive_Call25
0001627A F8                       M 	dc.b	$f8
0001627B 0000                     M 	dc.w	columndrive_call25-*-1
0001627D                            	sVoice		vCol3_03
0001627D E812                     M 	dc.b	$e8,vcol3_03
0001627F                            	sCall		ColumnDrive_Call26
0001627F F8                       M 	dc.b	$f8
00016280 0000                     M 	dc.w	columndrive_call26-*-1
00016282                            	sJump		ColumnDive_PSG2
00016282 F6                       M 	dc.b	$f6
00016283 FFEF                     M 	dc.w	columndive_psg2-*-1
00016285                            
00016285                            ColumnDrive_Call24:
00016285                            ColumnDive_Loop4:
00016285 8010 B818 B880 08B6        	dc.b nRst, $10, nG4, $18, nG4, nRst, $08, nF4
0001628D 20E7 0810 8010 B818        	dc.b $20, sHold, $08, $10, nRst, $10, nG4, $18
00016295 10B6 08E7 20E7 2080        	dc.b $10, nF4, $08, sHold, $20, sHold, $20, nRst
0001629D 10BF 18BF 8008 B620        	dc.b $10, nD5, $18, nD5, nRst, $08, nF4, $20
000162A5 E708 1080 10BF 1810        	dc.b sHold, $08, $10, nRst, $10, nD5, $18, $10
000162AD BA08 E720 E720             	dc.b nA4, $08, sHold, $20, sHold, $20
000162B3                            	sLoop		$00, $02, ColumnDive_Loop4
000162B3 F700                     M 	dc.b	$f7,$00
000162B5 FFCF                     M 	dc.w	columndive_loop4-*-1
000162B7 02                       M 	dc.b	$02
000162B8                            	sRet
000162B8 F9                       M 	dc.b	$f9
000162B9                            
000162B9                            ColumnDrive_Call25:
000162B9 B620 E718 B408 E720        	dc.b nF4, $20, sHold, $18, nEb4, $08, sHold, $20
000162C1 E720 20E7 18B2 08E7        	dc.b sHold, $20, $20, sHold, $18, nCs4, $08, sHold
000162C9 20E7 20B6 E718 B408        	dc.b $20, sHold, $20, nF4, sHold, $18, nEb4, $08
000162D1 E720 E718 20E7 20B2        	dc.b sHold, $20, sHold, $18, $20, sHold, $20, nCs4
000162D9 08E7 18B9 20E7 08B6        	dc.b $08, sHold, $18, nAb4, $20, sHold, $08, nF4
000162E1 20E7 18B4 08E7 20E7        	dc.b $20, sHold, $18, nEb4, $08, sHold, $20, sHold
000162E9 2020 E718 B208 E720        	dc.b $20, $20, sHold, $18, nCs4, $08, sHold, $20
000162F1 E720 B6E7 18B4 20E7        	dc.b sHold, $20, nF4, sHold, $18, nEb4, $20, sHold
000162F9 2020 E708 B4C8 80C2        	dc.b $20, $20, sHold, $08, nEb4, nB5, nRst, nF5
00016301 E7C2 20E7 18               	dc.b sHold, nF5, $20, sHold, $18
00016306                            	sRet
00016306 F9                       M 	dc.b	$f9
00016307                            
00016307                            ColumnDrive_Call26:
00016307 BE20 E720 C008 E720        	dc.b nCs5, $20, sHold, $20, nEb5, $08, sHold, $20
0001630F E718 BB08 8020 80          	dc.b sHold, $18, nBb4, $08, nRst, $20, nRst
00016316                            	sRet
00016316 F9                       M 	dc.b	$f9
00016317                            
00016317                            ColumnDive_FM4:
00016317 8010                       	dc.b nRst, $10
00016319                            	ssDetune	$04
00016319 E104                     M 	dc.b	$e1,$04
0001631B                            
0001631B                            ColumnDive_FM2:
0001631B                            	sVoice		$02
0001631B E802                     M 	dc.b	$e8,$02
0001631D                            	ssMod68k	$10, $01, $05, $05
0001631D F010 0105 05             M 	dc.b	$f0,$10,$01,$05,$05
00016322 BF18 B8BD 08BA E7BA        	dc.b nD5, $18, nG4, nC5, $08, nA4, sHold, nA4
0001632A 2080 08BA 02BB 06BA        	dc.b $20, nRst, $08, nA4, $02, nBb4, $06, nA4
00016332 08BB B818 BF20 B608        	dc.b $08, nBb4, nG4, $18, nD5, $20, nF4, $08
0001633A E720 E720 BF18 B810        	dc.b sHold, $20, sHold, $20, nD5, $18, nG4, $10
00016342 08BD BAE7 BA20 8008        	dc.b $08, nC5, nA4, sHold, nA4, $20, nRst, $08
0001634A BA02 BB06 BA08 BBB8        	dc.b nA4, $02, nBb4, $06, nA4, $08, nBb4, nG4
00016352 18BF 20C2 08E7 20E7        	dc.b $18, nD5, $20, nF5, $08, sHold, $20, sHold
0001635A 10                         	dc.b $10
0001635B                            	sVoice		$04
0001635B E804                     M 	dc.b	$e8,$04
0001635D BB08 BDBF C0BF BB10        	dc.b nBb4, $08, nC5, nD5, nEb5, nD5, nBb4, $10
00016365 B8B6 08E7 2080 08B6        	dc.b nG4, nF4, $08, sHold, $20, nRst, $08, nF4
0001636D B8BB BFC0 BFBB 80B8        	dc.b nG4, nBb4, nD5, nEb5, nD5, nBb4, nRst, nG4
00016375 80C2 E7C2 2080 08B6        	dc.b nRst, nF5, sHold, nF5, $20, nRst, $08, nF4
0001637D B8BB BFC0 BFBB 80B8        	dc.b nG4, nBb4, nD5, nEb5, nD5, nBb4, nRst, nG4
00016385 80C2 E7C2 C4C7 C6C7        	dc.b nRst, nF5, sHold, nF5, nG5, nBb5, nA5, nBb5
0001638D C602 C7C6 04BF 08C0        	dc.b nA5, $02, nBb5, nA5, $04, nD5, $08, nEb5
00016395 C220 C018 BF08 E720        	dc.b nF5, $20, nEb5, $18, nD5, $08, sHold, $20
0001639D E720                       	dc.b sHold, $20
0001639F                            	sVoice		$05
0001639F E805                     M 	dc.b	$e8,$05
000163A1 8010 B608 80B2 B680        	dc.b nRst, $10, nF4, $08, nRst, nCs4, nF4, nRst
000163A9 B420 E718 B908 BBBC        	dc.b nEb4, $20, sHold, $18, nAb4, $08, nBb4, nB4
000163B1 BB02 BCBB 04B9 08B5        	dc.b nBb4, $02, nB4, nBb4, $04, nAb4, $08, nE4
000163B9 10B4 08B4 B220 B9E7        	dc.b $10, nEb4, $08, nEb4, nCs4, $20, nAb4, sHold
000163C1 08B0 02B1 06B2 08B4        	dc.b $08, nB3, $02, nC4, $06, nCs4, $08, nEb4
000163C9 B980 BB80 BE02 C00E        	dc.b nAb4, nRst, nBb4, nRst, nCs5, $02, nEb5, $0E
000163D1 BE08 BDBE B9BB 80BC        	dc.b nCs5, $08, nC5, nCs5, nAb4, nBb4, nRst, nB4
000163D9 20B9 C0BE E708 BDBE        	dc.b $20, nAb4, nEb5, nCs5, sHold, $08, nC5, nCs5
000163E1 C0B9 1008 C2C0 20E7        	dc.b nEb5, nAb4, $10, $08, nF5, nEb5, $20, sHold
000163E9 18C5 08C7 C8C7 02C8        	dc.b $18, nAb5, $08, nBb5, nB5, nBb5, $02, nB5
000163F1 C704 C508 C110 C008        	dc.b nBb5, $04, nAb5, $08, nE5, $10, nEb5, $08
000163F9 C0BE 20C5 E708 BC02        	dc.b nEb5, nCs5, $20, nAb5, sHold, $08, nB4, $02
00016401 BD06 BE08 C0C5 80C7        	dc.b nC5, $06, nCs5, $08, nEb5, nAb5, nRst, nBb5
00016409 80CA 02CC 0ECA 08C9        	dc.b nRst, nCs6, $02, nEb6, $0E, nCs6, $08, nC6
00016411 CAC5 C780 C820 E708        	dc.b nCs6, nAb5, nBb5, nRst, nB5, $20, sHold, $08
00016419 C8D1 80CE 20E7 20          	dc.b nB5, nAb6, nRst, nF6, $20, sHold, $20
00016420                            	sVoice		$01
00016420 E801                     M 	dc.b	$e8,$01
00016422                            	saVol		$04
00016422 ED04                     M 	dc.b	$ed,$04
00016424 BE20 E720 C008 E720        	dc.b nCs5, $20, sHold, $20, nEb5, $08, sHold, $20
0001642C E718                       	dc.b sHold, $18
0001642E                            	saVol		$FC
0001642E EDFC                     M 	dc.b	$ed,$fc
00016430                            	sVoice		$05
00016430 E805                     M 	dc.b	$e8,$05
00016432 B408                       	dc.b nEb4, $08
00016434                            	saVol		$04
00016434 ED04                     M 	dc.b	$ed,$04
00016436 8008                       	dc.b nRst, $08
00016438                            	saVol		$04
00016438 ED04                     M 	dc.b	$ed,$04
0001643A                            	sPan		spLeft, $00
0001643A E080                     M 	dc.b	$e0,spleft|$00
0001643C B408                       	dc.b nEb4, $08
0001643E                            	saVol		$04
0001643E ED04                     M 	dc.b	$ed,$04
00016440 8008                       	dc.b nRst, $08
00016442                            	saVol		$04
00016442 ED04                     M 	dc.b	$ed,$04
00016444                            	sPan		spRight, $00
00016444 E040                     M 	dc.b	$e0,spright|$00
00016446 B408 8008                  	dc.b nEb4, $08, nRst, $08
0001644A                            	saVol		$F0
0001644A EDF0                     M 	dc.b	$ed,$f0
0001644C                            	sPan		spCenter, $00
0001644C E0C0                     M 	dc.b	$e0,spcenter|$00
0001644E                            	sVoice		$02
0001644E E802                     M 	dc.b	$e8,$02
00016450                            	saVol		$04
00016450 ED04                     M 	dc.b	$ed,$04
00016452 C008 BEBD                  	dc.b nEb5, $08, nCs5, nC5
00016456                            	saVol		$FC
00016456 EDFC                     M 	dc.b	$ed,$fc
00016458                            	sJump		ColumnDive_FM2
00016458 F6                       M 	dc.b	$f6
00016459 FEC1                     M 	dc.w	columndive_fm2-*-1
0001645B                            
0001645B                            ColumnDive_PSG3:
0001645B                            	sNoisePSG	$E7
0001645B F3E7                     M 	dc.b	$f3,$e7
0001645D                            
0001645D                            ColumnDive_Jump3:
0001645D                            	sVoice		vCol3_02
0001645D E811                     M 	dc.b	$e8,vcol3_02
0001645F                            
0001645F                            ColumnDive_Loop5:
0001645F D308 D3D3 D3D3 D3D3        	dc.b nBb6, $08, nBb6, nBb6, nBb6, nBb6, nBb6, nBb6
00016467 D3                         	dc.b nBb6
00016468                            	sLoop		$00, $0E, ColumnDive_Loop5
00016468 F700                     M 	dc.b	$f7,$00
0001646A FFF4                     M 	dc.w	columndive_loop5-*-1
0001646C 0E                       M 	dc.b	$0e
0001646D D308 D3D3 D3D3 D3D3        	dc.b nBb6, $08, nBb6, nBb6, nBb6, nBb6, nBb6, nBb6
00016475                            	sVoice		vCol3_05
00016475 E813                     M 	dc.b	$e8,vcol3_05
00016477 D220 8020 8008             	dc.b nA6, $20, nRst, $20, nRst, $08
0001647D                            	sVoice		vCol3_02
0001647D E811                     M 	dc.b	$e8,vcol3_02
0001647F                            
0001647F                            ColumnDive_Loop6:
0001647F D308 D3D3 D3D3 D3D3        	dc.b nBb6, $08, nBb6, nBb6, nBb6, nBb6, nBb6, nBb6
00016487 D3                         	dc.b nBb6
00016488                            	sLoop		$00, $0E, ColumnDive_Loop6
00016488 F700                     M 	dc.b	$f7,$00
0001648A FFF4                     M 	dc.w	columndive_loop6-*-1
0001648C 0E                       M 	dc.b	$0e
0001648D D308 D3D3 D3D3 D3D3        	dc.b nBb6, $08, nBb6, nBb6, nBb6, nBb6, nBb6, nBb6
00016495                            	sVoice		vCol3_05
00016495 E813                     M 	dc.b	$e8,vcol3_05
00016497 D220 8020 8008 8020        	dc.b nA6, $20, nRst, $20, nRst, $08, nRst, $20
0001649F 8080 8018 D220 8020        	dc.b nRst, nRst, nRst, $18, nA6, $20, nRst, $20
000164A7 8008                       	dc.b nRst, $08
000164A9                            	sJump		ColumnDive_Jump3
000164A9 F6                       M 	dc.b	$f6
000164AA FFB2                     M 	dc.w	columndive_jump3-*-1
000164AC                            
000164AC                            ColumnDive_DAC1:
000164AC                            	sStop
000164AC F5                       M 	dc.b	$f5
000164AD                            
000164AD =00000083                  d81 =	dSnare
000164AD =00000084                  d83 =	dClap
000164AD =00000086                  d84 =	dTom
000164AD =00000082                  d86 =	dLowKick
000164AD                            
000164AD                            ColumnDive_DAC2:
000164AD 8210 8382 0882 8382        	dc.b d86, $10, d81, d86, $08, d86, d81, d86
000164B5 1008 8310 8283 0882        	dc.b $10, $08, d81, $10, d86, d81, $08, d86
000164BD                            	sLoop		$00, $03, ColumnDive_DAC2
000164BD F700                     M 	dc.b	$f7,$00
000164BF FFED                     M 	dc.w	columndive_dac2-*-1
000164C1 03                       M 	dc.b	$03
000164C2 8210 8382 8308 8210        	dc.b d86, $10, d81, d86, d81, $08, d86, $10
000164CA 0883 1082 8408 86          	dc.b $08, d81, $10, d86, d83, $08, d84
000164D1                            
000164D1                            ColumnDive_Loop7:
000164D1 8210 8382 0882 8382        	dc.b d86, $10, d81, d86, $08, d86, d81, d86
000164D9 1008 8310 8283 0882        	dc.b $10, $08, d81, $10, d86, d81, $08, d86
000164E1                            	sLoop		$00, $03, ColumnDive_Loop7
000164E1 F700                     M 	dc.b	$f7,$00
000164E3 FFED                     M 	dc.w	columndive_loop7-*-1
000164E5 03                       M 	dc.b	$03
000164E6 8210 8382 8308 1086        	dc.b d86, $10, d81, d86, d81, $08, $10, d84
000164EE 0800 8486 1083 0883        	dc.b $08, d82, d83, d84, $10, d81, $08, d81
000164F6                            
000164F6                            ColumnDive_Loop8:
000164F6 8210 8382 0882 8382        	dc.b d86, $10, d81, d86, $08, d86, d81, d86
000164FE 1008 8310 8283 0882        	dc.b $10, $08, d81, $10, d86, d81, $08, d86
00016506                            	sLoop		$00, $07, ColumnDive_Loop8
00016506 F700                     M 	dc.b	$f7,$00
00016508 FFED                     M 	dc.w	columndive_loop8-*-1
0001650A 07                       M 	dc.b	$07
0001650B 8210 8382 0882 8383        	dc.b d86, $10, d81, d86, $08, d86, d81, d81
00016513                            
00016513                            ColumnDive_Loop9:
00016513 8008 8283 1082 8308        	dc.b nRst, $08, d86, d81, $10, d86, d81, $08
0001651B 82                         	dc.b d86
0001651C                            	sLoop		$00, $02, ColumnDive_Loop9
0001651C F700                     M 	dc.b	$f7,$00
0001651E FFF4                     M 	dc.w	columndive_loop9-*-1
00016520 02                       M 	dc.b	$02
00016521 8008 8283 1000 0206        	dc.b nRst, $08, d86, d81, $10, d82, $02, $06
00016529 8410 8308 8210 8300        	dc.b d83, $10, d81, $08, d86, $10, d81, d82
00016531 0206 8410 8308             	dc.b $02, $06, d83, $10, d81, $08
00016537                            	sJump		ColumnDive_DAC2
00016537 F6                       M 	dc.b	$f6
00016538 FF74                     M 	dc.w	columndive_dac2-*-1
0001653A =0000000F                M a	=	a+1
0001653A                          M 	even
0001653A                          M b	equs	dmusf
0001653A                          M _mus_pray
0001653A                          M dmusaf	include	"driver/music/pray.asm"
0001653A                            Pray_Header:
0001653A                            	sHeaderInit
0001653A =0001653A                M spointzero	=	*
0001653A =00000000                M spatnum	=	0
0001653A                            	sHeaderTempo	$81, $1B
0001653A 801B                     M 	dc.b	$81-1,$1b
0001653C                            	sHeaderCh	$05, $03
0001653C 04                       M 	dc.b	$05-1
0001653D 02                       M 	dc.b	$03-1
0001653E                            	sHeaderDAC	Pray_DAC1, $08, $00
0001653E 0000                     M 	dc.w	pray_dac1-spointzero
00016540 08                       M 	dc.b	$08
00016541 00                       M 	dc.b	$00
00016542                            	sHeaderDAC	Pray_DAC2, $08, $00
00016542 0000                     M 	dc.w	pray_dac2-spointzero
00016544 08                       M 	dc.b	$08
00016545 00                       M 	dc.b	$00
00016546                            	sHeaderFM	Pray_FM1, $00, $0D
00016546 0000                     M 	dc.w	pray_fm1-spointzero
00016548 000D                     M 	dc.b	$00,$0d
0001654A                            	sHeaderFM	Pray_FM4, $00, $0D
0001654A 0000                     M 	dc.w	pray_fm4-spointzero
0001654C 000D                     M 	dc.b	$00,$0d
0001654E                            	sHeaderFM	Pray_FM3, $00, $0D
0001654E 0000                     M 	dc.w	pray_fm3-spointzero
00016550 000D                     M 	dc.b	$00,$0d
00016552                            	sHeaderFM	Pray_FM2, $00, $0D
00016552 0000                     M 	dc.w	pray_fm2-spointzero
00016554 000D                     M 	dc.b	$00,$0d
00016556                            	sHeaderFM	Pray_FM5, $00, $15
00016556 0000                     M 	dc.w	pray_fm5-spointzero
00016558 0015                     M 	dc.b	$00,$15
0001655A                            	sHeaderPSG	Pray_PSG1, $E8, $05, $00, v00
0001655A 0000                     M 	dc.w	pray_psg1-spointzero
0001655C E805 0000                M 	dc.b	$e8,$05,$00,v00
00016560                            	sHeaderPSG	Pray_PSG2, $E8, $05, $00, v00
00016560 0000                     M 	dc.w	pray_psg2-spointzero
00016562 E805 0000                M 	dc.b	$e8,$05,$00,v00
00016566                            	sHeaderPSG	Pray_PSG3, $1B, $01, $00, v00
00016566 0000                     M 	dc.w	pray_psg3-spointzero
00016568 1B01 0000                M 	dc.b	$1b,$01,$00,v00
0001656C                            
0001656C                            	; Patch $00
0001656C                            	; $3B
0001656C                            	; $32, $41, $72, $31,	$DF, $9F, $5F, $9F
0001656C                            	; $04, $0C, $0E, $08,	$0F, $0B, $0D, $05
0001656C                            	; $07, $07, $07, $07,	$1C, $19, $27, $80
0001656C                            	spAlgorithm	$03
0001656C =00000001                M spatnum	=	spatnum+1
0001656C =00000003                M spal	=	val
0001656C                            	spFeedback	$07
0001656C =00000007                M spfe	=	val
0001656C                            	spDetune	$03, $07, $04, $03
0001656C =00000003                M spde1	=	op1
0001656C =00000007                M spde2	=	op2
0001656C =00000004                M spde3	=	op3
0001656C =00000003                M spde4	=	op4
0001656C                            	spMultiple	$02, $02, $01, $01
0001656C =00000002                M spmu1	=	op1
0001656C =00000002                M spmu2	=	op2
0001656C =00000001                M spmu3	=	op3
0001656C =00000001                M spmu4	=	op4
0001656C                            	spRateScale	$03, $01, $02, $02
0001656C =00000003                M sprs1	=	op1
0001656C =00000001                M sprs2	=	op2
0001656C =00000002                M sprs3	=	op3
0001656C =00000002                M sprs4	=	op4
0001656C                            	spAttackRt	$1F, $1F, $1F, $1F
0001656C =0000001F                M spar1	=	op1
0001656C =0000001F                M spar2	=	op2
0001656C =0000001F                M spar3	=	op3
0001656C =0000001F                M spar4	=	op4
0001656C                            	spAmpMod	$00, $00, $00, $00
0001656C =00000000                M spam1	=	op1
0001656C =00000000                M spam2	=	op2
0001656C =00000000                M spam3	=	op3
0001656C =00000000                M spam4	=	op4
0001656C                            	spSustainRt	$04, $0E, $0C, $08
0001656C =00000004                M spsr1	=	op1
0001656C =0000000E                M spsr2	=	op2
0001656C =0000000C                M spsr3	=	op3
0001656C =00000008                M spsr4	=	op4
0001656C                            	spSustainLv	$00, $00, $00, $00
0001656C =00000000                M spsl1	=	op1
0001656C =00000000                M spsl2	=	op2
0001656C =00000000                M spsl3	=	op3
0001656C =00000000                M spsl4	=	op4
0001656C                            	spDecayRt	$0F, $0D, $0B, $05
0001656C =0000000F                M spdr1	=	op1
0001656C =0000000D                M spdr2	=	op2
0001656C =0000000B                M spdr3	=	op3
0001656C =00000005                M spdr4	=	op4
0001656C                            	spReleaseRt	$07, $07, $07, $07
0001656C =00000007                M sprr1	=	op1
0001656C =00000007                M sprr2	=	op2
0001656C =00000007                M sprr3	=	op3
0001656C =00000007                M sprr4	=	op4
0001656C                            	spSSGEG		$00, $00, $00, $00
0001656C =00000000                M spss1	=	op1
0001656C =00000000                M spss2	=	op2
0001656C =00000000                M spss3	=	op3
0001656C =00000000                M spss4	=	op4
0001656C                            	spTotalLv	$1C, $27, $19, $00
0001656C =0000001C                M sptl1	=	op1
0001656C =00000027                M sptl2	=	op2
0001656C =00000019                M sptl3	=	op3
0001656C =00000000                M sptl4	=	op4
0001656C 3B                       M 	dc.b	(spfe<<3)+spal
0001656D =00000080                M sptlmask4	set	$80
0001656D =00000000                M sptlmask2	set	((spal>=5)<<7)
0001656D =00000000                M sptlmask3	set	((spal>=4)<<7)
0001656D =00000000                M sptlmask1	set	((spal=7)<<7)
0001656D 3241 7231                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00016571 DF9F 5F9F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00016575 040C 0E08                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00016579 0F0B 0D05                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001657D 0707 0707                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00016581 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00016585 1C19 2780                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00016589 4E41 54                  M 	dc.b	'NAT'
0001658C                            
0001658C                            	; Patch $01
0001658C                            	; $29
0001658C                            	; $02, $06, $02, $01,	$09, $16, $10, $10
0001658C                            	; $0A, $02, $03, $03,	$05, $05, $05, $05
0001658C                            	; $35, $05, $05, $05,	$14, $15, $29, $89
0001658C                            	spAlgorithm	$01
0001658C =00000002                M spatnum	=	spatnum+1
0001658C =00000001                M spal	=	val
0001658C                            	spFeedback	$05
0001658C =00000005                M spfe	=	val
0001658C                            	spDetune	$00, $00, $00, $00
0001658C =00000000                M spde1	=	op1
0001658C =00000000                M spde2	=	op2
0001658C =00000000                M spde3	=	op3
0001658C =00000000                M spde4	=	op4
0001658C                            	spMultiple	$02, $02, $06, $01
0001658C =00000002                M spmu1	=	op1
0001658C =00000002                M spmu2	=	op2
0001658C =00000006                M spmu3	=	op3
0001658C =00000001                M spmu4	=	op4
0001658C                            	spRateScale	$00, $00, $00, $00
0001658C =00000000                M sprs1	=	op1
0001658C =00000000                M sprs2	=	op2
0001658C =00000000                M sprs3	=	op3
0001658C =00000000                M sprs4	=	op4
0001658C                            	spAttackRt	$09, $10, $16, $10
0001658C =00000009                M spar1	=	op1
0001658C =00000010                M spar2	=	op2
0001658C =00000016                M spar3	=	op3
0001658C =00000010                M spar4	=	op4
0001658C                            	spAmpMod	$00, $00, $00, $00
0001658C =00000000                M spam1	=	op1
0001658C =00000000                M spam2	=	op2
0001658C =00000000                M spam3	=	op3
0001658C =00000000                M spam4	=	op4
0001658C                            	spSustainRt	$0A, $03, $02, $03
0001658C =0000000A                M spsr1	=	op1
0001658C =00000003                M spsr2	=	op2
0001658C =00000002                M spsr3	=	op3
0001658C =00000003                M spsr4	=	op4
0001658C                            	spSustainLv	$03, $00, $00, $00
0001658C =00000003                M spsl1	=	op1
0001658C =00000000                M spsl2	=	op2
0001658C =00000000                M spsl3	=	op3
0001658C =00000000                M spsl4	=	op4
0001658C                            	spDecayRt	$05, $05, $05, $05
0001658C =00000005                M spdr1	=	op1
0001658C =00000005                M spdr2	=	op2
0001658C =00000005                M spdr3	=	op3
0001658C =00000005                M spdr4	=	op4
0001658C                            	spReleaseRt	$05, $05, $05, $05
0001658C =00000005                M sprr1	=	op1
0001658C =00000005                M sprr2	=	op2
0001658C =00000005                M sprr3	=	op3
0001658C =00000005                M sprr4	=	op4
0001658C                            	spSSGEG		$00, $00, $00, $00
0001658C =00000000                M spss1	=	op1
0001658C =00000000                M spss2	=	op2
0001658C =00000000                M spss3	=	op3
0001658C =00000000                M spss4	=	op4
0001658C                            	spTotalLv	$14, $29, $15, $09
0001658C =00000014                M sptl1	=	op1
0001658C =00000029                M sptl2	=	op2
0001658C =00000015                M sptl3	=	op3
0001658C =00000009                M sptl4	=	op4
0001658C 29                       M 	dc.b	(spfe<<3)+spal
0001658D =00000080                M sptlmask4	set	$80
0001658D =00000000                M sptlmask2	set	((spal>=5)<<7)
0001658D =00000000                M sptlmask3	set	((spal>=4)<<7)
0001658D =00000000                M sptlmask1	set	((spal=7)<<7)
0001658D 0206 0201                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00016591 0916 1010                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00016595 0A02 0303                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00016599 0505 0505                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001659D 3505 0505                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
000165A1 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
000165A5 1415 2989                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
000165A9 4E41 54                  M 	dc.b	'NAT'
000165AC                            
000165AC                            	; Patch $02
000165AC                            	; $24
000165AC                            	; $39, $51, $05, $01,	$5F, $9B, $9E, $9E
000165AC                            	; $0F, $07, $0F, $08,	$06, $0A, $0B, $0A
000165AC                            	; $18, $88, $F8, $F8,	$39, $8A, $39, $8A
000165AC                            	spAlgorithm	$04
000165AC =00000003                M spatnum	=	spatnum+1
000165AC =00000004                M spal	=	val
000165AC                            	spFeedback	$04
000165AC =00000004                M spfe	=	val
000165AC                            	spDetune	$03, $00, $05, $00
000165AC =00000003                M spde1	=	op1
000165AC =00000000                M spde2	=	op2
000165AC =00000005                M spde3	=	op3
000165AC =00000000                M spde4	=	op4
000165AC                            	spMultiple	$09, $05, $01, $01
000165AC =00000009                M spmu1	=	op1
000165AC =00000005                M spmu2	=	op2
000165AC =00000001                M spmu3	=	op3
000165AC =00000001                M spmu4	=	op4
000165AC                            	spRateScale	$01, $02, $02, $02
000165AC =00000001                M sprs1	=	op1
000165AC =00000002                M sprs2	=	op2
000165AC =00000002                M sprs3	=	op3
000165AC =00000002                M sprs4	=	op4
000165AC                            	spAttackRt	$1F, $1E, $1B, $1E
000165AC =0000001F                M spar1	=	op1
000165AC =0000001E                M spar2	=	op2
000165AC =0000001B                M spar3	=	op3
000165AC =0000001E                M spar4	=	op4
000165AC                            	spAmpMod	$00, $00, $00, $00
000165AC =00000000                M spam1	=	op1
000165AC =00000000                M spam2	=	op2
000165AC =00000000                M spam3	=	op3
000165AC =00000000                M spam4	=	op4
000165AC                            	spSustainRt	$0F, $0F, $07, $08
000165AC =0000000F                M spsr1	=	op1
000165AC =0000000F                M spsr2	=	op2
000165AC =00000007                M spsr3	=	op3
000165AC =00000008                M spsr4	=	op4
000165AC                            	spSustainLv	$01, $0F, $08, $0F
000165AC =00000001                M spsl1	=	op1
000165AC =0000000F                M spsl2	=	op2
000165AC =00000008                M spsl3	=	op3
000165AC =0000000F                M spsl4	=	op4
000165AC                            	spDecayRt	$06, $0B, $0A, $0A
000165AC =00000006                M spdr1	=	op1
000165AC =0000000B                M spdr2	=	op2
000165AC =0000000A                M spdr3	=	op3
000165AC =0000000A                M spdr4	=	op4
000165AC                            	spReleaseRt	$08, $08, $08, $08
000165AC =00000008                M sprr1	=	op1
000165AC =00000008                M sprr2	=	op2
000165AC =00000008                M sprr3	=	op3
000165AC =00000008                M sprr4	=	op4
000165AC                            	spSSGEG		$00, $00, $00, $00
000165AC =00000000                M spss1	=	op1
000165AC =00000000                M spss2	=	op2
000165AC =00000000                M spss3	=	op3
000165AC =00000000                M spss4	=	op4
000165AC                            	spTotalLv	$39, $39, $0A, $0A
000165AC =00000039                M sptl1	=	op1
000165AC =00000039                M sptl2	=	op2
000165AC =0000000A                M sptl3	=	op3
000165AC =0000000A                M sptl4	=	op4
000165AC 24                       M 	dc.b	(spfe<<3)+spal
000165AD =00000080                M sptlmask4	set	$80
000165AD =00000000                M sptlmask2	set	((spal>=5)<<7)
000165AD =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
000165AD =00000000                M sptlmask1	set	((spal=7)<<7)
000165AD 3951 0501                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
000165B1 5F9B 9E9E                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
000165B5 0F07 0F08                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
000165B9 060A 0B0A                M 	dc.b	spdr1,spdr3,spdr2,spdr4
000165BD 1888 F8F8                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
000165C1 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
000165C5 398A 398A                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
000165C9 4E41 54                  M 	dc.b	'NAT'
000165CC                            
000165CC                            	; Patch $03
000165CC                            	; $3A
000165CC                            	; $01, $02, $01, $01,	$50, $10, $0E, $52
000165CC                            	; $04, $1F, $1F, $1F,	$00, $00, $00, $00
000165CC                            	; $48, $08, $08, $09,	$1C, $45, $30, $80
000165CC                            	spAlgorithm	$02
000165CC =00000004                M spatnum	=	spatnum+1
000165CC =00000002                M spal	=	val
000165CC                            	spFeedback	$07
000165CC =00000007                M spfe	=	val
000165CC                            	spDetune	$00, $00, $00, $00
000165CC =00000000                M spde1	=	op1
000165CC =00000000                M spde2	=	op2
000165CC =00000000                M spde3	=	op3
000165CC =00000000                M spde4	=	op4
000165CC                            	spMultiple	$01, $01, $02, $01
000165CC =00000001                M spmu1	=	op1
000165CC =00000001                M spmu2	=	op2
000165CC =00000002                M spmu3	=	op3
000165CC =00000001                M spmu4	=	op4
000165CC                            	spRateScale	$01, $00, $00, $01
000165CC =00000001                M sprs1	=	op1
000165CC =00000000                M sprs2	=	op2
000165CC =00000000                M sprs3	=	op3
000165CC =00000001                M sprs4	=	op4
000165CC                            	spAttackRt	$10, $0E, $10, $12
000165CC =00000010                M spar1	=	op1
000165CC =0000000E                M spar2	=	op2
000165CC =00000010                M spar3	=	op3
000165CC =00000012                M spar4	=	op4
000165CC                            	spAmpMod	$00, $00, $00, $00
000165CC =00000000                M spam1	=	op1
000165CC =00000000                M spam2	=	op2
000165CC =00000000                M spam3	=	op3
000165CC =00000000                M spam4	=	op4
000165CC                            	spSustainRt	$04, $1F, $1F, $1F
000165CC =00000004                M spsr1	=	op1
000165CC =0000001F                M spsr2	=	op2
000165CC =0000001F                M spsr3	=	op3
000165CC =0000001F                M spsr4	=	op4
000165CC                            	spSustainLv	$04, $00, $00, $00
000165CC =00000004                M spsl1	=	op1
000165CC =00000000                M spsl2	=	op2
000165CC =00000000                M spsl3	=	op3
000165CC =00000000                M spsl4	=	op4
000165CC                            	spDecayRt	$00, $00, $00, $00
000165CC =00000000                M spdr1	=	op1
000165CC =00000000                M spdr2	=	op2
000165CC =00000000                M spdr3	=	op3
000165CC =00000000                M spdr4	=	op4
000165CC                            	spReleaseRt	$08, $08, $08, $09
000165CC =00000008                M sprr1	=	op1
000165CC =00000008                M sprr2	=	op2
000165CC =00000008                M sprr3	=	op3
000165CC =00000009                M sprr4	=	op4
000165CC                            	spSSGEG		$00, $00, $00, $00
000165CC =00000000                M spss1	=	op1
000165CC =00000000                M spss2	=	op2
000165CC =00000000                M spss3	=	op3
000165CC =00000000                M spss4	=	op4
000165CC                            	spTotalLv	$1C, $30, $45, $00
000165CC =0000001C                M sptl1	=	op1
000165CC =00000030                M sptl2	=	op2
000165CC =00000045                M sptl3	=	op3
000165CC =00000000                M sptl4	=	op4
000165CC 3A                       M 	dc.b	(spfe<<3)+spal
000165CD =00000080                M sptlmask4	set	$80
000165CD =00000000                M sptlmask2	set	((spal>=5)<<7)
000165CD =00000000                M sptlmask3	set	((spal>=4)<<7)
000165CD =00000000                M sptlmask1	set	((spal=7)<<7)
000165CD 0102 0101                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
000165D1 5010 0E52                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
000165D5 041F 1F1F                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
000165D9 0000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
000165DD 4808 0809                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
000165E1 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
000165E5 1C45 3080                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
000165E9 4E41 54                  M 	dc.b	'NAT'
000165EC                            
000165EC                            	; Patch $04
000165EC                            	; $06
000165EC                            	; $78, $34, $32, $34,	$18, $3F, $3F, $5F
000165EC                            	; $0B, $11, $10, $0F,	$08, $0C, $0C, $0C
000165EC                            	; $36, $F6, $F6, $F6,	$08, $86, $86, $86
000165EC                            	spAlgorithm	$06
000165EC =00000005                M spatnum	=	spatnum+1
000165EC =00000006                M spal	=	val
000165EC                            	spFeedback	$00
000165EC =00000000                M spfe	=	val
000165EC                            	spDetune	$07, $03, $03, $03
000165EC =00000007                M spde1	=	op1
000165EC =00000003                M spde2	=	op2
000165EC =00000003                M spde3	=	op3
000165EC =00000003                M spde4	=	op4
000165EC                            	spMultiple	$08, $02, $04, $04
000165EC =00000008                M spmu1	=	op1
000165EC =00000002                M spmu2	=	op2
000165EC =00000004                M spmu3	=	op3
000165EC =00000004                M spmu4	=	op4
000165EC                            	spRateScale	$00, $00, $00, $01
000165EC =00000000                M sprs1	=	op1
000165EC =00000000                M sprs2	=	op2
000165EC =00000000                M sprs3	=	op3
000165EC =00000001                M sprs4	=	op4
000165EC                            	spAttackRt	$18, $1F, $1F, $1F
000165EC =00000018                M spar1	=	op1
000165EC =0000001F                M spar2	=	op2
000165EC =0000001F                M spar3	=	op3
000165EC =0000001F                M spar4	=	op4
000165EC                            	spAmpMod	$00, $00, $00, $00
000165EC =00000000                M spam1	=	op1
000165EC =00000000                M spam2	=	op2
000165EC =00000000                M spam3	=	op3
000165EC =00000000                M spam4	=	op4
000165EC                            	spSustainRt	$0B, $10, $11, $0F
000165EC =0000000B                M spsr1	=	op1
000165EC =00000010                M spsr2	=	op2
000165EC =00000011                M spsr3	=	op3
000165EC =0000000F                M spsr4	=	op4
000165EC                            	spSustainLv	$03, $0F, $0F, $0F
000165EC =00000003                M spsl1	=	op1
000165EC =0000000F                M spsl2	=	op2
000165EC =0000000F                M spsl3	=	op3
000165EC =0000000F                M spsl4	=	op4
000165EC                            	spDecayRt	$08, $0C, $0C, $0C
000165EC =00000008                M spdr1	=	op1
000165EC =0000000C                M spdr2	=	op2
000165EC =0000000C                M spdr3	=	op3
000165EC =0000000C                M spdr4	=	op4
000165EC                            	spReleaseRt	$06, $06, $06, $06
000165EC =00000006                M sprr1	=	op1
000165EC =00000006                M sprr2	=	op2
000165EC =00000006                M sprr3	=	op3
000165EC =00000006                M sprr4	=	op4
000165EC                            	spSSGEG		$00, $00, $00, $00
000165EC =00000000                M spss1	=	op1
000165EC =00000000                M spss2	=	op2
000165EC =00000000                M spss3	=	op3
000165EC =00000000                M spss4	=	op4
000165EC                            	spTotalLv	$08, $06, $06, $06
000165EC =00000008                M sptl1	=	op1
000165EC =00000006                M sptl2	=	op2
000165EC =00000006                M sptl3	=	op3
000165EC =00000006                M sptl4	=	op4
000165EC 06                       M 	dc.b	(spfe<<3)+spal
000165ED =00000080                M sptlmask4	set	$80
000165ED =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
000165ED =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
000165ED =00000000                M sptlmask1	set	((spal=7)<<7)
000165ED 7834 3234                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
000165F1 181F 1F5F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
000165F5 0B11 100F                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
000165F9 080C 0C0C                M 	dc.b	spdr1,spdr3,spdr2,spdr4
000165FD 36F6 F6F6                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00016601 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00016605 0886 8686                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00016609 4E41 54                  M 	dc.b	'NAT'
0001660C                            
0001660C                            	; Patch $05
0001660C                            	; $07
0001660C                            	; $00, $01, $02, $04,	$54, $54, $54, $54
0001660C                            	; $00, $00, $00, $00,	$00, $00, $00, $00
0001660C                            	; $07, $07, $07, $07,	$89, $8B, $8C, $8D
0001660C                            	spAlgorithm	$07
0001660C =00000006                M spatnum	=	spatnum+1
0001660C =00000007                M spal	=	val
0001660C                            	spFeedback	$00
0001660C =00000000                M spfe	=	val
0001660C                            	spDetune	$00, $00, $00, $00
0001660C =00000000                M spde1	=	op1
0001660C =00000000                M spde2	=	op2
0001660C =00000000                M spde3	=	op3
0001660C =00000000                M spde4	=	op4
0001660C                            	spMultiple	$00, $02, $01, $04
0001660C =00000000                M spmu1	=	op1
0001660C =00000002                M spmu2	=	op2
0001660C =00000001                M spmu3	=	op3
0001660C =00000004                M spmu4	=	op4
0001660C                            	spRateScale	$01, $01, $01, $01
0001660C =00000001                M sprs1	=	op1
0001660C =00000001                M sprs2	=	op2
0001660C =00000001                M sprs3	=	op3
0001660C =00000001                M sprs4	=	op4
0001660C                            	spAttackRt	$14, $14, $14, $14
0001660C =00000014                M spar1	=	op1
0001660C =00000014                M spar2	=	op2
0001660C =00000014                M spar3	=	op3
0001660C =00000014                M spar4	=	op4
0001660C                            	spAmpMod	$00, $00, $00, $00
0001660C =00000000                M spam1	=	op1
0001660C =00000000                M spam2	=	op2
0001660C =00000000                M spam3	=	op3
0001660C =00000000                M spam4	=	op4
0001660C                            	spSustainRt	$00, $00, $00, $00
0001660C =00000000                M spsr1	=	op1
0001660C =00000000                M spsr2	=	op2
0001660C =00000000                M spsr3	=	op3
0001660C =00000000                M spsr4	=	op4
0001660C                            	spSustainLv	$00, $00, $00, $00
0001660C =00000000                M spsl1	=	op1
0001660C =00000000                M spsl2	=	op2
0001660C =00000000                M spsl3	=	op3
0001660C =00000000                M spsl4	=	op4
0001660C                            	spDecayRt	$00, $00, $00, $00
0001660C =00000000                M spdr1	=	op1
0001660C =00000000                M spdr2	=	op2
0001660C =00000000                M spdr3	=	op3
0001660C =00000000                M spdr4	=	op4
0001660C                            	spReleaseRt	$07, $07, $07, $07
0001660C =00000007                M sprr1	=	op1
0001660C =00000007                M sprr2	=	op2
0001660C =00000007                M sprr3	=	op3
0001660C =00000007                M sprr4	=	op4
0001660C                            	spSSGEG		$00, $00, $00, $00
0001660C =00000000                M spss1	=	op1
0001660C =00000000                M spss2	=	op2
0001660C =00000000                M spss3	=	op3
0001660C =00000000                M spss4	=	op4
0001660C                            	spTotalLv	$09, $0C, $0B, $0D
0001660C =00000009                M sptl1	=	op1
0001660C =0000000C                M sptl2	=	op2
0001660C =0000000B                M sptl3	=	op3
0001660C =0000000D                M sptl4	=	op4
0001660C 07                       M 	dc.b	(spfe<<3)+spal
0001660D =00000080                M sptlmask4	set	$80
0001660D =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
0001660D =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
0001660D =FFFFFF80                M sptlmask1	set	((spal=7)<<7)
0001660D 0001 0204                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00016611 5454 5454                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00016615 0000 0000                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00016619 0000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001661D 0707 0707                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00016621 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00016625 898B 8C8D                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00016629 4E41 54                  M 	dc.b	'NAT'
0001662C                            
0001662C                            	; Patch $06
0001662C                            	; $5C
0001662C                            	; $41, $75, $70, $39,	$08, $1F, $1F, $1F
0001662C                            	; $02, $02, $14, $03,	$0A, $08, $00, $07
0001662C                            	; $1F, $3F, $4F, $4F,	$03, $84, $04, $86
0001662C                            	spAlgorithm	$04
0001662C =00000007                M spatnum	=	spatnum+1
0001662C =00000004                M spal	=	val
0001662C                            	spFeedback	$03
0001662C =00000003                M spfe	=	val
0001662C                            	spDetune	$04, $07, $07, $03
0001662C =00000004                M spde1	=	op1
0001662C =00000007                M spde2	=	op2
0001662C =00000007                M spde3	=	op3
0001662C =00000003                M spde4	=	op4
0001662C                            	spMultiple	$01, $00, $05, $09
0001662C =00000001                M spmu1	=	op1
0001662C =00000000                M spmu2	=	op2
0001662C =00000005                M spmu3	=	op3
0001662C =00000009                M spmu4	=	op4
0001662C                            	spRateScale	$00, $00, $00, $00
0001662C =00000000                M sprs1	=	op1
0001662C =00000000                M sprs2	=	op2
0001662C =00000000                M sprs3	=	op3
0001662C =00000000                M sprs4	=	op4
0001662C                            	spAttackRt	$08, $1F, $1F, $1F
0001662C =00000008                M spar1	=	op1
0001662C =0000001F                M spar2	=	op2
0001662C =0000001F                M spar3	=	op3
0001662C =0000001F                M spar4	=	op4
0001662C                            	spAmpMod	$00, $00, $00, $00
0001662C =00000000                M spam1	=	op1
0001662C =00000000                M spam2	=	op2
0001662C =00000000                M spam3	=	op3
0001662C =00000000                M spam4	=	op4
0001662C                            	spSustainRt	$02, $14, $02, $03
0001662C =00000002                M spsr1	=	op1
0001662C =00000014                M spsr2	=	op2
0001662C =00000002                M spsr3	=	op3
0001662C =00000003                M spsr4	=	op4
0001662C                            	spSustainLv	$01, $04, $03, $04
0001662C =00000001                M spsl1	=	op1
0001662C =00000004                M spsl2	=	op2
0001662C =00000003                M spsl3	=	op3
0001662C =00000004                M spsl4	=	op4
0001662C                            	spDecayRt	$0A, $00, $08, $07
0001662C =0000000A                M spdr1	=	op1
0001662C =00000000                M spdr2	=	op2
0001662C =00000008                M spdr3	=	op3
0001662C =00000007                M spdr4	=	op4
0001662C                            	spReleaseRt	$0F, $0F, $0F, $0F
0001662C =0000000F                M sprr1	=	op1
0001662C =0000000F                M sprr2	=	op2
0001662C =0000000F                M sprr3	=	op3
0001662C =0000000F                M sprr4	=	op4
0001662C                            	spSSGEG		$00, $00, $00, $00
0001662C =00000000                M spss1	=	op1
0001662C =00000000                M spss2	=	op2
0001662C =00000000                M spss3	=	op3
0001662C =00000000                M spss4	=	op4
0001662C                            	spTotalLv	$03, $04, $04, $06
0001662C =00000003                M sptl1	=	op1
0001662C =00000004                M sptl2	=	op2
0001662C =00000004                M sptl3	=	op3
0001662C =00000006                M sptl4	=	op4
0001662C 1C                       M 	dc.b	(spfe<<3)+spal
0001662D =00000080                M sptlmask4	set	$80
0001662D =00000000                M sptlmask2	set	((spal>=5)<<7)
0001662D =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
0001662D =00000000                M sptlmask1	set	((spal=7)<<7)
0001662D 4175 7039                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00016631 081F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00016635 0202 1403                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00016639 0A08 0007                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001663D 1F3F 4F4F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00016641 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00016645 0384 0486                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00016649 4E41 54                  M 	dc.b	'NAT'
0001664C                            
0001664C                            	; Patch $07
0001664C                            	; $7A
0001664C                            	; $71, $3D, $70, $72,	$1F, $1F, $1F, $1F
0001664C                            	; $09, $14, $16, $0C,	$01, $01, $0A, $02
0001664C                            	; $5A, $6A, $8A, $5A,	$02, $01, $00, $80
0001664C                            	spAlgorithm	$02
0001664C =00000008                M spatnum	=	spatnum+1
0001664C =00000002                M spal	=	val
0001664C                            	spFeedback	$07
0001664C =00000007                M spfe	=	val
0001664C                            	spDetune	$07, $07, $03, $07
0001664C =00000007                M spde1	=	op1
0001664C =00000007                M spde2	=	op2
0001664C =00000003                M spde3	=	op3
0001664C =00000007                M spde4	=	op4
0001664C                            	spMultiple	$01, $00, $0D, $02
0001664C =00000001                M spmu1	=	op1
0001664C =00000000                M spmu2	=	op2
0001664C =0000000D                M spmu3	=	op3
0001664C =00000002                M spmu4	=	op4
0001664C                            	spRateScale	$00, $00, $00, $00
0001664C =00000000                M sprs1	=	op1
0001664C =00000000                M sprs2	=	op2
0001664C =00000000                M sprs3	=	op3
0001664C =00000000                M sprs4	=	op4
0001664C                            	spAttackRt	$1F, $1F, $1F, $1F
0001664C =0000001F                M spar1	=	op1
0001664C =0000001F                M spar2	=	op2
0001664C =0000001F                M spar3	=	op3
0001664C =0000001F                M spar4	=	op4
0001664C                            	spAmpMod	$00, $00, $00, $00
0001664C =00000000                M spam1	=	op1
0001664C =00000000                M spam2	=	op2
0001664C =00000000                M spam3	=	op3
0001664C =00000000                M spam4	=	op4
0001664C                            	spSustainRt	$09, $16, $14, $0C
0001664C =00000009                M spsr1	=	op1
0001664C =00000016                M spsr2	=	op2
0001664C =00000014                M spsr3	=	op3
0001664C =0000000C                M spsr4	=	op4
0001664C                            	spSustainLv	$05, $08, $06, $05
0001664C =00000005                M spsl1	=	op1
0001664C =00000008                M spsl2	=	op2
0001664C =00000006                M spsl3	=	op3
0001664C =00000005                M spsl4	=	op4
0001664C                            	spDecayRt	$01, $0A, $01, $02
0001664C =00000001                M spdr1	=	op1
0001664C =0000000A                M spdr2	=	op2
0001664C =00000001                M spdr3	=	op3
0001664C =00000002                M spdr4	=	op4
0001664C                            	spReleaseRt	$0A, $0A, $0A, $0A
0001664C =0000000A                M sprr1	=	op1
0001664C =0000000A                M sprr2	=	op2
0001664C =0000000A                M sprr3	=	op3
0001664C =0000000A                M sprr4	=	op4
0001664C                            	spSSGEG		$00, $00, $00, $00
0001664C =00000000                M spss1	=	op1
0001664C =00000000                M spss2	=	op2
0001664C =00000000                M spss3	=	op3
0001664C =00000000                M spss4	=	op4
0001664C                            	spTotalLv	$02, $00, $01, $00
0001664C =00000002                M sptl1	=	op1
0001664C =00000000                M sptl2	=	op2
0001664C =00000001                M sptl3	=	op3
0001664C =00000000                M sptl4	=	op4
0001664C 3A                       M 	dc.b	(spfe<<3)+spal
0001664D =00000080                M sptlmask4	set	$80
0001664D =00000000                M sptlmask2	set	((spal>=5)<<7)
0001664D =00000000                M sptlmask3	set	((spal>=4)<<7)
0001664D =00000000                M sptlmask1	set	((spal=7)<<7)
0001664D 713D 7072                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00016651 1F1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00016655 0914 160C                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00016659 0101 0A02                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001665D 5A6A 8A5A                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00016661 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00016665 0201 0080                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00016669 4E41 54                  M 	dc.b	'NAT'
0001666C                            
0001666C                            	; Patch $08
0001666C                            	; $20
0001666C                            	; $00, $01, $13, $02,	$11, $10, $11, $1F
0001666C                            	; $00, $11, $00, $00,	$00, $00, $00, $09
0001666C                            	; $0F, $FF, $FF, $0F,	$1A, $10, $1A, $80
0001666C                            	spAlgorithm	$00
0001666C =00000009                M spatnum	=	spatnum+1
0001666C =00000000                M spal	=	val
0001666C                            	spFeedback	$04
0001666C =00000004                M spfe	=	val
0001666C                            	spDetune	$00, $01, $00, $00
0001666C =00000000                M spde1	=	op1
0001666C =00000001                M spde2	=	op2
0001666C =00000000                M spde3	=	op3
0001666C =00000000                M spde4	=	op4
0001666C                            	spMultiple	$00, $03, $01, $02
0001666C =00000000                M spmu1	=	op1
0001666C =00000003                M spmu2	=	op2
0001666C =00000001                M spmu3	=	op3
0001666C =00000002                M spmu4	=	op4
0001666C                            	spRateScale	$00, $00, $00, $00
0001666C =00000000                M sprs1	=	op1
0001666C =00000000                M sprs2	=	op2
0001666C =00000000                M sprs3	=	op3
0001666C =00000000                M sprs4	=	op4
0001666C                            	spAttackRt	$11, $11, $10, $1F
0001666C =00000011                M spar1	=	op1
0001666C =00000011                M spar2	=	op2
0001666C =00000010                M spar3	=	op3
0001666C =0000001F                M spar4	=	op4
0001666C                            	spAmpMod	$00, $00, $00, $00
0001666C =00000000                M spam1	=	op1
0001666C =00000000                M spam2	=	op2
0001666C =00000000                M spam3	=	op3
0001666C =00000000                M spam4	=	op4
0001666C                            	spSustainRt	$00, $00, $11, $00
0001666C =00000000                M spsr1	=	op1
0001666C =00000000                M spsr2	=	op2
0001666C =00000011                M spsr3	=	op3
0001666C =00000000                M spsr4	=	op4
0001666C                            	spSustainLv	$00, $0F, $0F, $00
0001666C =00000000                M spsl1	=	op1
0001666C =0000000F                M spsl2	=	op2
0001666C =0000000F                M spsl3	=	op3
0001666C =00000000                M spsl4	=	op4
0001666C                            	spDecayRt	$00, $00, $00, $09
0001666C =00000000                M spdr1	=	op1
0001666C =00000000                M spdr2	=	op2
0001666C =00000000                M spdr3	=	op3
0001666C =00000009                M spdr4	=	op4
0001666C                            	spReleaseRt	$0F, $0F, $0F, $0F
0001666C =0000000F                M sprr1	=	op1
0001666C =0000000F                M sprr2	=	op2
0001666C =0000000F                M sprr3	=	op3
0001666C =0000000F                M sprr4	=	op4
0001666C                            	spSSGEG		$00, $00, $00, $00
0001666C =00000000                M spss1	=	op1
0001666C =00000000                M spss2	=	op2
0001666C =00000000                M spss3	=	op3
0001666C =00000000                M spss4	=	op4
0001666C                            	spTotalLv	$1A, $1A, $10, $00
0001666C =0000001A                M sptl1	=	op1
0001666C =0000001A                M sptl2	=	op2
0001666C =00000010                M sptl3	=	op3
0001666C =00000000                M sptl4	=	op4
0001666C 20                       M 	dc.b	(spfe<<3)+spal
0001666D =00000080                M sptlmask4	set	$80
0001666D =00000000                M sptlmask2	set	((spal>=5)<<7)
0001666D =00000000                M sptlmask3	set	((spal>=4)<<7)
0001666D =00000000                M sptlmask1	set	((spal=7)<<7)
0001666D 0001 1302                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00016671 1110 111F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00016675 0011 0000                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00016679 0000 0009                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001667D 0FFF FF0F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00016681 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00016685 1A10 1A80                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00016689 4E41 54                  M 	dc.b	'NAT'
0001668C                            
0001668C                            	; Patch $09
0001668C                            	; $31
0001668C                            	; $03, $3C, $07, $01,	$2F, $2F, $27, $2C
0001668C                            	; $06, $02, $00, $02,	$00, $00, $00, $00
0001668C                            	; $0A, $0A, $0A, $0A,	$10, $30, $29, $86
0001668C                            	spAlgorithm	$01
0001668C =0000000A                M spatnum	=	spatnum+1
0001668C =00000001                M spal	=	val
0001668C                            	spFeedback	$06
0001668C =00000006                M spfe	=	val
0001668C                            	spDetune	$00, $00, $03, $00
0001668C =00000000                M spde1	=	op1
0001668C =00000000                M spde2	=	op2
0001668C =00000003                M spde3	=	op3
0001668C =00000000                M spde4	=	op4
0001668C                            	spMultiple	$03, $07, $0C, $01
0001668C =00000003                M spmu1	=	op1
0001668C =00000007                M spmu2	=	op2
0001668C =0000000C                M spmu3	=	op3
0001668C =00000001                M spmu4	=	op4
0001668C                            	spRateScale	$00, $00, $00, $00
0001668C =00000000                M sprs1	=	op1
0001668C =00000000                M sprs2	=	op2
0001668C =00000000                M sprs3	=	op3
0001668C =00000000                M sprs4	=	op4
0001668C                            	spAttackRt	$0F, $07, $0F, $0C
0001668C =0000000F                M spar1	=	op1
0001668C =00000007                M spar2	=	op2
0001668C =0000000F                M spar3	=	op3
0001668C =0000000C                M spar4	=	op4
0001668C                            	spAmpMod	$00, $00, $00, $00
0001668C =00000000                M spam1	=	op1
0001668C =00000000                M spam2	=	op2
0001668C =00000000                M spam3	=	op3
0001668C =00000000                M spam4	=	op4
0001668C                            	spSustainRt	$06, $00, $02, $02
0001668C =00000006                M spsr1	=	op1
0001668C =00000000                M spsr2	=	op2
0001668C =00000002                M spsr3	=	op3
0001668C =00000002                M spsr4	=	op4
0001668C                            	spSustainLv	$00, $00, $00, $00
0001668C =00000000                M spsl1	=	op1
0001668C =00000000                M spsl2	=	op2
0001668C =00000000                M spsl3	=	op3
0001668C =00000000                M spsl4	=	op4
0001668C                            	spDecayRt	$00, $00, $00, $00
0001668C =00000000                M spdr1	=	op1
0001668C =00000000                M spdr2	=	op2
0001668C =00000000                M spdr3	=	op3
0001668C =00000000                M spdr4	=	op4
0001668C                            	spReleaseRt	$0A, $0A, $0A, $0A
0001668C =0000000A                M sprr1	=	op1
0001668C =0000000A                M sprr2	=	op2
0001668C =0000000A                M sprr3	=	op3
0001668C =0000000A                M sprr4	=	op4
0001668C                            	spSSGEG		$00, $00, $00, $00
0001668C =00000000                M spss1	=	op1
0001668C =00000000                M spss2	=	op2
0001668C =00000000                M spss3	=	op3
0001668C =00000000                M spss4	=	op4
0001668C                            	spTotalLv	$10, $29, $30, $06
0001668C =00000010                M sptl1	=	op1
0001668C =00000029                M sptl2	=	op2
0001668C =00000030                M sptl3	=	op3
0001668C =00000006                M sptl4	=	op4
0001668C 31                       M 	dc.b	(spfe<<3)+spal
0001668D =00000080                M sptlmask4	set	$80
0001668D =00000000                M sptlmask2	set	((spal>=5)<<7)
0001668D =00000000                M sptlmask3	set	((spal>=4)<<7)
0001668D =00000000                M sptlmask1	set	((spal=7)<<7)
0001668D 033C 0701                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00016691 0F0F 070C                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00016695 0602 0002                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00016699 0000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001669D 0A0A 0A0A                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
000166A1 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
000166A5 1030 2986                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
000166A9 4E41 54                  M 	dc.b	'NAT'
000166AC                            
000166AC                            	; Patch $0A
000166AC                            	; $3B
000166AC                            	; $03, $3C, $05, $08,	$13, $24, $2F, $34
000166AC                            	; $06, $02, $0A, $08,	$00, $00, $00, $00
000166AC                            	; $0A, $0A, $19, $39,	$14, $31, $27, $87
000166AC                            	spAlgorithm	$03
000166AC =0000000B                M spatnum	=	spatnum+1
000166AC =00000003                M spal	=	val
000166AC                            	spFeedback	$07
000166AC =00000007                M spfe	=	val
000166AC                            	spDetune	$00, $00, $03, $00
000166AC =00000000                M spde1	=	op1
000166AC =00000000                M spde2	=	op2
000166AC =00000003                M spde3	=	op3
000166AC =00000000                M spde4	=	op4
000166AC                            	spMultiple	$03, $05, $0C, $08
000166AC =00000003                M spmu1	=	op1
000166AC =00000005                M spmu2	=	op2
000166AC =0000000C                M spmu3	=	op3
000166AC =00000008                M spmu4	=	op4
000166AC                            	spRateScale	$00, $00, $00, $00
000166AC =00000000                M sprs1	=	op1
000166AC =00000000                M sprs2	=	op2
000166AC =00000000                M sprs3	=	op3
000166AC =00000000                M sprs4	=	op4
000166AC                            	spAttackRt	$13, $0F, $04, $14
000166AC =00000013                M spar1	=	op1
000166AC =0000000F                M spar2	=	op2
000166AC =00000004                M spar3	=	op3
000166AC =00000014                M spar4	=	op4
000166AC                            	spAmpMod	$00, $00, $00, $00
000166AC =00000000                M spam1	=	op1
000166AC =00000000                M spam2	=	op2
000166AC =00000000                M spam3	=	op3
000166AC =00000000                M spam4	=	op4
000166AC                            	spSustainRt	$06, $0A, $02, $08
000166AC =00000006                M spsr1	=	op1
000166AC =0000000A                M spsr2	=	op2
000166AC =00000002                M spsr3	=	op3
000166AC =00000008                M spsr4	=	op4
000166AC                            	spSustainLv	$00, $01, $00, $03
000166AC =00000000                M spsl1	=	op1
000166AC =00000001                M spsl2	=	op2
000166AC =00000000                M spsl3	=	op3
000166AC =00000003                M spsl4	=	op4
000166AC                            	spDecayRt	$00, $00, $00, $00
000166AC =00000000                M spdr1	=	op1
000166AC =00000000                M spdr2	=	op2
000166AC =00000000                M spdr3	=	op3
000166AC =00000000                M spdr4	=	op4
000166AC                            	spReleaseRt	$0A, $09, $0A, $09
000166AC =0000000A                M sprr1	=	op1
000166AC =00000009                M sprr2	=	op2
000166AC =0000000A                M sprr3	=	op3
000166AC =00000009                M sprr4	=	op4
000166AC                            	spSSGEG		$00, $00, $00, $00
000166AC =00000000                M spss1	=	op1
000166AC =00000000                M spss2	=	op2
000166AC =00000000                M spss3	=	op3
000166AC =00000000                M spss4	=	op4
000166AC                            	spTotalLv	$14, $27, $31, $07
000166AC =00000014                M sptl1	=	op1
000166AC =00000027                M sptl2	=	op2
000166AC =00000031                M sptl3	=	op3
000166AC =00000007                M sptl4	=	op4
000166AC 3B                       M 	dc.b	(spfe<<3)+spal
000166AD =00000080                M sptlmask4	set	$80
000166AD =00000000                M sptlmask2	set	((spal>=5)<<7)
000166AD =00000000                M sptlmask3	set	((spal>=4)<<7)
000166AD =00000000                M sptlmask1	set	((spal=7)<<7)
000166AD 033C 0508                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
000166B1 1304 0F14                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
000166B5 0602 0A08                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
000166B9 0000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
000166BD 0A0A 1939                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
000166C1 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
000166C5 1431 2787                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
000166C9 4E41 54                  M 	dc.b	'NAT'
000166CC                            
000166CC                            	; Patch $0B
000166CC                            	; $31
000166CC                            	; $71, $31, $21, $70,	$14, $13, $14, $13
000166CC                            	; $01, $07, $07, $04,	$0B, $0A, $07, $0A
000166CC                            	; $0B, $0C, $06, $0B,	$13, $08, $1E, $80
000166CC                            	spAlgorithm	$01
000166CC =0000000C                M spatnum	=	spatnum+1
000166CC =00000001                M spal	=	val
000166CC                            	spFeedback	$06
000166CC =00000006                M spfe	=	val
000166CC                            	spDetune	$07, $02, $03, $07
000166CC =00000007                M spde1	=	op1
000166CC =00000002                M spde2	=	op2
000166CC =00000003                M spde3	=	op3
000166CC =00000007                M spde4	=	op4
000166CC                            	spMultiple	$01, $01, $01, $00
000166CC =00000001                M spmu1	=	op1
000166CC =00000001                M spmu2	=	op2
000166CC =00000001                M spmu3	=	op3
000166CC =00000000                M spmu4	=	op4
000166CC                            	spRateScale	$00, $00, $00, $00
000166CC =00000000                M sprs1	=	op1
000166CC =00000000                M sprs2	=	op2
000166CC =00000000                M sprs3	=	op3
000166CC =00000000                M sprs4	=	op4
000166CC                            	spAttackRt	$14, $14, $13, $13
000166CC =00000014                M spar1	=	op1
000166CC =00000014                M spar2	=	op2
000166CC =00000013                M spar3	=	op3
000166CC =00000013                M spar4	=	op4
000166CC                            	spAmpMod	$00, $00, $00, $00
000166CC =00000000                M spam1	=	op1
000166CC =00000000                M spam2	=	op2
000166CC =00000000                M spam3	=	op3
000166CC =00000000                M spam4	=	op4
000166CC                            	spSustainRt	$01, $07, $07, $04
000166CC =00000001                M spsr1	=	op1
000166CC =00000007                M spsr2	=	op2
000166CC =00000007                M spsr3	=	op3
000166CC =00000004                M spsr4	=	op4
000166CC                            	spSustainLv	$00, $00, $00, $00
000166CC =00000000                M spsl1	=	op1
000166CC =00000000                M spsl2	=	op2
000166CC =00000000                M spsl3	=	op3
000166CC =00000000                M spsl4	=	op4
000166CC                            	spDecayRt	$0B, $07, $0A, $0A
000166CC =0000000B                M spdr1	=	op1
000166CC =00000007                M spdr2	=	op2
000166CC =0000000A                M spdr3	=	op3
000166CC =0000000A                M spdr4	=	op4
000166CC                            	spReleaseRt	$0B, $06, $0C, $0B
000166CC =0000000B                M sprr1	=	op1
000166CC =00000006                M sprr2	=	op2
000166CC =0000000C                M sprr3	=	op3
000166CC =0000000B                M sprr4	=	op4
000166CC                            	spSSGEG		$00, $00, $00, $00
000166CC =00000000                M spss1	=	op1
000166CC =00000000                M spss2	=	op2
000166CC =00000000                M spss3	=	op3
000166CC =00000000                M spss4	=	op4
000166CC                            	spTotalLv	$13, $1E, $08, $00
000166CC =00000013                M sptl1	=	op1
000166CC =0000001E                M sptl2	=	op2
000166CC =00000008                M sptl3	=	op3
000166CC =00000000                M sptl4	=	op4
000166CC 31                       M 	dc.b	(spfe<<3)+spal
000166CD =00000080                M sptlmask4	set	$80
000166CD =00000000                M sptlmask2	set	((spal>=5)<<7)
000166CD =00000000                M sptlmask3	set	((spal>=4)<<7)
000166CD =00000000                M sptlmask1	set	((spal=7)<<7)
000166CD 7131 2170                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
000166D1 1413 1413                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
000166D5 0107 0704                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
000166D9 0B0A 070A                M 	dc.b	spdr1,spdr3,spdr2,spdr4
000166DD 0B0C 060B                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
000166E1 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
000166E5 1308 1E80                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
000166E9 4E41 54                  M 	dc.b	'NAT'
000166EC                            
000166EC                            	; Patch $0C
000166EC                            	; $0C
000166EC                            	; $73, $3A, $49, $32,	$18, $1D, $1E, $1F
000166EC                            	; $0D, $14, $13, $18,	$0C, $0B, $05, $04
000166EC                            	; $0F, $0F, $0F, $0F,	$02, $86, $12, $86
000166EC                            	spAlgorithm	$04
000166EC =0000000D                M spatnum	=	spatnum+1
000166EC =00000004                M spal	=	val
000166EC                            	spFeedback	$01
000166EC =00000001                M spfe	=	val
000166EC                            	spDetune	$07, $04, $03, $03
000166EC =00000007                M spde1	=	op1
000166EC =00000004                M spde2	=	op2
000166EC =00000003                M spde3	=	op3
000166EC =00000003                M spde4	=	op4
000166EC                            	spMultiple	$03, $09, $0A, $02
000166EC =00000003                M spmu1	=	op1
000166EC =00000009                M spmu2	=	op2
000166EC =0000000A                M spmu3	=	op3
000166EC =00000002                M spmu4	=	op4
000166EC                            	spRateScale	$00, $00, $00, $00
000166EC =00000000                M sprs1	=	op1
000166EC =00000000                M sprs2	=	op2
000166EC =00000000                M sprs3	=	op3
000166EC =00000000                M sprs4	=	op4
000166EC                            	spAttackRt	$18, $1E, $1D, $1F
000166EC =00000018                M spar1	=	op1
000166EC =0000001E                M spar2	=	op2
000166EC =0000001D                M spar3	=	op3
000166EC =0000001F                M spar4	=	op4
000166EC                            	spAmpMod	$00, $00, $00, $00
000166EC =00000000                M spam1	=	op1
000166EC =00000000                M spam2	=	op2
000166EC =00000000                M spam3	=	op3
000166EC =00000000                M spam4	=	op4
000166EC                            	spSustainRt	$0D, $13, $14, $18
000166EC =0000000D                M spsr1	=	op1
000166EC =00000013                M spsr2	=	op2
000166EC =00000014                M spsr3	=	op3
000166EC =00000018                M spsr4	=	op4
000166EC                            	spSustainLv	$00, $00, $00, $00
000166EC =00000000                M spsl1	=	op1
000166EC =00000000                M spsl2	=	op2
000166EC =00000000                M spsl3	=	op3
000166EC =00000000                M spsl4	=	op4
000166EC                            	spDecayRt	$0C, $05, $0B, $04
000166EC =0000000C                M spdr1	=	op1
000166EC =00000005                M spdr2	=	op2
000166EC =0000000B                M spdr3	=	op3
000166EC =00000004                M spdr4	=	op4
000166EC                            	spReleaseRt	$0F, $0F, $0F, $0F
000166EC =0000000F                M sprr1	=	op1
000166EC =0000000F                M sprr2	=	op2
000166EC =0000000F                M sprr3	=	op3
000166EC =0000000F                M sprr4	=	op4
000166EC                            	spSSGEG		$00, $00, $00, $00
000166EC =00000000                M spss1	=	op1
000166EC =00000000                M spss2	=	op2
000166EC =00000000                M spss3	=	op3
000166EC =00000000                M spss4	=	op4
000166EC                            	spTotalLv	$02, $12, $06, $06
000166EC =00000002                M sptl1	=	op1
000166EC =00000012                M sptl2	=	op2
000166EC =00000006                M sptl3	=	op3
000166EC =00000006                M sptl4	=	op4
000166EC 0C                       M 	dc.b	(spfe<<3)+spal
000166ED =00000080                M sptlmask4	set	$80
000166ED =00000000                M sptlmask2	set	((spal>=5)<<7)
000166ED =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
000166ED =00000000                M sptlmask1	set	((spal=7)<<7)
000166ED 733A 4932                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
000166F1 181D 1E1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
000166F5 0D14 1318                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
000166F9 0C0B 0504                M 	dc.b	spdr1,spdr3,spdr2,spdr4
000166FD 0F0F 0F0F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00016701 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00016705 0286 1286                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00016709 4E41 54                  M 	dc.b	'NAT'
0001670C                            
0001670C                            Pray_FM1:
0001670C                            	sPan		spCentre, $00
0001670C E0C0                     M 	dc.b	$e0,spcentre|$00
0001670E                            ;	saTempoPAL	$1B-$15
0001670E                            	;sNoteTimeIn	$00
0001670E                            	ssMod68k	$01, $01, $00, $00
0001670E F001 0100 00             M 	dc.b	$f0,$01,$01,$00,$00
00016713                            	sNoteTimeOut	$03
00016713 FD03                     M 	dc.b	$fd,$03
00016715                            	sVoice		$04
00016715 E804                     M 	dc.b	$e8,$04
00016717                            
00016717                            Pray_Loop22:
00016717                            	sCall		Pray_Call7
00016717 F8                       M 	dc.b	$f8
00016718 0000                     M 	dc.w	pray_call7-*-1
0001671A                            	sLoop		$00, $03, Pray_Loop22
0001671A F700                     M 	dc.b	$f7,$00
0001671C FFFA                     M 	dc.w	pray_loop22-*-1
0001671E 03                       M 	dc.b	$03
0001671F A00C ACA9 A5AF A308        	dc.b nG2, $0C, nG3, nE3, nC3, nBb3, nBb2, $08
00016727 B40C A804 B608 AA04        	dc.b nEb4, $0C, nEb3, $04, nF4, $08, nF3, $04
0001672F 8030 80                    	dc.b nRst, $30, nRst
00016732                            
00016732                            Pray_Cond8:
00016732                            	sNoteTimeOut	$03
00016732 FD03                     M 	dc.b	$fd,$03
00016734                            	sVoice		$04
00016734 E804                     M 	dc.b	$e8,$04
00016736                            	;sPanAni		$01, $02, $03, $06, $03
00016736                            
00016736                            Pray_Jump8:
00016736                            	sCall		Pray_Call7
00016736 F8                       M 	dc.b	$f8
00016737 0000                     M 	dc.w	pray_call7-*-1
00016739                            	sJump		Pray_Jump8
00016739 F6                       M 	dc.b	$f6
0001673A FFFB                     M 	dc.w	pray_jump8-*-1
0001673C                            
0001673C                            Pray_FM2:
0001673C                            	sPan		spLeft, $00
0001673C E080                     M 	dc.b	$e0,spleft|$00
0001673E                            	ssMod68k	$01, $01, $00, $00
0001673E F001 0100 00             M 	dc.b	$f0,$01,$01,$00,$00
00016743                            	sPan		spCenter, $00
00016743 E0C0                     M 	dc.b	$e0,spcenter|$00
00016745                            	sVoice		$04
00016745 E804                     M 	dc.b	$e8,$04
00016747                            	sNoteTimeOut	$03
00016747 FD03                     M 	dc.b	$fd,$03
00016749                            
00016749                            Pray_Loop20:
00016749                            	sCall		Pray_Call5
00016749 F8                       M 	dc.b	$f8
0001674A 0000                     M 	dc.w	pray_call5-*-1
0001674C                            	sLoop		$00, $03, Pray_Loop20
0001674C F700                     M 	dc.b	$f7,$00
0001674E FFFA                     M 	dc.w	pray_loop20-*-1
00016750 03                       M 	dc.b	$03
00016751 A90C B5B1 ACB8 0CAC        	dc.b nE3, $0C, nE4, nC4, nG3, nG4, $0C, nG3
00016759 08BB 0CAF 04BD 08B1        	dc.b $08, nBb4, $0C, nBb3, $04, nC5, $08, nC4
00016761 0480 3080                  	dc.b $04, nRst, $30, nRst
00016765                            
00016765                            Pray_Cond7:
00016765                            	;sPanAni		$01, $02, $01, $06, $03
00016765                            	sVoice		$04
00016765 E804                     M 	dc.b	$e8,$04
00016767                            	sNoteTimeOut	$03
00016767 FD03                     M 	dc.b	$fd,$03
00016769                            
00016769                            Pray_Jump7:
00016769                            	sCall		Pray_Call5
00016769 F8                       M 	dc.b	$f8
0001676A 0000                     M 	dc.w	pray_call5-*-1
0001676C                            	sJump		Pray_Jump7
0001676C F6                       M 	dc.b	$f6
0001676D FFFB                     M 	dc.w	pray_jump7-*-1
0001676F                            
0001676F                            Pray_FM3:
0001676F                            	sPan		spCentre, $00
0001676F E0C0                     M 	dc.b	$e0,spcentre|$00
00016771                            	ssMod68k	$01, $01, $00, $00
00016771 F001 0100 00             M 	dc.b	$f0,$01,$01,$00,$00
00016776                            ;	saVol		$04
00016776                            	sPan		spCenter, $00
00016776 E0C0                     M 	dc.b	$e0,spcenter|$00
00016778                            	sVoice		$04
00016778 E804                     M 	dc.b	$e8,$04
0001677A                            	sNoteTimeOut	$03
0001677A FD03                     M 	dc.b	$fd,$03
0001677C                            
0001677C                            	sCall		Pray_Call1
0001677C F8                       M 	dc.b	$f8
0001677D 0000                     M 	dc.w	pray_call1-*-1
0001677F A50C B1AC A9B4 0CA8        	dc.b nC3, $0C, nC4, nG3, nE3, nEb4, $0C, nEb3
00016787 08B8 0CAC 04BB 08AF        	dc.b $08, nG4, $0C, nG3, $04, nBb4, $08, nBb3
0001678F 04A5 0CB1 08A5 0CB1        	dc.b $04, nC3, $0C, nC4, $08, nC3, $0C, nC4
00016797 04A5 0CB4 08A8 0CC0        	dc.b $04, nC3, $0C, nEb4, $08, nEb3, $0C, nEb5
0001679F 04                         	dc.b $04
000167A0                            	sNoteTimeOut	$00
000167A0 FD00                     M 	dc.b	$fd,$00
000167A2                            	sVoice		$05
000167A2 E805                     M 	dc.b	$e8,$05
000167A4                            	ssMod68k	$0F, $01, $07, $03
000167A4 F00F 0107 03             M 	dc.b	$f0,$0f,$01,$07,$03
000167A9                            	sPan		spLeft, $00
000167A9 E080                     M 	dc.b	$e0,spleft|$00
000167AB                            	saTranspose	$0C
000167AB E40C                     M 	dc.b	$e4,$0c
000167AD                            	sCall		Pray_Call2
000167AD F8                       M 	dc.b	$f8
000167AE 0000                     M 	dc.w	pray_call2-*-1
000167B0 C930 E730 E730 E730        	dc.b nC6, $30, sHold, $30, sHold, $30, sHold, $30
000167B8 E730 E730 8030 80          	dc.b sHold, $30, sHold, $30, nRst, $30, nRst
000167BF                            	saTranspose	$F4
000167BF E4F4                     M 	dc.b	$e4,$f4
000167C1                            	sPan		spCenter, $00
000167C1 E0C0                     M 	dc.b	$e0,spcenter|$00
000167C3                            	ssMod68k	$01, $01, $00, $00
000167C3 F001 0100 00             M 	dc.b	$f0,$01,$01,$00,$00
000167C8                            
000167C8                            Pray_Cond6:
000167C8                            	saVol		$FC
000167C8 EDFC                     M 	dc.b	$ed,$fc
000167CA                            	saTranspose	$F4
000167CA E4F4                     M 	dc.b	$e4,$f4
000167CC                            
000167CC                            Pray_Loop15:
000167CC                            Pray_Jump6:
000167CC                            	sVoice		$00
000167CC E800                     M 	dc.b	$e8,$00
000167CE                            	sCall		Pray_Call9
000167CE F8                       M 	dc.b	$f8
000167CF 0000                     M 	dc.w	pray_call9-*-1
000167D1 A3A4                       	dc.b nBb2, nB2
000167D3                            	sLoop		$00, $03, Pray_Loop15
000167D3 F700                     M 	dc.b	$f7,$00
000167D5 FFF6                     M 	dc.w	pray_loop15-*-1
000167D7 03                       M 	dc.b	$03
000167D8                            	sCall		Pray_Call9
000167D8 F8                       M 	dc.b	$f8
000167D9 0000                     M 	dc.w	pray_call9-*-1
000167DB                            	;sNoteTimeIn	$01
000167DB A508 AA04 A908 A504        	dc.b nC3, $08, nF3, $04, nE3, $08, nC3, $04
000167E3                            	;sNoteTimeIn	$00
000167E3                            	sJump		Pray_Jump6
000167E3 F6                       M 	dc.b	$f6
000167E4 FFE7                     M 	dc.w	pray_jump6-*-1
000167E6                            
000167E6                            Pray_FM4:
000167E6                            	sPan		spCentre, $00
000167E6 E0C0                     M 	dc.b	$e0,spcentre|$00
000167E8                            ;	saVol		$08
000167E8                            	;sPanAni		$00
000167E8                            	sNoteTimeOut	$03
000167E8 FD03                     M 	dc.b	$fd,$03
000167EA                            	sVoice		$04
000167EA E804                     M 	dc.b	$e8,$04
000167EC                            	sPan		spLeft, $00
000167EC E080                     M 	dc.b	$e0,spleft|$00
000167EE                            	saVol		$0C
000167EE ED0C                     M 	dc.b	$ed,$0c
000167F0 8009                       	dc.b nRst, $09
000167F2                            	sCall		Pray_Call7
000167F2 F8                       M 	dc.b	$f8
000167F3 0000                     M 	dc.w	pray_call7-*-1
000167F5                            	sCall		Pray_Call7
000167F5 F8                       M 	dc.b	$f8
000167F6 0000                     M 	dc.w	pray_call7-*-1
000167F8                            	saVol		$F4
000167F8 EDF4                     M 	dc.b	$ed,$f4
000167FA                            	sNoteTimeOut	$00
000167FA FD00                     M 	dc.b	$fd,$00
000167FC                            	sPan		spCenter, $00
000167FC E0C0                     M 	dc.b	$e0,spcenter|$00
000167FE                            	sVoice		$03
000167FE E803                     M 	dc.b	$e8,$03
00016800 8003                       	dc.b nRst, $03
00016802                            	sCall		Pray_Call8
00016802 F8                       M 	dc.b	$f8
00016803 0000                     M 	dc.w	pray_call8-*-1
00016805 800C                       	dc.b nRst, $0C
00016807                            	sCall		Pray_Call8
00016807 F8                       M 	dc.b	$f8
00016808 0000                     M 	dc.w	pray_call8-*-1
0001680A                            
0001680A                            Pray_Cond5:
0001680A                            Pray_Jump5:
0001680A                            	sVoice		$05
0001680A E805                     M 	dc.b	$e8,$05
0001680C B10C 8008 AC04 AF08        	dc.b nC4, $0C, nRst, $08, nG3, $04, nBb3, $08
00016814 B304 8008 B104 8008        	dc.b nD4, $04, nRst, $08, nC4, $04, nRst, $08
0001681C AC04 8008 AF04 8008        	dc.b nG3, $04, nRst, $08, nBb3, $04, nRst, $08
00016824 B304 B60C B580 08AC        	dc.b nD4, $04, nF4, $0C, nE4, nRst, $08, nG3
0001682C 04AF 08B3 0480 08B1        	dc.b $04, nBb3, $08, nD4, $04, nRst, $08, nC4
00016834 0480 08AC 0480 08AF        	dc.b $04, nRst, $08, nG3, $04, nRst, $08, nBb3
0001683C 0480 08B3 04BA 0CB8        	dc.b $04, nRst, $08, nD4, $04, nA4, $0C, nG4
00016844 8008 B104 B508 B804        	dc.b nRst, $08, nC4, $04, nE4, $08, nG4, $04
0001684C 8008 B604 8008 B304        	dc.b nRst, $08, nF4, $04, nRst, $08, nD4, $04
00016854 8008 B604 8008 BA04        	dc.b nRst, $08, nF4, $04, nRst, $08, nA4, $04
0001685C BD0C BB30 E718             	dc.b nC5, $0C, nBb4, $30, sHold, $18
00016862                            	sVoice		$03
00016862 E803                     M 	dc.b	$e8,$03
00016864                            	ssMod68k	$09, $01, $05, $03
00016864 F009 0105 03             M 	dc.b	$f0,$09,$01,$05,$03
00016869                            	saTranspose	$FB
00016869 E4FB                     M 	dc.b	$e4,$fb
0001686B                            	sCall		Pray_Call2
0001686B F8                       M 	dc.b	$f8
0001686C 0000                     M 	dc.w	pray_call2-*-1
0001686E                            	saTranspose	$05
0001686E E405                     M 	dc.b	$e4,$05
00016870 C430 E717 8001             	dc.b nG5, $30, sHold, $17, nRst, $01
00016876                            	;sNoteTimeIn	$01
00016876 C108 C204 C408 C204        	dc.b nE5, $08, nF5, $04, nG5, $08, nF5, $04
0001687E                            	;sNoteTimeIn	$00
0001687E                            	sNoteTimeOut	$00
0001687E FD00                     M 	dc.b	$fd,$00
00016880 C72F 8001 C605 8006        	dc.b nBb5, $2F, nRst, $01, nA5, $05, nRst, $06
00016888                            	saVol		$0A
00016888 ED0A                     M 	dc.b	$ed,$0a
0001688A                            	sPan		spRight, $00
0001688A E040                     M 	dc.b	$e0,spright|$00
0001688C C605 8004                  	dc.b nA5, $05, nRst, $04
00016890                            	saVol		$F6
00016890 EDF6                     M 	dc.b	$ed,$f6
00016892                            	sPan		spCenter, $00
00016892 E0C0                     M 	dc.b	$e0,spcenter|$00
00016894 C705 8006                  	dc.b nBb5, $05, nRst, $06
00016898                            	saVol		$0A
00016898 ED0A                     M 	dc.b	$ed,$0a
0001689A                            	sPan		spRight, $00
0001689A E040                     M 	dc.b	$e0,spright|$00
0001689C C705                       	dc.b nBb5, $05
0001689E                            	saVol		$F6
0001689E EDF6                     M 	dc.b	$ed,$f6
000168A0                            	sPan		spCenter, $00
000168A0 E0C0                     M 	dc.b	$e0,spcenter|$00
000168A2 C605 8006                  	dc.b nA5, $05, nRst, $06
000168A6                            	saVol		$0A
000168A6 ED0A                     M 	dc.b	$ed,$0a
000168A8                            	sPan		spRight, $00
000168A8 E040                     M 	dc.b	$e0,spright|$00
000168AA C601                       	dc.b nA5, $01
000168AC                            	saVol		$F6
000168AC EDF6                     M 	dc.b	$ed,$f6
000168AE                            	sPan		spCenter, $00
000168AE E0C0                     M 	dc.b	$e0,spcenter|$00
000168B0 C430 E730 E730 E730        	dc.b nG5, $30, sHold, $30, sHold, $30, sHold, $30
000168B8                            	ssMod68k	$01, $01, $00, $00
000168B8 F001 0100 00             M 	dc.b	$f0,$01,$01,$00,$00
000168BD                            	sJump		Pray_Jump5
000168BD F6                       M 	dc.b	$f6
000168BE FF4B                     M 	dc.w	pray_jump5-*-1
000168C0                            
000168C0                            Pray_FM5:
000168C0                            	sPan		spCenter, $00
000168C0 E0C0                     M 	dc.b	$e0,spcenter|$00
000168C2                            	;sPanAni		$00
000168C2                            	sNoteTimeOut	$03
000168C2 FD03                     M 	dc.b	$fd,$03
000168C4                            	sVoice		$04
000168C4 E804                     M 	dc.b	$e8,$04
000168C6                            	sPan		spRight, $00
000168C6 E040                     M 	dc.b	$e0,spright|$00
000168C8 8009                       	dc.b nRst, $09
000168CA                            	sCall		Pray_Call5
000168CA F8                       M 	dc.b	$f8
000168CB 0000                     M 	dc.w	pray_call5-*-1
000168CD                            	sCall		Pray_Call5
000168CD F8                       M 	dc.b	$f8
000168CE 0000                     M 	dc.w	pray_call5-*-1
000168D0                            	sPan		spCenter, $00
000168D0 E0C0                     M 	dc.b	$e0,spcenter|$00
000168D2                            	saVol		$F4
000168D2 EDF4                     M 	dc.b	$ed,$f4
000168D4                            	sNoteTimeOut	$00
000168D4 FD00                     M 	dc.b	$fd,$00
000168D6                            	sVoice		$03
000168D6 E803                     M 	dc.b	$e8,$03
000168D8 8003                       	dc.b nRst, $03
000168DA                            	sCall		Pray_Call6
000168DA F8                       M 	dc.b	$f8
000168DB 0000                     M 	dc.w	pray_call6-*-1
000168DD 800C                       	dc.b nRst, $0C
000168DF                            	sCall		Pray_Call6
000168DF F8                       M 	dc.b	$f8
000168E0 0000                     M 	dc.w	pray_call6-*-1
000168E2                            
000168E2                            Pray_Cond4:
000168E2                            Pray_Jump4:
000168E2                            	sVoice		$05
000168E2 E805                     M 	dc.b	$e8,$05
000168E4 8009                       	dc.b nRst, $09
000168E6                            	saVol		$0A
000168E6 ED0A                     M 	dc.b	$ed,$0a
000168E8                            	sPan		spLeft, $00
000168E8 E080                     M 	dc.b	$e0,spleft|$00
000168EA B10C 8008 AC04 AF08        	dc.b nC4, $0C, nRst, $08, nG3, $04, nBb3, $08
000168F2 B304 8008 B104 8008        	dc.b nD4, $04, nRst, $08, nC4, $04, nRst, $08
000168FA AC04 8008 AF04 8003        	dc.b nG3, $04, nRst, $08, nBb3, $04, nRst, $03
00016902                            	saVol		$F6
00016902 EDF6                     M 	dc.b	$ed,$f6
00016904                            	sPan		spCenter, $00
00016904 E0C0                     M 	dc.b	$e0,spcenter|$00
00016906 B30C B180 0880 09          	dc.b nD4, $0C, nC4, nRst, $08, nRst, $09
0001690D                            	saVol		$0A
0001690D ED0A                     M 	dc.b	$ed,$0a
0001690F                            	sPan		spLeft, $00
0001690F E080                     M 	dc.b	$e0,spleft|$00
00016911 AC04 AF08 B304 8008        	dc.b nG3, $04, nBb3, $08, nD4, $04, nRst, $08
00016919 B104 8008 AC04 8008        	dc.b nC4, $04, nRst, $08, nG3, $04, nRst, $08
00016921 AF04 8003                  	dc.b nBb3, $04, nRst, $03
00016925                            	saVol		$F6
00016925 EDF6                     M 	dc.b	$ed,$f6
00016927                            	sPan		spCenter, $00
00016927 E0C0                     M 	dc.b	$e0,spcenter|$00
00016929 B60C B580 0880 09          	dc.b nF4, $0C, nE4, nRst, $08, nRst, $09
00016930                            	saVol		$0A
00016930 ED0A                     M 	dc.b	$ed,$0a
00016932                            	sPan		spLeft, $00
00016932 E080                     M 	dc.b	$e0,spleft|$00
00016934 B104 B508 B804 8008        	dc.b nC4, $04, nE4, $08, nG4, $04, nRst, $08
0001693C B604 8008 B304 8008        	dc.b nF4, $04, nRst, $08, nD4, $04, nRst, $08
00016944 B604 8003                  	dc.b nF4, $04, nRst, $03
00016948                            	saVol		$F6
00016948 EDF6                     M 	dc.b	$ed,$f6
0001694A                            	sPan		spCenter, $00
0001694A E0C0                     M 	dc.b	$e0,spcenter|$00
0001694C BA0C B830 E718 8007        	dc.b nA4, $0C, nG4, $30, sHold, $18, nRst, $07
00016954                            	saVol		$0A
00016954 ED0A                     M 	dc.b	$ed,$0a
00016956                            	sPan		spRight, $00
00016956 E040                     M 	dc.b	$e0,spright|$00
00016958                            	sVoice		$03
00016958 E803                     M 	dc.b	$e8,$03
0001695A                            	saTranspose	$FB
0001695A E4FB                     M 	dc.b	$e4,$fb
0001695C                            	sCall		Pray_Call2
0001695C F8                       M 	dc.b	$f8
0001695D 0000                     M 	dc.w	pray_call2-*-1
0001695F                            	saTranspose	$05
0001695F E405                     M 	dc.b	$e4,$05
00016961 C430 E717 8001             	dc.b nG5, $30, sHold, $17, nRst, $01
00016967                            	;sNoteTimeIn	$01
00016967 C108 C204 C405             	dc.b nE5, $08, nF5, $04, nG5, $05
0001696D                            	;sNoteTimeIn	$00
0001696D                            	saVol		$F6
0001696D EDF6                     M 	dc.b	$ed,$f6
0001696F                            	sPan		spCenter, $00
0001696F E0C0                     M 	dc.b	$e0,spcenter|$00
00016971                            	sNoteTimeOut	$00
00016971 FD00                     M 	dc.b	$fd,$00
00016973 C22F 8001 C205 8006        	dc.b nF5, $2F, nRst, $01, nF5, $05, nRst, $06
0001697B                            	saVol		$0A
0001697B ED0A                     M 	dc.b	$ed,$0a
0001697D                            	sPan		spRight, $00
0001697D E040                     M 	dc.b	$e0,spright|$00
0001697F C205 8004                  	dc.b nF5, $05, nRst, $04
00016983                            	saVol		$F6
00016983 EDF6                     M 	dc.b	$ed,$f6
00016985                            	sPan		spCenter, $00
00016985 E0C0                     M 	dc.b	$e0,spcenter|$00
00016987 C405 8006                  	dc.b nG5, $05, nRst, $06
0001698B                            	saVol		$0A
0001698B ED0A                     M 	dc.b	$ed,$0a
0001698D                            	sPan		spRight, $00
0001698D E040                     M 	dc.b	$e0,spright|$00
0001698F C405                       	dc.b nG5, $05
00016991                            	saVol		$F6
00016991 EDF6                     M 	dc.b	$ed,$f6
00016993                            	sPan		spCenter, $00
00016993 E0C0                     M 	dc.b	$e0,spcenter|$00
00016995 C205 8006                  	dc.b nF5, $05, nRst, $06
00016999                            	saVol		$0A
00016999 ED0A                     M 	dc.b	$ed,$0a
0001699B                            	sPan		spRight, $00
0001699B E040                     M 	dc.b	$e0,spright|$00
0001699D C201                       	dc.b nF5, $01
0001699F                            	saVol		$F6
0001699F EDF6                     M 	dc.b	$ed,$f6
000169A1                            	sPan		spCenter, $00
000169A1 E0C0                     M 	dc.b	$e0,spcenter|$00
000169A3 C130 E730 E730 E730        	dc.b nE5, $30, sHold, $30, sHold, $30, sHold, $30
000169AB                            	sJump		Pray_Jump4
000169AB F6                       M 	dc.b	$f6
000169AC FF35                     M 	dc.w	pray_jump4-*-1
000169AE                            
000169AE                            Pray_PSG1:
000169AE 807F 7F69                  	dc.b nRst, $7F, $7F, $69
000169B2                            	ssMod68k	$0B, $01, $03, $02
000169B2 F00B 0103 02             M 	dc.b	$f0,$0b,$01,$03,$02
000169B7                            	saTranspose	$F4
000169B7 E4F4                     M 	dc.b	$e4,$f4
000169B9                            	sVoice		vRistar07
000169B9 E802                     M 	dc.b	$e8,vristar07
000169BB                            	sCall		Pray_Call2
000169BB F8                       M 	dc.b	$f8
000169BC 0000                     M 	dc.w	pray_call2-*-1
000169BE                            	saTranspose	$0C
000169BE E40C                     M 	dc.b	$e4,$0c
000169C0 BD30 E730 E730 E730        	dc.b nC5, $30, sHold, $30, sHold, $30, sHold, $30
000169C8 E730 E730 8030 80          	dc.b sHold, $30, sHold, $30, nRst, $30, nRst
000169CF                            
000169CF                            Pray_Cond3:
000169CF                            	ssMod68k	$0D, $01, $03, $02
000169CF F00D 0103 02             M 	dc.b	$f0,$0d,$01,$03,$02
000169D4                            	saTranspose	$F4
000169D4 E4F4                     M 	dc.b	$e4,$f4
000169D6                            	saVol		$FF
000169D6 EDFF                     M 	dc.b	$ed,$ff
000169D8                            	sVoice		vRistar1D
000169D8 E805                     M 	dc.b	$e8,vristar1d
000169DA                            
000169DA                            Pray_Jump3:
000169DA B130 E730 AFB6 B524        	dc.b nC4, $30, sHold, $30, nBb3, nF4, nE4, $24
000169E2 B60C B814 B804 800C        	dc.b nF4, $0C, nG4, $14, nG4, $04, nRst, $0C
000169EA BAE7 BB30 E730 BDE7        	dc.b nA4, sHold, nBb4, $30, sHold, $30, nC5, sHold
000169F2 30BB BA08 800C BB08        	dc.b $30, nBb4, nA4, $08, nRst, $0C, nBb4, $08
000169FA 80BA 8004 BD30 E730        	dc.b nRst, nA4, nRst, $04, nC5, $30, sHold, $30
00016A02 E730 E730                  	dc.b sHold, $30, sHold, $30
00016A06                            	sJump		Pray_Jump3
00016A06 F6                       M 	dc.b	$f6
00016A07 FFD2                     M 	dc.w	pray_jump3-*-1
00016A09                            
00016A09                            Pray_PSG2:
00016A09                            	saTranspose	$0C
00016A09 E40C                     M 	dc.b	$e4,$0c
00016A0B 807F 7F7F 02               	dc.b nRst, $7F, $7F, $7F, $02
00016A10                            	sVoice		vRistar02
00016A10 E801                     M 	dc.b	$e8,vristar02
00016A12                            	sCall		Pray_Call1
00016A12 F8                       M 	dc.b	$f8
00016A13 0000                     M 	dc.w	pray_call1-*-1
00016A15 A50C B1AC A9B4 0CA8        	dc.b nC3, $0C, nC4, nG3, nE3, nEb4, $0C, nEb3
00016A1D 08B8 0CAC 04BB 08AF        	dc.b $08, nG4, $0C, nG3, $04, nBb4, $08, nBb3
00016A25 0480 3080 30               	dc.b $04, nRst, $30, nRst, $30
00016A2A                            	saTranspose	$F4
00016A2A E4F4                     M 	dc.b	$e4,$f4
00016A2C                            	saVol		$02
00016A2C ED02                     M 	dc.b	$ed,$02
00016A2E                            
00016A2E                            Pray_Cond2:
00016A2E                            	saVol		$FF
00016A2E EDFF                     M 	dc.b	$ed,$ff
00016A30                            	ssMod68k	$0E, $01, $02, $02
00016A30 F00E 0102 02             M 	dc.b	$f0,$0e,$01,$02,$02
00016A35                            	saTranspose	$F4
00016A35 E4F4                     M 	dc.b	$e4,$f4
00016A37                            	sVoice		vRistar1D
00016A37 E805                     M 	dc.b	$e8,vristar1d
00016A39                            
00016A39                            Pray_Jump2:
00016A39 AC30 E730 AA30 B3B1        	dc.b nG3, $30, sHold, $30, nF3, $30, nD4, nC4
00016A41 24B3 0CB5 14B5 0480        	dc.b $24, nD4, $0C, nE4, $14, nE4, $04, nRst
00016A49 0CB6 0CE7 B630 E730        	dc.b $0C, nF4, $0C, sHold, nF4, $30, sHold, $30
00016A51 B5E7 30B6 B608 800C        	dc.b nE4, sHold, $30, nF4, nF4, $08, nRst, $0C
00016A59 B608 8008 B680 04B5        	dc.b nF4, $08, nRst, $08, nF4, nRst, $04, nE4
00016A61 30E7 30E7 30E7 30          	dc.b $30, sHold, $30, sHold, $30, sHold, $30
00016A68                            	sJump		Pray_Jump2
00016A68 F6                       M 	dc.b	$f6
00016A69 FFCF                     M 	dc.w	pray_jump2-*-1
00016A6B                            
00016A6B                            Pray_PSG3:
00016A6B                            	sNoisePSG	$E7
00016A6B F3E7                     M 	dc.b	$f3,$e7
00016A6D                            	ssMod68k	$01, $01, $00, $00
00016A6D F001 0100 00             M 	dc.b	$f0,$01,$01,$00,$00
00016A72 807F 7F7F 02               	dc.b nRst, $7F, $7F, $7F, $02
00016A77                            
00016A77                            Pray_Loop4:
00016A77                            	sVoice		vRistar18
00016A77 E804                     M 	dc.b	$e8,vristar18
00016A79 AB08 04                    	dc.b nFs3, $08, $04
00016A7C                            	sVoice		vRistar10
00016A7C E803                     M 	dc.b	$e8,vristar10
00016A7E AB08                       	dc.b nFs3, $08
00016A80                            	sVoice		vRistar18
00016A80 E804                     M 	dc.b	$e8,vristar18
00016A82 AB04                       	dc.b nFs3, $04
00016A84                            	sLoop		$00, $03, Pray_Loop4
00016A84 F700                     M 	dc.b	$f7,$00
00016A86 FFF0                     M 	dc.w	pray_loop4-*-1
00016A88 03                       M 	dc.b	$03
00016A89                            	sVoice		vRistar18
00016A89 E804                     M 	dc.b	$e8,vristar18
00016A8B AB08 04                    	dc.b nFs3, $08, $04
00016A8E                            	sVoice		vRistar10
00016A8E E803                     M 	dc.b	$e8,vristar10
00016A90 AB08 04                    	dc.b nFs3, $08, $04
00016A93                            	sLoop		$01, $03, Pray_Loop4
00016A93 F701                     M 	dc.b	$f7,$01
00016A95 FFE1                     M 	dc.w	pray_loop4-*-1
00016A97 03                       M 	dc.b	$03
00016A98 8030 80                    	dc.b nRst, $30, nRst
00016A9B                            
00016A9B                            Pray_Cond1:
00016A9B                            Pray_Loop1:
00016A9B                            Pray_Jump1:
00016A9B                            	sVoice		vRistar18
00016A9B E804                     M 	dc.b	$e8,vristar18
00016A9D AB08 04                    	dc.b nFs3, $08, $04
00016AA0                            	sVoice		vRistar10
00016AA0 E803                     M 	dc.b	$e8,vristar10
00016AA2 AB08                       	dc.b nFs3, $08
00016AA4                            	sVoice		vRistar18
00016AA4 E804                     M 	dc.b	$e8,vristar18
00016AA6 AB04                       	dc.b nFs3, $04
00016AA8                            	sLoop		$00, $16, Pray_Loop1
00016AA8 F700                     M 	dc.b	$f7,$00
00016AAA FFF0                     M 	dc.w	pray_loop1-*-1
00016AAC 16                       M 	dc.b	$16
00016AAD                            	sVoice		vRistar10
00016AAD E803                     M 	dc.b	$e8,vristar10
00016AAF AB14 100C                  	dc.b nFs3, $14, $10, $0C
00016AB3                            	sVoice		vRistar18
00016AB3 E804                     M 	dc.b	$e8,vristar18
00016AB5                            
00016AB5                            Pray_Loop2:
00016AB5 AB08 04                    	dc.b nFs3, $08, $04
00016AB8                            	sVoice		vRistar10
00016AB8 E803                     M 	dc.b	$e8,vristar10
00016ABA AB08                       	dc.b nFs3, $08
00016ABC                            	sVoice		vRistar18
00016ABC E804                     M 	dc.b	$e8,vristar18
00016ABE AB04                       	dc.b nFs3, $04
00016AC0                            	sLoop		$00, $08, Pray_Loop2
00016AC0 F700                     M 	dc.b	$f7,$00
00016AC2 FFF2                     M 	dc.w	pray_loop2-*-1
00016AC4 08                       M 	dc.b	$08
00016AC5                            	sJump		Pray_Jump1
00016AC5 F6                       M 	dc.b	$f6
00016AC6 FFD4                     M 	dc.w	pray_jump1-*-1
00016AC8                            
00016AC8                            ; 81 - kick
00016AC8                            ; 84 - low kick
00016AC8                            ; 87 - high pitch weird sound
00016AC8                            ; 88 - lower volume similar to 87
00016AC8                            ; 97 - Tom-like
00016AC8                            ; 99 - Tom
00016AC8                            ; 9A - Tom but higher
00016AC8                            ; 9B - and higher
00016AC8                            ; 9C - Ristar wow
00016AC8                            ; 9D - Ristar sound
00016AC8                            ; 9F - Ristar laughs
00016AC8                            ; A1 - Ristar sound
00016AC8                            
00016AC8 =00000080                  d9C = nrst
00016AC8 =00000080                  d9D = nrst
00016AC8 =00000080                  d9F = nrst
00016AC8 =00000080                  dA1 = nrst
00016AC8 =00000083                  d97 = dSnare
00016AC8 =00000084                  d87 = dClap
00016AC8 =00000084                  d88 = dClap
00016AC8                            
00016AC8                            Pray_DAC1:
00016AC8 807F 7F7F 7F7F 7F06        	dc.b nRst, $7F, $7F, $7F, $7F, $7F, $7F, $06; E3D
00016AD0                            
00016AD0                            Pray_Cond10:
00016AD0                            Pray_Loop25:
00016AD0                            Pray_Jump10:
00016AD0 8018 8380 83               	dc.b nRst, $18, d97, nRst, d97
00016AD5                            	sLoop		$00, $03, Pray_Loop25
00016AD5 F700                     M 	dc.b	$f7,$00
00016AD7 FFF8                     M 	dc.w	pray_loop25-*-1
00016AD9 03                       M 	dc.b	$03
00016ADA 8018 8314 840C 8310        	dc.b nRst, $18, d97, $14, d88, $0C, d97, $10
00016AE2 0885 0486 0887 0480        	dc.b $08, dHiTom, $04, dTom, $08, dLowTom, $04, nRst
00016AEA 1883 8083 8083 1484        	dc.b $18, d97, nRst, d97, nRst, d97, $14, d88
00016AF2 0C83 1004 8586 8787        	dc.b $0C, d97, $10, $04, dHiTom, dTom, dLowTom, dLowTom
00016AFA 8780 1883 8083 8083        	dc.b dLowTom, nRst, $18, d97, nRst, d97, nRst, d97
00016B02 1484 0C83 1008 8504        	dc.b $14, d88, $0C, d97, $10, $08, dHiTom, $04
00016B0A 8608 8704                  	dc.b dTom, $08, dLowTom, $04
00016B0E                            	sJump		Pray_Jump10
00016B0E F6                       M 	dc.b	$f6
00016B0F FFC0                     M 	dc.w	pray_jump10-*-1
00016B11                            
00016B11                            Pray_DAC2:
00016B11 807F 7F7F 03               	dc.b nRst, $7F, $7F, $7F, $03
00016B16                            
00016B16                            Pray_Loop24:
00016B16 8118 8181 81               	dc.b dKick, $18, dKick, dKick, dKick
00016B1B                            	sLoop		$00, $03, Pray_Loop24
00016B1B F700                     M 	dc.b	$f7,$00
00016B1D FFF8                     M 	dc.w	pray_loop24-*-1
00016B1F 03                       M 	dc.b	$03
00016B20 8027 8403 8484 840C        	dc.b d9F, $27, d88, $03, d88, d88, d87, $0C
00016B28 8408 8404 8008 8404        	dc.b d87, $08, d87, $04, nRst, $08, d88, $04
00016B30 840C                       	dc.b d87, $0C; 300
00016B32                            ; (3*0x7F)+3+(4*3*0x18)+0x27+0x3+0x3+0x3+0xc+0x8+0x4+0x8+0x4+0xc
00016B32                            Pray_Cond9:
00016B32                            Pray_Loop23:
00016B32                            Pray_Jump9:
00016B32 8118 8114 8104 810C        	dc.b dKick, $18, dKick, $14, dKick, $04, dKick, $0C
00016B3A 8181 81                    	dc.b dKick, dKick, dKick
00016B3D                            	sLoop		$00, $07, Pray_Loop23
00016B3D F700                     M 	dc.b	$f7,$00
00016B3F FFF2                     M 	dc.w	pray_loop23-*-1
00016B41 07                       M 	dc.b	$07
00016B42 8118 8114 8104 810C        	dc.b dKick, $18, dKick, $14, dKick, $04, dKick, $0C
00016B4A 8181 800C                  	dc.b dKick, dKick, d9D, $0C
00016B4E                            	sJump		Pray_Jump9
00016B4E F6                       M 	dc.b	$f6
00016B4F FFE2                     M 	dc.w	pray_jump9-*-1
00016B51                            
00016B51                            Pray_Call2:
00016B51 BD0F BF01 C102 C201        	dc.b nC5, $0F, nD5, $01, nE5, $02, nF5, $01
00016B59 C402 C601 C702             	dc.b nG5, $02, nA5, $01, nBb5, $02
00016B5F                            	sRet
00016B5F F9                       M 	dc.b	$f9
00016B60                            
00016B60                            Pray_Call8:
00016B60                            	sPan		spRight, $00
00016B60 E040                     M 	dc.b	$e0,spright|$00
00016B62 B804 8007                  	dc.b nG4, $04, nRst, $07
00016B66                            	sPan		spCenter, $00
00016B66 E0C0                     M 	dc.b	$e0,spcenter|$00
00016B68                            	saVol		$0C
00016B68 ED0C                     M 	dc.b	$ed,$0c
00016B6A B804 8005                  	dc.b nG4, $04, nRst, $05
00016B6E                            	saVol		$F4
00016B6E EDF4                     M 	dc.b	$ed,$f4
00016B70                            	sPan		spRight, $00
00016B70 E040                     M 	dc.b	$e0,spright|$00
00016B72 BA04 8007                  	dc.b nA4, $04, nRst, $07
00016B76                            	sPan		spCenter, $00
00016B76 E0C0                     M 	dc.b	$e0,spcenter|$00
00016B78                            	saVol		$0C
00016B78 ED0C                     M 	dc.b	$ed,$0c
00016B7A BA04 8001                  	dc.b nA4, $04, nRst, $01
00016B7E                            	saVol		$F4
00016B7E EDF4                     M 	dc.b	$ed,$f4
00016B80                            	sPan		spRight, $00
00016B80 E040                     M 	dc.b	$e0,spright|$00
00016B82 BB04 8007                  	dc.b nBb4, $04, nRst, $07
00016B86                            	sPan		spCenter, $00
00016B86 E0C0                     M 	dc.b	$e0,spcenter|$00
00016B88                            	saVol		$0C
00016B88 ED0C                     M 	dc.b	$ed,$0c
00016B8A BB04 8005                  	dc.b nBb4, $04, nRst, $05
00016B8E                            	saVol		$F4
00016B8E EDF4                     M 	dc.b	$ed,$f4
00016B90                            	sPan		spRight, $00
00016B90 E040                     M 	dc.b	$e0,spright|$00
00016B92 BA0B 8001 BB03 8001        	dc.b nA4, $0B, nRst, $01, nBb4, $03, nRst, $01
00016B9A BA04 8007                  	dc.b nA4, $04, nRst, $07
00016B9E                            	sPan		spCenter, $00
00016B9E E0C0                     M 	dc.b	$e0,spcenter|$00
00016BA0                            	saVol		$0C
00016BA0 ED0C                     M 	dc.b	$ed,$0c
00016BA2 BA04 8030 802D             	dc.b nA4, $04, nRst, $30, nRst, $2D
00016BA8                            	saVol		$F4
00016BA8 EDF4                     M 	dc.b	$ed,$f4
00016BAA                            	sRet
00016BAA F9                       M 	dc.b	$f9
00016BAB                            
00016BAB                            Pray_Call6:
00016BAB                            	sPan		spRight, $00
00016BAB E040                     M 	dc.b	$e0,spright|$00
00016BAD B504 8007                  	dc.b nE4, $04, nRst, $07
00016BB1                            	sPan		spCenter, $00
00016BB1 E0C0                     M 	dc.b	$e0,spcenter|$00
00016BB3                            	saVol		$0C
00016BB3 ED0C                     M 	dc.b	$ed,$0c
00016BB5 B504 8005                  	dc.b nE4, $04, nRst, $05
00016BB9                            	saVol		$F4
00016BB9 EDF4                     M 	dc.b	$ed,$f4
00016BBB                            	sPan		spRight, $00
00016BBB E040                     M 	dc.b	$e0,spright|$00
00016BBD B604 8007                  	dc.b nF4, $04, nRst, $07
00016BC1                            	sPan		spCenter, $00
00016BC1 E0C0                     M 	dc.b	$e0,spcenter|$00
00016BC3                            	saVol		$0C
00016BC3 ED0C                     M 	dc.b	$ed,$0c
00016BC5 B604 8001                  	dc.b nF4, $04, nRst, $01
00016BC9                            	saVol		$F4
00016BC9 EDF4                     M 	dc.b	$ed,$f4
00016BCB                            	sPan		spRight, $00
00016BCB E040                     M 	dc.b	$e0,spright|$00
00016BCD B804 8007                  	dc.b nG4, $04, nRst, $07
00016BD1                            	sPan		spCenter, $00
00016BD1 E0C0                     M 	dc.b	$e0,spcenter|$00
00016BD3                            	saVol		$0C
00016BD3 ED0C                     M 	dc.b	$ed,$0c
00016BD5 B804 8005                  	dc.b nG4, $04, nRst, $05
00016BD9                            	saVol		$F4
00016BD9 EDF4                     M 	dc.b	$ed,$f4
00016BDB                            	sPan		spRight, $00
00016BDB E040                     M 	dc.b	$e0,spright|$00
00016BDD B60B 8001 B803 8001        	dc.b nF4, $0B, nRst, $01, nG4, $03, nRst, $01
00016BE5 B604 8007                  	dc.b nF4, $04, nRst, $07
00016BE9                            	sPan		spCenter, $00
00016BE9 E0C0                     M 	dc.b	$e0,spcenter|$00
00016BEB                            	saVol		$0C
00016BEB ED0C                     M 	dc.b	$ed,$0c
00016BED B604 8030 802D             	dc.b nF4, $04, nRst, $30, nRst, $2D
00016BF3                            	saVol		$F4
00016BF3 EDF4                     M 	dc.b	$ed,$f4
00016BF5                            	sRet
00016BF5 F9                       M 	dc.b	$f9
00016BF6                            
00016BF6                            Pray_Call9:
00016BF6                            	sNoteTimeOut	$06
00016BF6 FD06                     M 	dc.b	$fd,$06
00016BF8 A50C A5A5 A508             	dc.b nC3, $0C, nC3, nC3, nC3, $08
00016BFE                            	sNoteTimeOut	$03
00016BFE FD03                     M 	dc.b	$fd,$03
00016C00 A504 8008 A504             	dc.b nC3, $04, nRst, $08, nC3, $04
00016C06                            	sNoteTimeOut	$0B
00016C06 FD0B                     M 	dc.b	$fd,$0b
00016C08 A50C                       	dc.b nC3, $0C
00016C0A                            	sRet
00016C0A F9                       M 	dc.b	$f9
00016C0B                            
00016C0B                            Pray_Call10:
00016C0B                            	saVol		$18
00016C0B ED18                     M 	dc.b	$ed,$18
00016C0D BD06                       	dc.b nC5, $06
00016C0F                            
00016C0F                            Pray_Loop16:
00016C0F                            	saVol		$FE
00016C0F EDFE                     M 	dc.b	$ed,$fe
00016C11 E706                       	dc.b sHold, $06
00016C13                            	sLoop		$00, $0C, Pray_Loop16
00016C13 F700                     M 	dc.b	$f7,$00
00016C15 FFF9                     M 	dc.w	pray_loop16-*-1
00016C17 0C                       M 	dc.b	$0c
00016C18 E712                       	dc.b sHold, $12
00016C1A                            	sRet
00016C1A F9                       M 	dc.b	$f9
00016C1B                            
00016C1B                            Pray_Call11:
00016C1B                            	saVol		$1E
00016C1B ED1E                     M 	dc.b	$ed,$1e
00016C1D BD03                       	dc.b nC5, $03
00016C1F                            
00016C1F                            Pray_Loop17:
00016C1F                            	saVol		$FD
00016C1F EDFD                     M 	dc.b	$ed,$fd
00016C21 E703                       	dc.b sHold, $03
00016C23                            	sLoop		$00, $0C, Pray_Loop17
00016C23 F700                     M 	dc.b	$f7,$00
00016C25 FFF9                     M 	dc.w	pray_loop17-*-1
00016C27 0C                       M 	dc.b	$0c
00016C28 E709                       	dc.b sHold, $09
00016C2A                            	sRet
00016C2A F9                       M 	dc.b	$f9
00016C2B                            
00016C2B                            Pray_Call3:
00016C2B A508 AFB1 B6BB BDC2        	dc.b nC3, $08, nBb3, nC4, nF4, nBb4, nC5, nF5
00016C33 C7C9 CED3 D5               	dc.b nBb5, nC6, nF6, nBb6, nC7
00016C38                            	sRet
00016C38 F9                       M 	dc.b	$f9
00016C39                            
00016C39                            Pray_Call4:
00016C39 A504 AFB1 B6BB BDC2        	dc.b nC3, $04, nBb3, nC4, nF4, nBb4, nC5, nF5
00016C41 C7C9 CED3 D5               	dc.b nBb5, nC6, nF6, nBb6, nC7
00016C46                            	sRet
00016C46 F9                       M 	dc.b	$f9
00016C47                            
00016C47                            Pray_Call7:
00016C47 A00C ACA9 A5AF 0CA3        	dc.b nG2, $0C, nG3, nE3, nC3, nBb3, $0C, nBb2
00016C4F 08B4 0CA8 04B6 08AA        	dc.b $08, nEb4, $0C, nEb3, $04, nF4, $08, nF3
00016C57 04A0 0CAC 08A0 0CAC        	dc.b $04, nG2, $0C, nG3, $08, nG2, $0C, nG3
00016C5F 04A0 0CAF 08A3 0CBB        	dc.b $04, nG2, $0C, nBb3, $08, nBb2, $0C, nBb4
00016C67 04AF 0CAF 08A3 04          	dc.b $04, nBb3, $0C, nBb3, $08, nBb2, $04
00016C6E                            	sRet
00016C6E F9                       M 	dc.b	$f9
00016C6F                            
00016C6F                            Pray_Call5:
00016C6F A90C B5B1 ACB8 0CAC        	dc.b nE3, $0C, nE4, nC4, nG3, nG4, $0C, nG3
00016C77 08BB 0CAF 04BD 08B1        	dc.b $08, nBb4, $0C, nBb3, $04, nC5, $08, nC4
00016C7F 04A9 0CB5 08A9 0CB5        	dc.b $04, nE3, $0C, nE4, $08, nE3, $0C, nE4
00016C87 04A9 0CB6 08AA 0CC2        	dc.b $04, nE3, $0C, nF4, $08, nF3, $0C, nF5
00016C8F 04B6 0C08 AA04             	dc.b $04, nF4, $0C, $08, nF3, $04
00016C95                            	sRet
00016C95 F9                       M 	dc.b	$f9
00016C96                            
00016C96                            Pray_Call1:
00016C96 A50C B1AC A9B4 0CA8        	dc.b nC3, $0C, nC4, nG3, nE3, nEb4, $0C, nEb3
00016C9E 08B8 0CAC 04BB 08AF        	dc.b $08, nG4, $0C, nG3, $04, nBb4, $08, nBb3
00016CA6 04A5 0CB1 08A5 0CB1        	dc.b $04, nC3, $0C, nC4, $08, nC3, $0C, nC4
00016CAE 04A5 0CB4 08A8 0CC0        	dc.b $04, nC3, $0C, nEb4, $08, nEb3, $0C, nEb5
00016CB6 04B4 0C08 A804             	dc.b $04, nEb4, $0C, $08, nEb3, $04
00016CBC                            	sRet
00016CBC F9                       M 	dc.b	$f9
00016CBD =00000010                M a	=	a+1
00016CBE 00                       M 	even
00016CBE                          M b	equs	dmus10
00016CBE                          M _mus_hydrocity
00016CBE                          M dmusa10	include	"driver/music/hydrocity.asm"
00016CBE                            HCZ2_Header:
00016CBE                            	sHeaderInit	; Z80 offset is $C0C6
00016CBE =00016CBE                M spointzero	=	*
00016CBE =00000000                M spatnum	=	0
00016CBE                            	sHeaderTempo	$01, $25
00016CBE 0025                     M 	dc.b	$01-1,$25
00016CC0                            	sHeaderCh	$05, $03
00016CC0 04                       M 	dc.b	$05-1
00016CC1 02                       M 	dc.b	$03-1
00016CC2                            	sHeaderDAC	HCZ2_DAC1, $10
00016CC2 0000                     M 	dc.w	hcz2_dac1-spointzero
00016CC4 10                       M 	dc.b	$10
00016CC5 00                       M 	dc.b	$00
00016CC6                            	sHeaderDAC	HCZ2_DAC2, $10
00016CC6 0000                     M 	dc.w	hcz2_dac2-spointzero
00016CC8 10                       M 	dc.b	$10
00016CC9 00                       M 	dc.b	$00
00016CCA                            	sHeaderFM	HCZ2_FM1, $18, $0F
00016CCA 0000                     M 	dc.w	hcz2_fm1-spointzero
00016CCC 180F                     M 	dc.b	$18,$0f
00016CCE                            	sHeaderFM	HCZ2_FM2, $18, $0A
00016CCE 0000                     M 	dc.w	hcz2_fm2-spointzero
00016CD0 180A                     M 	dc.b	$18,$0a
00016CD2                            	sHeaderFM	HCZ2_FM3, $18, $13
00016CD2 0000                     M 	dc.w	hcz2_fm3-spointzero
00016CD4 1813                     M 	dc.b	$18,$13
00016CD6                            	sHeaderFM	HCZ2_FM4, $0C, $0F
00016CD6 0000                     M 	dc.w	hcz2_fm4-spointzero
00016CD8 0C0F                     M 	dc.b	$0c,$0f
00016CDA                            	sHeaderFM	HCZ2_FM5, $0C, $0C
00016CDA 0000                     M 	dc.w	hcz2_fm5-spointzero
00016CDC 0C0C                     M 	dc.b	$0c,$0c
00016CDE                            	sHeaderPSG	HCZ2_PSG1, $F4-$0C, $04, $00, v00
00016CDE 0000                     M 	dc.w	hcz2_psg1-spointzero
00016CE0 E804 0000                M 	dc.b	$f4-$0c,$04,$00,v00
00016CE4                            	sHeaderPSG	HCZ2_PSG2, $F4-$0C, $04, $00, v00
00016CE4 0000                     M 	dc.w	hcz2_psg2-spointzero
00016CE6 E804 0000                M 	dc.b	$f4-$0c,$04,$00,v00
00016CEA                            	sHeaderPSG	HCZ2_PSG3, $00, $03, $00, v00
00016CEA 0000                     M 	dc.w	hcz2_psg3-spointzero
00016CEC 0003 0000                M 	dc.b	$00,$03,$00,v00
00016CF0                            
00016CF0                            	; Universal sound bank from S3K
00016CF0                            	; Patch $00
00016CF0                            	; $3C
00016CF0                            	; $01, $00, $00, $00,	$1F, $1F, $15, $1F
00016CF0                            	; $11, $0D, $12, $05,	$07, $04, $09, $02
00016CF0                            	; $55, $3A, $25, $1A,	$1A, $80, $07, $80
00016CF0                            	spAlgorithm	$04
00016CF0 =00000001                M spatnum	=	spatnum+1
00016CF0 =00000004                M spal	=	val
00016CF0                            	spFeedback	$07
00016CF0 =00000007                M spfe	=	val
00016CF0                            	spDetune	$00, $00, $00, $00
00016CF0 =00000000                M spde1	=	op1
00016CF0 =00000000                M spde2	=	op2
00016CF0 =00000000                M spde3	=	op3
00016CF0 =00000000                M spde4	=	op4
00016CF0                            	spMultiple	$01, $00, $00, $00
00016CF0 =00000001                M spmu1	=	op1
00016CF0 =00000000                M spmu2	=	op2
00016CF0 =00000000                M spmu3	=	op3
00016CF0 =00000000                M spmu4	=	op4
00016CF0                            	spRateScale	$00, $00, $00, $00
00016CF0 =00000000                M sprs1	=	op1
00016CF0 =00000000                M sprs2	=	op2
00016CF0 =00000000                M sprs3	=	op3
00016CF0 =00000000                M sprs4	=	op4
00016CF0                            	spAttackRt	$1F, $15, $1F, $1F
00016CF0 =0000001F                M spar1	=	op1
00016CF0 =00000015                M spar2	=	op2
00016CF0 =0000001F                M spar3	=	op3
00016CF0 =0000001F                M spar4	=	op4
00016CF0                            	spAmpMod	$00, $00, $00, $00
00016CF0 =00000000                M spam1	=	op1
00016CF0 =00000000                M spam2	=	op2
00016CF0 =00000000                M spam3	=	op3
00016CF0 =00000000                M spam4	=	op4
00016CF0                            	spSustainRt	$11, $12, $0D, $05
00016CF0 =00000011                M spsr1	=	op1
00016CF0 =00000012                M spsr2	=	op2
00016CF0 =0000000D                M spsr3	=	op3
00016CF0 =00000005                M spsr4	=	op4
00016CF0                            	spSustainLv	$05, $02, $03, $01
00016CF0 =00000005                M spsl1	=	op1
00016CF0 =00000002                M spsl2	=	op2
00016CF0 =00000003                M spsl3	=	op3
00016CF0 =00000001                M spsl4	=	op4
00016CF0                            	spDecayRt	$07, $09, $04, $02
00016CF0 =00000007                M spdr1	=	op1
00016CF0 =00000009                M spdr2	=	op2
00016CF0 =00000004                M spdr3	=	op3
00016CF0 =00000002                M spdr4	=	op4
00016CF0                            	spReleaseRt	$05, $05, $0A, $0A
00016CF0 =00000005                M sprr1	=	op1
00016CF0 =00000005                M sprr2	=	op2
00016CF0 =0000000A                M sprr3	=	op3
00016CF0 =0000000A                M sprr4	=	op4
00016CF0                            	spSSGEG		$00, $00, $00, $00
00016CF0 =00000000                M spss1	=	op1
00016CF0 =00000000                M spss2	=	op2
00016CF0 =00000000                M spss3	=	op3
00016CF0 =00000000                M spss4	=	op4
00016CF0                            	spTotalLv	$1A, $07, $00, $00
00016CF0 =0000001A                M sptl1	=	op1
00016CF0 =00000007                M sptl2	=	op2
00016CF0 =00000000                M sptl3	=	op3
00016CF0 =00000000                M sptl4	=	op4
00016CF0 3C                       M 	dc.b	(spfe<<3)+spal
00016CF1 =00000080                M sptlmask4	set	$80
00016CF1 =00000000                M sptlmask2	set	((spal>=5)<<7)
00016CF1 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00016CF1 =00000000                M sptlmask1	set	((spal=7)<<7)
00016CF1 0100 0000                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00016CF5 1F1F 151F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00016CF9 110D 1205                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00016CFD 0704 0902                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00016D01 553A 251A                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00016D05 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00016D09 1A80 0780                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00016D0D 4E41 54                  M 	dc.b	'NAT'
00016D10                            
00016D10                            	; Patch $01
00016D10                            	; $3D
00016D10                            	; $01, $01, $01, $01,	$94, $19, $19, $19
00016D10                            	; $0F, $0D, $0D, $0D,	$07, $04, $04, $04
00016D10                            	; $25, $1A, $1A, $1A,	$15, $80, $80, $80
00016D10                            	spAlgorithm	$05
00016D10 =00000002                M spatnum	=	spatnum+1
00016D10 =00000005                M spal	=	val
00016D10                            	spFeedback	$07
00016D10 =00000007                M spfe	=	val
00016D10                            	spDetune	$00, $00, $00, $00
00016D10 =00000000                M spde1	=	op1
00016D10 =00000000                M spde2	=	op2
00016D10 =00000000                M spde3	=	op3
00016D10 =00000000                M spde4	=	op4
00016D10                            	spMultiple	$01, $01, $01, $01
00016D10 =00000001                M spmu1	=	op1
00016D10 =00000001                M spmu2	=	op2
00016D10 =00000001                M spmu3	=	op3
00016D10 =00000001                M spmu4	=	op4
00016D10                            	spRateScale	$02, $00, $00, $00
00016D10 =00000002                M sprs1	=	op1
00016D10 =00000000                M sprs2	=	op2
00016D10 =00000000                M sprs3	=	op3
00016D10 =00000000                M sprs4	=	op4
00016D10                            	spAttackRt	$14, $19, $19, $19
00016D10 =00000014                M spar1	=	op1
00016D10 =00000019                M spar2	=	op2
00016D10 =00000019                M spar3	=	op3
00016D10 =00000019                M spar4	=	op4
00016D10                            	spAmpMod	$00, $00, $00, $00
00016D10 =00000000                M spam1	=	op1
00016D10 =00000000                M spam2	=	op2
00016D10 =00000000                M spam3	=	op3
00016D10 =00000000                M spam4	=	op4
00016D10                            	spSustainRt	$0F, $0D, $0D, $0D
00016D10 =0000000F                M spsr1	=	op1
00016D10 =0000000D                M spsr2	=	op2
00016D10 =0000000D                M spsr3	=	op3
00016D10 =0000000D                M spsr4	=	op4
00016D10                            	spSustainLv	$02, $01, $01, $01
00016D10 =00000002                M spsl1	=	op1
00016D10 =00000001                M spsl2	=	op2
00016D10 =00000001                M spsl3	=	op3
00016D10 =00000001                M spsl4	=	op4
00016D10                            	spDecayRt	$07, $04, $04, $04
00016D10 =00000007                M spdr1	=	op1
00016D10 =00000004                M spdr2	=	op2
00016D10 =00000004                M spdr3	=	op3
00016D10 =00000004                M spdr4	=	op4
00016D10                            	spReleaseRt	$05, $0A, $0A, $0A
00016D10 =00000005                M sprr1	=	op1
00016D10 =0000000A                M sprr2	=	op2
00016D10 =0000000A                M sprr3	=	op3
00016D10 =0000000A                M sprr4	=	op4
00016D10                            	spSSGEG		$00, $00, $00, $00
00016D10 =00000000                M spss1	=	op1
00016D10 =00000000                M spss2	=	op2
00016D10 =00000000                M spss3	=	op3
00016D10 =00000000                M spss4	=	op4
00016D10                            	spTotalLv	$15, $00, $00, $00
00016D10 =00000015                M sptl1	=	op1
00016D10 =00000000                M sptl2	=	op2
00016D10 =00000000                M sptl3	=	op3
00016D10 =00000000                M sptl4	=	op4
00016D10 3D                       M 	dc.b	(spfe<<3)+spal
00016D11 =00000080                M sptlmask4	set	$80
00016D11 =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
00016D11 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00016D11 =00000000                M sptlmask1	set	((spal=7)<<7)
00016D11 0101 0101                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00016D15 9419 1919                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00016D19 0F0D 0D0D                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00016D1D 0704 0404                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00016D21 251A 1A1A                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00016D25 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00016D29 1580 8080                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00016D2D 4E41 54                  M 	dc.b	'NAT'
00016D30                            
00016D30                            	; Patch $02
00016D30                            	; $03
00016D30                            	; $00, $D7, $33, $02,	$5F, $9F, $5F, $1F
00016D30                            	; $13, $0F, $0A, $0A,	$10, $0F, $02, $09
00016D30                            	; $35, $15, $25, $1A,	$13, $16, $15, $80
00016D30                            	spAlgorithm	$03
00016D30 =00000003                M spatnum	=	spatnum+1
00016D30 =00000003                M spal	=	val
00016D30                            	spFeedback	$00
00016D30 =00000000                M spfe	=	val
00016D30                            	spDetune	$00, $03, $0D, $00
00016D30 =00000000                M spde1	=	op1
00016D30 =00000003                M spde2	=	op2
00016D30 =0000000D                M spde3	=	op3
00016D30 =00000000                M spde4	=	op4
00016D30                            	spMultiple	$00, $03, $07, $02
00016D30 =00000000                M spmu1	=	op1
00016D30 =00000003                M spmu2	=	op2
00016D30 =00000007                M spmu3	=	op3
00016D30 =00000002                M spmu4	=	op4
00016D30                            	spRateScale	$01, $01, $02, $00
00016D30 =00000001                M sprs1	=	op1
00016D30 =00000001                M sprs2	=	op2
00016D30 =00000002                M sprs3	=	op3
00016D30 =00000000                M sprs4	=	op4
00016D30                            	spAttackRt	$1F, $1F, $1F, $1F
00016D30 =0000001F                M spar1	=	op1
00016D30 =0000001F                M spar2	=	op2
00016D30 =0000001F                M spar3	=	op3
00016D30 =0000001F                M spar4	=	op4
00016D30                            	spAmpMod	$00, $00, $00, $00
00016D30 =00000000                M spam1	=	op1
00016D30 =00000000                M spam2	=	op2
00016D30 =00000000                M spam3	=	op3
00016D30 =00000000                M spam4	=	op4
00016D30                            	spSustainRt	$13, $0A, $0F, $0A
00016D30 =00000013                M spsr1	=	op1
00016D30 =0000000A                M spsr2	=	op2
00016D30 =0000000F                M spsr3	=	op3
00016D30 =0000000A                M spsr4	=	op4
00016D30                            	spSustainLv	$03, $02, $01, $01
00016D30 =00000003                M spsl1	=	op1
00016D30 =00000002                M spsl2	=	op2
00016D30 =00000001                M spsl3	=	op3
00016D30 =00000001                M spsl4	=	op4
00016D30                            	spDecayRt	$10, $02, $0F, $09
00016D30 =00000010                M spdr1	=	op1
00016D30 =00000002                M spdr2	=	op2
00016D30 =0000000F                M spdr3	=	op3
00016D30 =00000009                M spdr4	=	op4
00016D30                            	spReleaseRt	$05, $05, $05, $0A
00016D30 =00000005                M sprr1	=	op1
00016D30 =00000005                M sprr2	=	op2
00016D30 =00000005                M sprr3	=	op3
00016D30 =0000000A                M sprr4	=	op4
00016D30                            	spSSGEG		$00, $00, $00, $00
00016D30 =00000000                M spss1	=	op1
00016D30 =00000000                M spss2	=	op2
00016D30 =00000000                M spss3	=	op3
00016D30 =00000000                M spss4	=	op4
00016D30                            	spTotalLv	$13, $15, $16, $00
00016D30 =00000013                M sptl1	=	op1
00016D30 =00000015                M sptl2	=	op2
00016D30 =00000016                M sptl3	=	op3
00016D30 =00000000                M sptl4	=	op4
00016D30 03                       M 	dc.b	(spfe<<3)+spal
00016D31 =00000080                M sptlmask4	set	$80
00016D31 =00000000                M sptlmask2	set	((spal>=5)<<7)
00016D31 =00000000                M sptlmask3	set	((spal>=4)<<7)
00016D31 =00000000                M sptlmask1	set	((spal=7)<<7)
00016D31 00D7 3302                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00016D35 5F9F 5F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00016D39 130F 0A0A                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00016D3D 100F 0209                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00016D41 3515 251A                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00016D45 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00016D49 1316 1580                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00016D4D 4E41 54                  M 	dc.b	'NAT'
00016D50                            
00016D50                            	; Patch $03
00016D50                            	; $34
00016D50                            	; $70, $72, $31, $31,	$1F, $1F, $1F, $1F
00016D50                            	; $10, $06, $06, $06,	$01, $06, $06, $06
00016D50                            	; $35, $1A, $15, $1A,	$10, $83, $18, $83
00016D50                            	spAlgorithm	$04
00016D50 =00000004                M spatnum	=	spatnum+1
00016D50 =00000004                M spal	=	val
00016D50                            	spFeedback	$06
00016D50 =00000006                M spfe	=	val
00016D50                            	spDetune	$07, $03, $07, $03
00016D50 =00000007                M spde1	=	op1
00016D50 =00000003                M spde2	=	op2
00016D50 =00000007                M spde3	=	op3
00016D50 =00000003                M spde4	=	op4
00016D50                            	spMultiple	$00, $01, $02, $01
00016D50 =00000000                M spmu1	=	op1
00016D50 =00000001                M spmu2	=	op2
00016D50 =00000002                M spmu3	=	op3
00016D50 =00000001                M spmu4	=	op4
00016D50                            	spRateScale	$00, $00, $00, $00
00016D50 =00000000                M sprs1	=	op1
00016D50 =00000000                M sprs2	=	op2
00016D50 =00000000                M sprs3	=	op3
00016D50 =00000000                M sprs4	=	op4
00016D50                            	spAttackRt	$1F, $1F, $1F, $1F
00016D50 =0000001F                M spar1	=	op1
00016D50 =0000001F                M spar2	=	op2
00016D50 =0000001F                M spar3	=	op3
00016D50 =0000001F                M spar4	=	op4
00016D50                            	spAmpMod	$00, $00, $00, $00
00016D50 =00000000                M spam1	=	op1
00016D50 =00000000                M spam2	=	op2
00016D50 =00000000                M spam3	=	op3
00016D50 =00000000                M spam4	=	op4
00016D50                            	spSustainRt	$10, $06, $06, $06
00016D50 =00000010                M spsr1	=	op1
00016D50 =00000006                M spsr2	=	op2
00016D50 =00000006                M spsr3	=	op3
00016D50 =00000006                M spsr4	=	op4
00016D50                            	spSustainLv	$03, $01, $01, $01
00016D50 =00000003                M spsl1	=	op1
00016D50 =00000001                M spsl2	=	op2
00016D50 =00000001                M spsl3	=	op3
00016D50 =00000001                M spsl4	=	op4
00016D50                            	spDecayRt	$01, $06, $06, $06
00016D50 =00000001                M spdr1	=	op1
00016D50 =00000006                M spdr2	=	op2
00016D50 =00000006                M spdr3	=	op3
00016D50 =00000006                M spdr4	=	op4
00016D50                            	spReleaseRt	$05, $05, $0A, $0A
00016D50 =00000005                M sprr1	=	op1
00016D50 =00000005                M sprr2	=	op2
00016D50 =0000000A                M sprr3	=	op3
00016D50 =0000000A                M sprr4	=	op4
00016D50                            	spSSGEG		$00, $00, $00, $00
00016D50 =00000000                M spss1	=	op1
00016D50 =00000000                M spss2	=	op2
00016D50 =00000000                M spss3	=	op3
00016D50 =00000000                M spss4	=	op4
00016D50                            	spTotalLv	$10, $18, $03, $03
00016D50 =00000010                M sptl1	=	op1
00016D50 =00000018                M sptl2	=	op2
00016D50 =00000003                M sptl3	=	op3
00016D50 =00000003                M sptl4	=	op4
00016D50 34                       M 	dc.b	(spfe<<3)+spal
00016D51 =00000080                M sptlmask4	set	$80
00016D51 =00000000                M sptlmask2	set	((spal>=5)<<7)
00016D51 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00016D51 =00000000                M sptlmask1	set	((spal=7)<<7)
00016D51 7072 3131                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00016D55 1F1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00016D59 1006 0606                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00016D5D 0106 0606                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00016D61 351A 151A                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00016D65 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00016D69 1083 1883                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00016D6D 4E41 54                  M 	dc.b	'NAT'
00016D70                            
00016D70                            	; Patch $04
00016D70                            	; $3E
00016D70                            	; $77, $71, $32, $31,	$1F, $1F, $1F, $1F
00016D70                            	; $0D, $06, $00, $00,	$08, $06, $00, $00
00016D70                            	; $15, $0A, $0A, $0A,	$1B, $80, $80, $80
00016D70                            	spAlgorithm	$06
00016D70 =00000005                M spatnum	=	spatnum+1
00016D70 =00000006                M spal	=	val
00016D70                            	spFeedback	$07
00016D70 =00000007                M spfe	=	val
00016D70                            	spDetune	$07, $03, $07, $03
00016D70 =00000007                M spde1	=	op1
00016D70 =00000003                M spde2	=	op2
00016D70 =00000007                M spde3	=	op3
00016D70 =00000003                M spde4	=	op4
00016D70                            	spMultiple	$07, $02, $01, $01
00016D70 =00000007                M spmu1	=	op1
00016D70 =00000002                M spmu2	=	op2
00016D70 =00000001                M spmu3	=	op3
00016D70 =00000001                M spmu4	=	op4
00016D70                            	spRateScale	$00, $00, $00, $00
00016D70 =00000000                M sprs1	=	op1
00016D70 =00000000                M sprs2	=	op2
00016D70 =00000000                M sprs3	=	op3
00016D70 =00000000                M sprs4	=	op4
00016D70                            	spAttackRt	$1F, $1F, $1F, $1F
00016D70 =0000001F                M spar1	=	op1
00016D70 =0000001F                M spar2	=	op2
00016D70 =0000001F                M spar3	=	op3
00016D70 =0000001F                M spar4	=	op4
00016D70                            	spAmpMod	$00, $00, $00, $00
00016D70 =00000000                M spam1	=	op1
00016D70 =00000000                M spam2	=	op2
00016D70 =00000000                M spam3	=	op3
00016D70 =00000000                M spam4	=	op4
00016D70                            	spSustainRt	$0D, $00, $06, $00
00016D70 =0000000D                M spsr1	=	op1
00016D70 =00000000                M spsr2	=	op2
00016D70 =00000006                M spsr3	=	op3
00016D70 =00000000                M spsr4	=	op4
00016D70                            	spSustainLv	$01, $00, $00, $00
00016D70 =00000001                M spsl1	=	op1
00016D70 =00000000                M spsl2	=	op2
00016D70 =00000000                M spsl3	=	op3
00016D70 =00000000                M spsl4	=	op4
00016D70                            	spDecayRt	$08, $00, $06, $00
00016D70 =00000008                M spdr1	=	op1
00016D70 =00000000                M spdr2	=	op2
00016D70 =00000006                M spdr3	=	op3
00016D70 =00000000                M spdr4	=	op4
00016D70                            	spReleaseRt	$05, $0A, $0A, $0A
00016D70 =00000005                M sprr1	=	op1
00016D70 =0000000A                M sprr2	=	op2
00016D70 =0000000A                M sprr3	=	op3
00016D70 =0000000A                M sprr4	=	op4
00016D70                            	spSSGEG		$00, $00, $00, $00
00016D70 =00000000                M spss1	=	op1
00016D70 =00000000                M spss2	=	op2
00016D70 =00000000                M spss3	=	op3
00016D70 =00000000                M spss4	=	op4
00016D70                            	spTotalLv	$1B, $00, $00, $00
00016D70 =0000001B                M sptl1	=	op1
00016D70 =00000000                M sptl2	=	op2
00016D70 =00000000                M sptl3	=	op3
00016D70 =00000000                M sptl4	=	op4
00016D70 3E                       M 	dc.b	(spfe<<3)+spal
00016D71 =00000080                M sptlmask4	set	$80
00016D71 =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
00016D71 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00016D71 =00000000                M sptlmask1	set	((spal=7)<<7)
00016D71 7771 3231                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00016D75 1F1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00016D79 0D06 0000                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00016D7D 0806 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00016D81 150A 0A0A                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00016D85 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00016D89 1B80 8080                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00016D8D 4E41 54                  M 	dc.b	'NAT'
00016D90                            
00016D90                            	; Patch $05
00016D90                            	; $34
00016D90                            	; $33, $41, $7E, $74,	$5B, $9F, $5F, $1F
00016D90                            	; $04, $07, $07, $08,	$00, $00, $00, $00
00016D90                            	; $FF, $FF, $EF, $FF,	$23, $80, $29, $87
00016D90                            	spAlgorithm	$04
00016D90 =00000006                M spatnum	=	spatnum+1
00016D90 =00000004                M spal	=	val
00016D90                            	spFeedback	$06
00016D90 =00000006                M spfe	=	val
00016D90                            	spDetune	$03, $07, $04, $07
00016D90 =00000003                M spde1	=	op1
00016D90 =00000007                M spde2	=	op2
00016D90 =00000004                M spde3	=	op3
00016D90 =00000007                M spde4	=	op4
00016D90                            	spMultiple	$03, $0E, $01, $04
00016D90 =00000003                M spmu1	=	op1
00016D90 =0000000E                M spmu2	=	op2
00016D90 =00000001                M spmu3	=	op3
00016D90 =00000004                M spmu4	=	op4
00016D90                            	spRateScale	$01, $01, $02, $00
00016D90 =00000001                M sprs1	=	op1
00016D90 =00000001                M sprs2	=	op2
00016D90 =00000002                M sprs3	=	op3
00016D90 =00000000                M sprs4	=	op4
00016D90                            	spAttackRt	$1B, $1F, $1F, $1F
00016D90 =0000001B                M spar1	=	op1
00016D90 =0000001F                M spar2	=	op2
00016D90 =0000001F                M spar3	=	op3
00016D90 =0000001F                M spar4	=	op4
00016D90                            	spAmpMod	$00, $00, $00, $00
00016D90 =00000000                M spam1	=	op1
00016D90 =00000000                M spam2	=	op2
00016D90 =00000000                M spam3	=	op3
00016D90 =00000000                M spam4	=	op4
00016D90                            	spSustainRt	$04, $07, $07, $08
00016D90 =00000004                M spsr1	=	op1
00016D90 =00000007                M spsr2	=	op2
00016D90 =00000007                M spsr3	=	op3
00016D90 =00000008                M spsr4	=	op4
00016D90                            	spSustainLv	$0F, $0E, $0F, $0F
00016D90 =0000000F                M spsl1	=	op1
00016D90 =0000000E                M spsl2	=	op2
00016D90 =0000000F                M spsl3	=	op3
00016D90 =0000000F                M spsl4	=	op4
00016D90                            	spDecayRt	$00, $00, $00, $00
00016D90 =00000000                M spdr1	=	op1
00016D90 =00000000                M spdr2	=	op2
00016D90 =00000000                M spdr3	=	op3
00016D90 =00000000                M spdr4	=	op4
00016D90                            	spReleaseRt	$0F, $0F, $0F, $0F
00016D90 =0000000F                M sprr1	=	op1
00016D90 =0000000F                M sprr2	=	op2
00016D90 =0000000F                M sprr3	=	op3
00016D90 =0000000F                M sprr4	=	op4
00016D90                            	spSSGEG		$00, $00, $00, $00
00016D90 =00000000                M spss1	=	op1
00016D90 =00000000                M spss2	=	op2
00016D90 =00000000                M spss3	=	op3
00016D90 =00000000                M spss4	=	op4
00016D90                            	spTotalLv	$23, $29, $00, $07
00016D90 =00000023                M sptl1	=	op1
00016D90 =00000029                M sptl2	=	op2
00016D90 =00000000                M sptl3	=	op3
00016D90 =00000007                M sptl4	=	op4
00016D90 34                       M 	dc.b	(spfe<<3)+spal
00016D91 =00000080                M sptlmask4	set	$80
00016D91 =00000000                M sptlmask2	set	((spal>=5)<<7)
00016D91 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00016D91 =00000000                M sptlmask1	set	((spal=7)<<7)
00016D91 3341 7E74                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00016D95 5B9F 5F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00016D99 0407 0708                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00016D9D 0000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00016DA1 FFFF EFFF                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00016DA5 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00016DA9 2380 2987                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00016DAD 4E41 54                  M 	dc.b	'NAT'
00016DB0                            
00016DB0                            	; Patch $06
00016DB0                            	; $3A
00016DB0                            	; $01, $07, $31, $71,	$8E, $8E, $8D, $53
00016DB0                            	; $0E, $0E, $0E, $03,	$00, $00, $00, $07
00016DB0                            	; $1F, $FF, $1F, $0F,	$18, $28, $27, $80
00016DB0                            	spAlgorithm	$02
00016DB0 =00000007                M spatnum	=	spatnum+1
00016DB0 =00000002                M spal	=	val
00016DB0                            	spFeedback	$07
00016DB0 =00000007                M spfe	=	val
00016DB0                            	spDetune	$00, $03, $00, $07
00016DB0 =00000000                M spde1	=	op1
00016DB0 =00000003                M spde2	=	op2
00016DB0 =00000000                M spde3	=	op3
00016DB0 =00000007                M spde4	=	op4
00016DB0                            	spMultiple	$01, $01, $07, $01
00016DB0 =00000001                M spmu1	=	op1
00016DB0 =00000001                M spmu2	=	op2
00016DB0 =00000007                M spmu3	=	op3
00016DB0 =00000001                M spmu4	=	op4
00016DB0                            	spRateScale	$02, $02, $02, $01
00016DB0 =00000002                M sprs1	=	op1
00016DB0 =00000002                M sprs2	=	op2
00016DB0 =00000002                M sprs3	=	op3
00016DB0 =00000001                M sprs4	=	op4
00016DB0                            	spAttackRt	$0E, $0D, $0E, $13
00016DB0 =0000000E                M spar1	=	op1
00016DB0 =0000000D                M spar2	=	op2
00016DB0 =0000000E                M spar3	=	op3
00016DB0 =00000013                M spar4	=	op4
00016DB0                            	spAmpMod	$00, $00, $00, $00
00016DB0 =00000000                M spam1	=	op1
00016DB0 =00000000                M spam2	=	op2
00016DB0 =00000000                M spam3	=	op3
00016DB0 =00000000                M spam4	=	op4
00016DB0                            	spSustainRt	$0E, $0E, $0E, $03
00016DB0 =0000000E                M spsr1	=	op1
00016DB0 =0000000E                M spsr2	=	op2
00016DB0 =0000000E                M spsr3	=	op3
00016DB0 =00000003                M spsr4	=	op4
00016DB0                            	spSustainLv	$01, $01, $0F, $00
00016DB0 =00000001                M spsl1	=	op1
00016DB0 =00000001                M spsl2	=	op2
00016DB0 =0000000F                M spsl3	=	op3
00016DB0 =00000000                M spsl4	=	op4
00016DB0                            	spDecayRt	$00, $00, $00, $07
00016DB0 =00000000                M spdr1	=	op1
00016DB0 =00000000                M spdr2	=	op2
00016DB0 =00000000                M spdr3	=	op3
00016DB0 =00000007                M spdr4	=	op4
00016DB0                            	spReleaseRt	$0F, $0F, $0F, $0F
00016DB0 =0000000F                M sprr1	=	op1
00016DB0 =0000000F                M sprr2	=	op2
00016DB0 =0000000F                M sprr3	=	op3
00016DB0 =0000000F                M sprr4	=	op4
00016DB0                            	spSSGEG		$00, $00, $00, $00
00016DB0 =00000000                M spss1	=	op1
00016DB0 =00000000                M spss2	=	op2
00016DB0 =00000000                M spss3	=	op3
00016DB0 =00000000                M spss4	=	op4
00016DB0                            	spTotalLv	$18, $27, $28, $00
00016DB0 =00000018                M sptl1	=	op1
00016DB0 =00000027                M sptl2	=	op2
00016DB0 =00000028                M sptl3	=	op3
00016DB0 =00000000                M sptl4	=	op4
00016DB0 3A                       M 	dc.b	(spfe<<3)+spal
00016DB1 =00000080                M sptlmask4	set	$80
00016DB1 =00000000                M sptlmask2	set	((spal>=5)<<7)
00016DB1 =00000000                M sptlmask3	set	((spal>=4)<<7)
00016DB1 =00000000                M sptlmask1	set	((spal=7)<<7)
00016DB1 0107 3171                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00016DB5 8E8E 8D53                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00016DB9 0E0E 0E03                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00016DBD 0000 0007                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00016DC1 1FFF 1F0F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00016DC5 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00016DC9 1828 2780                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00016DCD 4E41 54                  M 	dc.b	'NAT'
00016DD0                            
00016DD0                            	; Patch $07
00016DD0                            	; $3C
00016DD0                            	; $32, $32, $71, $42,	$1F, $18, $1F, $1E
00016DD0                            	; $07, $1F, $07, $1F,	$00, $00, $00, $00
00016DD0                            	; $1F, $0F, $1F, $0F,	$1E, $80, $0C, $80
00016DD0                            	spAlgorithm	$04
00016DD0 =00000008                M spatnum	=	spatnum+1
00016DD0 =00000004                M spal	=	val
00016DD0                            	spFeedback	$07
00016DD0 =00000007                M spfe	=	val
00016DD0                            	spDetune	$03, $07, $03, $04
00016DD0 =00000003                M spde1	=	op1
00016DD0 =00000007                M spde2	=	op2
00016DD0 =00000003                M spde3	=	op3
00016DD0 =00000004                M spde4	=	op4
00016DD0                            	spMultiple	$02, $01, $02, $02
00016DD0 =00000002                M spmu1	=	op1
00016DD0 =00000001                M spmu2	=	op2
00016DD0 =00000002                M spmu3	=	op3
00016DD0 =00000002                M spmu4	=	op4
00016DD0                            	spRateScale	$00, $00, $00, $00
00016DD0 =00000000                M sprs1	=	op1
00016DD0 =00000000                M sprs2	=	op2
00016DD0 =00000000                M sprs3	=	op3
00016DD0 =00000000                M sprs4	=	op4
00016DD0                            	spAttackRt	$1F, $1F, $18, $1E
00016DD0 =0000001F                M spar1	=	op1
00016DD0 =0000001F                M spar2	=	op2
00016DD0 =00000018                M spar3	=	op3
00016DD0 =0000001E                M spar4	=	op4
00016DD0                            	spAmpMod	$00, $00, $00, $00
00016DD0 =00000000                M spam1	=	op1
00016DD0 =00000000                M spam2	=	op2
00016DD0 =00000000                M spam3	=	op3
00016DD0 =00000000                M spam4	=	op4
00016DD0                            	spSustainRt	$07, $07, $1F, $1F
00016DD0 =00000007                M spsr1	=	op1
00016DD0 =00000007                M spsr2	=	op2
00016DD0 =0000001F                M spsr3	=	op3
00016DD0 =0000001F                M spsr4	=	op4
00016DD0                            	spSustainLv	$01, $01, $00, $00
00016DD0 =00000001                M spsl1	=	op1
00016DD0 =00000001                M spsl2	=	op2
00016DD0 =00000000                M spsl3	=	op3
00016DD0 =00000000                M spsl4	=	op4
00016DD0                            	spDecayRt	$00, $00, $00, $00
00016DD0 =00000000                M spdr1	=	op1
00016DD0 =00000000                M spdr2	=	op2
00016DD0 =00000000                M spdr3	=	op3
00016DD0 =00000000                M spdr4	=	op4
00016DD0                            	spReleaseRt	$0F, $0F, $0F, $0F
00016DD0 =0000000F                M sprr1	=	op1
00016DD0 =0000000F                M sprr2	=	op2
00016DD0 =0000000F                M sprr3	=	op3
00016DD0 =0000000F                M sprr4	=	op4
00016DD0                            	spSSGEG		$00, $00, $00, $00
00016DD0 =00000000                M spss1	=	op1
00016DD0 =00000000                M spss2	=	op2
00016DD0 =00000000                M spss3	=	op3
00016DD0 =00000000                M spss4	=	op4
00016DD0                            	spTotalLv	$1E, $0C, $00, $00
00016DD0 =0000001E                M sptl1	=	op1
00016DD0 =0000000C                M sptl2	=	op2
00016DD0 =00000000                M sptl3	=	op3
00016DD0 =00000000                M sptl4	=	op4
00016DD0 3C                       M 	dc.b	(spfe<<3)+spal
00016DD1 =00000080                M sptlmask4	set	$80
00016DD1 =00000000                M sptlmask2	set	((spal>=5)<<7)
00016DD1 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00016DD1 =00000000                M sptlmask1	set	((spal=7)<<7)
00016DD1 3232 7142                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00016DD5 1F18 1F1E                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00016DD9 071F 071F                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00016DDD 0000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00016DE1 1F0F 1F0F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00016DE5 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00016DE9 1E80 0C80                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00016DED 4E41 54                  M 	dc.b	'NAT'
00016DF0                            
00016DF0                            	; Patch $08
00016DF0                            	; $3C
00016DF0                            	; $71, $72, $3F, $34,	$8D, $52, $9F, $1F
00016DF0                            	; $09, $00, $00, $0D,	$00, $00, $00, $00
00016DF0                            	; $23, $08, $02, $F7,	$15, $80, $1D, $87
00016DF0                            	spAlgorithm	$04
00016DF0 =00000009                M spatnum	=	spatnum+1
00016DF0 =00000004                M spal	=	val
00016DF0                            	spFeedback	$07
00016DF0 =00000007                M spfe	=	val
00016DF0                            	spDetune	$07, $03, $07, $03
00016DF0 =00000007                M spde1	=	op1
00016DF0 =00000003                M spde2	=	op2
00016DF0 =00000007                M spde3	=	op3
00016DF0 =00000003                M spde4	=	op4
00016DF0                            	spMultiple	$01, $0F, $02, $04
00016DF0 =00000001                M spmu1	=	op1
00016DF0 =0000000F                M spmu2	=	op2
00016DF0 =00000002                M spmu3	=	op3
00016DF0 =00000004                M spmu4	=	op4
00016DF0                            	spRateScale	$02, $02, $01, $00
00016DF0 =00000002                M sprs1	=	op1
00016DF0 =00000002                M sprs2	=	op2
00016DF0 =00000001                M sprs3	=	op3
00016DF0 =00000000                M sprs4	=	op4
00016DF0                            	spAttackRt	$0D, $1F, $12, $1F
00016DF0 =0000000D                M spar1	=	op1
00016DF0 =0000001F                M spar2	=	op2
00016DF0 =00000012                M spar3	=	op3
00016DF0 =0000001F                M spar4	=	op4
00016DF0                            	spAmpMod	$00, $00, $00, $00
00016DF0 =00000000                M spam1	=	op1
00016DF0 =00000000                M spam2	=	op2
00016DF0 =00000000                M spam3	=	op3
00016DF0 =00000000                M spam4	=	op4
00016DF0                            	spSustainRt	$09, $00, $00, $0D
00016DF0 =00000009                M spsr1	=	op1
00016DF0 =00000000                M spsr2	=	op2
00016DF0 =00000000                M spsr3	=	op3
00016DF0 =0000000D                M spsr4	=	op4
00016DF0                            	spSustainLv	$02, $00, $00, $0F
00016DF0 =00000002                M spsl1	=	op1
00016DF0 =00000000                M spsl2	=	op2
00016DF0 =00000000                M spsl3	=	op3
00016DF0 =0000000F                M spsl4	=	op4
00016DF0                            	spDecayRt	$00, $00, $00, $00
00016DF0 =00000000                M spdr1	=	op1
00016DF0 =00000000                M spdr2	=	op2
00016DF0 =00000000                M spdr3	=	op3
00016DF0 =00000000                M spdr4	=	op4
00016DF0                            	spReleaseRt	$03, $02, $08, $07
00016DF0 =00000003                M sprr1	=	op1
00016DF0 =00000002                M sprr2	=	op2
00016DF0 =00000008                M sprr3	=	op3
00016DF0 =00000007                M sprr4	=	op4
00016DF0                            	spSSGEG		$00, $00, $00, $00
00016DF0 =00000000                M spss1	=	op1
00016DF0 =00000000                M spss2	=	op2
00016DF0 =00000000                M spss3	=	op3
00016DF0 =00000000                M spss4	=	op4
00016DF0                            	spTotalLv	$15, $1D, $00, $07
00016DF0 =00000015                M sptl1	=	op1
00016DF0 =0000001D                M sptl2	=	op2
00016DF0 =00000000                M sptl3	=	op3
00016DF0 =00000007                M sptl4	=	op4
00016DF0 3C                       M 	dc.b	(spfe<<3)+spal
00016DF1 =00000080                M sptlmask4	set	$80
00016DF1 =00000000                M sptlmask2	set	((spal>=5)<<7)
00016DF1 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00016DF1 =00000000                M sptlmask1	set	((spal=7)<<7)
00016DF1 7172 3F34                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00016DF5 8D52 9F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00016DF9 0900 000D                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00016DFD 0000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00016E01 2308 02F7                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00016E05 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00016E09 1580 1D87                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00016E0D 4E41 54                  M 	dc.b	'NAT'
00016E10                            
00016E10                            	; Patch $09
00016E10                            	; $3D
00016E10                            	; $01, $01, $00, $00,	$8E, $52, $14, $4C
00016E10                            	; $08, $08, $0E, $03,	$00, $00, $00, $00
00016E10                            	; $1F, $1F, $1F, $1F,	$1B, $80, $80, $9B
00016E10                            	spAlgorithm	$05
00016E10 =0000000A                M spatnum	=	spatnum+1
00016E10 =00000005                M spal	=	val
00016E10                            	spFeedback	$07
00016E10 =00000007                M spfe	=	val
00016E10                            	spDetune	$00, $00, $00, $00
00016E10 =00000000                M spde1	=	op1
00016E10 =00000000                M spde2	=	op2
00016E10 =00000000                M spde3	=	op3
00016E10 =00000000                M spde4	=	op4
00016E10                            	spMultiple	$01, $00, $01, $00
00016E10 =00000001                M spmu1	=	op1
00016E10 =00000000                M spmu2	=	op2
00016E10 =00000001                M spmu3	=	op3
00016E10 =00000000                M spmu4	=	op4
00016E10                            	spRateScale	$02, $00, $01, $01
00016E10 =00000002                M sprs1	=	op1
00016E10 =00000000                M sprs2	=	op2
00016E10 =00000001                M sprs3	=	op3
00016E10 =00000001                M sprs4	=	op4
00016E10                            	spAttackRt	$0E, $14, $12, $0C
00016E10 =0000000E                M spar1	=	op1
00016E10 =00000014                M spar2	=	op2
00016E10 =00000012                M spar3	=	op3
00016E10 =0000000C                M spar4	=	op4
00016E10                            	spAmpMod	$00, $00, $00, $00
00016E10 =00000000                M spam1	=	op1
00016E10 =00000000                M spam2	=	op2
00016E10 =00000000                M spam3	=	op3
00016E10 =00000000                M spam4	=	op4
00016E10                            	spSustainRt	$08, $0E, $08, $03
00016E10 =00000008                M spsr1	=	op1
00016E10 =0000000E                M spsr2	=	op2
00016E10 =00000008                M spsr3	=	op3
00016E10 =00000003                M spsr4	=	op4
00016E10                            	spSustainLv	$01, $01, $01, $01
00016E10 =00000001                M spsl1	=	op1
00016E10 =00000001                M spsl2	=	op2
00016E10 =00000001                M spsl3	=	op3
00016E10 =00000001                M spsl4	=	op4
00016E10                            	spDecayRt	$00, $00, $00, $00
00016E10 =00000000                M spdr1	=	op1
00016E10 =00000000                M spdr2	=	op2
00016E10 =00000000                M spdr3	=	op3
00016E10 =00000000                M spdr4	=	op4
00016E10                            	spReleaseRt	$0F, $0F, $0F, $0F
00016E10 =0000000F                M sprr1	=	op1
00016E10 =0000000F                M sprr2	=	op2
00016E10 =0000000F                M sprr3	=	op3
00016E10 =0000000F                M sprr4	=	op4
00016E10                            	spSSGEG		$00, $00, $00, $00
00016E10 =00000000                M spss1	=	op1
00016E10 =00000000                M spss2	=	op2
00016E10 =00000000                M spss3	=	op3
00016E10 =00000000                M spss4	=	op4
00016E10                            	spTotalLv	$1B, $00, $00, $1B
00016E10 =0000001B                M sptl1	=	op1
00016E10 =00000000                M sptl2	=	op2
00016E10 =00000000                M sptl3	=	op3
00016E10 =0000001B                M sptl4	=	op4
00016E10 3D                       M 	dc.b	(spfe<<3)+spal
00016E11 =00000080                M sptlmask4	set	$80
00016E11 =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
00016E11 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00016E11 =00000000                M sptlmask1	set	((spal=7)<<7)
00016E11 0101 0000                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00016E15 8E52 144C                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00016E19 0808 0E03                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00016E1D 0000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00016E21 1F1F 1F1F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00016E25 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00016E29 1B80 809B                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00016E2D 4E41 54                  M 	dc.b	'NAT'
00016E30                            
00016E30                            	; Patch $0A
00016E30                            	; $3A
00016E30                            	; $01, $01, $01, $02,	$8D, $07, $07, $52
00016E30                            	; $09, $00, $00, $03,	$01, $02, $02, $00
00016E30                            	; $52, $02, $02, $28,	$18, $22, $18, $80
00016E30                            	spAlgorithm	$02
00016E30 =0000000B                M spatnum	=	spatnum+1
00016E30 =00000002                M spal	=	val
00016E30                            	spFeedback	$07
00016E30 =00000007                M spfe	=	val
00016E30                            	spDetune	$00, $00, $00, $00
00016E30 =00000000                M spde1	=	op1
00016E30 =00000000                M spde2	=	op2
00016E30 =00000000                M spde3	=	op3
00016E30 =00000000                M spde4	=	op4
00016E30                            	spMultiple	$01, $01, $01, $02
00016E30 =00000001                M spmu1	=	op1
00016E30 =00000001                M spmu2	=	op2
00016E30 =00000001                M spmu3	=	op3
00016E30 =00000002                M spmu4	=	op4
00016E30                            	spRateScale	$02, $00, $00, $01
00016E30 =00000002                M sprs1	=	op1
00016E30 =00000000                M sprs2	=	op2
00016E30 =00000000                M sprs3	=	op3
00016E30 =00000001                M sprs4	=	op4
00016E30                            	spAttackRt	$0D, $07, $07, $12
00016E30 =0000000D                M spar1	=	op1
00016E30 =00000007                M spar2	=	op2
00016E30 =00000007                M spar3	=	op3
00016E30 =00000012                M spar4	=	op4
00016E30                            	spAmpMod	$00, $00, $00, $00
00016E30 =00000000                M spam1	=	op1
00016E30 =00000000                M spam2	=	op2
00016E30 =00000000                M spam3	=	op3
00016E30 =00000000                M spam4	=	op4
00016E30                            	spSustainRt	$09, $00, $00, $03
00016E30 =00000009                M spsr1	=	op1
00016E30 =00000000                M spsr2	=	op2
00016E30 =00000000                M spsr3	=	op3
00016E30 =00000003                M spsr4	=	op4
00016E30                            	spSustainLv	$05, $00, $00, $02
00016E30 =00000005                M spsl1	=	op1
00016E30 =00000000                M spsl2	=	op2
00016E30 =00000000                M spsl3	=	op3
00016E30 =00000002                M spsl4	=	op4
00016E30                            	spDecayRt	$01, $02, $02, $00
00016E30 =00000001                M spdr1	=	op1
00016E30 =00000002                M spdr2	=	op2
00016E30 =00000002                M spdr3	=	op3
00016E30 =00000000                M spdr4	=	op4
00016E30                            	spReleaseRt	$02, $02, $02, $08
00016E30 =00000002                M sprr1	=	op1
00016E30 =00000002                M sprr2	=	op2
00016E30 =00000002                M sprr3	=	op3
00016E30 =00000008                M sprr4	=	op4
00016E30                            	spSSGEG		$00, $00, $00, $00
00016E30 =00000000                M spss1	=	op1
00016E30 =00000000                M spss2	=	op2
00016E30 =00000000                M spss3	=	op3
00016E30 =00000000                M spss4	=	op4
00016E30                            	spTotalLv	$18, $18, $22, $00
00016E30 =00000018                M sptl1	=	op1
00016E30 =00000018                M sptl2	=	op2
00016E30 =00000022                M sptl3	=	op3
00016E30 =00000000                M sptl4	=	op4
00016E30 3A                       M 	dc.b	(spfe<<3)+spal
00016E31 =00000080                M sptlmask4	set	$80
00016E31 =00000000                M sptlmask2	set	((spal>=5)<<7)
00016E31 =00000000                M sptlmask3	set	((spal>=4)<<7)
00016E31 =00000000                M sptlmask1	set	((spal=7)<<7)
00016E31 0101 0102                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00016E35 8D07 0752                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00016E39 0900 0003                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00016E3D 0102 0200                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00016E41 5202 0228                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00016E45 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00016E49 1822 1880                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00016E4D 4E41 54                  M 	dc.b	'NAT'
00016E50                            
00016E50                            	; Patch $0B
00016E50                            	; $3C
00016E50                            	; $36, $31, $76, $71,	$94, $9F, $96, $9F
00016E50                            	; $12, $00, $14, $0F,	$04, $0A, $04, $0D
00016E50                            	; $2F, $0F, $4F, $2F,	$33, $80, $1A, $80
00016E50                            	spAlgorithm	$04
00016E50 =0000000C                M spatnum	=	spatnum+1
00016E50 =00000004                M spal	=	val
00016E50                            	spFeedback	$07
00016E50 =00000007                M spfe	=	val
00016E50                            	spDetune	$03, $07, $03, $07
00016E50 =00000003                M spde1	=	op1
00016E50 =00000007                M spde2	=	op2
00016E50 =00000003                M spde3	=	op3
00016E50 =00000007                M spde4	=	op4
00016E50                            	spMultiple	$06, $06, $01, $01
00016E50 =00000006                M spmu1	=	op1
00016E50 =00000006                M spmu2	=	op2
00016E50 =00000001                M spmu3	=	op3
00016E50 =00000001                M spmu4	=	op4
00016E50                            	spRateScale	$02, $02, $02, $02
00016E50 =00000002                M sprs1	=	op1
00016E50 =00000002                M sprs2	=	op2
00016E50 =00000002                M sprs3	=	op3
00016E50 =00000002                M sprs4	=	op4
00016E50                            	spAttackRt	$14, $16, $1F, $1F
00016E50 =00000014                M spar1	=	op1
00016E50 =00000016                M spar2	=	op2
00016E50 =0000001F                M spar3	=	op3
00016E50 =0000001F                M spar4	=	op4
00016E50                            	spAmpMod	$00, $00, $00, $00
00016E50 =00000000                M spam1	=	op1
00016E50 =00000000                M spam2	=	op2
00016E50 =00000000                M spam3	=	op3
00016E50 =00000000                M spam4	=	op4
00016E50                            	spSustainRt	$12, $14, $00, $0F
00016E50 =00000012                M spsr1	=	op1
00016E50 =00000014                M spsr2	=	op2
00016E50 =00000000                M spsr3	=	op3
00016E50 =0000000F                M spsr4	=	op4
00016E50                            	spSustainLv	$02, $04, $00, $02
00016E50 =00000002                M spsl1	=	op1
00016E50 =00000004                M spsl2	=	op2
00016E50 =00000000                M spsl3	=	op3
00016E50 =00000002                M spsl4	=	op4
00016E50                            	spDecayRt	$04, $04, $0A, $0D
00016E50 =00000004                M spdr1	=	op1
00016E50 =00000004                M spdr2	=	op2
00016E50 =0000000A                M spdr3	=	op3
00016E50 =0000000D                M spdr4	=	op4
00016E50                            	spReleaseRt	$0F, $0F, $0F, $0F
00016E50 =0000000F                M sprr1	=	op1
00016E50 =0000000F                M sprr2	=	op2
00016E50 =0000000F                M sprr3	=	op3
00016E50 =0000000F                M sprr4	=	op4
00016E50                            	spSSGEG		$00, $00, $00, $00
00016E50 =00000000                M spss1	=	op1
00016E50 =00000000                M spss2	=	op2
00016E50 =00000000                M spss3	=	op3
00016E50 =00000000                M spss4	=	op4
00016E50                            	spTotalLv	$33, $1A, $00, $00
00016E50 =00000033                M sptl1	=	op1
00016E50 =0000001A                M sptl2	=	op2
00016E50 =00000000                M sptl3	=	op3
00016E50 =00000000                M sptl4	=	op4
00016E50 3C                       M 	dc.b	(spfe<<3)+spal
00016E51 =00000080                M sptlmask4	set	$80
00016E51 =00000000                M sptlmask2	set	((spal>=5)<<7)
00016E51 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00016E51 =00000000                M sptlmask1	set	((spal=7)<<7)
00016E51 3631 7671                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00016E55 949F 969F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00016E59 1200 140F                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00016E5D 040A 040D                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00016E61 2F0F 4F2F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00016E65 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00016E69 3380 1A80                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00016E6D 4E41 54                  M 	dc.b	'NAT'
00016E70                            
00016E70                            	; Patch $0C
00016E70                            	; $34
00016E70                            	; $33, $41, $7E, $74,	$5B, $9F, $5F, $1F
00016E70                            	; $04, $07, $07, $08,	$00, $00, $00, $00
00016E70                            	; $FF, $FF, $EF, $FF,	$23, $90, $29, $97
00016E70                            	spAlgorithm	$04
00016E70 =0000000D                M spatnum	=	spatnum+1
00016E70 =00000004                M spal	=	val
00016E70                            	spFeedback	$06
00016E70 =00000006                M spfe	=	val
00016E70                            	spDetune	$03, $07, $04, $07
00016E70 =00000003                M spde1	=	op1
00016E70 =00000007                M spde2	=	op2
00016E70 =00000004                M spde3	=	op3
00016E70 =00000007                M spde4	=	op4
00016E70                            	spMultiple	$03, $0E, $01, $04
00016E70 =00000003                M spmu1	=	op1
00016E70 =0000000E                M spmu2	=	op2
00016E70 =00000001                M spmu3	=	op3
00016E70 =00000004                M spmu4	=	op4
00016E70                            	spRateScale	$01, $01, $02, $00
00016E70 =00000001                M sprs1	=	op1
00016E70 =00000001                M sprs2	=	op2
00016E70 =00000002                M sprs3	=	op3
00016E70 =00000000                M sprs4	=	op4
00016E70                            	spAttackRt	$1B, $1F, $1F, $1F
00016E70 =0000001B                M spar1	=	op1
00016E70 =0000001F                M spar2	=	op2
00016E70 =0000001F                M spar3	=	op3
00016E70 =0000001F                M spar4	=	op4
00016E70                            	spAmpMod	$00, $00, $00, $00
00016E70 =00000000                M spam1	=	op1
00016E70 =00000000                M spam2	=	op2
00016E70 =00000000                M spam3	=	op3
00016E70 =00000000                M spam4	=	op4
00016E70                            	spSustainRt	$04, $07, $07, $08
00016E70 =00000004                M spsr1	=	op1
00016E70 =00000007                M spsr2	=	op2
00016E70 =00000007                M spsr3	=	op3
00016E70 =00000008                M spsr4	=	op4
00016E70                            	spSustainLv	$0F, $0E, $0F, $0F
00016E70 =0000000F                M spsl1	=	op1
00016E70 =0000000E                M spsl2	=	op2
00016E70 =0000000F                M spsl3	=	op3
00016E70 =0000000F                M spsl4	=	op4
00016E70                            	spDecayRt	$00, $00, $00, $00
00016E70 =00000000                M spdr1	=	op1
00016E70 =00000000                M spdr2	=	op2
00016E70 =00000000                M spdr3	=	op3
00016E70 =00000000                M spdr4	=	op4
00016E70                            	spReleaseRt	$0F, $0F, $0F, $0F
00016E70 =0000000F                M sprr1	=	op1
00016E70 =0000000F                M sprr2	=	op2
00016E70 =0000000F                M sprr3	=	op3
00016E70 =0000000F                M sprr4	=	op4
00016E70                            	spSSGEG		$00, $00, $00, $00
00016E70 =00000000                M spss1	=	op1
00016E70 =00000000                M spss2	=	op2
00016E70 =00000000                M spss3	=	op3
00016E70 =00000000                M spss4	=	op4
00016E70                            	spTotalLv	$23, $29, $10, $17
00016E70 =00000023                M sptl1	=	op1
00016E70 =00000029                M sptl2	=	op2
00016E70 =00000010                M sptl3	=	op3
00016E70 =00000017                M sptl4	=	op4
00016E70 34                       M 	dc.b	(spfe<<3)+spal
00016E71 =00000080                M sptlmask4	set	$80
00016E71 =00000000                M sptlmask2	set	((spal>=5)<<7)
00016E71 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00016E71 =00000000                M sptlmask1	set	((spal=7)<<7)
00016E71 3341 7E74                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00016E75 5B9F 5F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00016E79 0407 0708                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00016E7D 0000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00016E81 FFFF EFFF                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00016E85 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00016E89 2390 2997                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00016E8D 4E41 54                  M 	dc.b	'NAT'
00016E90                            
00016E90                            	; Patch $0D
00016E90                            	; $38
00016E90                            	; $63, $31, $31, $31,	$10, $13, $1A, $1B
00016E90                            	; $0E, $00, $00, $00,	$00, $00, $00, $00
00016E90                            	; $3F, $0F, $0F, $0F,	$1A, $19, $1A, $80
00016E90                            	spAlgorithm	$00
00016E90 =0000000E                M spatnum	=	spatnum+1
00016E90 =00000000                M spal	=	val
00016E90                            	spFeedback	$07
00016E90 =00000007                M spfe	=	val
00016E90                            	spDetune	$06, $03, $03, $03
00016E90 =00000006                M spde1	=	op1
00016E90 =00000003                M spde2	=	op2
00016E90 =00000003                M spde3	=	op3
00016E90 =00000003                M spde4	=	op4
00016E90                            	spMultiple	$03, $01, $01, $01
00016E90 =00000003                M spmu1	=	op1
00016E90 =00000001                M spmu2	=	op2
00016E90 =00000001                M spmu3	=	op3
00016E90 =00000001                M spmu4	=	op4
00016E90                            	spRateScale	$00, $00, $00, $00
00016E90 =00000000                M sprs1	=	op1
00016E90 =00000000                M sprs2	=	op2
00016E90 =00000000                M sprs3	=	op3
00016E90 =00000000                M sprs4	=	op4
00016E90                            	spAttackRt	$10, $1A, $13, $1B
00016E90 =00000010                M spar1	=	op1
00016E90 =0000001A                M spar2	=	op2
00016E90 =00000013                M spar3	=	op3
00016E90 =0000001B                M spar4	=	op4
00016E90                            	spAmpMod	$00, $00, $00, $00
00016E90 =00000000                M spam1	=	op1
00016E90 =00000000                M spam2	=	op2
00016E90 =00000000                M spam3	=	op3
00016E90 =00000000                M spam4	=	op4
00016E90                            	spSustainRt	$0E, $00, $00, $00
00016E90 =0000000E                M spsr1	=	op1
00016E90 =00000000                M spsr2	=	op2
00016E90 =00000000                M spsr3	=	op3
00016E90 =00000000                M spsr4	=	op4
00016E90                            	spSustainLv	$03, $00, $00, $00
00016E90 =00000003                M spsl1	=	op1
00016E90 =00000000                M spsl2	=	op2
00016E90 =00000000                M spsl3	=	op3
00016E90 =00000000                M spsl4	=	op4
00016E90                            	spDecayRt	$00, $00, $00, $00
00016E90 =00000000                M spdr1	=	op1
00016E90 =00000000                M spdr2	=	op2
00016E90 =00000000                M spdr3	=	op3
00016E90 =00000000                M spdr4	=	op4
00016E90                            	spReleaseRt	$0F, $0F, $0F, $0F
00016E90 =0000000F                M sprr1	=	op1
00016E90 =0000000F                M sprr2	=	op2
00016E90 =0000000F                M sprr3	=	op3
00016E90 =0000000F                M sprr4	=	op4
00016E90                            	spSSGEG		$00, $00, $00, $00
00016E90 =00000000                M spss1	=	op1
00016E90 =00000000                M spss2	=	op2
00016E90 =00000000                M spss3	=	op3
00016E90 =00000000                M spss4	=	op4
00016E90                            	spTotalLv	$1A, $1A, $19, $00
00016E90 =0000001A                M sptl1	=	op1
00016E90 =0000001A                M sptl2	=	op2
00016E90 =00000019                M sptl3	=	op3
00016E90 =00000000                M sptl4	=	op4
00016E90 38                       M 	dc.b	(spfe<<3)+spal
00016E91 =00000080                M sptlmask4	set	$80
00016E91 =00000000                M sptlmask2	set	((spal>=5)<<7)
00016E91 =00000000                M sptlmask3	set	((spal>=4)<<7)
00016E91 =00000000                M sptlmask1	set	((spal=7)<<7)
00016E91 6331 3131                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00016E95 1013 1A1B                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00016E99 0E00 0000                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00016E9D 0000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00016EA1 3F0F 0F0F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00016EA5 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00016EA9 1A19 1A80                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00016EAD 4E41 54                  M 	dc.b	'NAT'
00016EB0                            
00016EB0                            	; Patch $0E
00016EB0                            	; $3A
00016EB0                            	; $31, $25, $73, $41,	$5F, $1F, $1F, $9C
00016EB0                            	; $08, $05, $04, $05,	$03, $04, $02, $02
00016EB0                            	; $2F, $2F, $1F, $2F,	$29, $27, $1F, $80
00016EB0                            	spAlgorithm	$02
00016EB0 =0000000F                M spatnum	=	spatnum+1
00016EB0 =00000002                M spal	=	val
00016EB0                            	spFeedback	$07
00016EB0 =00000007                M spfe	=	val
00016EB0                            	spDetune	$03, $07, $02, $04
00016EB0 =00000003                M spde1	=	op1
00016EB0 =00000007                M spde2	=	op2
00016EB0 =00000002                M spde3	=	op3
00016EB0 =00000004                M spde4	=	op4
00016EB0                            	spMultiple	$01, $03, $05, $01
00016EB0 =00000001                M spmu1	=	op1
00016EB0 =00000003                M spmu2	=	op2
00016EB0 =00000005                M spmu3	=	op3
00016EB0 =00000001                M spmu4	=	op4
00016EB0                            	spRateScale	$01, $00, $00, $02
00016EB0 =00000001                M sprs1	=	op1
00016EB0 =00000000                M sprs2	=	op2
00016EB0 =00000000                M sprs3	=	op3
00016EB0 =00000002                M sprs4	=	op4
00016EB0                            	spAttackRt	$1F, $1F, $1F, $1C
00016EB0 =0000001F                M spar1	=	op1
00016EB0 =0000001F                M spar2	=	op2
00016EB0 =0000001F                M spar3	=	op3
00016EB0 =0000001C                M spar4	=	op4
00016EB0                            	spAmpMod	$00, $00, $00, $00
00016EB0 =00000000                M spam1	=	op1
00016EB0 =00000000                M spam2	=	op2
00016EB0 =00000000                M spam3	=	op3
00016EB0 =00000000                M spam4	=	op4
00016EB0                            	spSustainRt	$08, $04, $05, $05
00016EB0 =00000008                M spsr1	=	op1
00016EB0 =00000004                M spsr2	=	op2
00016EB0 =00000005                M spsr3	=	op3
00016EB0 =00000005                M spsr4	=	op4
00016EB0                            	spSustainLv	$02, $01, $02, $02
00016EB0 =00000002                M spsl1	=	op1
00016EB0 =00000001                M spsl2	=	op2
00016EB0 =00000002                M spsl3	=	op3
00016EB0 =00000002                M spsl4	=	op4
00016EB0                            	spDecayRt	$03, $02, $04, $02
00016EB0 =00000003                M spdr1	=	op1
00016EB0 =00000002                M spdr2	=	op2
00016EB0 =00000004                M spdr3	=	op3
00016EB0 =00000002                M spdr4	=	op4
00016EB0                            	spReleaseRt	$0F, $0F, $0F, $0F
00016EB0 =0000000F                M sprr1	=	op1
00016EB0 =0000000F                M sprr2	=	op2
00016EB0 =0000000F                M sprr3	=	op3
00016EB0 =0000000F                M sprr4	=	op4
00016EB0                            	spSSGEG		$00, $00, $00, $00
00016EB0 =00000000                M spss1	=	op1
00016EB0 =00000000                M spss2	=	op2
00016EB0 =00000000                M spss3	=	op3
00016EB0 =00000000                M spss4	=	op4
00016EB0                            	spTotalLv	$29, $1F, $27, $00
00016EB0 =00000029                M sptl1	=	op1
00016EB0 =0000001F                M sptl2	=	op2
00016EB0 =00000027                M sptl3	=	op3
00016EB0 =00000000                M sptl4	=	op4
00016EB0 3A                       M 	dc.b	(spfe<<3)+spal
00016EB1 =00000080                M sptlmask4	set	$80
00016EB1 =00000000                M sptlmask2	set	((spal>=5)<<7)
00016EB1 =00000000                M sptlmask3	set	((spal>=4)<<7)
00016EB1 =00000000                M sptlmask1	set	((spal=7)<<7)
00016EB1 3125 7341                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00016EB5 5F1F 1F9C                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00016EB9 0805 0405                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00016EBD 0304 0202                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00016EC1 2F2F 1F2F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00016EC5 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00016EC9 2927 1F80                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00016ECD 4E41 54                  M 	dc.b	'NAT'
00016ED0                            
00016ED0                            	; Patch $0F
00016ED0                            	; $04
00016ED0                            	; $71, $41, $31, $31,	$12, $12, $12, $12
00016ED0                            	; $00, $00, $00, $00,	$00, $00, $00, $00
00016ED0                            	; $0F, $0F, $0F, $0F,	$23, $80, $23, $80
00016ED0                            	spAlgorithm	$04
00016ED0 =00000010                M spatnum	=	spatnum+1
00016ED0 =00000004                M spal	=	val
00016ED0                            	spFeedback	$00
00016ED0 =00000000                M spfe	=	val
00016ED0                            	spDetune	$07, $03, $04, $03
00016ED0 =00000007                M spde1	=	op1
00016ED0 =00000003                M spde2	=	op2
00016ED0 =00000004                M spde3	=	op3
00016ED0 =00000003                M spde4	=	op4
00016ED0                            	spMultiple	$01, $01, $01, $01
00016ED0 =00000001                M spmu1	=	op1
00016ED0 =00000001                M spmu2	=	op2
00016ED0 =00000001                M spmu3	=	op3
00016ED0 =00000001                M spmu4	=	op4
00016ED0                            	spRateScale	$00, $00, $00, $00
00016ED0 =00000000                M sprs1	=	op1
00016ED0 =00000000                M sprs2	=	op2
00016ED0 =00000000                M sprs3	=	op3
00016ED0 =00000000                M sprs4	=	op4
00016ED0                            	spAttackRt	$12, $12, $12, $12
00016ED0 =00000012                M spar1	=	op1
00016ED0 =00000012                M spar2	=	op2
00016ED0 =00000012                M spar3	=	op3
00016ED0 =00000012                M spar4	=	op4
00016ED0                            	spAmpMod	$00, $00, $00, $00
00016ED0 =00000000                M spam1	=	op1
00016ED0 =00000000                M spam2	=	op2
00016ED0 =00000000                M spam3	=	op3
00016ED0 =00000000                M spam4	=	op4
00016ED0                            	spSustainRt	$00, $00, $00, $00
00016ED0 =00000000                M spsr1	=	op1
00016ED0 =00000000                M spsr2	=	op2
00016ED0 =00000000                M spsr3	=	op3
00016ED0 =00000000                M spsr4	=	op4
00016ED0                            	spSustainLv	$00, $00, $00, $00
00016ED0 =00000000                M spsl1	=	op1
00016ED0 =00000000                M spsl2	=	op2
00016ED0 =00000000                M spsl3	=	op3
00016ED0 =00000000                M spsl4	=	op4
00016ED0                            	spDecayRt	$00, $00, $00, $00
00016ED0 =00000000                M spdr1	=	op1
00016ED0 =00000000                M spdr2	=	op2
00016ED0 =00000000                M spdr3	=	op3
00016ED0 =00000000                M spdr4	=	op4
00016ED0                            	spReleaseRt	$0F, $0F, $0F, $0F
00016ED0 =0000000F                M sprr1	=	op1
00016ED0 =0000000F                M sprr2	=	op2
00016ED0 =0000000F                M sprr3	=	op3
00016ED0 =0000000F                M sprr4	=	op4
00016ED0                            	spSSGEG		$00, $00, $00, $00
00016ED0 =00000000                M spss1	=	op1
00016ED0 =00000000                M spss2	=	op2
00016ED0 =00000000                M spss3	=	op3
00016ED0 =00000000                M spss4	=	op4
00016ED0                            	spTotalLv	$23, $23, $00, $00
00016ED0 =00000023                M sptl1	=	op1
00016ED0 =00000023                M sptl2	=	op2
00016ED0 =00000000                M sptl3	=	op3
00016ED0 =00000000                M sptl4	=	op4
00016ED0 04                       M 	dc.b	(spfe<<3)+spal
00016ED1 =00000080                M sptlmask4	set	$80
00016ED1 =00000000                M sptlmask2	set	((spal>=5)<<7)
00016ED1 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00016ED1 =00000000                M sptlmask1	set	((spal=7)<<7)
00016ED1 7141 3131                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00016ED5 1212 1212                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00016ED9 0000 0000                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00016EDD 0000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00016EE1 0F0F 0F0F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00016EE5 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00016EE9 2380 2380                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00016EED 4E41 54                  M 	dc.b	'NAT'
00016EF0                            
00016EF0                            	; Patch $10
00016EF0                            	; $14
00016EF0                            	; $75, $72, $35, $32,	$9F, $9F, $9F, $9F
00016EF0                            	; $05, $05, $00, $0A,	$05, $05, $07, $05
00016EF0                            	; $2F, $FF, $0F, $2F,	$1E, $80, $14, $80
00016EF0                            	spAlgorithm	$04
00016EF0 =00000011                M spatnum	=	spatnum+1
00016EF0 =00000004                M spal	=	val
00016EF0                            	spFeedback	$02
00016EF0 =00000002                M spfe	=	val
00016EF0                            	spDetune	$07, $03, $07, $03
00016EF0 =00000007                M spde1	=	op1
00016EF0 =00000003                M spde2	=	op2
00016EF0 =00000007                M spde3	=	op3
00016EF0 =00000003                M spde4	=	op4
00016EF0                            	spMultiple	$05, $05, $02, $02
00016EF0 =00000005                M spmu1	=	op1
00016EF0 =00000005                M spmu2	=	op2
00016EF0 =00000002                M spmu3	=	op3
00016EF0 =00000002                M spmu4	=	op4
00016EF0                            	spRateScale	$02, $02, $02, $02
00016EF0 =00000002                M sprs1	=	op1
00016EF0 =00000002                M sprs2	=	op2
00016EF0 =00000002                M sprs3	=	op3
00016EF0 =00000002                M sprs4	=	op4
00016EF0                            	spAttackRt	$1F, $1F, $1F, $1F
00016EF0 =0000001F                M spar1	=	op1
00016EF0 =0000001F                M spar2	=	op2
00016EF0 =0000001F                M spar3	=	op3
00016EF0 =0000001F                M spar4	=	op4
00016EF0                            	spAmpMod	$00, $00, $00, $00
00016EF0 =00000000                M spam1	=	op1
00016EF0 =00000000                M spam2	=	op2
00016EF0 =00000000                M spam3	=	op3
00016EF0 =00000000                M spam4	=	op4
00016EF0                            	spSustainRt	$05, $00, $05, $0A
00016EF0 =00000005                M spsr1	=	op1
00016EF0 =00000000                M spsr2	=	op2
00016EF0 =00000005                M spsr3	=	op3
00016EF0 =0000000A                M spsr4	=	op4
00016EF0                            	spSustainLv	$02, $00, $0F, $02
00016EF0 =00000002                M spsl1	=	op1
00016EF0 =00000000                M spsl2	=	op2
00016EF0 =0000000F                M spsl3	=	op3
00016EF0 =00000002                M spsl4	=	op4
00016EF0                            	spDecayRt	$05, $07, $05, $05
00016EF0 =00000005                M spdr1	=	op1
00016EF0 =00000007                M spdr2	=	op2
00016EF0 =00000005                M spdr3	=	op3
00016EF0 =00000005                M spdr4	=	op4
00016EF0                            	spReleaseRt	$0F, $0F, $0F, $0F
00016EF0 =0000000F                M sprr1	=	op1
00016EF0 =0000000F                M sprr2	=	op2
00016EF0 =0000000F                M sprr3	=	op3
00016EF0 =0000000F                M sprr4	=	op4
00016EF0                            	spSSGEG		$00, $00, $00, $00
00016EF0 =00000000                M spss1	=	op1
00016EF0 =00000000                M spss2	=	op2
00016EF0 =00000000                M spss3	=	op3
00016EF0 =00000000                M spss4	=	op4
00016EF0                            	spTotalLv	$1E, $14, $00, $00
00016EF0 =0000001E                M sptl1	=	op1
00016EF0 =00000014                M sptl2	=	op2
00016EF0 =00000000                M sptl3	=	op3
00016EF0 =00000000                M sptl4	=	op4
00016EF0 14                       M 	dc.b	(spfe<<3)+spal
00016EF1 =00000080                M sptlmask4	set	$80
00016EF1 =00000000                M sptlmask2	set	((spal>=5)<<7)
00016EF1 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00016EF1 =00000000                M sptlmask1	set	((spal=7)<<7)
00016EF1 7572 3532                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00016EF5 9F9F 9F9F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00016EF9 0505 000A                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00016EFD 0505 0705                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00016F01 2FFF 0F2F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00016F05 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00016F09 1E80 1480                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00016F0D 4E41 54                  M 	dc.b	'NAT'
00016F10                            
00016F10                            	; Patch $11
00016F10                            	; $3D
00016F10                            	; $01, $00, $01, $02,	$12, $1F, $1F, $14
00016F10                            	; $07, $02, $02, $0A,	$05, $05, $05, $05
00016F10                            	; $2F, $2F, $2F, $AF,	$1C, $80, $82, $80
00016F10                            	spAlgorithm	$05
00016F10 =00000012                M spatnum	=	spatnum+1
00016F10 =00000005                M spal	=	val
00016F10                            	spFeedback	$07
00016F10 =00000007                M spfe	=	val
00016F10                            	spDetune	$00, $00, $00, $00
00016F10 =00000000                M spde1	=	op1
00016F10 =00000000                M spde2	=	op2
00016F10 =00000000                M spde3	=	op3
00016F10 =00000000                M spde4	=	op4
00016F10                            	spMultiple	$01, $01, $00, $02
00016F10 =00000001                M spmu1	=	op1
00016F10 =00000001                M spmu2	=	op2
00016F10 =00000000                M spmu3	=	op3
00016F10 =00000002                M spmu4	=	op4
00016F10                            	spRateScale	$00, $00, $00, $00
00016F10 =00000000                M sprs1	=	op1
00016F10 =00000000                M sprs2	=	op2
00016F10 =00000000                M sprs3	=	op3
00016F10 =00000000                M sprs4	=	op4
00016F10                            	spAttackRt	$12, $1F, $1F, $14
00016F10 =00000012                M spar1	=	op1
00016F10 =0000001F                M spar2	=	op2
00016F10 =0000001F                M spar3	=	op3
00016F10 =00000014                M spar4	=	op4
00016F10                            	spAmpMod	$00, $00, $00, $00
00016F10 =00000000                M spam1	=	op1
00016F10 =00000000                M spam2	=	op2
00016F10 =00000000                M spam3	=	op3
00016F10 =00000000                M spam4	=	op4
00016F10                            	spSustainRt	$07, $02, $02, $0A
00016F10 =00000007                M spsr1	=	op1
00016F10 =00000002                M spsr2	=	op2
00016F10 =00000002                M spsr3	=	op3
00016F10 =0000000A                M spsr4	=	op4
00016F10                            	spSustainLv	$02, $02, $02, $0A
00016F10 =00000002                M spsl1	=	op1
00016F10 =00000002                M spsl2	=	op2
00016F10 =00000002                M spsl3	=	op3
00016F10 =0000000A                M spsl4	=	op4
00016F10                            	spDecayRt	$05, $05, $05, $05
00016F10 =00000005                M spdr1	=	op1
00016F10 =00000005                M spdr2	=	op2
00016F10 =00000005                M spdr3	=	op3
00016F10 =00000005                M spdr4	=	op4
00016F10                            	spReleaseRt	$0F, $0F, $0F, $0F
00016F10 =0000000F                M sprr1	=	op1
00016F10 =0000000F                M sprr2	=	op2
00016F10 =0000000F                M sprr3	=	op3
00016F10 =0000000F                M sprr4	=	op4
00016F10                            	spSSGEG		$00, $00, $00, $00
00016F10 =00000000                M spss1	=	op1
00016F10 =00000000                M spss2	=	op2
00016F10 =00000000                M spss3	=	op3
00016F10 =00000000                M spss4	=	op4
00016F10                            	spTotalLv	$1C, $02, $00, $00
00016F10 =0000001C                M sptl1	=	op1
00016F10 =00000002                M sptl2	=	op2
00016F10 =00000000                M sptl3	=	op3
00016F10 =00000000                M sptl4	=	op4
00016F10 3D                       M 	dc.b	(spfe<<3)+spal
00016F11 =00000080                M sptlmask4	set	$80
00016F11 =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
00016F11 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00016F11 =00000000                M sptlmask1	set	((spal=7)<<7)
00016F11 0100 0102                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00016F15 121F 1F14                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00016F19 0702 020A                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00016F1D 0505 0505                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00016F21 2F2F 2FAF                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00016F25 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00016F29 1C80 8280                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00016F2D 4E41 54                  M 	dc.b	'NAT'
00016F30                            
00016F30                            	; Patch $12
00016F30                            	; $1C
00016F30                            	; $73, $72, $33, $32,	$94, $99, $94, $99
00016F30                            	; $08, $0A, $08, $0A,	$00, $05, $00, $05
00016F30                            	; $3F, $4F, $3F, $4F,	$1E, $80, $19, $80
00016F30                            	spAlgorithm	$04
00016F30 =00000013                M spatnum	=	spatnum+1
00016F30 =00000004                M spal	=	val
00016F30                            	spFeedback	$03
00016F30 =00000003                M spfe	=	val
00016F30                            	spDetune	$07, $03, $07, $03
00016F30 =00000007                M spde1	=	op1
00016F30 =00000003                M spde2	=	op2
00016F30 =00000007                M spde3	=	op3
00016F30 =00000003                M spde4	=	op4
00016F30                            	spMultiple	$03, $03, $02, $02
00016F30 =00000003                M spmu1	=	op1
00016F30 =00000003                M spmu2	=	op2
00016F30 =00000002                M spmu3	=	op3
00016F30 =00000002                M spmu4	=	op4
00016F30                            	spRateScale	$02, $02, $02, $02
00016F30 =00000002                M sprs1	=	op1
00016F30 =00000002                M sprs2	=	op2
00016F30 =00000002                M sprs3	=	op3
00016F30 =00000002                M sprs4	=	op4
00016F30                            	spAttackRt	$14, $14, $19, $19
00016F30 =00000014                M spar1	=	op1
00016F30 =00000014                M spar2	=	op2
00016F30 =00000019                M spar3	=	op3
00016F30 =00000019                M spar4	=	op4
00016F30                            	spAmpMod	$00, $00, $00, $00
00016F30 =00000000                M spam1	=	op1
00016F30 =00000000                M spam2	=	op2
00016F30 =00000000                M spam3	=	op3
00016F30 =00000000                M spam4	=	op4
00016F30                            	spSustainRt	$08, $08, $0A, $0A
00016F30 =00000008                M spsr1	=	op1
00016F30 =00000008                M spsr2	=	op2
00016F30 =0000000A                M spsr3	=	op3
00016F30 =0000000A                M spsr4	=	op4
00016F30                            	spSustainLv	$03, $03, $04, $04
00016F30 =00000003                M spsl1	=	op1
00016F30 =00000003                M spsl2	=	op2
00016F30 =00000004                M spsl3	=	op3
00016F30 =00000004                M spsl4	=	op4
00016F30                            	spDecayRt	$00, $00, $05, $05
00016F30 =00000000                M spdr1	=	op1
00016F30 =00000000                M spdr2	=	op2
00016F30 =00000005                M spdr3	=	op3
00016F30 =00000005                M spdr4	=	op4
00016F30                            	spReleaseRt	$0F, $0F, $0F, $0F
00016F30 =0000000F                M sprr1	=	op1
00016F30 =0000000F                M sprr2	=	op2
00016F30 =0000000F                M sprr3	=	op3
00016F30 =0000000F                M sprr4	=	op4
00016F30                            	spSSGEG		$00, $00, $00, $00
00016F30 =00000000                M spss1	=	op1
00016F30 =00000000                M spss2	=	op2
00016F30 =00000000                M spss3	=	op3
00016F30 =00000000                M spss4	=	op4
00016F30                            	spTotalLv	$1E, $19, $00, $00
00016F30 =0000001E                M sptl1	=	op1
00016F30 =00000019                M sptl2	=	op2
00016F30 =00000000                M sptl3	=	op3
00016F30 =00000000                M sptl4	=	op4
00016F30 1C                       M 	dc.b	(spfe<<3)+spal
00016F31 =00000080                M sptlmask4	set	$80
00016F31 =00000000                M sptlmask2	set	((spal>=5)<<7)
00016F31 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00016F31 =00000000                M sptlmask1	set	((spal=7)<<7)
00016F31 7372 3332                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00016F35 9499 9499                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00016F39 080A 080A                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00016F3D 0005 0005                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00016F41 3F4F 3F4F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00016F45 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00016F49 1E80 1980                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00016F4D 4E41 54                  M 	dc.b	'NAT'
00016F50                            
00016F50                            	; Patch $13
00016F50                            	; $31
00016F50                            	; $33, $01, $00, $00,	$9F, $1F, $1F, $1F
00016F50                            	; $0D, $0A, $0A, $0A,	$0A, $07, $07, $07
00016F50                            	; $FF, $AF, $AF, $AF,	$1E, $1E, $1E, $80
00016F50                            	spAlgorithm	$01
00016F50 =00000014                M spatnum	=	spatnum+1
00016F50 =00000001                M spal	=	val
00016F50                            	spFeedback	$06
00016F50 =00000006                M spfe	=	val
00016F50                            	spDetune	$03, $00, $00, $00
00016F50 =00000003                M spde1	=	op1
00016F50 =00000000                M spde2	=	op2
00016F50 =00000000                M spde3	=	op3
00016F50 =00000000                M spde4	=	op4
00016F50                            	spMultiple	$03, $00, $01, $00
00016F50 =00000003                M spmu1	=	op1
00016F50 =00000000                M spmu2	=	op2
00016F50 =00000001                M spmu3	=	op3
00016F50 =00000000                M spmu4	=	op4
00016F50                            	spRateScale	$02, $00, $00, $00
00016F50 =00000002                M sprs1	=	op1
00016F50 =00000000                M sprs2	=	op2
00016F50 =00000000                M sprs3	=	op3
00016F50 =00000000                M sprs4	=	op4
00016F50                            	spAttackRt	$1F, $1F, $1F, $1F
00016F50 =0000001F                M spar1	=	op1
00016F50 =0000001F                M spar2	=	op2
00016F50 =0000001F                M spar3	=	op3
00016F50 =0000001F                M spar4	=	op4
00016F50                            	spAmpMod	$00, $00, $00, $00
00016F50 =00000000                M spam1	=	op1
00016F50 =00000000                M spam2	=	op2
00016F50 =00000000                M spam3	=	op3
00016F50 =00000000                M spam4	=	op4
00016F50                            	spSustainRt	$0D, $0A, $0A, $0A
00016F50 =0000000D                M spsr1	=	op1
00016F50 =0000000A                M spsr2	=	op2
00016F50 =0000000A                M spsr3	=	op3
00016F50 =0000000A                M spsr4	=	op4
00016F50                            	spSustainLv	$0F, $0A, $0A, $0A
00016F50 =0000000F                M spsl1	=	op1
00016F50 =0000000A                M spsl2	=	op2
00016F50 =0000000A                M spsl3	=	op3
00016F50 =0000000A                M spsl4	=	op4
00016F50                            	spDecayRt	$0A, $07, $07, $07
00016F50 =0000000A                M spdr1	=	op1
00016F50 =00000007                M spdr2	=	op2
00016F50 =00000007                M spdr3	=	op3
00016F50 =00000007                M spdr4	=	op4
00016F50                            	spReleaseRt	$0F, $0F, $0F, $0F
00016F50 =0000000F                M sprr1	=	op1
00016F50 =0000000F                M sprr2	=	op2
00016F50 =0000000F                M sprr3	=	op3
00016F50 =0000000F                M sprr4	=	op4
00016F50                            	spSSGEG		$00, $00, $00, $00
00016F50 =00000000                M spss1	=	op1
00016F50 =00000000                M spss2	=	op2
00016F50 =00000000                M spss3	=	op3
00016F50 =00000000                M spss4	=	op4
00016F50                            	spTotalLv	$1E, $1E, $1E, $00
00016F50 =0000001E                M sptl1	=	op1
00016F50 =0000001E                M sptl2	=	op2
00016F50 =0000001E                M sptl3	=	op3
00016F50 =00000000                M sptl4	=	op4
00016F50 31                       M 	dc.b	(spfe<<3)+spal
00016F51 =00000080                M sptlmask4	set	$80
00016F51 =00000000                M sptlmask2	set	((spal>=5)<<7)
00016F51 =00000000                M sptlmask3	set	((spal>=4)<<7)
00016F51 =00000000                M sptlmask1	set	((spal=7)<<7)
00016F51 3301 0000                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00016F55 9F1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00016F59 0D0A 0A0A                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00016F5D 0A07 0707                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00016F61 FFAF AFAF                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00016F65 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00016F69 1E1E 1E80                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00016F6D 4E41 54                  M 	dc.b	'NAT'
00016F70                            
00016F70                            	; Patch $14
00016F70                            	; $3A
00016F70                            	; $70, $76, $30, $71,	$1F, $95, $1F, $1F
00016F70                            	; $0E, $0F, $05, $0C,	$07, $06, $06, $07
00016F70                            	; $2F, $4F, $1F, $5F,	$21, $12, $28, $80
00016F70                            	spAlgorithm	$02
00016F70 =00000015                M spatnum	=	spatnum+1
00016F70 =00000002                M spal	=	val
00016F70                            	spFeedback	$07
00016F70 =00000007                M spfe	=	val
00016F70                            	spDetune	$07, $03, $07, $07
00016F70 =00000007                M spde1	=	op1
00016F70 =00000003                M spde2	=	op2
00016F70 =00000007                M spde3	=	op3
00016F70 =00000007                M spde4	=	op4
00016F70                            	spMultiple	$00, $00, $06, $01
00016F70 =00000000                M spmu1	=	op1
00016F70 =00000000                M spmu2	=	op2
00016F70 =00000006                M spmu3	=	op3
00016F70 =00000001                M spmu4	=	op4
00016F70                            	spRateScale	$00, $00, $02, $00
00016F70 =00000000                M sprs1	=	op1
00016F70 =00000000                M sprs2	=	op2
00016F70 =00000002                M sprs3	=	op3
00016F70 =00000000                M sprs4	=	op4
00016F70                            	spAttackRt	$1F, $1F, $15, $1F
00016F70 =0000001F                M spar1	=	op1
00016F70 =0000001F                M spar2	=	op2
00016F70 =00000015                M spar3	=	op3
00016F70 =0000001F                M spar4	=	op4
00016F70                            	spAmpMod	$00, $00, $00, $00
00016F70 =00000000                M spam1	=	op1
00016F70 =00000000                M spam2	=	op2
00016F70 =00000000                M spam3	=	op3
00016F70 =00000000                M spam4	=	op4
00016F70                            	spSustainRt	$0E, $05, $0F, $0C
00016F70 =0000000E                M spsr1	=	op1
00016F70 =00000005                M spsr2	=	op2
00016F70 =0000000F                M spsr3	=	op3
00016F70 =0000000C                M spsr4	=	op4
00016F70                            	spSustainLv	$02, $01, $04, $05
00016F70 =00000002                M spsl1	=	op1
00016F70 =00000001                M spsl2	=	op2
00016F70 =00000004                M spsl3	=	op3
00016F70 =00000005                M spsl4	=	op4
00016F70                            	spDecayRt	$07, $06, $06, $07
00016F70 =00000007                M spdr1	=	op1
00016F70 =00000006                M spdr2	=	op2
00016F70 =00000006                M spdr3	=	op3
00016F70 =00000007                M spdr4	=	op4
00016F70                            	spReleaseRt	$0F, $0F, $0F, $0F
00016F70 =0000000F                M sprr1	=	op1
00016F70 =0000000F                M sprr2	=	op2
00016F70 =0000000F                M sprr3	=	op3
00016F70 =0000000F                M sprr4	=	op4
00016F70                            	spSSGEG		$00, $00, $00, $00
00016F70 =00000000                M spss1	=	op1
00016F70 =00000000                M spss2	=	op2
00016F70 =00000000                M spss3	=	op3
00016F70 =00000000                M spss4	=	op4
00016F70                            	spTotalLv	$21, $28, $12, $00
00016F70 =00000021                M sptl1	=	op1
00016F70 =00000028                M sptl2	=	op2
00016F70 =00000012                M sptl3	=	op3
00016F70 =00000000                M sptl4	=	op4
00016F70 3A                       M 	dc.b	(spfe<<3)+spal
00016F71 =00000080                M sptlmask4	set	$80
00016F71 =00000000                M sptlmask2	set	((spal>=5)<<7)
00016F71 =00000000                M sptlmask3	set	((spal>=4)<<7)
00016F71 =00000000                M sptlmask1	set	((spal=7)<<7)
00016F71 7076 3071                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00016F75 1F95 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00016F79 0E0F 050C                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00016F7D 0706 0607                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00016F81 2F4F 1F5F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00016F85 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00016F89 2112 2880                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00016F8D 4E41 54                  M 	dc.b	'NAT'
00016F90                            
00016F90                            	; Patch $15
00016F90                            	; $28
00016F90                            	; $71, $00, $30, $01,	$1F, $1F, $1D, $1F
00016F90                            	; $13, $13, $06, $05,	$03, $03, $02, $05
00016F90                            	; $4F, $4F, $2F, $3F,	$0E, $14, $1E, $80
00016F90                            	spAlgorithm	$00
00016F90 =00000016                M spatnum	=	spatnum+1
00016F90 =00000000                M spal	=	val
00016F90                            	spFeedback	$05
00016F90 =00000005                M spfe	=	val
00016F90                            	spDetune	$07, $03, $00, $00
00016F90 =00000007                M spde1	=	op1
00016F90 =00000003                M spde2	=	op2
00016F90 =00000000                M spde3	=	op3
00016F90 =00000000                M spde4	=	op4
00016F90                            	spMultiple	$01, $00, $00, $01
00016F90 =00000001                M spmu1	=	op1
00016F90 =00000000                M spmu2	=	op2
00016F90 =00000000                M spmu3	=	op3
00016F90 =00000001                M spmu4	=	op4
00016F90                            	spRateScale	$00, $00, $00, $00
00016F90 =00000000                M sprs1	=	op1
00016F90 =00000000                M sprs2	=	op2
00016F90 =00000000                M sprs3	=	op3
00016F90 =00000000                M sprs4	=	op4
00016F90                            	spAttackRt	$1F, $1D, $1F, $1F
00016F90 =0000001F                M spar1	=	op1
00016F90 =0000001D                M spar2	=	op2
00016F90 =0000001F                M spar3	=	op3
00016F90 =0000001F                M spar4	=	op4
00016F90                            	spAmpMod	$00, $00, $00, $00
00016F90 =00000000                M spam1	=	op1
00016F90 =00000000                M spam2	=	op2
00016F90 =00000000                M spam3	=	op3
00016F90 =00000000                M spam4	=	op4
00016F90                            	spSustainRt	$13, $06, $13, $05
00016F90 =00000013                M spsr1	=	op1
00016F90 =00000006                M spsr2	=	op2
00016F90 =00000013                M spsr3	=	op3
00016F90 =00000005                M spsr4	=	op4
00016F90                            	spSustainLv	$04, $02, $04, $03
00016F90 =00000004                M spsl1	=	op1
00016F90 =00000002                M spsl2	=	op2
00016F90 =00000004                M spsl3	=	op3
00016F90 =00000003                M spsl4	=	op4
00016F90                            	spDecayRt	$03, $02, $03, $05
00016F90 =00000003                M spdr1	=	op1
00016F90 =00000002                M spdr2	=	op2
00016F90 =00000003                M spdr3	=	op3
00016F90 =00000005                M spdr4	=	op4
00016F90                            	spReleaseRt	$0F, $0F, $0F, $0F
00016F90 =0000000F                M sprr1	=	op1
00016F90 =0000000F                M sprr2	=	op2
00016F90 =0000000F                M sprr3	=	op3
00016F90 =0000000F                M sprr4	=	op4
00016F90                            	spSSGEG		$00, $00, $00, $00
00016F90 =00000000                M spss1	=	op1
00016F90 =00000000                M spss2	=	op2
00016F90 =00000000                M spss3	=	op3
00016F90 =00000000                M spss4	=	op4
00016F90                            	spTotalLv	$0E, $1E, $14, $00
00016F90 =0000000E                M sptl1	=	op1
00016F90 =0000001E                M sptl2	=	op2
00016F90 =00000014                M sptl3	=	op3
00016F90 =00000000                M sptl4	=	op4
00016F90 28                       M 	dc.b	(spfe<<3)+spal
00016F91 =00000080                M sptlmask4	set	$80
00016F91 =00000000                M sptlmask2	set	((spal>=5)<<7)
00016F91 =00000000                M sptlmask3	set	((spal>=4)<<7)
00016F91 =00000000                M sptlmask1	set	((spal=7)<<7)
00016F91 7100 3001                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00016F95 1F1F 1D1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00016F99 1313 0605                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00016F9D 0303 0205                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00016FA1 4F4F 2F3F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00016FA5 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00016FA9 0E14 1E80                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00016FAD 4E41 54                  M 	dc.b	'NAT'
00016FB0                            
00016FB0                            	; Patch $16
00016FB0                            	; $3E
00016FB0                            	; $38, $01, $7A, $34,	$59, $D9, $5F, $9C
00016FB0                            	; $0F, $04, $0F, $0A,	$02, $02, $05, $05
00016FB0                            	; $AF, $AF, $66, $66,	$28, $80, $A3, $80
00016FB0                            	spAlgorithm	$06
00016FB0 =00000017                M spatnum	=	spatnum+1
00016FB0 =00000006                M spal	=	val
00016FB0                            	spFeedback	$07
00016FB0 =00000007                M spfe	=	val
00016FB0                            	spDetune	$03, $07, $00, $03
00016FB0 =00000003                M spde1	=	op1
00016FB0 =00000007                M spde2	=	op2
00016FB0 =00000000                M spde3	=	op3
00016FB0 =00000003                M spde4	=	op4
00016FB0                            	spMultiple	$08, $0A, $01, $04
00016FB0 =00000008                M spmu1	=	op1
00016FB0 =0000000A                M spmu2	=	op2
00016FB0 =00000001                M spmu3	=	op3
00016FB0 =00000004                M spmu4	=	op4
00016FB0                            	spRateScale	$01, $01, $03, $02
00016FB0 =00000001                M sprs1	=	op1
00016FB0 =00000001                M sprs2	=	op2
00016FB0 =00000003                M sprs3	=	op3
00016FB0 =00000002                M sprs4	=	op4
00016FB0                            	spAttackRt	$19, $1F, $19, $1C
00016FB0 =00000019                M spar1	=	op1
00016FB0 =0000001F                M spar2	=	op2
00016FB0 =00000019                M spar3	=	op3
00016FB0 =0000001C                M spar4	=	op4
00016FB0                            	spAmpMod	$00, $00, $00, $00
00016FB0 =00000000                M spam1	=	op1
00016FB0 =00000000                M spam2	=	op2
00016FB0 =00000000                M spam3	=	op3
00016FB0 =00000000                M spam4	=	op4
00016FB0                            	spSustainRt	$0F, $0F, $04, $0A
00016FB0 =0000000F                M spsr1	=	op1
00016FB0 =0000000F                M spsr2	=	op2
00016FB0 =00000004                M spsr3	=	op3
00016FB0 =0000000A                M spsr4	=	op4
00016FB0                            	spSustainLv	$0A, $06, $0A, $06
00016FB0 =0000000A                M spsl1	=	op1
00016FB0 =00000006                M spsl2	=	op2
00016FB0 =0000000A                M spsl3	=	op3
00016FB0 =00000006                M spsl4	=	op4
00016FB0                            	spDecayRt	$02, $05, $02, $05
00016FB0 =00000002                M spdr1	=	op1
00016FB0 =00000005                M spdr2	=	op2
00016FB0 =00000002                M spdr3	=	op3
00016FB0 =00000005                M spdr4	=	op4
00016FB0                            	spReleaseRt	$0F, $06, $0F, $06
00016FB0 =0000000F                M sprr1	=	op1
00016FB0 =00000006                M sprr2	=	op2
00016FB0 =0000000F                M sprr3	=	op3
00016FB0 =00000006                M sprr4	=	op4
00016FB0                            	spSSGEG		$00, $00, $00, $00
00016FB0 =00000000                M spss1	=	op1
00016FB0 =00000000                M spss2	=	op2
00016FB0 =00000000                M spss3	=	op3
00016FB0 =00000000                M spss4	=	op4
00016FB0                            	spTotalLv	$28, $23, $00, $00
00016FB0 =00000028                M sptl1	=	op1
00016FB0 =00000023                M sptl2	=	op2
00016FB0 =00000000                M sptl3	=	op3
00016FB0 =00000000                M sptl4	=	op4
00016FB0 3E                       M 	dc.b	(spfe<<3)+spal
00016FB1 =00000080                M sptlmask4	set	$80
00016FB1 =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
00016FB1 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00016FB1 =00000000                M sptlmask1	set	((spal=7)<<7)
00016FB1 3801 7A34                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00016FB5 59D9 5F9C                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00016FB9 0F04 0F0A                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00016FBD 0202 0505                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00016FC1 AFAF 6666                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00016FC5 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00016FC9 2880 A380                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00016FCD 4E41 54                  M 	dc.b	'NAT'
00016FD0                            
00016FD0                            	; Patch $17
00016FD0                            	; $39
00016FD0                            	; $32, $31, $72, $71,	$1F, $1F, $1F, $1F
00016FD0                            	; $00, $00, $00, $00,	$00, $00, $00, $00
00016FD0                            	; $0F, $0F, $0F, $0F,	$1B, $32, $28, $80
00016FD0                            	spAlgorithm	$01
00016FD0 =00000018                M spatnum	=	spatnum+1
00016FD0 =00000001                M spal	=	val
00016FD0                            	spFeedback	$07
00016FD0 =00000007                M spfe	=	val
00016FD0                            	spDetune	$03, $07, $03, $07
00016FD0 =00000003                M spde1	=	op1
00016FD0 =00000007                M spde2	=	op2
00016FD0 =00000003                M spde3	=	op3
00016FD0 =00000007                M spde4	=	op4
00016FD0                            	spMultiple	$02, $02, $01, $01
00016FD0 =00000002                M spmu1	=	op1
00016FD0 =00000002                M spmu2	=	op2
00016FD0 =00000001                M spmu3	=	op3
00016FD0 =00000001                M spmu4	=	op4
00016FD0                            	spRateScale	$00, $00, $00, $00
00016FD0 =00000000                M sprs1	=	op1
00016FD0 =00000000                M sprs2	=	op2
00016FD0 =00000000                M sprs3	=	op3
00016FD0 =00000000                M sprs4	=	op4
00016FD0                            	spAttackRt	$1F, $1F, $1F, $1F
00016FD0 =0000001F                M spar1	=	op1
00016FD0 =0000001F                M spar2	=	op2
00016FD0 =0000001F                M spar3	=	op3
00016FD0 =0000001F                M spar4	=	op4
00016FD0                            	spAmpMod	$00, $00, $00, $00
00016FD0 =00000000                M spam1	=	op1
00016FD0 =00000000                M spam2	=	op2
00016FD0 =00000000                M spam3	=	op3
00016FD0 =00000000                M spam4	=	op4
00016FD0                            	spSustainRt	$00, $00, $00, $00
00016FD0 =00000000                M spsr1	=	op1
00016FD0 =00000000                M spsr2	=	op2
00016FD0 =00000000                M spsr3	=	op3
00016FD0 =00000000                M spsr4	=	op4
00016FD0                            	spSustainLv	$00, $00, $00, $00
00016FD0 =00000000                M spsl1	=	op1
00016FD0 =00000000                M spsl2	=	op2
00016FD0 =00000000                M spsl3	=	op3
00016FD0 =00000000                M spsl4	=	op4
00016FD0                            	spDecayRt	$00, $00, $00, $00
00016FD0 =00000000                M spdr1	=	op1
00016FD0 =00000000                M spdr2	=	op2
00016FD0 =00000000                M spdr3	=	op3
00016FD0 =00000000                M spdr4	=	op4
00016FD0                            	spReleaseRt	$0F, $0F, $0F, $0F
00016FD0 =0000000F                M sprr1	=	op1
00016FD0 =0000000F                M sprr2	=	op2
00016FD0 =0000000F                M sprr3	=	op3
00016FD0 =0000000F                M sprr4	=	op4
00016FD0                            	spSSGEG		$00, $00, $00, $00
00016FD0 =00000000                M spss1	=	op1
00016FD0 =00000000                M spss2	=	op2
00016FD0 =00000000                M spss3	=	op3
00016FD0 =00000000                M spss4	=	op4
00016FD0                            	spTotalLv	$1B, $28, $32, $00
00016FD0 =0000001B                M sptl1	=	op1
00016FD0 =00000028                M sptl2	=	op2
00016FD0 =00000032                M sptl3	=	op3
00016FD0 =00000000                M sptl4	=	op4
00016FD0 39                       M 	dc.b	(spfe<<3)+spal
00016FD1 =00000080                M sptlmask4	set	$80
00016FD1 =00000000                M sptlmask2	set	((spal>=5)<<7)
00016FD1 =00000000                M sptlmask3	set	((spal>=4)<<7)
00016FD1 =00000000                M sptlmask1	set	((spal=7)<<7)
00016FD1 3231 7271                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00016FD5 1F1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00016FD9 0000 0000                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00016FDD 0000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00016FE1 0F0F 0F0F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00016FE5 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00016FE9 1B32 2880                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00016FED 4E41 54                  M 	dc.b	'NAT'
00016FF0                            
00016FF0                            	; Patch $18
00016FF0                            	; $07
00016FF0                            	; $34, $74, $32, $71,	$1F, $1F, $1F, $1F
00016FF0                            	; $0A, $0A, $05, $03,	$00, $00, $00, $00
00016FF0                            	; $3F, $3F, $2F, $2F,	$8A, $8A, $80, $80
00016FF0                            	spAlgorithm	$07
00016FF0 =00000019                M spatnum	=	spatnum+1
00016FF0 =00000007                M spal	=	val
00016FF0                            	spFeedback	$00
00016FF0 =00000000                M spfe	=	val
00016FF0                            	spDetune	$03, $03, $07, $07
00016FF0 =00000003                M spde1	=	op1
00016FF0 =00000003                M spde2	=	op2
00016FF0 =00000007                M spde3	=	op3
00016FF0 =00000007                M spde4	=	op4
00016FF0                            	spMultiple	$04, $02, $04, $01
00016FF0 =00000004                M spmu1	=	op1
00016FF0 =00000002                M spmu2	=	op2
00016FF0 =00000004                M spmu3	=	op3
00016FF0 =00000001                M spmu4	=	op4
00016FF0                            	spRateScale	$00, $00, $00, $00
00016FF0 =00000000                M sprs1	=	op1
00016FF0 =00000000                M sprs2	=	op2
00016FF0 =00000000                M sprs3	=	op3
00016FF0 =00000000                M sprs4	=	op4
00016FF0                            	spAttackRt	$1F, $1F, $1F, $1F
00016FF0 =0000001F                M spar1	=	op1
00016FF0 =0000001F                M spar2	=	op2
00016FF0 =0000001F                M spar3	=	op3
00016FF0 =0000001F                M spar4	=	op4
00016FF0                            	spAmpMod	$00, $00, $00, $00
00016FF0 =00000000                M spam1	=	op1
00016FF0 =00000000                M spam2	=	op2
00016FF0 =00000000                M spam3	=	op3
00016FF0 =00000000                M spam4	=	op4
00016FF0                            	spSustainRt	$0A, $05, $0A, $03
00016FF0 =0000000A                M spsr1	=	op1
00016FF0 =00000005                M spsr2	=	op2
00016FF0 =0000000A                M spsr3	=	op3
00016FF0 =00000003                M spsr4	=	op4
00016FF0                            	spSustainLv	$03, $02, $03, $02
00016FF0 =00000003                M spsl1	=	op1
00016FF0 =00000002                M spsl2	=	op2
00016FF0 =00000003                M spsl3	=	op3
00016FF0 =00000002                M spsl4	=	op4
00016FF0                            	spDecayRt	$00, $00, $00, $00
00016FF0 =00000000                M spdr1	=	op1
00016FF0 =00000000                M spdr2	=	op2
00016FF0 =00000000                M spdr3	=	op3
00016FF0 =00000000                M spdr4	=	op4
00016FF0                            	spReleaseRt	$0F, $0F, $0F, $0F
00016FF0 =0000000F                M sprr1	=	op1
00016FF0 =0000000F                M sprr2	=	op2
00016FF0 =0000000F                M sprr3	=	op3
00016FF0 =0000000F                M sprr4	=	op4
00016FF0                            	spSSGEG		$00, $00, $00, $00
00016FF0 =00000000                M spss1	=	op1
00016FF0 =00000000                M spss2	=	op2
00016FF0 =00000000                M spss3	=	op3
00016FF0 =00000000                M spss4	=	op4
00016FF0                            	spTotalLv	$0A, $00, $0A, $00
00016FF0 =0000000A                M sptl1	=	op1
00016FF0 =00000000                M sptl2	=	op2
00016FF0 =0000000A                M sptl3	=	op3
00016FF0 =00000000                M sptl4	=	op4
00016FF0 07                       M 	dc.b	(spfe<<3)+spal
00016FF1 =00000080                M sptlmask4	set	$80
00016FF1 =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
00016FF1 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00016FF1 =FFFFFF80                M sptlmask1	set	((spal=7)<<7)
00016FF1 3474 3271                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00016FF5 1F1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00016FF9 0A0A 0503                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00016FFD 0000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00017001 3F3F 2F2F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00017005 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00017009 8A8A 8080                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001700D 4E41 54                  M 	dc.b	'NAT'
00017010                            
00017010                            	; Patch $19
00017010                            	; $3A
00017010                            	; $31, $37, $31, $31,	$8D, $8D, $8E, $53
00017010                            	; $0E, $0E, $0E, $03,	$00, $00, $00, $00
00017010                            	; $1F, $FF, $1F, $0F,	$17, $28, $26, $80
00017010                            	spAlgorithm	$02
00017010 =0000001A                M spatnum	=	spatnum+1
00017010 =00000002                M spal	=	val
00017010                            	spFeedback	$07
00017010 =00000007                M spfe	=	val
00017010                            	spDetune	$03, $03, $03, $03
00017010 =00000003                M spde1	=	op1
00017010 =00000003                M spde2	=	op2
00017010 =00000003                M spde3	=	op3
00017010 =00000003                M spde4	=	op4
00017010                            	spMultiple	$01, $01, $07, $01
00017010 =00000001                M spmu1	=	op1
00017010 =00000001                M spmu2	=	op2
00017010 =00000007                M spmu3	=	op3
00017010 =00000001                M spmu4	=	op4
00017010                            	spRateScale	$02, $02, $02, $01
00017010 =00000002                M sprs1	=	op1
00017010 =00000002                M sprs2	=	op2
00017010 =00000002                M sprs3	=	op3
00017010 =00000001                M sprs4	=	op4
00017010                            	spAttackRt	$0D, $0E, $0D, $13
00017010 =0000000D                M spar1	=	op1
00017010 =0000000E                M spar2	=	op2
00017010 =0000000D                M spar3	=	op3
00017010 =00000013                M spar4	=	op4
00017010                            	spAmpMod	$00, $00, $00, $00
00017010 =00000000                M spam1	=	op1
00017010 =00000000                M spam2	=	op2
00017010 =00000000                M spam3	=	op3
00017010 =00000000                M spam4	=	op4
00017010                            	spSustainRt	$0E, $0E, $0E, $03
00017010 =0000000E                M spsr1	=	op1
00017010 =0000000E                M spsr2	=	op2
00017010 =0000000E                M spsr3	=	op3
00017010 =00000003                M spsr4	=	op4
00017010                            	spSustainLv	$01, $01, $0F, $00
00017010 =00000001                M spsl1	=	op1
00017010 =00000001                M spsl2	=	op2
00017010 =0000000F                M spsl3	=	op3
00017010 =00000000                M spsl4	=	op4
00017010                            	spDecayRt	$00, $00, $00, $00
00017010 =00000000                M spdr1	=	op1
00017010 =00000000                M spdr2	=	op2
00017010 =00000000                M spdr3	=	op3
00017010 =00000000                M spdr4	=	op4
00017010                            	spReleaseRt	$0F, $0F, $0F, $0F
00017010 =0000000F                M sprr1	=	op1
00017010 =0000000F                M sprr2	=	op2
00017010 =0000000F                M sprr3	=	op3
00017010 =0000000F                M sprr4	=	op4
00017010                            	spSSGEG		$00, $00, $00, $00
00017010 =00000000                M spss1	=	op1
00017010 =00000000                M spss2	=	op2
00017010 =00000000                M spss3	=	op3
00017010 =00000000                M spss4	=	op4
00017010                            	spTotalLv	$17, $26, $28, $00
00017010 =00000017                M sptl1	=	op1
00017010 =00000026                M sptl2	=	op2
00017010 =00000028                M sptl3	=	op3
00017010 =00000000                M sptl4	=	op4
00017010 3A                       M 	dc.b	(spfe<<3)+spal
00017011 =00000080                M sptlmask4	set	$80
00017011 =00000000                M sptlmask2	set	((spal>=5)<<7)
00017011 =00000000                M sptlmask3	set	((spal>=4)<<7)
00017011 =00000000                M sptlmask1	set	((spal=7)<<7)
00017011 3137 3131                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00017015 8D8D 8E53                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00017019 0E0E 0E03                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001701D 0000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00017021 1FFF 1F0F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00017025 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00017029 1728 2680                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001702D 4E41 54                  M 	dc.b	'NAT'
00017030                            
00017030                            	; Patch $1A
00017030                            	; $3B
00017030                            	; $3A, $31, $71, $74,	$DF, $1F, $1F, $DF
00017030                            	; $00, $0A, $0A, $05,	$00, $05, $05, $03
00017030                            	; $0F, $5F, $1F, $5F,	$32, $1E, $0F, $80
00017030                            	spAlgorithm	$03
00017030 =0000001B                M spatnum	=	spatnum+1
00017030 =00000003                M spal	=	val
00017030                            	spFeedback	$07
00017030 =00000007                M spfe	=	val
00017030                            	spDetune	$03, $07, $03, $07
00017030 =00000003                M spde1	=	op1
00017030 =00000007                M spde2	=	op2
00017030 =00000003                M spde3	=	op3
00017030 =00000007                M spde4	=	op4
00017030                            	spMultiple	$0A, $01, $01, $04
00017030 =0000000A                M spmu1	=	op1
00017030 =00000001                M spmu2	=	op2
00017030 =00000001                M spmu3	=	op3
00017030 =00000004                M spmu4	=	op4
00017030                            	spRateScale	$03, $00, $00, $03
00017030 =00000003                M sprs1	=	op1
00017030 =00000000                M sprs2	=	op2
00017030 =00000000                M sprs3	=	op3
00017030 =00000003                M sprs4	=	op4
00017030                            	spAttackRt	$1F, $1F, $1F, $1F
00017030 =0000001F                M spar1	=	op1
00017030 =0000001F                M spar2	=	op2
00017030 =0000001F                M spar3	=	op3
00017030 =0000001F                M spar4	=	op4
00017030                            	spAmpMod	$00, $00, $00, $00
00017030 =00000000                M spam1	=	op1
00017030 =00000000                M spam2	=	op2
00017030 =00000000                M spam3	=	op3
00017030 =00000000                M spam4	=	op4
00017030                            	spSustainRt	$00, $0A, $0A, $05
00017030 =00000000                M spsr1	=	op1
00017030 =0000000A                M spsr2	=	op2
00017030 =0000000A                M spsr3	=	op3
00017030 =00000005                M spsr4	=	op4
00017030                            	spSustainLv	$00, $01, $05, $05
00017030 =00000000                M spsl1	=	op1
00017030 =00000001                M spsl2	=	op2
00017030 =00000005                M spsl3	=	op3
00017030 =00000005                M spsl4	=	op4
00017030                            	spDecayRt	$00, $05, $05, $03
00017030 =00000000                M spdr1	=	op1
00017030 =00000005                M spdr2	=	op2
00017030 =00000005                M spdr3	=	op3
00017030 =00000003                M spdr4	=	op4
00017030                            	spReleaseRt	$0F, $0F, $0F, $0F
00017030 =0000000F                M sprr1	=	op1
00017030 =0000000F                M sprr2	=	op2
00017030 =0000000F                M sprr3	=	op3
00017030 =0000000F                M sprr4	=	op4
00017030                            	spSSGEG		$00, $00, $00, $00
00017030 =00000000                M spss1	=	op1
00017030 =00000000                M spss2	=	op2
00017030 =00000000                M spss3	=	op3
00017030 =00000000                M spss4	=	op4
00017030                            	spTotalLv	$32, $0F, $1E, $00
00017030 =00000032                M sptl1	=	op1
00017030 =0000000F                M sptl2	=	op2
00017030 =0000001E                M sptl3	=	op3
00017030 =00000000                M sptl4	=	op4
00017030 3B                       M 	dc.b	(spfe<<3)+spal
00017031 =00000080                M sptlmask4	set	$80
00017031 =00000000                M sptlmask2	set	((spal>=5)<<7)
00017031 =00000000                M sptlmask3	set	((spal>=4)<<7)
00017031 =00000000                M sptlmask1	set	((spal=7)<<7)
00017031 3A31 7174                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00017035 DF1F 1FDF                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00017039 000A 0A05                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001703D 0005 0503                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00017041 0F5F 1F5F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00017045 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00017049 321E 0F80                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001704D 4E41 54                  M 	dc.b	'NAT'
00017050                            
00017050                            	; Patch $1B
00017050                            	; $05
00017050                            	; $04, $01, $02, $04,	$8D, $1F, $15, $52
00017050                            	; $06, $00, $00, $04,	$02, $08, $00, $00
00017050                            	; $1F, $0F, $0F, $2F,	$16, $90, $84, $8C
00017050                            	spAlgorithm	$05
00017050 =0000001C                M spatnum	=	spatnum+1
00017050 =00000005                M spal	=	val
00017050                            	spFeedback	$00
00017050 =00000000                M spfe	=	val
00017050                            	spDetune	$00, $00, $00, $00
00017050 =00000000                M spde1	=	op1
00017050 =00000000                M spde2	=	op2
00017050 =00000000                M spde3	=	op3
00017050 =00000000                M spde4	=	op4
00017050                            	spMultiple	$04, $02, $01, $04
00017050 =00000004                M spmu1	=	op1
00017050 =00000002                M spmu2	=	op2
00017050 =00000001                M spmu3	=	op3
00017050 =00000004                M spmu4	=	op4
00017050                            	spRateScale	$02, $00, $00, $01
00017050 =00000002                M sprs1	=	op1
00017050 =00000000                M sprs2	=	op2
00017050 =00000000                M sprs3	=	op3
00017050 =00000001                M sprs4	=	op4
00017050                            	spAttackRt	$0D, $15, $1F, $12
00017050 =0000000D                M spar1	=	op1
00017050 =00000015                M spar2	=	op2
00017050 =0000001F                M spar3	=	op3
00017050 =00000012                M spar4	=	op4
00017050                            	spAmpMod	$00, $00, $00, $00
00017050 =00000000                M spam1	=	op1
00017050 =00000000                M spam2	=	op2
00017050 =00000000                M spam3	=	op3
00017050 =00000000                M spam4	=	op4
00017050                            	spSustainRt	$06, $00, $00, $04
00017050 =00000006                M spsr1	=	op1
00017050 =00000000                M spsr2	=	op2
00017050 =00000000                M spsr3	=	op3
00017050 =00000004                M spsr4	=	op4
00017050                            	spSustainLv	$01, $00, $00, $02
00017050 =00000001                M spsl1	=	op1
00017050 =00000000                M spsl2	=	op2
00017050 =00000000                M spsl3	=	op3
00017050 =00000002                M spsl4	=	op4
00017050                            	spDecayRt	$02, $00, $08, $00
00017050 =00000002                M spdr1	=	op1
00017050 =00000000                M spdr2	=	op2
00017050 =00000008                M spdr3	=	op3
00017050 =00000000                M spdr4	=	op4
00017050                            	spReleaseRt	$0F, $0F, $0F, $0F
00017050 =0000000F                M sprr1	=	op1
00017050 =0000000F                M sprr2	=	op2
00017050 =0000000F                M sprr3	=	op3
00017050 =0000000F                M sprr4	=	op4
00017050                            	spSSGEG		$00, $00, $00, $00
00017050 =00000000                M spss1	=	op1
00017050 =00000000                M spss2	=	op2
00017050 =00000000                M spss3	=	op3
00017050 =00000000                M spss4	=	op4
00017050                            	spTotalLv	$16, $04, $10, $0C
00017050 =00000016                M sptl1	=	op1
00017050 =00000004                M sptl2	=	op2
00017050 =00000010                M sptl3	=	op3
00017050 =0000000C                M sptl4	=	op4
00017050 05                       M 	dc.b	(spfe<<3)+spal
00017051 =00000080                M sptlmask4	set	$80
00017051 =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
00017051 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00017051 =00000000                M sptlmask1	set	((spal=7)<<7)
00017051 0401 0204                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00017055 8D1F 1552                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00017059 0600 0004                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001705D 0208 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00017061 1F0F 0F2F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00017065 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00017069 1690 848C                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001706D 4E41 54                  M 	dc.b	'NAT'
00017070                            
00017070                            	; Patch $1C
00017070                            	; $2C
00017070                            	; $71, $74, $32, $32,	$1F, $12, $1F, $12
00017070                            	; $00, $0A, $00, $0A,	$00, $00, $00, $00
00017070                            	; $0F, $1F, $0F, $1F,	$16, $80, $17, $80
00017070                            	spAlgorithm	$04
00017070 =0000001D                M spatnum	=	spatnum+1
00017070 =00000004                M spal	=	val
00017070                            	spFeedback	$05
00017070 =00000005                M spfe	=	val
00017070                            	spDetune	$07, $03, $07, $03
00017070 =00000007                M spde1	=	op1
00017070 =00000003                M spde2	=	op2
00017070 =00000007                M spde3	=	op3
00017070 =00000003                M spde4	=	op4
00017070                            	spMultiple	$01, $02, $04, $02
00017070 =00000001                M spmu1	=	op1
00017070 =00000002                M spmu2	=	op2
00017070 =00000004                M spmu3	=	op3
00017070 =00000002                M spmu4	=	op4
00017070                            	spRateScale	$00, $00, $00, $00
00017070 =00000000                M sprs1	=	op1
00017070 =00000000                M sprs2	=	op2
00017070 =00000000                M sprs3	=	op3
00017070 =00000000                M sprs4	=	op4
00017070                            	spAttackRt	$1F, $1F, $12, $12
00017070 =0000001F                M spar1	=	op1
00017070 =0000001F                M spar2	=	op2
00017070 =00000012                M spar3	=	op3
00017070 =00000012                M spar4	=	op4
00017070                            	spAmpMod	$00, $00, $00, $00
00017070 =00000000                M spam1	=	op1
00017070 =00000000                M spam2	=	op2
00017070 =00000000                M spam3	=	op3
00017070 =00000000                M spam4	=	op4
00017070                            	spSustainRt	$00, $00, $0A, $0A
00017070 =00000000                M spsr1	=	op1
00017070 =00000000                M spsr2	=	op2
00017070 =0000000A                M spsr3	=	op3
00017070 =0000000A                M spsr4	=	op4
00017070                            	spSustainLv	$00, $00, $01, $01
00017070 =00000000                M spsl1	=	op1
00017070 =00000000                M spsl2	=	op2
00017070 =00000001                M spsl3	=	op3
00017070 =00000001                M spsl4	=	op4
00017070                            	spDecayRt	$00, $00, $00, $00
00017070 =00000000                M spdr1	=	op1
00017070 =00000000                M spdr2	=	op2
00017070 =00000000                M spdr3	=	op3
00017070 =00000000                M spdr4	=	op4
00017070                            	spReleaseRt	$0F, $0F, $0F, $0F
00017070 =0000000F                M sprr1	=	op1
00017070 =0000000F                M sprr2	=	op2
00017070 =0000000F                M sprr3	=	op3
00017070 =0000000F                M sprr4	=	op4
00017070                            	spSSGEG		$00, $00, $00, $00
00017070 =00000000                M spss1	=	op1
00017070 =00000000                M spss2	=	op2
00017070 =00000000                M spss3	=	op3
00017070 =00000000                M spss4	=	op4
00017070                            	spTotalLv	$16, $17, $00, $00
00017070 =00000016                M sptl1	=	op1
00017070 =00000017                M sptl2	=	op2
00017070 =00000000                M sptl3	=	op3
00017070 =00000000                M sptl4	=	op4
00017070 2C                       M 	dc.b	(spfe<<3)+spal
00017071 =00000080                M sptlmask4	set	$80
00017071 =00000000                M sptlmask2	set	((spal>=5)<<7)
00017071 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00017071 =00000000                M sptlmask1	set	((spal=7)<<7)
00017071 7174 3232                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00017075 1F12 1F12                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00017079 000A 000A                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001707D 0000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00017081 0F1F 0F1F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00017085 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00017089 1680 1780                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001708D 4E41 54                  M 	dc.b	'NAT'
00017090                            
00017090                            	; Patch $1D
00017090                            	; $3A
00017090                            	; $01, $07, $01, $01,	$8E, $8E, $8D, $53
00017090                            	; $0E, $0E, $0E, $03,	$00, $00, $00, $07
00017090                            	; $1F, $FF, $1F, $0F,	$18, $28, $27, $8F
00017090                            	spAlgorithm	$02
00017090 =0000001E                M spatnum	=	spatnum+1
00017090 =00000002                M spal	=	val
00017090                            	spFeedback	$07
00017090 =00000007                M spfe	=	val
00017090                            	spDetune	$00, $00, $00, $00
00017090 =00000000                M spde1	=	op1
00017090 =00000000                M spde2	=	op2
00017090 =00000000                M spde3	=	op3
00017090 =00000000                M spde4	=	op4
00017090                            	spMultiple	$01, $01, $07, $01
00017090 =00000001                M spmu1	=	op1
00017090 =00000001                M spmu2	=	op2
00017090 =00000007                M spmu3	=	op3
00017090 =00000001                M spmu4	=	op4
00017090                            	spRateScale	$02, $02, $02, $01
00017090 =00000002                M sprs1	=	op1
00017090 =00000002                M sprs2	=	op2
00017090 =00000002                M sprs3	=	op3
00017090 =00000001                M sprs4	=	op4
00017090                            	spAttackRt	$0E, $0D, $0E, $13
00017090 =0000000E                M spar1	=	op1
00017090 =0000000D                M spar2	=	op2
00017090 =0000000E                M spar3	=	op3
00017090 =00000013                M spar4	=	op4
00017090                            	spAmpMod	$00, $00, $00, $00
00017090 =00000000                M spam1	=	op1
00017090 =00000000                M spam2	=	op2
00017090 =00000000                M spam3	=	op3
00017090 =00000000                M spam4	=	op4
00017090                            	spSustainRt	$0E, $0E, $0E, $03
00017090 =0000000E                M spsr1	=	op1
00017090 =0000000E                M spsr2	=	op2
00017090 =0000000E                M spsr3	=	op3
00017090 =00000003                M spsr4	=	op4
00017090                            	spSustainLv	$01, $01, $0F, $00
00017090 =00000001                M spsl1	=	op1
00017090 =00000001                M spsl2	=	op2
00017090 =0000000F                M spsl3	=	op3
00017090 =00000000                M spsl4	=	op4
00017090                            	spDecayRt	$00, $00, $00, $07
00017090 =00000000                M spdr1	=	op1
00017090 =00000000                M spdr2	=	op2
00017090 =00000000                M spdr3	=	op3
00017090 =00000007                M spdr4	=	op4
00017090                            	spReleaseRt	$0F, $0F, $0F, $0F
00017090 =0000000F                M sprr1	=	op1
00017090 =0000000F                M sprr2	=	op2
00017090 =0000000F                M sprr3	=	op3
00017090 =0000000F                M sprr4	=	op4
00017090                            	spSSGEG		$00, $00, $00, $00
00017090 =00000000                M spss1	=	op1
00017090 =00000000                M spss2	=	op2
00017090 =00000000                M spss3	=	op3
00017090 =00000000                M spss4	=	op4
00017090                            	spTotalLv	$18, $27, $28, $0F
00017090 =00000018                M sptl1	=	op1
00017090 =00000027                M sptl2	=	op2
00017090 =00000028                M sptl3	=	op3
00017090 =0000000F                M sptl4	=	op4
00017090 3A                       M 	dc.b	(spfe<<3)+spal
00017091 =00000080                M sptlmask4	set	$80
00017091 =00000000                M sptlmask2	set	((spal>=5)<<7)
00017091 =00000000                M sptlmask3	set	((spal>=4)<<7)
00017091 =00000000                M sptlmask1	set	((spal=7)<<7)
00017091 0107 0101                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00017095 8E8E 8D53                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00017099 0E0E 0E03                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001709D 0000 0007                M 	dc.b	spdr1,spdr3,spdr2,spdr4
000170A1 1FFF 1F0F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
000170A5 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
000170A9 1828 278F                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
000170AD 4E41 54                  M 	dc.b	'NAT'
000170B0                            
000170B0                            	; Patch $1E
000170B0                            	; $36
000170B0                            	; $7A, $32, $51, $11,	$1F, $1F, $59, $1C
000170B0                            	; $0A, $0D, $06, $0A,	$07, $00, $02, $02
000170B0                            	; $AF, $5F, $5F, $5F,	$1E, $8B, $81, $80
000170B0                            	spAlgorithm	$06
000170B0 =0000001F                M spatnum	=	spatnum+1
000170B0 =00000006                M spal	=	val
000170B0                            	spFeedback	$06
000170B0 =00000006                M spfe	=	val
000170B0                            	spDetune	$07, $05, $03, $01
000170B0 =00000007                M spde1	=	op1
000170B0 =00000005                M spde2	=	op2
000170B0 =00000003                M spde3	=	op3
000170B0 =00000001                M spde4	=	op4
000170B0                            	spMultiple	$0A, $01, $02, $01
000170B0 =0000000A                M spmu1	=	op1
000170B0 =00000001                M spmu2	=	op2
000170B0 =00000002                M spmu3	=	op3
000170B0 =00000001                M spmu4	=	op4
000170B0                            	spRateScale	$00, $01, $00, $00
000170B0 =00000000                M sprs1	=	op1
000170B0 =00000001                M sprs2	=	op2
000170B0 =00000000                M sprs3	=	op3
000170B0 =00000000                M sprs4	=	op4
000170B0                            	spAttackRt	$1F, $19, $1F, $1C
000170B0 =0000001F                M spar1	=	op1
000170B0 =00000019                M spar2	=	op2
000170B0 =0000001F                M spar3	=	op3
000170B0 =0000001C                M spar4	=	op4
000170B0                            	spAmpMod	$00, $00, $00, $00
000170B0 =00000000                M spam1	=	op1
000170B0 =00000000                M spam2	=	op2
000170B0 =00000000                M spam3	=	op3
000170B0 =00000000                M spam4	=	op4
000170B0                            	spSustainRt	$0A, $06, $0D, $0A
000170B0 =0000000A                M spsr1	=	op1
000170B0 =00000006                M spsr2	=	op2
000170B0 =0000000D                M spsr3	=	op3
000170B0 =0000000A                M spsr4	=	op4
000170B0                            	spSustainLv	$0A, $05, $05, $05
000170B0 =0000000A                M spsl1	=	op1
000170B0 =00000005                M spsl2	=	op2
000170B0 =00000005                M spsl3	=	op3
000170B0 =00000005                M spsl4	=	op4
000170B0                            	spDecayRt	$07, $02, $00, $02
000170B0 =00000007                M spdr1	=	op1
000170B0 =00000002                M spdr2	=	op2
000170B0 =00000000                M spdr3	=	op3
000170B0 =00000002                M spdr4	=	op4
000170B0                            	spReleaseRt	$0F, $0F, $0F, $0F
000170B0 =0000000F                M sprr1	=	op1
000170B0 =0000000F                M sprr2	=	op2
000170B0 =0000000F                M sprr3	=	op3
000170B0 =0000000F                M sprr4	=	op4
000170B0                            	spSSGEG		$00, $00, $00, $00
000170B0 =00000000                M spss1	=	op1
000170B0 =00000000                M spss2	=	op2
000170B0 =00000000                M spss3	=	op3
000170B0 =00000000                M spss4	=	op4
000170B0                            	spTotalLv	$1E, $01, $0B, $00
000170B0 =0000001E                M sptl1	=	op1
000170B0 =00000001                M sptl2	=	op2
000170B0 =0000000B                M sptl3	=	op3
000170B0 =00000000                M sptl4	=	op4
000170B0 36                       M 	dc.b	(spfe<<3)+spal
000170B1 =00000080                M sptlmask4	set	$80
000170B1 =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
000170B1 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
000170B1 =00000000                M sptlmask1	set	((spal=7)<<7)
000170B1 7A32 5111                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
000170B5 1F1F 591C                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
000170B9 0A0D 060A                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
000170BD 0700 0202                M 	dc.b	spdr1,spdr3,spdr2,spdr4
000170C1 AF5F 5F5F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
000170C5 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
000170C9 1E8B 8180                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
000170CD 4E41 54                  M 	dc.b	'NAT'
000170D0                            
000170D0                            	; Patch $1F
000170D0                            	; $3C
000170D0                            	; $71, $72, $3F, $34,	$8D, $52, $9F, $1F
000170D0                            	; $09, $00, $00, $0D,	$00, $00, $00, $00
000170D0                            	; $23, $08, $02, $F7,	$15, $85, $1D, $8A
000170D0                            	spAlgorithm	$04
000170D0 =00000020                M spatnum	=	spatnum+1
000170D0 =00000004                M spal	=	val
000170D0                            	spFeedback	$07
000170D0 =00000007                M spfe	=	val
000170D0                            	spDetune	$07, $03, $07, $03
000170D0 =00000007                M spde1	=	op1
000170D0 =00000003                M spde2	=	op2
000170D0 =00000007                M spde3	=	op3
000170D0 =00000003                M spde4	=	op4
000170D0                            	spMultiple	$01, $0F, $02, $04
000170D0 =00000001                M spmu1	=	op1
000170D0 =0000000F                M spmu2	=	op2
000170D0 =00000002                M spmu3	=	op3
000170D0 =00000004                M spmu4	=	op4
000170D0                            	spRateScale	$02, $02, $01, $00
000170D0 =00000002                M sprs1	=	op1
000170D0 =00000002                M sprs2	=	op2
000170D0 =00000001                M sprs3	=	op3
000170D0 =00000000                M sprs4	=	op4
000170D0                            	spAttackRt	$0D, $1F, $12, $1F
000170D0 =0000000D                M spar1	=	op1
000170D0 =0000001F                M spar2	=	op2
000170D0 =00000012                M spar3	=	op3
000170D0 =0000001F                M spar4	=	op4
000170D0                            	spAmpMod	$00, $00, $00, $00
000170D0 =00000000                M spam1	=	op1
000170D0 =00000000                M spam2	=	op2
000170D0 =00000000                M spam3	=	op3
000170D0 =00000000                M spam4	=	op4
000170D0                            	spSustainRt	$09, $00, $00, $0D
000170D0 =00000009                M spsr1	=	op1
000170D0 =00000000                M spsr2	=	op2
000170D0 =00000000                M spsr3	=	op3
000170D0 =0000000D                M spsr4	=	op4
000170D0                            	spSustainLv	$02, $00, $00, $0F
000170D0 =00000002                M spsl1	=	op1
000170D0 =00000000                M spsl2	=	op2
000170D0 =00000000                M spsl3	=	op3
000170D0 =0000000F                M spsl4	=	op4
000170D0                            	spDecayRt	$00, $00, $00, $00
000170D0 =00000000                M spdr1	=	op1
000170D0 =00000000                M spdr2	=	op2
000170D0 =00000000                M spdr3	=	op3
000170D0 =00000000                M spdr4	=	op4
000170D0                            	spReleaseRt	$03, $02, $08, $07
000170D0 =00000003                M sprr1	=	op1
000170D0 =00000002                M sprr2	=	op2
000170D0 =00000008                M sprr3	=	op3
000170D0 =00000007                M sprr4	=	op4
000170D0                            	spSSGEG		$00, $00, $00, $00
000170D0 =00000000                M spss1	=	op1
000170D0 =00000000                M spss2	=	op2
000170D0 =00000000                M spss3	=	op3
000170D0 =00000000                M spss4	=	op4
000170D0                            	spTotalLv	$15, $1D, $05, $0A
000170D0 =00000015                M sptl1	=	op1
000170D0 =0000001D                M sptl2	=	op2
000170D0 =00000005                M sptl3	=	op3
000170D0 =0000000A                M sptl4	=	op4
000170D0 3C                       M 	dc.b	(spfe<<3)+spal
000170D1 =00000080                M sptlmask4	set	$80
000170D1 =00000000                M sptlmask2	set	((spal>=5)<<7)
000170D1 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
000170D1 =00000000                M sptlmask1	set	((spal=7)<<7)
000170D1 7172 3F34                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
000170D5 8D52 9F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
000170D9 0900 000D                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
000170DD 0000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
000170E1 2308 02F7                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
000170E5 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
000170E9 1585 1D8A                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
000170ED 4E41 54                  M 	dc.b	'NAT'
000170F0                            
000170F0                            	; Patch $20
000170F0                            	; $3E
000170F0                            	; $77, $71, $32, $31,	$1F, $1F, $1F, $1F
000170F0                            	; $0D, $06, $00, $00,	$08, $06, $00, $00
000170F0                            	; $15, $0A, $0A, $0A,	$1B, $8F, $8F, $8F
000170F0                            	spAlgorithm	$06
000170F0 =00000021                M spatnum	=	spatnum+1
000170F0 =00000006                M spal	=	val
000170F0                            	spFeedback	$07
000170F0 =00000007                M spfe	=	val
000170F0                            	spDetune	$07, $03, $07, $03
000170F0 =00000007                M spde1	=	op1
000170F0 =00000003                M spde2	=	op2
000170F0 =00000007                M spde3	=	op3
000170F0 =00000003                M spde4	=	op4
000170F0                            	spMultiple	$07, $02, $01, $01
000170F0 =00000007                M spmu1	=	op1
000170F0 =00000002                M spmu2	=	op2
000170F0 =00000001                M spmu3	=	op3
000170F0 =00000001                M spmu4	=	op4
000170F0                            	spRateScale	$00, $00, $00, $00
000170F0 =00000000                M sprs1	=	op1
000170F0 =00000000                M sprs2	=	op2
000170F0 =00000000                M sprs3	=	op3
000170F0 =00000000                M sprs4	=	op4
000170F0                            	spAttackRt	$1F, $1F, $1F, $1F
000170F0 =0000001F                M spar1	=	op1
000170F0 =0000001F                M spar2	=	op2
000170F0 =0000001F                M spar3	=	op3
000170F0 =0000001F                M spar4	=	op4
000170F0                            	spAmpMod	$00, $00, $00, $00
000170F0 =00000000                M spam1	=	op1
000170F0 =00000000                M spam2	=	op2
000170F0 =00000000                M spam3	=	op3
000170F0 =00000000                M spam4	=	op4
000170F0                            	spSustainRt	$0D, $00, $06, $00
000170F0 =0000000D                M spsr1	=	op1
000170F0 =00000000                M spsr2	=	op2
000170F0 =00000006                M spsr3	=	op3
000170F0 =00000000                M spsr4	=	op4
000170F0                            	spSustainLv	$01, $00, $00, $00
000170F0 =00000001                M spsl1	=	op1
000170F0 =00000000                M spsl2	=	op2
000170F0 =00000000                M spsl3	=	op3
000170F0 =00000000                M spsl4	=	op4
000170F0                            	spDecayRt	$08, $00, $06, $00
000170F0 =00000008                M spdr1	=	op1
000170F0 =00000000                M spdr2	=	op2
000170F0 =00000006                M spdr3	=	op3
000170F0 =00000000                M spdr4	=	op4
000170F0                            	spReleaseRt	$05, $0A, $0A, $0A
000170F0 =00000005                M sprr1	=	op1
000170F0 =0000000A                M sprr2	=	op2
000170F0 =0000000A                M sprr3	=	op3
000170F0 =0000000A                M sprr4	=	op4
000170F0                            	spSSGEG		$00, $00, $00, $00
000170F0 =00000000                M spss1	=	op1
000170F0 =00000000                M spss2	=	op2
000170F0 =00000000                M spss3	=	op3
000170F0 =00000000                M spss4	=	op4
000170F0                            	spTotalLv	$1B, $0F, $0F, $0F
000170F0 =0000001B                M sptl1	=	op1
000170F0 =0000000F                M sptl2	=	op2
000170F0 =0000000F                M sptl3	=	op3
000170F0 =0000000F                M sptl4	=	op4
000170F0 3E                       M 	dc.b	(spfe<<3)+spal
000170F1 =00000080                M sptlmask4	set	$80
000170F1 =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
000170F1 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
000170F1 =00000000                M sptlmask1	set	((spal=7)<<7)
000170F1 7771 3231                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
000170F5 1F1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
000170F9 0D06 0000                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
000170FD 0806 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00017101 150A 0A0A                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00017105 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00017109 1B8F 8F8F                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001710D 4E41 54                  M 	dc.b	'NAT'
00017110                            
00017110                            	; Patch $21
00017110                            	; $07
00017110                            	; $34, $74, $32, $71,	$1F, $1F, $1F, $1F
00017110                            	; $0A, $0A, $05, $03,	$00, $00, $00, $00
00017110                            	; $3F, $3F, $2F, $2F,	$8A, $8A, $8A, $8A
00017110                            	spAlgorithm	$07
00017110 =00000022                M spatnum	=	spatnum+1
00017110 =00000007                M spal	=	val
00017110                            	spFeedback	$00
00017110 =00000000                M spfe	=	val
00017110                            	spDetune	$03, $03, $07, $07
00017110 =00000003                M spde1	=	op1
00017110 =00000003                M spde2	=	op2
00017110 =00000007                M spde3	=	op3
00017110 =00000007                M spde4	=	op4
00017110                            	spMultiple	$04, $02, $04, $01
00017110 =00000004                M spmu1	=	op1
00017110 =00000002                M spmu2	=	op2
00017110 =00000004                M spmu3	=	op3
00017110 =00000001                M spmu4	=	op4
00017110                            	spRateScale	$00, $00, $00, $00
00017110 =00000000                M sprs1	=	op1
00017110 =00000000                M sprs2	=	op2
00017110 =00000000                M sprs3	=	op3
00017110 =00000000                M sprs4	=	op4
00017110                            	spAttackRt	$1F, $1F, $1F, $1F
00017110 =0000001F                M spar1	=	op1
00017110 =0000001F                M spar2	=	op2
00017110 =0000001F                M spar3	=	op3
00017110 =0000001F                M spar4	=	op4
00017110                            	spAmpMod	$00, $00, $00, $00
00017110 =00000000                M spam1	=	op1
00017110 =00000000                M spam2	=	op2
00017110 =00000000                M spam3	=	op3
00017110 =00000000                M spam4	=	op4
00017110                            	spSustainRt	$0A, $05, $0A, $03
00017110 =0000000A                M spsr1	=	op1
00017110 =00000005                M spsr2	=	op2
00017110 =0000000A                M spsr3	=	op3
00017110 =00000003                M spsr4	=	op4
00017110                            	spSustainLv	$03, $02, $03, $02
00017110 =00000003                M spsl1	=	op1
00017110 =00000002                M spsl2	=	op2
00017110 =00000003                M spsl3	=	op3
00017110 =00000002                M spsl4	=	op4
00017110                            	spDecayRt	$00, $00, $00, $00
00017110 =00000000                M spdr1	=	op1
00017110 =00000000                M spdr2	=	op2
00017110 =00000000                M spdr3	=	op3
00017110 =00000000                M spdr4	=	op4
00017110                            	spReleaseRt	$0F, $0F, $0F, $0F
00017110 =0000000F                M sprr1	=	op1
00017110 =0000000F                M sprr2	=	op2
00017110 =0000000F                M sprr3	=	op3
00017110 =0000000F                M sprr4	=	op4
00017110                            	spSSGEG		$00, $00, $00, $00
00017110 =00000000                M spss1	=	op1
00017110 =00000000                M spss2	=	op2
00017110 =00000000                M spss3	=	op3
00017110 =00000000                M spss4	=	op4
00017110                            	spTotalLv	$0A, $0A, $0A, $0A
00017110 =0000000A                M sptl1	=	op1
00017110 =0000000A                M sptl2	=	op2
00017110 =0000000A                M sptl3	=	op3
00017110 =0000000A                M sptl4	=	op4
00017110 07                       M 	dc.b	(spfe<<3)+spal
00017111 =00000080                M sptlmask4	set	$80
00017111 =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
00017111 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00017111 =FFFFFF80                M sptlmask1	set	((spal=7)<<7)
00017111 3474 3271                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00017115 1F1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00017119 0A0A 0503                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001711D 0000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00017121 3F3F 2F2F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00017125 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00017129 8A8A 8A8A                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001712D 4E41 54                  M 	dc.b	'NAT'
00017130                            
00017130                            	; Patch $22
00017130                            	; $20
00017130                            	; $36, $35, $30, $31,	$DF, $DF, $9F, $9F
00017130                            	; $07, $06, $09, $06,	$07, $06, $06, $08
00017130                            	; $20, $10, $10, $F8,	$19, $37, $13, $80
00017130                            	spAlgorithm	$00
00017130 =00000023                M spatnum	=	spatnum+1
00017130 =00000000                M spal	=	val
00017130                            	spFeedback	$04
00017130 =00000004                M spfe	=	val
00017130                            	spDetune	$03, $03, $03, $03
00017130 =00000003                M spde1	=	op1
00017130 =00000003                M spde2	=	op2
00017130 =00000003                M spde3	=	op3
00017130 =00000003                M spde4	=	op4
00017130                            	spMultiple	$06, $00, $05, $01
00017130 =00000006                M spmu1	=	op1
00017130 =00000000                M spmu2	=	op2
00017130 =00000005                M spmu3	=	op3
00017130 =00000001                M spmu4	=	op4
00017130                            	spRateScale	$03, $02, $03, $02
00017130 =00000003                M sprs1	=	op1
00017130 =00000002                M sprs2	=	op2
00017130 =00000003                M sprs3	=	op3
00017130 =00000002                M sprs4	=	op4
00017130                            	spAttackRt	$1F, $1F, $1F, $1F
00017130 =0000001F                M spar1	=	op1
00017130 =0000001F                M spar2	=	op2
00017130 =0000001F                M spar3	=	op3
00017130 =0000001F                M spar4	=	op4
00017130                            	spAmpMod	$00, $00, $00, $00
00017130 =00000000                M spam1	=	op1
00017130 =00000000                M spam2	=	op2
00017130 =00000000                M spam3	=	op3
00017130 =00000000                M spam4	=	op4
00017130                            	spSustainRt	$07, $09, $06, $06
00017130 =00000007                M spsr1	=	op1
00017130 =00000009                M spsr2	=	op2
00017130 =00000006                M spsr3	=	op3
00017130 =00000006                M spsr4	=	op4
00017130                            	spSustainLv	$02, $01, $01, $0F
00017130 =00000002                M spsl1	=	op1
00017130 =00000001                M spsl2	=	op2
00017130 =00000001                M spsl3	=	op3
00017130 =0000000F                M spsl4	=	op4
00017130                            	spDecayRt	$07, $06, $06, $08
00017130 =00000007                M spdr1	=	op1
00017130 =00000006                M spdr2	=	op2
00017130 =00000006                M spdr3	=	op3
00017130 =00000008                M spdr4	=	op4
00017130                            	spReleaseRt	$00, $00, $00, $08
00017130 =00000000                M sprr1	=	op1
00017130 =00000000                M sprr2	=	op2
00017130 =00000000                M sprr3	=	op3
00017130 =00000008                M sprr4	=	op4
00017130                            	spSSGEG		$00, $00, $00, $00
00017130 =00000000                M spss1	=	op1
00017130 =00000000                M spss2	=	op2
00017130 =00000000                M spss3	=	op3
00017130 =00000000                M spss4	=	op4
00017130                            	spTotalLv	$19, $13, $37, $00
00017130 =00000019                M sptl1	=	op1
00017130 =00000013                M sptl2	=	op2
00017130 =00000037                M sptl3	=	op3
00017130 =00000000                M sptl4	=	op4
00017130 20                       M 	dc.b	(spfe<<3)+spal
00017131 =00000080                M sptlmask4	set	$80
00017131 =00000000                M sptlmask2	set	((spal>=5)<<7)
00017131 =00000000                M sptlmask3	set	((spal>=4)<<7)
00017131 =00000000                M sptlmask1	set	((spal=7)<<7)
00017131 3635 3031                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00017135 DFDF 9F9F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00017139 0706 0906                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001713D 0706 0608                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00017141 2010 10F8                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00017145 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00017149 1937 1380                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001714D 4E41 54                  M 	dc.b	'NAT'
00017150                            
00017150                            HCZ2_DAC1:
00017150                            	sStop
00017150 F5                       M 	dc.b	$f5
00017151                            
00017151                            HCZ2_DAC2:
00017151                            HCZ2_Loop4:
00017151                            HCZ2_Jump8:
00017151 8106                       	dc.b dKick, $06
00017153                            	sPan		spLeft, $00
00017153 E080                     M 	dc.b	$e0,spleft|$00
00017155 8502 8504 8506 8585        	dc.b dHiTom, $02, dHiTom, $04, dHiTom, $06, dHiTom, dHiTom
0001715D 85                         	dc.b dHiTom
0001715E                            	sPan		spCenter, $00
0001715E E0C0                     M 	dc.b	$e0,spcenter|$00
00017160 8686 8686 8687             	dc.b dTom, dTom, dTom, dTom, dTom, dLowTom
00017166                            	sPan		spRight, $00
00017166 E040                     M 	dc.b	$e0,spright|$00
00017168 8702 8704 8706 8888        	dc.b dLowTom, $02, dLowTom, $04, dLowTom, $06, dFloorTom, dFloorTom
00017170                            	sPan		spCenter, $00
00017170 E0C0                     M 	dc.b	$e0,spcenter|$00
00017172 810C 831E 810C 8112        	dc.b dKick, $0C, dSnare, $1E, dKick, $0C, dKick, $12
0001717A 810C 83                    	dc.b dKick, $0C, dSnare
0001717D                            	sLoop		$00, $02, HCZ2_Loop4
0001717D F700                     M 	dc.b	$f7,$00
0001717F FFD1                     M 	dc.w	hcz2_loop4-*-1
00017181 02                       M 	dc.b	$02
00017182                            
00017182                            HCZ2_Loop5:
00017182 8118 8306 810C 8181        	dc.b dKick, $18, dSnare, $06, dKick, $0C, dKick, dKick
0001718A 1283 0C81                  	dc.b $12, dSnare, $0C, dKick
0001718E                            	sLoop		$00, $03, HCZ2_Loop5
0001718E F700                     M 	dc.b	$f7,$00
00017190 FFF1                     M 	dc.w	hcz2_loop5-*-1
00017192 03                       M 	dc.b	$03
00017193 8124 8306 810C 8112        	dc.b dKick, $24, dSnare, $06, dKick, $0C, dKick, $12
0001719B 810C 83                    	dc.b dKick, $0C, dSnare
0001719E                            
0001719E                            HCZ2_Loop6:
0001719E 8118 8306 810C 8181        	dc.b dKick, $18, dSnare, $06, dKick, $0C, dKick, dKick
000171A6 1283 0C81                  	dc.b $12, dSnare, $0C, dKick
000171AA                            	sLoop		$00, $02, HCZ2_Loop6
000171AA F700                     M 	dc.b	$f7,$00
000171AC FFF1                     M 	dc.w	hcz2_loop6-*-1
000171AE 02                       M 	dc.b	$02
000171AF 8118 8306 810C 8181        	dc.b dKick, $18, dSnare, $06, dKick, $0C, dKick, dKick
000171B7 1283 0C81 0683 0C81        	dc.b $12, dSnare, $0C, dKick, $06, dSnare, $0C, dKick
000171BF 8106 8586 8783 180C        	dc.b dKick, $06, dHiTom, dTom, dLowTom, dSnare, $18, $0C
000171C7 0204 0683                  	dc.b $02, $04, $06, dSnare
000171CB                            	sCall		HCZ2_Call4
000171CB F8                       M 	dc.b	$f8
000171CC 0000                     M 	dc.w	hcz2_call4-*-1
000171CE 8118 8306 810C 811E        	dc.b dKick, $18, dSnare, $06, dKick, $0C, dKick, $1E
000171D6 830C 8112 8383 0C83        	dc.b dSnare, $0C, dKick, $12, dSnare, dSnare, $0C, dSnare
000171DE 0683 0C83 1283 0683        	dc.b $06, dSnare, $0C, dSnare, $12, dSnare, $06, dSnare
000171E6 8383                       	dc.b dSnare, dSnare
000171E8                            	sCall		HCZ2_Call4
000171E8 F8                       M 	dc.b	$f8
000171E9 0000                     M 	dc.w	hcz2_call4-*-1
000171EB 8118 8306 810C 811E        	dc.b dKick, $18, dSnare, $06, dKick, $0C, dKick, $1E
000171F3 830C 8106 810C 8181        	dc.b dSnare, $0C, dKick, $06, dKick, $0C, dKick, dKick
000171FB 0683 8181 8381 810C        	dc.b $06, dSnare, dKick, dKick, dSnare, dKick, dKick, $0C
00017203 8383 0683 83               	dc.b dSnare, dSnare, $06, dSnare, dSnare
00017208                            
00017208                            HCZ2_Loop7:
00017208                            	sCall		HCZ2_Call5
00017208 F8                       M 	dc.b	$f8
00017209 0000                     M 	dc.w	hcz2_call5-*-1
0001720B                            	sLoop		$00, $03, HCZ2_Loop7
0001720B F700                     M 	dc.b	$f7,$00
0001720D FFFA                     M 	dc.w	hcz2_loop7-*-1
0001720F 03                       M 	dc.b	$03
00017210 810C 8381 0683 0C06        	dc.b dKick, $0C, dSnare, dKick, $06, dSnare, $0C, $06
00017218 8183 1204 8383 8306        	dc.b dKick, dSnare, $12, $04, dSnare, dSnare, dSnare, $06
00017220 83                         	dc.b dSnare
00017221                            
00017221                            HCZ2_Loop8:
00017221                            	sCall		HCZ2_Call5
00017221 F8                       M 	dc.b	$f8
00017222 0000                     M 	dc.w	hcz2_call5-*-1
00017224                            	sLoop		$00, $02, HCZ2_Loop8
00017224 F700                     M 	dc.b	$f7,$00
00017226 FFFA                     M 	dc.w	hcz2_loop8-*-1
00017228 02                       M 	dc.b	$02
00017229 8112 0683 1E81 060C        	dc.b dKick, $12, $06, dSnare, $1E, dKick, $06, $0C
00017231 831E 0C0C 060C 1802        	dc.b dSnare, $1E, $0C, $0C, $06, $0C, $18, $02
00017239 0202 0606 06               	dc.b $02, $02, $06, $06, $06
0001723E                            	sJump		HCZ2_Jump8
0001723E F6                       M 	dc.b	$f6
0001723F FF11                     M 	dc.w	hcz2_jump8-*-1
00017241                            
00017241                            HCZ2_Call4:
00017241 8118 8306 810C 811E        	dc.b dKick, $18, dSnare, $06, dKick, $0C, dKick, $1E
00017249 830C 8181 1883 0681        	dc.b dSnare, $0C, dKick, dKick, $18, dSnare, $06, dKick
00017251 0C81 1E83 0C81             	dc.b $0C, dKick, $1E, dSnare, $0C, dKick
00017257                            	sRet
00017257 F9                       M 	dc.b	$f9
00017258                            
00017258                            HCZ2_Call5:
00017258 8112 8106 831E 8106        	dc.b dKick, $12, dKick, $06, dSnare, $1E, dKick, $06
00017260 810C 8318                  	dc.b dKick, $0C, dSnare, $18
00017264                            	sRet
00017264 F9                       M 	dc.b	$f9
00017265                            
00017265                            HCZ2_FM1:
00017265                            HCZ2_Jump7:
00017265                            	sVoice		$03
00017265 E803                     M 	dc.b	$e8,$03
00017267                            	ssDetune	$FE
00017267 E1FE                     M 	dc.b	$e1,$fe
00017269                            	ssMod68k	$0F, $01, $06, $06
00017269 F00F 0106 06             M 	dc.b	$f0,$0f,$01,$06,$06
0001726E                            	sCall		HCZ2_Call1
0001726E F8                       M 	dc.b	$f8
0001726F 0000                     M 	dc.w	hcz2_call1-*-1
00017271                            	sVoice		$0E
00017271 E80E                     M 	dc.b	$e8,$0e
00017273                            	ssDetune	$01
00017273 E101                     M 	dc.b	$e1,$01
00017275                            	ssMod68k	$0F, $01, $06, $06
00017275 F00F 0106 06             M 	dc.b	$f0,$0f,$01,$06,$06
0001727A                            	sCall		HCZ2_Call2
0001727A F8                       M 	dc.b	$f8
0001727B 0000                     M 	dc.w	hcz2_call2-*-1
0001727D                            	sVoice		$03
0001727D E803                     M 	dc.b	$e8,$03
0001727F                            	ssDetune	$FE
0001727F E1FE                     M 	dc.b	$e1,$fe
00017281                            	ssMod68k	$0F, $01, $06, $06
00017281 F00F 0106 06             M 	dc.b	$f0,$0f,$01,$06,$06
00017286                            	sCall		HCZ2_Call3
00017286 F8                       M 	dc.b	$f8
00017287 0000                     M 	dc.w	hcz2_call3-*-1
00017289                            	sJump		HCZ2_Jump7
00017289 F6                       M 	dc.b	$f6
0001728A FFDA                     M 	dc.w	hcz2_jump7-*-1
0001728C                            
0001728C                            HCZ2_Call1:
0001728C 807F 8080 76B8 06BB        	dc.b nRst, $7F, nRst, nRst, $76, nG4, $06, nBb4
00017294 BDB8 B602 B4B3 B1AF        	dc.b nC5, nG4, nF4, $02, nEb4, nD4, nC4, nBb3
0001729C AEAC 8004 AF06 B1AC        	dc.b nA3, nG3, nRst, $04, nBb3, $06, nC4, nG3
000172A4 AA02 AB04 AA06 A8A5        	dc.b nF3, $02, nFs3, $04, nF3, $06, nEb3, nC3
000172AC AC02 AEAF 08AF 02AF        	dc.b nG3, $02, nA3, nBb3, $08, nBb3, $02, nBb3
000172B4 04AE 12AC 02AB AAA8        	dc.b $04, nA3, $12, nG3, $02, nFs3, nF3, nEb3
000172BC A7A5 A3A2 A080 36AF        	dc.b nD3, nC3, nBb2, nA2, nG2, nRst, $36, nBb3
000172C4 06B0 B1AB 02AC 04AA        	dc.b $06, nB3, nC4, nFs3, $02, nG3, $04, nF3
000172CC 02A8 A5A3 A2A0 9E9C        	dc.b $02, nEb3, nC3, nBb2, nA2, nG2, nF2, nEb2
000172D4 04AA 02AB 04AA 06A8        	dc.b $04, nF3, $02, nFs3, $04, nF3, $06, nEb3
000172DC AAA8 A5A3 AC0C AC06        	dc.b nF3, nEb3, nC3, nBb2, nG3, $0C, nG3, $06
000172E4 B112 AE02 ACAA A8A7        	dc.b nC4, $12, nA3, $02, nG3, nF3, nEb3, nD3
000172EC A580 3CB8 06BB BDB8        	dc.b nC3, nRst, $3C, nG4, $06, nBb4, nC5, nG4
000172F4 B602 B4B3 B1AF AEAC        	dc.b nF4, $02, nEb4, nD4, nC4, nBb3, nA3, nG3
000172FC 8004 AF06 B1AC AA02        	dc.b nRst, $04, nBb3, $06, nC4, nG3, nF3, $02
00017304 AB04 AA06 A8A5 AC02        	dc.b nFs3, $04, nF3, $06, nEb3, nC3, nG3, $02
0001730C AEAF 08AF 02AF 04AE        	dc.b nA3, nBb3, $08, nBb3, $02, nBb3, $04, nA3
00017314 12AC 02AA A8A7 A5A3        	dc.b $12, nG3, $02, nF3, nEb3, nD3, nC3, nBb2
0001731C A2A0 9E80 36AF 06B0        	dc.b nA2, nG2, nF2, nRst, $36, nBb3, $06, nB3
00017324 B1AB 02AC 04AA 02A8        	dc.b nC4, nFs3, $02, nG3, $04, nF3, $02, nEb3
0001732C A5A3 A2A0 9E9C 04AA        	dc.b nC3, nBb2, nA2, nG2, nF2, nEb2, $04, nF3
00017334 02AB 04AA 06A8 AAA8        	dc.b $02, nFs3, $04, nF3, $06, nEb3, nF3, nEb3
0001733C A5A3 AC0C AC06 A812        	dc.b nC3, nBb2, nG3, $0C, nG3, $06, nEb3, $12
00017344 A702 A5A3 A2A0 9E80        	dc.b nD3, $02, nC3, nBb2, nA2, nG2, nF2, nRst
0001734C 1E                         	dc.b $1E
0001734D                            	sRet
0001734D F9                       M 	dc.b	$f9
0001734E                            
0001734E                            HCZ2_Call2:
0001734E                            	saTranspose	$F4
0001734E E4F4                     M 	dc.b	$e4,$f4
00017350 AA06 AB02 AC04 AF06        	dc.b nF3, $06, nFs3, $02, nG3, $04, nBb3, $06
00017358 B4B6 B8BB BF02 C008        	dc.b nEb4, nF4, nG4, nBb4, nD5, $02, nEb5, $08
00017360 8002 C204 8002 C3C4        	dc.b nRst, $02, nF5, $04, nRst, $02, nFs5, nG5
00017368 0880 02BD 0A80 02C3        	dc.b $08, nRst, $02, nC5, $0A, nRst, $02, nFs5
00017370 C426 8002 C204 8002        	dc.b nG5, $26, nRst, $02, nF5, $04, nRst, $02
00017378 C004 8002 BEBF 2680        	dc.b nEb5, $04, nRst, $02, nCs5, nD5, $26, nRst
00017380 02BB 3480 02BE BF08        	dc.b $02, nBb4, $34, nRst, $02, nCs5, nD5, $08
00017388 8002 C004 8002 C1C2        	dc.b nRst, $02, nEb5, $04, nRst, $02, nE5, nF5
00017390 0880 02BB 0A80 02C2        	dc.b $08, nRst, $02, nBb4, $0A, nRst, $02, nF5
00017398 C226 8002 C004 8002        	dc.b nF5, $26, nRst, $02, nEb5, $04, nRst, $02
000173A0 BF04 8002 BD2E 8008        	dc.b nD5, $04, nRst, $02, nC5, $2E, nRst, $08
000173A8 BF10 8002 C00A 8002        	dc.b nD5, $10, nRst, $02, nEb5, $0A, nRst, $02
000173B0 C20A 8002 BFC0 0880        	dc.b nF5, $0A, nRst, $02, nD5, nEb5, $08, nRst
000173B8 02C2 0480 02C3 C408        	dc.b $02, nF5, $04, nRst, $02, nFs5, nG5, $08
000173C0 8002 BD0A 8002 C428        	dc.b nRst, $02, nC5, $0A, nRst, $02, nG5, $28
000173C8 8002 C204 8002 C004        	dc.b nRst, $02, nF5, $04, nRst, $02, nEb5, $04
000173D0 8002 BEBF 2680 02C0        	dc.b nRst, $02, nCs5, nD5, $26, nRst, $02, nEb5
000173D8 1C80 0EC0 0480 02C2        	dc.b $1C, nRst, $0E, nEb5, $04, nRst, $02, nF5
000173E0 0480 02C3 C408 8002        	dc.b $04, nRst, $02, nFs5, nG5, $08, nRst, $02
000173E8 C004 8002 C40A 8002        	dc.b nEb5, $04, nRst, $02, nG5, $0A, nRst, $02
000173F0 BB0A 8002 BD28 8002        	dc.b nBb4, $0A, nRst, $02, nC5, $28, nRst, $02
000173F8 C004 8002 C204 8002        	dc.b nEb5, $04, nRst, $02, nF5, $04, nRst, $02
00017400 C42E 8002 C212 C002        	dc.b nG5, $2E, nRst, $02, nF5, $12, nEb5, $02
00017408 BFBD BBB9 B8B6 B4B3        	dc.b nD5, nC5, nBb4, nAb4, nG4, nF4, nEb4, nD4
00017410                            	sRet
00017410 F9                       M 	dc.b	$f9
00017411                            
00017411                            HCZ2_Call3:
00017411                            	saTranspose	$0C
00017411 E40C                     M 	dc.b	$e4,$0c
00017413 B104 8002 B304 8002        	dc.b nC4, $04, nRst, $02, nD4, $04, nRst, $02
0001741B B40C B302 B1AF ADAC        	dc.b nEb4, $0C, nD4, $02, nC4, nBb3, nAb3, nG3
00017423 AAB1 0A80 02B4 0480        	dc.b nF3, nC4, $0A, nRst, $02, nEb4, $04, nRst
0001742B 02B5 B680 08B3 1080        	dc.b $02, nE4, nF4, nRst, $08, nD4, $10, nRst
00017433 02B1 0480 08AF 0480        	dc.b $02, nC4, $04, nRst, $08, nBb3, $04, nRst
0001743B 08AB 02AC 1480 02AB        	dc.b $08, nFs3, $02, nG3, $14, nRst, $02, nFs3
00017443 AC08 8002 AA04 8002        	dc.b nG3, $08, nRst, $02, nF3, $04, nRst, $02
0001744B ABAC 28B1 0480 02B3        	dc.b nFs3, nG3, $28, nC4, $04, nRst, $02, nD4
00017453 0480 02B4 0CB3 02B1        	dc.b $04, nRst, $02, nEb4, $0C, nD4, $02, nC4
0001745B AFAD ACAA B10A 8002        	dc.b nBb3, nAb3, nG3, nF3, nC4, $0A, nRst, $02
00017463 B404 8002 B5B6 8008        	dc.b nEb4, $04, nRst, $02, nE4, nF4, nRst, $08
0001746B B310 8002 B104 8008        	dc.b nD4, $10, nRst, $02, nC4, $04, nRst, $08
00017473 B004 8008 B110 8002        	dc.b nB3, $04, nRst, $08, nC4, $10, nRst, $02
0001747B B104 8002 B30A 8002        	dc.b nC4, $04, nRst, $02, nD4, $0A, nRst, $02
00017483 B104 8002 B304 8008        	dc.b nC4, $04, nRst, $02, nD4, $04, nRst, $08
0001748B B410 8002 B60A 8002        	dc.b nEb4, $10, nRst, $02, nF4, $0A, nRst, $02
00017493 B104 8002 B304 8002        	dc.b nC4, $04, nRst, $02, nD4, $04, nRst, $02
0001749B B40C B302 B1AF ADAC        	dc.b nEb4, $0C, nD4, $02, nC4, nBb3, nAb3, nG3
000174A3 AAB1 0A80 02B4 0480        	dc.b nF3, nC4, $0A, nRst, $02, nEb4, $04, nRst
000174AB 02B5 B680 08B3 1080        	dc.b $02, nE4, nF4, nRst, $08, nD4, $10, nRst
000174B3 02B1 0480 08AF 0480        	dc.b $02, nC4, $04, nRst, $08, nBb3, $04, nRst
000174BB 08AB 02AC 1480 02AB        	dc.b $08, nFs3, $02, nG3, $14, nRst, $02, nFs3
000174C3 AC08 8002 AA04 8002        	dc.b nG3, $08, nRst, $02, nF3, $04, nRst, $02
000174CB ABAC 28B1 0480 02B3        	dc.b nFs3, nG3, $28, nC4, $04, nRst, $02, nD4
000174D3 0480 02B4 1080 02B4        	dc.b $04, nRst, $02, nEb4, $10, nRst, $02, nEb4
000174DB 0480 08B3 0480 02B4        	dc.b $04, nRst, $08, nD4, $04, nRst, $02, nEb4
000174E3 1080 02B4 0480 02B6        	dc.b $10, nRst, $02, nEb4, $04, nRst, $02, nF4
000174EB 0A80 02B4 0480 08B9        	dc.b $0A, nRst, $02, nEb4, $04, nRst, $08, nAb4
000174F3 0480 0EBD 0480 08BD        	dc.b $04, nRst, $0E, nC5, $04, nRst, $08, nC5
000174FB 0480 08BD 0480 02BD        	dc.b $04, nRst, $08, nC5, $04, nRst, $02, nC5
00017503 0A80 02BC 0480 2C          	dc.b $0A, nRst, $02, nB4, $04, nRst, $2C
0001750A                            	sRet
0001750A F9                       M 	dc.b	$f9
0001750B                            
0001750B                            HCZ2_FM2:
0001750B                            HCZ2_Jump6:
0001750B                            	sVoice		$15
0001750B E815                     M 	dc.b	$e8,$15
0001750D                            	ssDetune	$00
0001750D E100                     M 	dc.b	$e1,$00
0001750F                            	ssMod68k	$0F, $01, $06, $06
0001750F F00F 0106 06             M 	dc.b	$f0,$0f,$01,$06,$06
00017514 8D0A 8002 9080 048D        	dc.b nC1, $0A, nRst, $02, nEb1, nRst, $04, nC1
0001751C 1080 0290 8004 9280        	dc.b $10, nRst, $02, nEb1, nRst, $04, nF1, nRst
00017524 0890 1080 0292 1680        	dc.b $08, nEb1, $10, nRst, $02, nF1, $16, nRst
0001752C 028D 0A80 028A 8004        	dc.b $02, nC1, $0A, nRst, $02, nA0, nRst, $04
00017534 8D12 8A04 8002 8B04        	dc.b nC1, $12, nA0, $04, nRst, $02, nBb0, $04
0001753C 8008 8810 8002 8B16        	dc.b nRst, $08, nG0, $10, nRst, $02, nBb0, $16
00017544 8002 8D0A 8002 9080        	dc.b nRst, $02, nC1, $0A, nRst, $02, nEb1, nRst
0001754C 048D 1080 0290 8004        	dc.b $04, nC1, $10, nRst, $02, nEb1, nRst, $04
00017554 9280 0890 1080 0292        	dc.b nF1, nRst, $08, nEb1, $10, nRst, $02, nF1
0001755C 1680 028D 0A80 028A        	dc.b $16, nRst, $02, nC1, $0A, nRst, $02, nA0
00017564 8004 8D12 8A04 8002        	dc.b nRst, $04, nC1, $12, nA0, $04, nRst, $02
0001756C 8B04 8008 8810 8002        	dc.b nBb0, $04, nRst, $08, nG0, $10, nRst, $02
00017574 8B16 8002 8D0A 8002        	dc.b nBb0, $16, nRst, $02, nC1, $0A, nRst, $02
0001757C 9080 048D 1080 0290        	dc.b nEb1, nRst, $04, nC1, $10, nRst, $02, nEb1
00017584 8004 9280 0890 1080        	dc.b nRst, $04, nF1, nRst, $08, nEb1, $10, nRst
0001758C 0292 1680 028D 0A80        	dc.b $02, nF1, $16, nRst, $02, nC1, $0A, nRst
00017594 028A 8004 8D12 8A04        	dc.b $02, nA0, nRst, $04, nC1, $12, nA0, $04
0001759C 8002 8B04 8008 8810        	dc.b nRst, $02, nBb0, $04, nRst, $08, nG0, $10
000175A4 8002 8B16 8002 8D0A        	dc.b nRst, $02, nBb0, $16, nRst, $02, nC1, $0A
000175AC 8002 9080 048D 1080        	dc.b nRst, $02, nEb1, nRst, $04, nC1, $10, nRst
000175B4 0290 8004 9280 0890        	dc.b $02, nEb1, nRst, $04, nF1, nRst, $08, nEb1
000175BC 1080 0292 1680 028D        	dc.b $10, nRst, $02, nF1, $16, nRst, $02, nC1
000175C4 0A80 028A 8004 8D12        	dc.b $0A, nRst, $02, nA0, nRst, $04, nC1, $12
000175CC 8A04 8002 8B04 8008        	dc.b nA0, $04, nRst, $02, nBb0, $04, nRst, $08
000175D4 8810 8002 8B16 8002        	dc.b nG0, $10, nRst, $02, nBb0, $16, nRst, $02
000175DC 8D0A 8002 9080 048D        	dc.b nC1, $0A, nRst, $02, nEb1, nRst, $04, nC1
000175E4 1080 0290 0480 0292        	dc.b $10, nRst, $02, nEb1, $04, nRst, $02, nF1
000175EC 0480 0890 1080 0292        	dc.b $04, nRst, $08, nEb1, $10, nRst, $02, nF1
000175F4 1680 028D 0A80 028A        	dc.b $16, nRst, $02, nC1, $0A, nRst, $02, nA0
000175FC 8004 8D12 8A04 8002        	dc.b nRst, $04, nC1, $12, nA0, $04, nRst, $02
00017604 8B04 8008 8810 8002        	dc.b nBb0, $04, nRst, $08, nG0, $10, nRst, $02
0001760C 8B16 8002 8D0A 8002        	dc.b nBb0, $16, nRst, $02, nC1, $0A, nRst, $02
00017614 9080 048D 1080 0290        	dc.b nEb1, nRst, $04, nC1, $10, nRst, $02, nEb1
0001761C 0480 0292 0480 0890        	dc.b $04, nRst, $02, nF1, $04, nRst, $08, nEb1
00017624 1080 0292 1080 0290        	dc.b $10, nRst, $02, nF1, $10, nRst, $02, nEb1
0001762C 0480 0899 0480 0297        	dc.b $04, nRst, $08, nC2, $04, nRst, $02, nBb1
00017634 0480 0294 0480 0292        	dc.b $04, nRst, $02, nG1, $04, nRst, $02, nF1
0001763C 0493 9290 068D 0480        	dc.b $04, nFs1, nF1, nEb1, $06, nC1, $04, nRst
00017644 1488 1C80 0289 0A80        	dc.b $14, nG0, $1C, nRst, $02, nAb0, $0A, nRst
0001764C 0289 8004 9580 0889        	dc.b $02, nAb0, nRst, $04, nAb1, nRst, $08, nAb0
00017654 0480 0889 0480 0895        	dc.b $04, nRst, $08, nAb0, $04, nRst, $08, nAb1
0001765C 0480 0289 1680 0289        	dc.b $04, nRst, $02, nAb0, $16, nRst, $02, nAb0
00017664 0480 0888 0A80 0288        	dc.b $04, nRst, $08, nG0, $0A, nRst, $02, nG0
0001766C 8004 9480 0888 0480        	dc.b nRst, $04, nG1, nRst, $08, nG0, $04, nRst
00017674 0888 0480 0894 0480        	dc.b $08, nG0, $04, nRst, $08, nG1, $04, nRst
0001767C 0288 1680 0288 0480        	dc.b $02, nG0, $16, nRst, $02, nG0, $04, nRst
00017684 088B 0A80 028B 8004        	dc.b $08, nBb0, $0A, nRst, $02, nBb0, nRst, $04
0001768C 9780 088B 0480 088B        	dc.b nBb1, nRst, $08, nBb0, $04, nRst, $08, nBb0
00017694 0480 0897 0480 028B        	dc.b $04, nRst, $08, nBb1, $04, nRst, $02, nBb0
0001769C 1080 028B 8004 8B80        	dc.b $10, nRst, $02, nBb0, nRst, $04, nBb0, nRst
000176A4 0E8D 0480 0E8D 0480        	dc.b $0E, nC1, $04, nRst, $0E, nC1, $04, nRst
000176AC 0899 0480 028D 0480        	dc.b $08, nC2, $04, nRst, $02, nC1, $04, nRst
000176B4 0899 1080 028D 0A80        	dc.b $08, nC2, $10, nRst, $02, nC1, $0A, nRst
000176BC 0299 0A80 0289 0A80        	dc.b $02, nC2, $0A, nRst, $02, nAb0, $0A, nRst
000176C4 0289 8004 9580 0889        	dc.b $02, nAb0, nRst, $04, nAb1, nRst, $08, nAb0
000176CC 0480 0889 0480 0895        	dc.b $04, nRst, $08, nAb0, $04, nRst, $08, nAb1
000176D4 0480 0289 1680 0289        	dc.b $04, nRst, $02, nAb0, $16, nRst, $02, nAb0
000176DC 0480 0888 0A80 0288        	dc.b $04, nRst, $08, nG0, $0A, nRst, $02, nG0
000176E4 8004 9480 0888 0480        	dc.b nRst, $04, nG1, nRst, $08, nG0, $04, nRst
000176EC 0888 0480 0894 0480        	dc.b $08, nG0, $04, nRst, $08, nG1, $04, nRst
000176F4 0288 1680 0288 0480        	dc.b $02, nG0, $16, nRst, $02, nG0, $04, nRst
000176FC 0886 0A80 0286 8004        	dc.b $08, nF0, $0A, nRst, $02, nF0, nRst, $04
00017704 9280 0886 0480 0886        	dc.b nF1, nRst, $08, nF0, $04, nRst, $08, nF0
0001770C 0480 0892 0480 0286        	dc.b $04, nRst, $08, nF1, $04, nRst, $02, nF0
00017714 1680 0286 8004 8980        	dc.b $16, nRst, $02, nF0, nRst, $04, nAb0, nRst
0001771C 0889 0480 0889 0480        	dc.b $08, nAb0, $04, nRst, $08, nAb0, $04, nRst
00017724 0889 0480 0289 0A80        	dc.b $08, nAb0, $04, nRst, $02, nAb0, $0A, nRst
0001772C 0288 0480 0288 0480        	dc.b $02, nG0, $04, nRst, $02, nG0, $04, nRst
00017734 0888 0480 0894 0480        	dc.b $08, nG0, $04, nRst, $08, nG1, $04, nRst
0001773C 0288 0480 0288 0480        	dc.b $02, nG0, $04, nRst, $02, nG0, $04, nRst
00017744 0286 1080 0286 8022        	dc.b $02, nF0, $10, nRst, $02, nF0, nRst, $22
0001774C 8802 8004 940A 8002        	dc.b nG0, $02, nRst, $04, nG1, $0A, nRst, $02
00017754 8816 8002 8910 8002        	dc.b nG0, $16, nRst, $02, nAb0, $10, nRst, $02
0001775C 8980 228B 0280 0497        	dc.b nAb0, nRst, $22, nBb0, $02, nRst, $04, nBb1
00017764 0A80 028B 0A80 0297        	dc.b $0A, nRst, $02, nBb0, $0A, nRst, $02, nBb1
0001776C 0A80 0286 1080 0286        	dc.b $0A, nRst, $02, nF0, $10, nRst, $02, nF0
00017774 8022 8802 8004 940A        	dc.b nRst, $22, nG0, $02, nRst, $04, nG1, $0A
0001777C 8002 8816 8002 8D10        	dc.b nRst, $02, nG0, $16, nRst, $02, nC1, $10
00017784 8002 9980 048B 1080        	dc.b nRst, $02, nC2, nRst, $04, nBb0, $10, nRst
0001778C 0297 800A 8902 8004        	dc.b $02, nBb1, nRst, $0A, nAb0, $02, nRst, $04
00017794 950A 8002 880A 8002        	dc.b nAb1, $0A, nRst, $02, nG0, $0A, nRst, $02
0001779C 940A 8002 8610 8002        	dc.b nG1, $0A, nRst, $02, nF0, $10, nRst, $02
000177A4 8680 2288 0280 0494        	dc.b nF0, nRst, $22, nG0, $02, nRst, $04, nG1
000177AC 0A80 0288 1680 0289        	dc.b $0A, nRst, $02, nG0, $16, nRst, $02, nAb0
000177B4 1080 0289 8022 8B02        	dc.b $10, nRst, $02, nAb0, nRst, $22, nBb0, $02
000177BC 8004 970A 8002 8B0A        	dc.b nRst, $04, nBb1, $0A, nRst, $02, nBb0, $0A
000177C4 8002 970A 8002 8910        	dc.b nRst, $02, nBb1, $0A, nRst, $02, nAb0, $10
000177CC 8002 8980 2286 0280        	dc.b nRst, $02, nAb0, nRst, $22, nF0, $02, nRst
000177D4 0486 0A80 0284 0A80        	dc.b $04, nF0, $0A, nRst, $02, nEb0, $0A, nRst
000177DC 0286 0A80 0888 0480        	dc.b $02, nF0, $0A, nRst, $08, nG0, $04, nRst
000177E4 0888 0480 0888 0480        	dc.b $08, nG0, $04, nRst, $08, nG0, $04, nRst
000177EC 0288 0A80 0288 0480        	dc.b $02, nG0, $0A, nRst, $02, nG0, $04, nRst
000177F4 1486 0480 0287 0480        	dc.b $14, nF0, $04, nRst, $02, nFs0, $04, nRst
000177FC 0288 0480 028B 0480        	dc.b $02, nG0, $04, nRst, $02, nBb0, $04, nRst
00017804 02                         	dc.b $02
00017805                            	sJump		HCZ2_Jump6
00017805 F6                       M 	dc.b	$f6
00017806 FD04                     M 	dc.w	hcz2_jump6-*-1
00017808                            
00017808                            HCZ2_FM3:
00017808 8007                       	dc.b nRst, $07
0001780A                            HCZ2_Jump5:
0001780A                            	sVoice		$03
0001780A E803                     M 	dc.b	$e8,$03
0001780C                            	ssDetune	$02
0001780C E102                     M 	dc.b	$e1,$02
0001780E                            	ssMod68k	$0F, $01, $06, $06
0001780E F00F 0106 06             M 	dc.b	$f0,$0f,$01,$06,$06
00017813                            	sCall		HCZ2_Call1
00017813 F8                       M 	dc.b	$f8
00017814 FA77                     M 	dc.w	hcz2_call1-*-1
00017816                            	sVoice		$0E
00017816 E80E                     M 	dc.b	$e8,$0e
00017818                            	ssDetune	$FF
00017818 E1FF                     M 	dc.b	$e1,$ff
0001781A                            	ssMod68k	$0F, $01, $06, $06
0001781A F00F 0106 06             M 	dc.b	$f0,$0f,$01,$06,$06
0001781F                            	sCall		HCZ2_Call2
0001781F F8                       M 	dc.b	$f8
00017820 FB2D                     M 	dc.w	hcz2_call2-*-1
00017822                            	sVoice		$03
00017822 E803                     M 	dc.b	$e8,$03
00017824                            	ssDetune	$02
00017824 E102                     M 	dc.b	$e1,$02
00017826                            	ssMod68k	$0F, $01, $06, $06
00017826 F00F 0106 06             M 	dc.b	$f0,$0f,$01,$06,$06
0001782B                            	sCall		HCZ2_Call3
0001782B F8                       M 	dc.b	$f8
0001782C FBE4                     M 	dc.w	hcz2_call3-*-1
0001782E                            	sJump		HCZ2_Jump5
0001782E F6                       M 	dc.b	$f6
0001782F FFDA                     M 	dc.w	hcz2_jump5-*-1
00017831                            
00017831                            HCZ2_FM4:
00017831                            HCZ2_Jump4:
00017831                            	sVoice		$06
00017831 E806                     M 	dc.b	$e8,$06
00017833                            	ssDetune	$01
00017833 E101                     M 	dc.b	$e1,$01
00017835                            	ssMod68k	$0A, $01, $03, $06
00017835 F00A 0103 06             M 	dc.b	$f0,$0a,$01,$03,$06
0001783A AA04 8008 AA04 800E        	dc.b nF3, $04, nRst, $08, nF3, $04, nRst, $0E
00017842 AA04 8002 AA80 04AA        	dc.b nF3, $04, nRst, $02, nF3, nRst, $04, nF3
0001784A 0A80 02AA 0A80 02A3        	dc.b $0A, nRst, $02, nF3, $0A, nRst, $02, nBb2
00017852 0480 02AA 0480 08AA        	dc.b $04, nRst, $02, nF3, $04, nRst, $08, nF3
0001785A 0480 08A8 0480 08A8        	dc.b $04, nRst, $08, nEb3, $04, nRst, $08, nEb3
00017862 0480 0EA8 0480 02A8        	dc.b $04, nRst, $0E, nEb3, $04, nRst, $02, nEb3
0001786A 8004 A980 08A9 1080        	dc.b nRst, $04, nE3, nRst, $08, nE3, $10, nRst
00017872 02A9 0480 08A9 0480        	dc.b $02, nE3, $04, nRst, $08, nE3, $04, nRst
0001787A 08AA 0480 08AA 0480        	dc.b $08, nF3, $04, nRst, $08, nF3, $04, nRst
00017882 0EAA 0480 02AA 8004        	dc.b $0E, nF3, $04, nRst, $02, nF3, nRst, $04
0001788A AA0A 8002 AA0A 8002        	dc.b nF3, $0A, nRst, $02, nF3, $0A, nRst, $02
00017892 A304 8002 AA04 8008        	dc.b nBb2, $04, nRst, $02, nF3, $04, nRst, $08
0001789A AA04 8008 A804 8008        	dc.b nF3, $04, nRst, $08, nEb3, $04, nRst, $08
000178A2 A804 800E A804 8002        	dc.b nEb3, $04, nRst, $0E, nEb3, $04, nRst, $02
000178AA A880 04A9 8008 A910        	dc.b nEb3, nRst, $04, nE3, nRst, $08, nE3, $10
000178B2 8002 A904 8008 A904        	dc.b nRst, $02, nE3, $04, nRst, $08, nE3, $04
000178BA 8008 AA04 8008 AA04        	dc.b nRst, $08, nF3, $04, nRst, $08, nF3, $04
000178C2 800E AA04 8002 AA80        	dc.b nRst, $0E, nF3, $04, nRst, $02, nF3, nRst
000178CA 04AA 0A80 02AA 0A80        	dc.b $04, nF3, $0A, nRst, $02, nF3, $0A, nRst
000178D2 02A3 0480 02AA 0480        	dc.b $02, nBb2, $04, nRst, $02, nF3, $04, nRst
000178DA 08AA 0480 08A8 0480        	dc.b $08, nF3, $04, nRst, $08, nEb3, $04, nRst
000178E2 08A8 0480 0EA8 0480        	dc.b $08, nEb3, $04, nRst, $0E, nEb3, $04, nRst
000178EA 02A8 8004 A980 08A9        	dc.b $02, nEb3, nRst, $04, nE3, nRst, $08, nE3
000178F2 1080 02A9 0480 08A9        	dc.b $10, nRst, $02, nE3, $04, nRst, $08, nE3
000178FA 0480 08AA 0480 08AA        	dc.b $04, nRst, $08, nF3, $04, nRst, $08, nF3
00017902 0480 0EAA 0480 02AA        	dc.b $04, nRst, $0E, nF3, $04, nRst, $02, nF3
0001790A 8004 AA0A 8002 AA0A        	dc.b nRst, $04, nF3, $0A, nRst, $02, nF3, $0A
00017912 8002 A304 8002 AA04        	dc.b nRst, $02, nBb2, $04, nRst, $02, nF3, $04
0001791A 8008 AA04 8008 A804        	dc.b nRst, $08, nF3, $04, nRst, $08, nEb3, $04
00017922 8008 A804 800E A804        	dc.b nRst, $08, nEb3, $04, nRst, $0E, nEb3, $04
0001792A 8002 A880 04A9 8008        	dc.b nRst, $02, nEb3, nRst, $04, nE3, nRst, $08
00017932 A910 8002 A904 8008        	dc.b nE3, $10, nRst, $02, nE3, $04, nRst, $08
0001793A A904 8008 AA04 8008        	dc.b nE3, $04, nRst, $08, nF3, $04, nRst, $08
00017942 AA04 800E AA04 8002        	dc.b nF3, $04, nRst, $0E, nF3, $04, nRst, $02
0001794A AA80 04AA 0A80 02AA        	dc.b nF3, nRst, $04, nF3, $0A, nRst, $02, nF3
00017952 0A80 02A3 0480 02AA        	dc.b $0A, nRst, $02, nBb2, $04, nRst, $02, nF3
0001795A 0480 08AA 0480 08A8        	dc.b $04, nRst, $08, nF3, $04, nRst, $08, nEb3
00017962 0480 08A8 0480 0EA8        	dc.b $04, nRst, $08, nEb3, $04, nRst, $0E, nEb3
0001796A 0480 02A8 8004 A980        	dc.b $04, nRst, $02, nEb3, nRst, $04, nE3, nRst
00017972 08A9 1080 02A9 0480        	dc.b $08, nE3, $10, nRst, $02, nE3, $04, nRst
0001797A 08A9 0480 08AA 0480        	dc.b $08, nE3, $04, nRst, $08, nF3, $04, nRst
00017982 08AA 0480 0EAA 0480        	dc.b $08, nF3, $04, nRst, $0E, nF3, $04, nRst
0001798A 02AA 8004 AA0A 8002        	dc.b $02, nF3, nRst, $04, nF3, $0A, nRst, $02
00017992 AA0A 8002 A304 8002        	dc.b nF3, $0A, nRst, $02, nBb2, $04, nRst, $02
0001799A AA04 8008 AA04 8002        	dc.b nF3, $04, nRst, $08, nF3, $04, nRst, $02
000179A2 A804 8008 B106 AFAC        	dc.b nEb3, $04, nRst, $08, nC4, $06, nBb3, nG3
000179AA AA04 ABAA A806 A580        	dc.b nF3, $04, nFs3, nF3, nEb3, $06, nC3, nRst
000179B2 12AA 1EA8 0A80 02A7        	dc.b $12, nF3, $1E, nEb3, $0A, nRst, $02, nD3
000179BA 0480 02A8 0A80 02A7        	dc.b $04, nRst, $02, nEb3, $0A, nRst, $02, nD3
000179C2 0A80 02A8 0480 0EB1        	dc.b $0A, nRst, $02, nEb3, $04, nRst, $0E, nC4
000179CA 0480 02B1 0480 08B3        	dc.b $04, nRst, $02, nC4, $04, nRst, $08, nD4
000179D2 0280 04B4 0A80 02A7        	dc.b $02, nRst, $04, nEb4, $0A, nRst, $02, nD3
000179DA 0A80 02AA 0480 02A7        	dc.b $0A, nRst, $02, nF3, $04, nRst, $02, nD3
000179E2 0A80 02AA 0A80 02A7        	dc.b $0A, nRst, $02, nF3, $0A, nRst, $02, nD3
000179EA 0480 0EAF 0480 02AF        	dc.b $04, nRst, $0E, nBb3, $04, nRst, $02, nBb3
000179F2 0480 08B1 0280 04B3        	dc.b $04, nRst, $08, nC4, $02, nRst, $04, nD4
000179FA 0A80 02A7 0A80 02A5        	dc.b $0A, nRst, $02, nD3, $0A, nRst, $02, nC3
00017A02 0480 02A7 0A80 02A5        	dc.b $04, nRst, $02, nD3, $0A, nRst, $02, nC3
00017A0A 0A80 02A7 0480 0EB3        	dc.b $0A, nRst, $02, nD3, $04, nRst, $0E, nD4
00017A12 0480 02B3 0480 08B4        	dc.b $04, nRst, $02, nD4, $04, nRst, $08, nEb4
00017A1A 0280 04B6 0A80 08AF        	dc.b $02, nRst, $04, nF4, $0A, nRst, $08, nBb3
00017A22 0480 0EAF 0A80 02AF        	dc.b $04, nRst, $0E, nBb3, $0A, nRst, $02, nBb3
00017A2A 0480 02AF 0480 08AF        	dc.b $04, nRst, $02, nBb3, $04, nRst, $08, nBb3
00017A32 1080 02A8 0A80 02AA        	dc.b $10, nRst, $02, nEb3, $0A, nRst, $02, nF3
00017A3A 0A80 02A8 0A80 02A7        	dc.b $0A, nRst, $02, nEb3, $0A, nRst, $02, nD3
00017A42 0480 02A8 0A80 02A7        	dc.b $04, nRst, $02, nEb3, $0A, nRst, $02, nD3
00017A4A 0A80 02A8 0480 0EB1        	dc.b $0A, nRst, $02, nEb3, $04, nRst, $0E, nC4
00017A52 0480 02B1 0480 08B3        	dc.b $04, nRst, $02, nC4, $04, nRst, $08, nD4
00017A5A 0280 04B4 0A80 02A7        	dc.b $02, nRst, $04, nEb4, $0A, nRst, $02, nD3
00017A62 0A80 02AA 0480 02A7        	dc.b $0A, nRst, $02, nF3, $04, nRst, $02, nD3
00017A6A 0A80 02AA 0A80 02A3        	dc.b $0A, nRst, $02, nF3, $0A, nRst, $02, nBb2
00017A72 0480 0EAF 0480 02AF        	dc.b $04, nRst, $0E, nBb3, $04, nRst, $02, nBb3
00017A7A 0480 08B4 0280 04B8        	dc.b $04, nRst, $08, nEb4, $02, nRst, $04, nG4
00017A82 0A80 02A8 0A80 02A3        	dc.b $0A, nRst, $02, nEb3, $0A, nRst, $02, nBb2
00017A8A 0480 02A8 0A80 02A3        	dc.b $04, nRst, $02, nEb3, $0A, nRst, $02, nBb2
00017A92 0A80 02A5 0480 0EAE        	dc.b $0A, nRst, $02, nC3, $04, nRst, $0E, nA3
00017A9A 0480 02AE 0480 08B1        	dc.b $04, nRst, $02, nA3, $04, nRst, $08, nC4
00017AA2 0280 04B4 0A80 08B4        	dc.b $02, nRst, $04, nEb4, $0A, nRst, $08, nEb4
00017AAA 0480 08B4 0480 08B4        	dc.b $04, nRst, $08, nEb4, $04, nRst, $08, nEb4
00017AB2 0480 02B4 0A80 02B0        	dc.b $04, nRst, $02, nEb4, $0A, nRst, $02, nB3
00017ABA 0480 02B0 0480 08B0        	dc.b $04, nRst, $02, nB3, $04, nRst, $08, nB3
00017AC2 0480 0EA8 0480 02AA        	dc.b $04, nRst, $0E, nEb3, $04, nRst, $02, nF3
00017ACA 0480 08AC 0480 02AA        	dc.b $04, nRst, $08, nG3, $04, nRst, $02, nF3
00017AD2 0480 02A8 0480 08A7        	dc.b $04, nRst, $02, nEb3, $04, nRst, $08, nD3
00017ADA 0480 02A8 0480 02A5        	dc.b $04, nRst, $02, nEb3, $04, nRst, $02, nC3
00017AE2 0480 08AF 1080 02AC        	dc.b $04, nRst, $08, nBb3, $10, nRst, $02, nG3
00017AEA 0480 08AA 0480 0EB3        	dc.b $04, nRst, $08, nF3, $04, nRst, $0E, nD4
00017AF2 0480 02AF 0480 02AC        	dc.b $04, nRst, $02, nBb3, $04, nRst, $02, nG3
00017AFA 0480 02A8 1080 02A7        	dc.b $04, nRst, $02, nEb3, $10, nRst, $02, nD3
00017B02 3480 08AC 0480 02AA        	dc.b $34, nRst, $08, nG3, $04, nRst, $02, nF3
00017B0A 0480 02A8 0480 08A7        	dc.b $04, nRst, $02, nEb3, $04, nRst, $08, nD3
00017B12 0480 02A8 0480 02A5        	dc.b $04, nRst, $02, nEb3, $04, nRst, $02, nC3
00017B1A 0480 08B0 1080 02AC        	dc.b $04, nRst, $08, nB3, $10, nRst, $02, nG3
00017B22 0480 08AA 0480 08AC        	dc.b $04, nRst, $08, nF3, $04, nRst, $08, nG3
00017B2A 1680 02AF 1080 02AF        	dc.b $16, nRst, $02, nBb3, $10, nRst, $02, nBb3
00017B32 0480 08AD 1080 02AC        	dc.b $04, nRst, $08, nAb3, $10, nRst, $02, nG3
00017B3A 1680 08AC 0480 02AA        	dc.b $16, nRst, $08, nG3, $04, nRst, $02, nF3
00017B42 0480 02A8 0480 08A7        	dc.b $04, nRst, $02, nEb3, $04, nRst, $08, nD3
00017B4A 0480 02A8 0480 02A5        	dc.b $04, nRst, $02, nEb3, $04, nRst, $02, nC3
00017B52 0480 08AF 1080 02AC        	dc.b $04, nRst, $08, nBb3, $10, nRst, $02, nG3
00017B5A 0480 08AA 0480 0EB3        	dc.b $04, nRst, $08, nF3, $04, nRst, $0E, nD4
00017B62 0480 02AF 0480 02AC        	dc.b $04, nRst, $02, nBb3, $04, nRst, $02, nG3
00017B6A 0480 02A8 1080 02A7        	dc.b $04, nRst, $02, nEb3, $10, nRst, $02, nD3
00017B72 3480 08AC 0480 02AA        	dc.b $34, nRst, $08, nG3, $04, nRst, $02, nF3
00017B7A 0480 02A8 0480 08A7        	dc.b $04, nRst, $02, nEb3, $04, nRst, $08, nD3
00017B82 0480 02A8 0480 02A5        	dc.b $04, nRst, $02, nEb3, $04, nRst, $02, nC3
00017B8A 0480 089C 0480 02A1        	dc.b $04, nRst, $08, nEb2, $04, nRst, $02, nAb2
00017B92 0480 029C 0480 02A8        	dc.b $04, nRst, $02, nEb2, $04, nRst, $02, nEb3
00017B9A 0A80 02AD 0A80 08AC        	dc.b $0A, nRst, $02, nAb3, $0A, nRst, $08, nG3
00017BA2 0480 08AC 0480 08AC        	dc.b $04, nRst, $08, nG3, $04, nRst, $08, nG3
00017BAA 0480 02AC 0A80 02AC        	dc.b $04, nRst, $02, nG3, $0A, nRst, $02, nG3
00017BB2 0480 2C                    	dc.b $04, nRst, $2C
00017BB5                            	sJump		HCZ2_Jump4
00017BB5 F6                       M 	dc.b	$f6
00017BB6 FC7A                     M 	dc.w	hcz2_jump4-*-1
00017BB8                            
00017BB8                            HCZ2_FM5:
00017BB8                            HCZ2_Jump3:
00017BB8                            	sVoice		$06
00017BB8 E806                     M 	dc.b	$e8,$06
00017BBA                            	ssDetune	$FF
00017BBA E1FF                     M 	dc.b	$e1,$ff
00017BBC                            	ssMod68k	$0A, $01, $03, $06
00017BBC F00A 0103 06             M 	dc.b	$f0,$0a,$01,$03,$06
00017BC1 A304 8008 A304 800E        	dc.b nBb2, $04, nRst, $08, nBb2, $04, nRst, $0E
00017BC9 A304 8002 A380 04A3        	dc.b nBb2, $04, nRst, $02, nBb2, nRst, $04, nBb2
00017BD1 0A80 02A3 0A80 08A3        	dc.b $0A, nRst, $02, nBb2, $0A, nRst, $08, nBb2
00017BD9 0480 08A3 0480 08A2        	dc.b $04, nRst, $08, nBb2, $04, nRst, $08, nA2
00017BE1 0480 08A2 0480 0EA2        	dc.b $04, nRst, $08, nA2, $04, nRst, $0E, nA2
00017BE9 0480 02A2 8004 A380        	dc.b $04, nRst, $02, nA2, nRst, $04, nBb2, nRst
00017BF1 08A3 1080 02A3 0480        	dc.b $08, nBb2, $10, nRst, $02, nBb2, $04, nRst
00017BF9 08A3 0480 08A3 0480        	dc.b $08, nBb2, $04, nRst, $08, nBb2, $04, nRst
00017C01 08A3 0480 0EA3 0480        	dc.b $08, nBb2, $04, nRst, $0E, nBb2, $04, nRst
00017C09 02A3 8004 A30A 8002        	dc.b $02, nBb2, nRst, $04, nBb2, $0A, nRst, $02
00017C11 A30A 8008 A304 8008        	dc.b nBb2, $0A, nRst, $08, nBb2, $04, nRst, $08
00017C19 A304 8008 A204 8008        	dc.b nBb2, $04, nRst, $08, nA2, $04, nRst, $08
00017C21 A204 800E A204 8002        	dc.b nA2, $04, nRst, $0E, nA2, $04, nRst, $02
00017C29 A280 04A3 8008 A310        	dc.b nA2, nRst, $04, nBb2, nRst, $08, nBb2, $10
00017C31 8002 A304 8008 A304        	dc.b nRst, $02, nBb2, $04, nRst, $08, nBb2, $04
00017C39 8008 A304 8008 A304        	dc.b nRst, $08, nBb2, $04, nRst, $08, nBb2, $04
00017C41 800E A304 8002 A380        	dc.b nRst, $0E, nBb2, $04, nRst, $02, nBb2, nRst
00017C49 04A3 0A80 02A3 0A80        	dc.b $04, nBb2, $0A, nRst, $02, nBb2, $0A, nRst
00017C51 08A3 0480 08A3 0480        	dc.b $08, nBb2, $04, nRst, $08, nBb2, $04, nRst
00017C59 08A2 0480 08A2 0480        	dc.b $08, nA2, $04, nRst, $08, nA2, $04, nRst
00017C61 0EA2 0480 02A2 8004        	dc.b $0E, nA2, $04, nRst, $02, nA2, nRst, $04
00017C69 A380 08A3 1080 02A3        	dc.b nBb2, nRst, $08, nBb2, $10, nRst, $02, nBb2
00017C71 0480 08A3 0480 08A3        	dc.b $04, nRst, $08, nBb2, $04, nRst, $08, nBb2
00017C79 0480 08A3 0480 0EA3        	dc.b $04, nRst, $08, nBb2, $04, nRst, $0E, nBb2
00017C81 0480 02A3 8004 A30A        	dc.b $04, nRst, $02, nBb2, nRst, $04, nBb2, $0A
00017C89 8002 A30A 8008 A304        	dc.b nRst, $02, nBb2, $0A, nRst, $08, nBb2, $04
00017C91 8008 A304 8008 A204        	dc.b nRst, $08, nBb2, $04, nRst, $08, nA2, $04
00017C99 8008 A204 800E A204        	dc.b nRst, $08, nA2, $04, nRst, $0E, nA2, $04
00017CA1 8002 A280 04A3 8008        	dc.b nRst, $02, nA2, nRst, $04, nBb2, nRst, $08
00017CA9 A310 8002 A304 8008        	dc.b nBb2, $10, nRst, $02, nBb2, $04, nRst, $08
00017CB1 A304 8008 A304 8008        	dc.b nBb2, $04, nRst, $08, nBb2, $04, nRst, $08
00017CB9 A304 800E A304 8002        	dc.b nBb2, $04, nRst, $0E, nBb2, $04, nRst, $02
00017CC1 A380 04A3 0A80 02A3        	dc.b nBb2, nRst, $04, nBb2, $0A, nRst, $02, nBb2
00017CC9 0A80 08A3 0480 08A3        	dc.b $0A, nRst, $08, nBb2, $04, nRst, $08, nBb2
00017CD1 0480 08A2 0480 08A2        	dc.b $04, nRst, $08, nA2, $04, nRst, $08, nA2
00017CD9 0480 0EA2 0480 02A2        	dc.b $04, nRst, $0E, nA2, $04, nRst, $02, nA2
00017CE1 8004 A380 08A3 1080        	dc.b nRst, $04, nBb2, nRst, $08, nBb2, $10, nRst
00017CE9 02A3 0480 08A3 0480        	dc.b $02, nBb2, $04, nRst, $08, nBb2, $04, nRst
00017CF1 08A3 0480 08A3 0480        	dc.b $08, nBb2, $04, nRst, $08, nBb2, $04, nRst
00017CF9 0EA3 0480 02A3 8004        	dc.b $0E, nBb2, $04, nRst, $02, nBb2, nRst, $04
00017D01 A30A 8002 A30A 8008        	dc.b nBb2, $0A, nRst, $02, nBb2, $0A, nRst, $08
00017D09 A304 8008 A304 8002        	dc.b nBb2, $04, nRst, $08, nBb2, $04, nRst, $02
00017D11 A304 8044 A41E A50A        	dc.b nBb2, $04, nRst, $44, nB2, $1E, nC3, $0A
00017D19 8002 A304 8002 A50A        	dc.b nRst, $02, nBb2, $04, nRst, $02, nC3, $0A
00017D21 8002 A30A 8002 A504        	dc.b nRst, $02, nBb2, $0A, nRst, $02, nC3, $04
00017D29 800E AD04 8002 AD04        	dc.b nRst, $0E, nAb3, $04, nRst, $02, nAb3, $04
00017D31 8008 AF02 8004 B10A        	dc.b nRst, $08, nBb3, $02, nRst, $04, nC4, $0A
00017D39 8002 A30A 8002 A704        	dc.b nRst, $02, nBb2, $0A, nRst, $02, nD3, $04
00017D41 8002 A30A 8002 A70A        	dc.b nRst, $02, nBb2, $0A, nRst, $02, nD3, $0A
00017D49 8002 A304 800E AC04        	dc.b nRst, $02, nBb2, $04, nRst, $0E, nG3, $04
00017D51 8002 AC04 8008 AD02        	dc.b nRst, $02, nG3, $04, nRst, $08, nAb3, $02
00017D59 8004 AF0A 8002 A30A        	dc.b nRst, $04, nBb3, $0A, nRst, $02, nBb2, $0A
00017D61 8002 A104 8002 A30A        	dc.b nRst, $02, nAb2, $04, nRst, $02, nBb2, $0A
00017D69 8002 A10A 8002 A304        	dc.b nRst, $02, nAb2, $0A, nRst, $02, nBb2, $04
00017D71 800E AF04 8002 AF04        	dc.b nRst, $0E, nBb3, $04, nRst, $02, nBb3, $04
00017D79 8008 B102 8004 B30A        	dc.b nRst, $08, nC4, $02, nRst, $04, nD4, $0A
00017D81 8008 AC04 800E AA0A        	dc.b nRst, $08, nG3, $04, nRst, $0E, nF3, $0A
00017D89 8002 AA04 8002 AC04        	dc.b nRst, $02, nF3, $04, nRst, $02, nG3, $04
00017D91 8008 A710 8002 A50A        	dc.b nRst, $08, nD3, $10, nRst, $02, nC3, $0A
00017D99 8002 A70A 8002 A50A        	dc.b nRst, $02, nD3, $0A, nRst, $02, nC3, $0A
00017DA1 8002 A304 8002 A50A        	dc.b nRst, $02, nBb2, $04, nRst, $02, nC3, $0A
00017DA9 8002 A30A 8002 A504        	dc.b nRst, $02, nBb2, $0A, nRst, $02, nC3, $04
00017DB1 800E AD04 8002 AD04        	dc.b nRst, $0E, nAb3, $04, nRst, $02, nAb3, $04
00017DB9 8008 AF02 8004 B10A        	dc.b nRst, $08, nBb3, $02, nRst, $04, nC4, $0A
00017DC1 8002 A30A 8002 A704        	dc.b nRst, $02, nBb2, $0A, nRst, $02, nD3, $04
00017DC9 8002 A30A 8002 A70A        	dc.b nRst, $02, nBb2, $0A, nRst, $02, nD3, $0A
00017DD1 8002 A004 800E AC04        	dc.b nRst, $02, nG2, $04, nRst, $0E, nG3, $04
00017DD9 8002 AC04 8008 AF02        	dc.b nRst, $02, nG3, $04, nRst, $08, nBb3, $02
00017DE1 8004 B40A 8002 A30A        	dc.b nRst, $04, nEb4, $0A, nRst, $02, nBb2, $0A
00017DE9 8002 A004 8002 A30A        	dc.b nRst, $02, nG2, $04, nRst, $02, nBb2, $0A
00017DF1 8002 A00A 8002 A204        	dc.b nRst, $02, nG2, $0A, nRst, $02, nA2, $04
00017DF9 800E AA04 8002 AA04        	dc.b nRst, $0E, nF3, $04, nRst, $02, nF3, $04
00017E01 8008 AE02 8004 B10A        	dc.b nRst, $08, nA3, $02, nRst, $04, nC4, $0A
00017E09 8008 AC04 8008 AC04        	dc.b nRst, $08, nG3, $04, nRst, $08, nG3, $04
00017E11 8008 AC04 8002 AC0A        	dc.b nRst, $08, nG3, $04, nRst, $02, nG3, $0A
00017E19 8002 AA04 8002 AA04        	dc.b nRst, $02, nF3, $04, nRst, $02, nF3, $04
00017E21 8008 AA04 800E A504        	dc.b nRst, $08, nF3, $04, nRst, $0E, nC3, $04
00017E29 8002 A704 8008 A804        	dc.b nRst, $02, nD3, $04, nRst, $08, nEb3, $04
00017E31 8002 A704 8002 A504        	dc.b nRst, $02, nD3, $04, nRst, $02, nC3, $04
00017E39 8008 A304 8002 A504        	dc.b nRst, $08, nBb2, $04, nRst, $02, nC3, $04
00017E41 8002 A104 8008 AA10        	dc.b nRst, $02, nAb2, $04, nRst, $08, nF3, $10
00017E49 8002 A804 8008 A704        	dc.b nRst, $02, nEb3, $04, nRst, $08, nD3, $04
00017E51 800E AF04 8002 AC04        	dc.b nRst, $0E, nBb3, $04, nRst, $02, nG3, $04
00017E59 8002 A804 8002 A510        	dc.b nRst, $02, nEb3, $04, nRst, $02, nC3, $10
00017E61 8002 9E34 8008 A804        	dc.b nRst, $02, nF2, $34, nRst, $08, nEb3, $04
00017E69 8002 A704 8002 A504        	dc.b nRst, $02, nD3, $04, nRst, $02, nC3, $04
00017E71 8008 A304 8002 A504        	dc.b nRst, $08, nBb2, $04, nRst, $02, nC3, $04
00017E79 8002 A104 8008 AA10        	dc.b nRst, $02, nAb2, $04, nRst, $08, nF3, $10
00017E81 8002 A804 8008 A704        	dc.b nRst, $02, nEb3, $04, nRst, $08, nD3, $04
00017E89 8008 A816 8002 AA10        	dc.b nRst, $08, nEb3, $16, nRst, $02, nF3, $10
00017E91 8002 AA04 8008 A810        	dc.b nRst, $02, nF3, $04, nRst, $08, nEb3, $10
00017E99 8002 A716 8008 A804        	dc.b nRst, $02, nD3, $16, nRst, $08, nEb3, $04
00017EA1 8002 A704 8002 A504        	dc.b nRst, $02, nD3, $04, nRst, $02, nC3, $04
00017EA9 8008 A304 8002 A504        	dc.b nRst, $08, nBb2, $04, nRst, $02, nC3, $04
00017EB1 8002 A104 8008 AA10        	dc.b nRst, $02, nAb2, $04, nRst, $08, nF3, $10
00017EB9 8002 A804 8008 A704        	dc.b nRst, $02, nEb3, $04, nRst, $08, nD3, $04
00017EC1 800E AF04 8002 AC04        	dc.b nRst, $0E, nBb3, $04, nRst, $02, nG3, $04
00017EC9 8002 A804 8002 A510        	dc.b nRst, $02, nEb3, $04, nRst, $02, nC3, $10
00017ED1 8002 9E34 8008 A804        	dc.b nRst, $02, nF2, $34, nRst, $08, nEb3, $04
00017ED9 8002 A704 8002 A504        	dc.b nRst, $02, nD3, $04, nRst, $02, nC3, $04
00017EE1 8008 A304 8002 A504        	dc.b nRst, $08, nBb2, $04, nRst, $02, nC3, $04
00017EE9 8002 A104 801A A50A        	dc.b nRst, $02, nAb2, $04, nRst, $1A, nC3, $0A
00017EF1 8002 A80A 8008 A704        	dc.b nRst, $02, nEb3, $0A, nRst, $08, nD3, $04
00017EF9 8008 A704 8008 A704        	dc.b nRst, $08, nD3, $04, nRst, $08, nD3, $04
00017F01 8002 A70A 8002 A704        	dc.b nRst, $02, nD3, $0A, nRst, $02, nD3, $04
00017F09 802C                       	dc.b nRst, $2C
00017F0B                            	sJump		HCZ2_Jump3
00017F0B F6                       M 	dc.b	$f6
00017F0C FCAB                     M 	dc.w	hcz2_jump3-*-1
00017F0E                            
00017F0E                            HCZ2_PSG1:
00017F0E                            	sVoice		vS3K_0A
00017F0E E80A                     M 	dc.b	$e8,vs3k_0a
00017F10                            
00017F10                            HCZ2_Jump2:
00017F10 B104 8002 AC04 8002        	dc.b nC4, $04, nRst, $02, nG3, $04, nRst, $02
00017F18 AF04 8002 AC04 8008        	dc.b nBb3, $04, nRst, $02, nG3, $04, nRst, $08
00017F20 AC04 8002 AF04 8002        	dc.b nG3, $04, nRst, $02, nBb3, $04, nRst, $02
00017F28 AC04 8002 B104 8002        	dc.b nG3, $04, nRst, $02, nC4, $04, nRst, $02
00017F30 AC04 8002 AF04 8002        	dc.b nG3, $04, nRst, $02, nBb3, $04, nRst, $02
00017F38 AC04 8060 801A B104        	dc.b nG3, $04, nRst, $60, nRst, $1A, nC4, $04
00017F40 8002 AC04 8002 AF04        	dc.b nRst, $02, nG3, $04, nRst, $02, nBb3, $04
00017F48 8002 AC04 8008 AC04        	dc.b nRst, $02, nG3, $04, nRst, $08, nG3, $04
00017F50 8002 AF04 8002 AC04        	dc.b nRst, $02, nBb3, $04, nRst, $02, nG3, $04
00017F58 8002 B104 8002 AC04        	dc.b nRst, $02, nC4, $04, nRst, $02, nG3, $04
00017F60 8002 AF04 8002 AC04        	dc.b nRst, $02, nBb3, $04, nRst, $02, nG3, $04
00017F68 8060 8080 38B6 06B7        	dc.b nRst, $60, nRst, nRst, $38, nF4, $06, nFs4
00017F70 B8C7 80BD C302 C412        	dc.b nG4, nBb5, nRst, nC5, nFs5, $02, nG5, $12
00017F78 8070 B104 8002 BA04        	dc.b nRst, $70, nC4, $04, nRst, $02, nA4, $04
00017F80 8002 B804 8008 B604        	dc.b nRst, $02, nG4, $04, nRst, $08, nF4, $04
00017F88 8002 B7B8 04B5 807F        	dc.b nRst, $02, nFs4, nG4, $04, nE4, nRst, $7F
00017F90 8031 B606 B7B8 C780        	dc.b nRst, $31, nF4, $06, nFs4, nG4, nBb5, nRst
00017F98 BDC3 02C4 1280 70BD        	dc.b nC5, nFs5, $02, nG5, $12, nRst, $70, nC5
00017FA0 06BB B8B6 04B7 B6B4        	dc.b $06, nBb4, nG4, nF4, $04, nFs4, nF4, nEb4
00017FA8 06B1 8012 AF1E 803C        	dc.b $06, nC4, nRst, $12, nBb3, $1E, nRst, $3C
00017FB0 B104 8002 B104 8008        	dc.b nC4, $04, nRst, $02, nC4, $04, nRst, $08
00017FB8 B302 8004 B40A 803E        	dc.b nD4, $02, nRst, $04, nEb4, $0A, nRst, $3E
00017FC0 AF04 8002 AF04 8008        	dc.b nBb3, $04, nRst, $02, nBb3, $04, nRst, $08
00017FC8 B102 8004 B30A 803E        	dc.b nC4, $02, nRst, $04, nD4, $0A, nRst, $3E
00017FD0 B304 8002 B304 8008        	dc.b nD4, $04, nRst, $02, nD4, $04, nRst, $08
00017FD8 B402 8004 B60A 8008        	dc.b nEb4, $02, nRst, $04, nF4, $0A, nRst, $08
00017FE0 C004 800E BF0A 8002        	dc.b nEb5, $04, nRst, $0E, nD5, $0A, nRst, $02
00017FE8 BF04 8002 C004 8008        	dc.b nD5, $04, nRst, $02, nEb5, $04, nRst, $08
00017FF0 BF10 8002 C00A 8002        	dc.b nD5, $10, nRst, $02, nEb5, $0A, nRst, $02
00017FF8 C20A 803E B104 8002        	dc.b nF5, $0A, nRst, $3E, nC4, $04, nRst, $02
00018000 B104 8008 B302 8004        	dc.b nC4, $04, nRst, $08, nD4, $02, nRst, $04
00018008 B40A 803E AF04 8002        	dc.b nEb4, $0A, nRst, $3E, nBb3, $04, nRst, $02
00018010 AF04 8008 B402 8004        	dc.b nBb3, $04, nRst, $08, nEb4, $02, nRst, $04
00018018 B80A 803E AE04 8002        	dc.b nG4, $0A, nRst, $3E, nA3, $04, nRst, $02
00018020 AE04 8008 B102 8004        	dc.b nA3, $04, nRst, $08, nC4, $02, nRst, $04
00018028 B40A 8008 B404 8002        	dc.b nEb4, $0A, nRst, $08, nEb4, $04, nRst, $02
00018030 A804 8002 B404 8002        	dc.b nEb3, $04, nRst, $02, nEb4, $04, nRst, $02
00018038 A804 8002 B404 8002        	dc.b nEb3, $04, nRst, $02, nEb4, $04, nRst, $02
00018040 B404 8002 A804 8002        	dc.b nEb4, $04, nRst, $02, nEb3, $04, nRst, $02
00018048 B304 8002 B304 8008        	dc.b nD4, $04, nRst, $02, nD4, $04, nRst, $08
00018050 B304 8050 AF04 8002        	dc.b nD4, $04, nRst, $50, nBb3, $04, nRst, $02
00018058 AC04 8002 AF04 8002        	dc.b nG3, $04, nRst, $02, nBb3, $04, nRst, $02
00018060 AF04 8002 AF04 8002        	dc.b nBb3, $04, nRst, $02, nBb3, $04, nRst, $02
00018068 AC04 8002 AF04 8038        	dc.b nG3, $04, nRst, $02, nBb3, $04, nRst, $38
00018070 B304 8002 AF04 8002        	dc.b nD4, $04, nRst, $02, nBb3, $04, nRst, $02
00018078 B304 8002 B604 8002        	dc.b nD4, $04, nRst, $02, nF4, $04, nRst, $02
00018080 B304 8002 AF04 8002        	dc.b nD4, $04, nRst, $02, nBb3, $04, nRst, $02
00018088 AC04 8038 B004 8002        	dc.b nG3, $04, nRst, $38, nB3, $04, nRst, $02
00018090 AC04 8002 B004 8002        	dc.b nG3, $04, nRst, $02, nB3, $04, nRst, $02
00018098 AA04 8002 AC04 8002        	dc.b nF3, $04, nRst, $02, nG3, $04, nRst, $02
000180A0 B004 8002 B304 8002        	dc.b nB3, $04, nRst, $02, nD4, $04, nRst, $02
000180A8 A504 8002 A804 8002        	dc.b nC3, $04, nRst, $02, nEb3, $04, nRst, $02
000180B0 AC04 8002 A804 8002        	dc.b nG3, $04, nRst, $02, nEb3, $04, nRst, $02
000180B8 A704 8002 AA04 8002        	dc.b nD3, $04, nRst, $02, nF3, $04, nRst, $02
000180C0 AF04 8002 A704 8002        	dc.b nBb3, $04, nRst, $02, nD3, $04, nRst, $02
000180C8 A804 8002 AD04 8002        	dc.b nEb3, $04, nRst, $02, nAb3, $04, nRst, $02
000180D0 B104 8002 A804 8002        	dc.b nC4, $04, nRst, $02, nEb3, $04, nRst, $02
000180D8 AA04 8002 AC04 8002        	dc.b nF3, $04, nRst, $02, nG3, $04, nRst, $02
000180E0 B304 8002 AC04 8038        	dc.b nD4, $04, nRst, $02, nG3, $04, nRst, $38
000180E8 AF04 8002 AC04 8002        	dc.b nBb3, $04, nRst, $02, nG3, $04, nRst, $02
000180F0 AF04 8002 AF04 8002        	dc.b nBb3, $04, nRst, $02, nBb3, $04, nRst, $02
000180F8 AF04 8002 AC04 8002        	dc.b nBb3, $04, nRst, $02, nG3, $04, nRst, $02
00018100 AF04 8038 B304 8002        	dc.b nBb3, $04, nRst, $38, nD4, $04, nRst, $02
00018108 AF04 8002 B304 8002        	dc.b nBb3, $04, nRst, $02, nD4, $04, nRst, $02
00018110 B604 8002 B304 8002        	dc.b nF4, $04, nRst, $02, nD4, $04, nRst, $02
00018118 AF04 8002 AC04 8038        	dc.b nBb3, $04, nRst, $02, nG3, $04, nRst, $38
00018120 A804 8002 AD04 8002        	dc.b nEb3, $04, nRst, $02, nAb3, $04, nRst, $02
00018128 A804 8002 A804 8002        	dc.b nEb3, $04, nRst, $02, nEb3, $04, nRst, $02
00018130 B104 8002 AD04 8002        	dc.b nC4, $04, nRst, $02, nAb3, $04, nRst, $02
00018138 B404 8008 C004 8008        	dc.b nEb4, $04, nRst, $08, nEb5, $04, nRst, $08
00018140 C004 8008 C004 8002        	dc.b nEb5, $04, nRst, $08, nEb5, $04, nRst, $02
00018148 C00A 8002 BF04 802C        	dc.b nEb5, $0A, nRst, $02, nD5, $04, nRst, $2C
00018150                            	sJump		HCZ2_Jump2
00018150 F6                       M 	dc.b	$f6
00018151 FDBE                     M 	dc.w	hcz2_jump2-*-1
00018153                            
00018153                            HCZ2_PSG2:
00018153                            	sVoice		vS3K_08
00018153 E809                     M 	dc.b	$e8,vs3k_08
00018155 8001                       	dc.b nRst, $01
00018157                            	ssDetune	$01
00018157 E101                     M 	dc.b	$e1,$01
00018159                            	sJump		HCZ2_Jump2
00018159 F6                       M 	dc.b	$f6
0001815A FDB5                     M 	dc.w	hcz2_jump2-*-1
0001815C                            
0001815C                            
0001815C                            HCZ2_PSG3:
0001815C                            	sVoice		vS3K_02
0001815C E807                     M 	dc.b	$e8,vs3k_02
0001815E                            	sNoisePSG	$E7
0001815E F3E7                     M 	dc.b	$f3,$e7
00018160                            
00018160                            HCZ2_Jump1:
00018160 8018 8018 8018 8018        	dc.b nRst, $18, nRst, $18, nRst, $18, nRst, $18
00018168 8018                       	dc.b nRst, $18
0001816A                            	sVoice		vS3K_01
0001816A E808                     M 	dc.b	$e8,vs3k_01
0001816C C604 C604 C604             	dc.b nA5, $04, nA5, $04, nA5, $04
00018172                            	sVoice		vS3K_08
00018172 E809                     M 	dc.b	$e8,vs3k_08
00018174 C606                       	dc.b nA5, $06
00018176                            	sVoice		vS3K_01
00018176 E808                     M 	dc.b	$e8,vs3k_01
00018178 C606 E706                  	dc.b nA5, $06, sHold, $06
0001817C                            	sVoice		vS3K_08
0001817C E809                     M 	dc.b	$e8,vs3k_08
0001817E C606                       	dc.b nA5, $06
00018180                            	sVoice		vS3K_01
00018180 E808                     M 	dc.b	$e8,vs3k_01
00018182 C60C E718 E718 E718        	dc.b nA5, $0C, sHold, $18, sHold, $18, sHold, $18
0001818A E718 E718 E718 C604        	dc.b sHold, $18, sHold, $18, sHold, $18, nA5, $04
00018192 C604 C604                  	dc.b nA5, $04, nA5, $04
00018196                            	sVoice		vS3K_08
00018196 E809                     M 	dc.b	$e8,vs3k_08
00018198 C606                       	dc.b nA5, $06
0001819A                            	sVoice		vS3K_01
0001819A E808                     M 	dc.b	$e8,vs3k_01
0001819C C606 E706                  	dc.b nA5, $06, sHold, $06
000181A0                            	sVoice		vS3K_08
000181A0 E809                     M 	dc.b	$e8,vs3k_08
000181A2 C606                       	dc.b nA5, $06
000181A4                            	sVoice		vS3K_01
000181A4 E808                     M 	dc.b	$e8,vs3k_01
000181A6 C60C E718                  	dc.b nA5, $0C, sHold, $18
000181AA                            
000181AA                            HCZ2_Loop1:
000181AA                            	sVoice		vS3K_01
000181AA E808                     M 	dc.b	$e8,vs3k_01
000181AC C606 C606                  	dc.b nA5, $06, nA5, $06
000181B0                            	sVoice		vS3K_08
000181B0 E809                     M 	dc.b	$e8,vs3k_08
000181B2 C606                       	dc.b nA5, $06
000181B4                            	sVoice		vS3K_01
000181B4 E808                     M 	dc.b	$e8,vs3k_01
000181B6 C606 C606                  	dc.b nA5, $06, nA5, $06
000181BA                            	sVoice		vS3K_08
000181BA E809                     M 	dc.b	$e8,vs3k_08
000181BC C606                       	dc.b nA5, $06
000181BE                            	sVoice		vS3K_01
000181BE E808                     M 	dc.b	$e8,vs3k_01
000181C0 C606 C606 C606 C606        	dc.b nA5, $06, nA5, $06, nA5, $06, nA5, $06
000181C8 C606 C606 C606 C606        	dc.b nA5, $06, nA5, $06, nA5, $06, nA5, $06
000181D0 C606 C606 C606 C606        	dc.b nA5, $06, nA5, $06, nA5, $06, nA5, $06
000181D8                            	sVoice		vS3K_08
000181D8 E809                     M 	dc.b	$e8,vs3k_08
000181DA C606                       	dc.b nA5, $06
000181DC                            	sVoice		vS3K_01
000181DC E808                     M 	dc.b	$e8,vs3k_01
000181DE C606 C606                  	dc.b nA5, $06, nA5, $06
000181E2                            	sVoice		vS3K_08
000181E2 E809                     M 	dc.b	$e8,vs3k_08
000181E4 C606                       	dc.b nA5, $06
000181E6                            	sVoice		vS3K_01
000181E6 E808                     M 	dc.b	$e8,vs3k_01
000181E8 C606 C606 C606 C606        	dc.b nA5, $06, nA5, $06, nA5, $06, nA5, $06
000181F0 C606 C606 C606 C606        	dc.b nA5, $06, nA5, $06, nA5, $06, nA5, $06
000181F8                            	sVoice		vS3K_08
000181F8 E809                     M 	dc.b	$e8,vs3k_08
000181FA C606                       	dc.b nA5, $06
000181FC                            	sVoice		vS3K_01
000181FC E808                     M 	dc.b	$e8,vs3k_01
000181FE C606                       	dc.b nA5, $06
00018200                            	sLoop		$01, $03, HCZ2_Loop1
00018200 F701                     M 	dc.b	$f7,$01
00018202 FFA7                     M 	dc.w	hcz2_loop1-*-1
00018204 03                       M 	dc.b	$03
00018205 C606 C606                  	dc.b nA5, $06, nA5, $06
00018209                            	sVoice		vS3K_08
00018209 E809                     M 	dc.b	$e8,vs3k_08
0001820B C606                       	dc.b nA5, $06
0001820D                            	sVoice		vS3K_01
0001820D E808                     M 	dc.b	$e8,vs3k_01
0001820F C606 C606                  	dc.b nA5, $06, nA5, $06
00018213                            	sVoice		vS3K_08
00018213 E809                     M 	dc.b	$e8,vs3k_08
00018215 C606                       	dc.b nA5, $06
00018217                            	sVoice		vS3K_01
00018217 E808                     M 	dc.b	$e8,vs3k_01
00018219 C606 C606 C606 C606        	dc.b nA5, $06, nA5, $06, nA5, $06, nA5, $06
00018221 C606 C606 C606 C606        	dc.b nA5, $06, nA5, $06, nA5, $06, nA5, $06
00018229 C606 C606 E718 E718        	dc.b nA5, $06, nA5, $06, sHold, $18, sHold, $18
00018231 E718 E718                  	dc.b sHold, $18, sHold, $18
00018235                            
00018235                            HCZ2_Loop2:
00018235                            	sVoice		vS3K_01
00018235 E808                     M 	dc.b	$e8,vs3k_01
00018237 C60C                       	dc.b nA5, $0C
00018239                            	sVoice		vS3K_08
00018239 E809                     M 	dc.b	$e8,vs3k_08
0001823B C60C                       	dc.b nA5, $0C
0001823D                            	sVoice		vS3K_01
0001823D E808                     M 	dc.b	$e8,vs3k_01
0001823F C60C                       	dc.b nA5, $0C
00018241                            	sVoice		vS3K_08
00018241 E809                     M 	dc.b	$e8,vs3k_08
00018243 C60C                       	dc.b nA5, $0C
00018245                            	sVoice		vS3K_01
00018245 E808                     M 	dc.b	$e8,vs3k_01
00018247 C60C                       	dc.b nA5, $0C
00018249                            	sVoice		vS3K_08
00018249 E809                     M 	dc.b	$e8,vs3k_08
0001824B C60C                       	dc.b nA5, $0C
0001824D                            	sVoice		vS3K_01
0001824D E808                     M 	dc.b	$e8,vs3k_01
0001824F C60C                       	dc.b nA5, $0C
00018251                            	sVoice		vS3K_08
00018251 E809                     M 	dc.b	$e8,vs3k_08
00018253 C60C                       	dc.b nA5, $0C
00018255                            	sLoop		$01, $03, HCZ2_Loop2
00018255 F701                     M 	dc.b	$f7,$01
00018257 FFDD                     M 	dc.w	hcz2_loop2-*-1
00018259 03                       M 	dc.b	$03
0001825A E718 E718 E718 E718        	dc.b sHold, $18, sHold, $18, sHold, $18, sHold, $18
00018262                            
00018262                            HCZ2_Loop3:
00018262                            	sVoice		vS3K_01
00018262 E808                     M 	dc.b	$e8,vs3k_01
00018264 C60C                       	dc.b nA5, $0C
00018266                            	sVoice		vS3K_08
00018266 E809                     M 	dc.b	$e8,vs3k_08
00018268 C60C                       	dc.b nA5, $0C
0001826A                            	sVoice		vS3K_01
0001826A E808                     M 	dc.b	$e8,vs3k_01
0001826C C60C                       	dc.b nA5, $0C
0001826E                            	sVoice		vS3K_08
0001826E E809                     M 	dc.b	$e8,vs3k_08
00018270 C60C                       	dc.b nA5, $0C
00018272                            	sVoice		vS3K_01
00018272 E808                     M 	dc.b	$e8,vs3k_01
00018274 C60C                       	dc.b nA5, $0C
00018276                            	sVoice		vS3K_08
00018276 E809                     M 	dc.b	$e8,vs3k_08
00018278 C60C                       	dc.b nA5, $0C
0001827A                            	sVoice		vS3K_01
0001827A E808                     M 	dc.b	$e8,vs3k_01
0001827C C60C                       	dc.b nA5, $0C
0001827E                            	sVoice		vS3K_08
0001827E E809                     M 	dc.b	$e8,vs3k_08
00018280 C60C                       	dc.b nA5, $0C
00018282                            	sLoop		$01, $03, HCZ2_Loop3
00018282 F701                     M 	dc.b	$f7,$01
00018284 FFDD                     M 	dc.w	hcz2_loop3-*-1
00018286 03                       M 	dc.b	$03
00018287 E718 E718 E718 E718        	dc.b sHold, $18, sHold, $18, sHold, $18, sHold, $18
0001828F                            	sVoice		vS3K_01
0001828F E808                     M 	dc.b	$e8,vs3k_01
00018291 C606 C606                  	dc.b nA5, $06, nA5, $06
00018295                            	sVoice		vS3K_08
00018295 E809                     M 	dc.b	$e8,vs3k_08
00018297 C606                       	dc.b nA5, $06
00018299                            	sVoice		vS3K_01
00018299 E808                     M 	dc.b	$e8,vs3k_01
0001829B C606 C606 C606             	dc.b nA5, $06, nA5, $06, nA5, $06
000182A1                            	sVoice		vS3K_08
000182A1 E809                     M 	dc.b	$e8,vs3k_08
000182A3 C606                       	dc.b nA5, $06
000182A5                            	sVoice		vS3K_01
000182A5 E808                     M 	dc.b	$e8,vs3k_01
000182A7 C606 C606 C606 C606        	dc.b nA5, $06, nA5, $06, nA5, $06, nA5, $06
000182AF C606 C606 C606             	dc.b nA5, $06, nA5, $06, nA5, $06
000182B5                            	sVoice		vS3K_08
000182B5 E809                     M 	dc.b	$e8,vs3k_08
000182B7 C606                       	dc.b nA5, $06
000182B9                            	sVoice		vS3K_01
000182B9 E808                     M 	dc.b	$e8,vs3k_01
000182BB C606 C606 C606 C606        	dc.b nA5, $06, nA5, $06, nA5, $06, nA5, $06
000182C3 C606 C606 C606 C606        	dc.b nA5, $06, nA5, $06, nA5, $06, nA5, $06
000182CB C606 C606 C606 C606        	dc.b nA5, $06, nA5, $06, nA5, $06, nA5, $06
000182D3 C606 C606 C606             	dc.b nA5, $06, nA5, $06, nA5, $06
000182D9                            	sVoice		vS3K_08
000182D9 E809                     M 	dc.b	$e8,vs3k_08
000182DB C606                       	dc.b nA5, $06
000182DD                            	sVoice		vS3K_01
000182DD E808                     M 	dc.b	$e8,vs3k_01
000182DF C606 C606 C606             	dc.b nA5, $06, nA5, $06, nA5, $06
000182E5                            	sVoice		vS3K_08
000182E5 E809                     M 	dc.b	$e8,vs3k_08
000182E7 C606                       	dc.b nA5, $06
000182E9                            	sVoice		vS3K_01
000182E9 E808                     M 	dc.b	$e8,vs3k_01
000182EB C606 C606 C606             	dc.b nA5, $06, nA5, $06, nA5, $06
000182F1                            	sVoice		vS3K_08
000182F1 E809                     M 	dc.b	$e8,vs3k_08
000182F3 C606                       	dc.b nA5, $06
000182F5                            	sVoice		vS3K_01
000182F5 E808                     M 	dc.b	$e8,vs3k_01
000182F7 C606 C606 C606 C606        	dc.b nA5, $06, nA5, $06, nA5, $06, nA5, $06
000182FF C606 C606 C606             	dc.b nA5, $06, nA5, $06, nA5, $06
00018305                            	sVoice		vS3K_08
00018305 E809                     M 	dc.b	$e8,vs3k_08
00018307 C606                       	dc.b nA5, $06
00018309                            	sVoice		vS3K_01
00018309 E808                     M 	dc.b	$e8,vs3k_01
0001830B C606 C606 C606 C606        	dc.b nA5, $06, nA5, $06, nA5, $06, nA5, $06
00018313 C606 C606 C606 C606        	dc.b nA5, $06, nA5, $06, nA5, $06, nA5, $06
0001831B C606 C606 C606 C606        	dc.b nA5, $06, nA5, $06, nA5, $06, nA5, $06
00018323 C606 E718 C606 C606        	dc.b nA5, $06, sHold, $18, nA5, $06, nA5, $06
0001832B                            	sVoice		vS3K_08
0001832B E809                     M 	dc.b	$e8,vs3k_08
0001832D C606                       	dc.b nA5, $06
0001832F                            	sVoice		vS3K_01
0001832F E808                     M 	dc.b	$e8,vs3k_01
00018331 C606 C606 C606             	dc.b nA5, $06, nA5, $06, nA5, $06
00018337                            	sVoice		vS3K_08
00018337 E809                     M 	dc.b	$e8,vs3k_08
00018339 C606                       	dc.b nA5, $06
0001833B                            	sVoice		vS3K_01
0001833B E808                     M 	dc.b	$e8,vs3k_01
0001833D C606 C606 C606 C606        	dc.b nA5, $06, nA5, $06, nA5, $06, nA5, $06
00018345 C606 C606 C606             	dc.b nA5, $06, nA5, $06, nA5, $06
0001834B                            	sVoice		vS3K_08
0001834B E809                     M 	dc.b	$e8,vs3k_08
0001834D C606                       	dc.b nA5, $06
0001834F                            	sVoice		vS3K_01
0001834F E808                     M 	dc.b	$e8,vs3k_01
00018351 C606 C606 C606 C606        	dc.b nA5, $06, nA5, $06, nA5, $06, nA5, $06
00018359 C606 C606 C606 C606        	dc.b nA5, $06, nA5, $06, nA5, $06, nA5, $06
00018361 C606 C606 C606 C606        	dc.b nA5, $06, nA5, $06, nA5, $06, nA5, $06
00018369 C606 C606 C606             	dc.b nA5, $06, nA5, $06, nA5, $06
0001836F                            	sVoice		vS3K_08
0001836F E809                     M 	dc.b	$e8,vs3k_08
00018371 C606                       	dc.b nA5, $06
00018373                            	sVoice		vS3K_01
00018373 E808                     M 	dc.b	$e8,vs3k_01
00018375 C606 C606 C606             	dc.b nA5, $06, nA5, $06, nA5, $06
0001837B                            	sVoice		vS3K_08
0001837B E809                     M 	dc.b	$e8,vs3k_08
0001837D C606                       	dc.b nA5, $06
0001837F                            	sVoice		vS3K_01
0001837F E808                     M 	dc.b	$e8,vs3k_01
00018381 C606 C606 C606             	dc.b nA5, $06, nA5, $06, nA5, $06
00018387                            	sVoice		vS3K_08
00018387 E809                     M 	dc.b	$e8,vs3k_08
00018389 C606                       	dc.b nA5, $06
0001838B                            	sVoice		vS3K_01
0001838B E808                     M 	dc.b	$e8,vs3k_01
0001838D C606 C606 C606 C606        	dc.b nA5, $06, nA5, $06, nA5, $06, nA5, $06
00018395 C606 C606 C606             	dc.b nA5, $06, nA5, $06, nA5, $06
0001839B                            	sVoice		vS3K_08
0001839B E809                     M 	dc.b	$e8,vs3k_08
0001839D C606                       	dc.b nA5, $06
0001839F                            	sVoice		vS3K_01
0001839F E808                     M 	dc.b	$e8,vs3k_01
000183A1 C606 E718 E718 E718        	dc.b nA5, $06, sHold, $18, sHold, $18, sHold, $18
000183A9 E718                       	dc.b sHold, $18
000183AB                            	sJump		HCZ2_Jump1
000183AB F6                       M 	dc.b	$f6
000183AC FDB3                     M 	dc.w	hcz2_jump1-*-1
000183AE =00000011                M a	=	a+1
000183AE                          M 	even
000183AE                          M b	equs	dmus11
000183AE                          M _mus_gameno
000183AE                          M dmusa11	include	"driver/music/gameno.asm"
000183AE                            GameNo_Header:
000183AE                            	sHeaderInit						; Z80 offset is $1153
000183AE =000183AE                M spointzero	=	*
000183AE =00000000                M spatnum	=	0
000183AE                            	sHeaderTempo	$01, $80
000183AE 0080                     M 	dc.b	$01-1,$80
000183B0                            	sHeaderCh	$05, $03
000183B0 04                       M 	dc.b	$05-1
000183B1 02                       M 	dc.b	$03-1
000183B2                            	sHeaderDAC	GameNo_DAC1, $08
000183B2 0000                     M 	dc.w	gameno_dac1-spointzero
000183B4 08                       M 	dc.b	$08
000183B5 00                       M 	dc.b	$00
000183B6                            	sHeaderDAC	GameNo_DAC2, $08
000183B6 0000                     M 	dc.w	gameno_dac2-spointzero
000183B8 08                       M 	dc.b	$08
000183B9 00                       M 	dc.b	$00
000183BA                            	sHeaderFM	GameNo_FM1, $00, $0C
000183BA 0000                     M 	dc.w	gameno_fm1-spointzero
000183BC 000C                     M 	dc.b	$00,$0c
000183BE                            	sHeaderFM	GameNo_FM2, $00, $1A
000183BE 0000                     M 	dc.w	gameno_fm2-spointzero
000183C0 001A                     M 	dc.b	$00,$1a
000183C2                            	sHeaderFM	GameNo_FM3, $00, $1A
000183C2 0000                     M 	dc.w	gameno_fm3-spointzero
000183C4 001A                     M 	dc.b	$00,$1a
000183C6                            	sHeaderFM	GameNo_FM4, $0C, $14
000183C6 0000                     M 	dc.w	gameno_fm4-spointzero
000183C8 0C14                     M 	dc.b	$0c,$14
000183CA                            ;	sHeaderFM	GameNo_FM5, $00, $08
000183CA                            	sHeaderFM	GameNo_FM6, $00, $12
000183CA 0000                     M 	dc.w	gameno_fm6-spointzero
000183CC 0012                     M 	dc.b	$00,$12
000183CE                            	sHeaderPSG	GameNo_PSG1, $E8-$0C, $06, $00, v00
000183CE 0000                     M 	dc.w	gameno_psg1-spointzero
000183D0 DC06 0000                M 	dc.b	$e8-$0c,$06,$00,v00
000183D4                            	sHeaderPSG	GameNo_PSG2, $E8-$0C, $06, $00, v00
000183D4 0000                     M 	dc.w	gameno_psg2-spointzero
000183D6 DC06 0000                M 	dc.b	$e8-$0c,$06,$00,v00
000183DA                            	sHeaderPSG	GameNo_PSG3, $00, $05, $00, v00
000183DA 0000                     M 	dc.w	gameno_psg3-spointzero
000183DC 0005 0000                M 	dc.b	$00,$05,$00,v00
000183E0                            
000183E0                            	; Patch $00
000183E0                            	; $3D
000183E0                            	; $30, $71, $40, $01,	$1E, $1E, $5E, $1E
000183E0                            	; $18, $10, $10, $10,	$00, $11, $00, $11
000183E0                            	; $CF, $6F, $CF, $6F,	$00, $80, $80, $80
000183E0                            	spAlgorithm	$05
000183E0 =00000001                M spatnum	=	spatnum+1
000183E0 =00000005                M spal	=	val
000183E0                            	spFeedback	$07
000183E0 =00000007                M spfe	=	val
000183E0                            	spDetune	$03, $04, $07, $00
000183E0 =00000003                M spde1	=	op1
000183E0 =00000004                M spde2	=	op2
000183E0 =00000007                M spde3	=	op3
000183E0 =00000000                M spde4	=	op4
000183E0                            	spMultiple	$00, $00, $01, $01
000183E0 =00000000                M spmu1	=	op1
000183E0 =00000000                M spmu2	=	op2
000183E0 =00000001                M spmu3	=	op3
000183E0 =00000001                M spmu4	=	op4
000183E0                            	spRateScale	$00, $01, $00, $00
000183E0 =00000000                M sprs1	=	op1
000183E0 =00000001                M sprs2	=	op2
000183E0 =00000000                M sprs3	=	op3
000183E0 =00000000                M sprs4	=	op4
000183E0                            	spAttackRt	$1E, $1E, $1E, $1E
000183E0 =0000001E                M spar1	=	op1
000183E0 =0000001E                M spar2	=	op2
000183E0 =0000001E                M spar3	=	op3
000183E0 =0000001E                M spar4	=	op4
000183E0                            	spAmpMod	$00, $00, $00, $00
000183E0 =00000000                M spam1	=	op1
000183E0 =00000000                M spam2	=	op2
000183E0 =00000000                M spam3	=	op3
000183E0 =00000000                M spam4	=	op4
000183E0                            	spSustainRt	$18, $10, $10, $10
000183E0 =00000018                M spsr1	=	op1
000183E0 =00000010                M spsr2	=	op2
000183E0 =00000010                M spsr3	=	op3
000183E0 =00000010                M spsr4	=	op4
000183E0                            	spSustainLv	$0C, $0C, $06, $06
000183E0 =0000000C                M spsl1	=	op1
000183E0 =0000000C                M spsl2	=	op2
000183E0 =00000006                M spsl3	=	op3
000183E0 =00000006                M spsl4	=	op4
000183E0                            	spDecayRt	$00, $00, $11, $11
000183E0 =00000000                M spdr1	=	op1
000183E0 =00000000                M spdr2	=	op2
000183E0 =00000011                M spdr3	=	op3
000183E0 =00000011                M spdr4	=	op4
000183E0                            	spReleaseRt	$0F, $0F, $0F, $0F
000183E0 =0000000F                M sprr1	=	op1
000183E0 =0000000F                M sprr2	=	op2
000183E0 =0000000F                M sprr3	=	op3
000183E0 =0000000F                M sprr4	=	op4
000183E0                            	spSSGEG		$00, $00, $00, $00
000183E0 =00000000                M spss1	=	op1
000183E0 =00000000                M spss2	=	op2
000183E0 =00000000                M spss3	=	op3
000183E0 =00000000                M spss4	=	op4
000183E0                            	spTotalLv	$00, $00, $00, $00
000183E0 =00000000                M sptl1	=	op1
000183E0 =00000000                M sptl2	=	op2
000183E0 =00000000                M sptl3	=	op3
000183E0 =00000000                M sptl4	=	op4
000183E0 3D                       M 	dc.b	(spfe<<3)+spal
000183E1 =00000080                M sptlmask4	set	$80
000183E1 =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
000183E1 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
000183E1 =00000000                M sptlmask1	set	((spal=7)<<7)
000183E1 3071 4001                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
000183E5 1E1E 5E1E                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
000183E9 1810 1010                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
000183ED 0011 0011                M 	dc.b	spdr1,spdr3,spdr2,spdr4
000183F1 CF6F CF6F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
000183F5 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
000183F9 0080 8080                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
000183FD 4E41 54                  M 	dc.b	'NAT'
00018400                            
00018400                            	; Patch $01
00018400                            	; $22
00018400                            	; $34, $14, $08, $1C,	$1E, $1F, $1F, $1F
00018400                            	; $13, $1F, $0B, $1D,	$00, $00, $00, $0E
00018400                            	; $1C, $1A, $1B, $19,	$10, $02, $00, $81
00018400                            	spAlgorithm	$02
00018400 =00000002                M spatnum	=	spatnum+1
00018400 =00000002                M spal	=	val
00018400                            	spFeedback	$04
00018400 =00000004                M spfe	=	val
00018400                            	spDetune	$03, $00, $01, $01
00018400 =00000003                M spde1	=	op1
00018400 =00000000                M spde2	=	op2
00018400 =00000001                M spde3	=	op3
00018400 =00000001                M spde4	=	op4
00018400                            	spMultiple	$04, $08, $04, $0C
00018400 =00000004                M spmu1	=	op1
00018400 =00000008                M spmu2	=	op2
00018400 =00000004                M spmu3	=	op3
00018400 =0000000C                M spmu4	=	op4
00018400                            	spRateScale	$00, $00, $00, $00
00018400 =00000000                M sprs1	=	op1
00018400 =00000000                M sprs2	=	op2
00018400 =00000000                M sprs3	=	op3
00018400 =00000000                M sprs4	=	op4
00018400                            	spAttackRt	$1E, $1F, $1F, $1F
00018400 =0000001E                M spar1	=	op1
00018400 =0000001F                M spar2	=	op2
00018400 =0000001F                M spar3	=	op3
00018400 =0000001F                M spar4	=	op4
00018400                            	spAmpMod	$00, $00, $00, $00
00018400 =00000000                M spam1	=	op1
00018400 =00000000                M spam2	=	op2
00018400 =00000000                M spam3	=	op3
00018400 =00000000                M spam4	=	op4
00018400                            	spSustainRt	$13, $0B, $1F, $1D
00018400 =00000013                M spsr1	=	op1
00018400 =0000000B                M spsr2	=	op2
00018400 =0000001F                M spsr3	=	op3
00018400 =0000001D                M spsr4	=	op4
00018400                            	spSustainLv	$01, $01, $01, $01
00018400 =00000001                M spsl1	=	op1
00018400 =00000001                M spsl2	=	op2
00018400 =00000001                M spsl3	=	op3
00018400 =00000001                M spsl4	=	op4
00018400                            	spDecayRt	$00, $00, $00, $0E
00018400 =00000000                M spdr1	=	op1
00018400 =00000000                M spdr2	=	op2
00018400 =00000000                M spdr3	=	op3
00018400 =0000000E                M spdr4	=	op4
00018400                            	spReleaseRt	$0C, $0B, $0A, $09
00018400 =0000000C                M sprr1	=	op1
00018400 =0000000B                M sprr2	=	op2
00018400 =0000000A                M sprr3	=	op3
00018400 =00000009                M sprr4	=	op4
00018400                            	spSSGEG		$00, $00, $00, $00
00018400 =00000000                M spss1	=	op1
00018400 =00000000                M spss2	=	op2
00018400 =00000000                M spss3	=	op3
00018400 =00000000                M spss4	=	op4
00018400                            	spTotalLv	$10, $00, $02, $01
00018400 =00000010                M sptl1	=	op1
00018400 =00000000                M sptl2	=	op2
00018400 =00000002                M sptl3	=	op3
00018400 =00000001                M sptl4	=	op4
00018400 22                       M 	dc.b	(spfe<<3)+spal
00018401 =00000080                M sptlmask4	set	$80
00018401 =00000000                M sptlmask2	set	((spal>=5)<<7)
00018401 =00000000                M sptlmask3	set	((spal>=4)<<7)
00018401 =00000000                M sptlmask1	set	((spal=7)<<7)
00018401 3414 081C                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00018405 1E1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00018409 131F 0B1D                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001840D 0000 000E                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00018411 1C1A 1B19                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00018415 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00018419 1002 0081                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001841D 4E41 54                  M 	dc.b	'NAT'
00018420                            
00018420                            	; Patch $02
00018420                            	; $34
00018420                            	; $55, $76, $20, $20,	$1F, $1F, $1F, $1F
00018420                            	; $02, $00, $10, $0A,	$00, $0D, $0F, $12
00018420                            	; $0F, $0F, $0F, $0C,	$05, $80, $03, $80
00018420                            	spAlgorithm	$04
00018420 =00000003                M spatnum	=	spatnum+1
00018420 =00000004                M spal	=	val
00018420                            	spFeedback	$06
00018420 =00000006                M spfe	=	val
00018420                            	spDetune	$05, $02, $07, $02
00018420 =00000005                M spde1	=	op1
00018420 =00000002                M spde2	=	op2
00018420 =00000007                M spde3	=	op3
00018420 =00000002                M spde4	=	op4
00018420                            	spMultiple	$05, $00, $06, $00
00018420 =00000005                M spmu1	=	op1
00018420 =00000000                M spmu2	=	op2
00018420 =00000006                M spmu3	=	op3
00018420 =00000000                M spmu4	=	op4
00018420                            	spRateScale	$00, $00, $00, $00
00018420 =00000000                M sprs1	=	op1
00018420 =00000000                M sprs2	=	op2
00018420 =00000000                M sprs3	=	op3
00018420 =00000000                M sprs4	=	op4
00018420                            	spAttackRt	$1F, $1F, $1F, $1F
00018420 =0000001F                M spar1	=	op1
00018420 =0000001F                M spar2	=	op2
00018420 =0000001F                M spar3	=	op3
00018420 =0000001F                M spar4	=	op4
00018420                            	spAmpMod	$00, $00, $00, $00
00018420 =00000000                M spam1	=	op1
00018420 =00000000                M spam2	=	op2
00018420 =00000000                M spam3	=	op3
00018420 =00000000                M spam4	=	op4
00018420                            	spSustainRt	$02, $10, $00, $0A
00018420 =00000002                M spsr1	=	op1
00018420 =00000010                M spsr2	=	op2
00018420 =00000000                M spsr3	=	op3
00018420 =0000000A                M spsr4	=	op4
00018420                            	spSustainLv	$00, $00, $00, $00
00018420 =00000000                M spsl1	=	op1
00018420 =00000000                M spsl2	=	op2
00018420 =00000000                M spsl3	=	op3
00018420 =00000000                M spsl4	=	op4
00018420                            	spDecayRt	$00, $0F, $0D, $12
00018420 =00000000                M spdr1	=	op1
00018420 =0000000F                M spdr2	=	op2
00018420 =0000000D                M spdr3	=	op3
00018420 =00000012                M spdr4	=	op4
00018420                            	spReleaseRt	$0F, $0F, $0F, $0C
00018420 =0000000F                M sprr1	=	op1
00018420 =0000000F                M sprr2	=	op2
00018420 =0000000F                M sprr3	=	op3
00018420 =0000000C                M sprr4	=	op4
00018420                            	spSSGEG		$00, $00, $00, $00
00018420 =00000000                M spss1	=	op1
00018420 =00000000                M spss2	=	op2
00018420 =00000000                M spss3	=	op3
00018420 =00000000                M spss4	=	op4
00018420                            	spTotalLv	$05, $03, $00, $00
00018420 =00000005                M sptl1	=	op1
00018420 =00000003                M sptl2	=	op2
00018420 =00000000                M sptl3	=	op3
00018420 =00000000                M sptl4	=	op4
00018420 34                       M 	dc.b	(spfe<<3)+spal
00018421 =00000080                M sptlmask4	set	$80
00018421 =00000000                M sptlmask2	set	((spal>=5)<<7)
00018421 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00018421 =00000000                M sptlmask1	set	((spal=7)<<7)
00018421 5576 2020                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00018425 1F1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00018429 0200 100A                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001842D 000D 0F12                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00018431 0F0F 0F0C                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00018435 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00018439 0580 0380                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001843D 4E41 54                  M 	dc.b	'NAT'
00018440                            
00018440                            	; Patch $03
00018440                            	; $07
00018440                            	; $01, $01, $01, $01,	$00, $00, $00, $00
00018440                            	; $1F, $1F, $1F, $1F,	$1F, $1F, $1F, $1F
00018440                            	; $FF, $FF, $FF, $FF,	$FF, $FF, $FF, $FF
00018440                            	spAlgorithm	$07
00018440 =00000004                M spatnum	=	spatnum+1
00018440 =00000007                M spal	=	val
00018440                            	spFeedback	$00
00018440 =00000000                M spfe	=	val
00018440                            	spDetune	$00, $00, $00, $00
00018440 =00000000                M spde1	=	op1
00018440 =00000000                M spde2	=	op2
00018440 =00000000                M spde3	=	op3
00018440 =00000000                M spde4	=	op4
00018440                            	spMultiple	$01, $01, $01, $01
00018440 =00000001                M spmu1	=	op1
00018440 =00000001                M spmu2	=	op2
00018440 =00000001                M spmu3	=	op3
00018440 =00000001                M spmu4	=	op4
00018440                            	spRateScale	$00, $00, $00, $00
00018440 =00000000                M sprs1	=	op1
00018440 =00000000                M sprs2	=	op2
00018440 =00000000                M sprs3	=	op3
00018440 =00000000                M sprs4	=	op4
00018440                            	spAttackRt	$00, $00, $00, $00
00018440 =00000000                M spar1	=	op1
00018440 =00000000                M spar2	=	op2
00018440 =00000000                M spar3	=	op3
00018440 =00000000                M spar4	=	op4
00018440                            	spAmpMod	$00, $00, $00, $00
00018440 =00000000                M spam1	=	op1
00018440 =00000000                M spam2	=	op2
00018440 =00000000                M spam3	=	op3
00018440 =00000000                M spam4	=	op4
00018440                            	spSustainRt	$1F, $1F, $1F, $1F
00018440 =0000001F                M spsr1	=	op1
00018440 =0000001F                M spsr2	=	op2
00018440 =0000001F                M spsr3	=	op3
00018440 =0000001F                M spsr4	=	op4
00018440                            	spSustainLv	$0F, $0F, $0F, $0F
00018440 =0000000F                M spsl1	=	op1
00018440 =0000000F                M spsl2	=	op2
00018440 =0000000F                M spsl3	=	op3
00018440 =0000000F                M spsl4	=	op4
00018440                            	spDecayRt	$1F, $1F, $1F, $1F
00018440 =0000001F                M spdr1	=	op1
00018440 =0000001F                M spdr2	=	op2
00018440 =0000001F                M spdr3	=	op3
00018440 =0000001F                M spdr4	=	op4
00018440                            	spReleaseRt	$0F, $0F, $0F, $0F
00018440 =0000000F                M sprr1	=	op1
00018440 =0000000F                M sprr2	=	op2
00018440 =0000000F                M sprr3	=	op3
00018440 =0000000F                M sprr4	=	op4
00018440                            	spSSGEG		$00, $00, $00, $00
00018440 =00000000                M spss1	=	op1
00018440 =00000000                M spss2	=	op2
00018440 =00000000                M spss3	=	op3
00018440 =00000000                M spss4	=	op4
00018440                            	spTotalLv	$7F, $7F, $7F, $7F
00018440 =0000007F                M sptl1	=	op1
00018440 =0000007F                M sptl2	=	op2
00018440 =0000007F                M sptl3	=	op3
00018440 =0000007F                M sptl4	=	op4
00018440 07                       M 	dc.b	(spfe<<3)+spal
00018441 =00000080                M sptlmask4	set	$80
00018441 =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
00018441 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00018441 =FFFFFF80                M sptlmask1	set	((spal=7)<<7)
00018441 0101 0101                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00018445 0000 0000                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00018449 1F1F 1F1F                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001844D 1F1F 1F1F                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00018451 FFFF FFFF                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00018455 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00018459 FFFF FFFF                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001845D 4E41 54                  M 	dc.b	'NAT'
00018460                            
00018460                            	; Patch $04
00018460                            	; $35
00018460                            	; $70, $32, $20, $51,	$1F, $1F, $1F, $1F
00018460                            	; $01, $0C, $08, $06,	$05, $10, $09, $09
00018460                            	; $46, $8A, $7A, $7A,	$12, $80, $80, $80
00018460                            	spAlgorithm	$05
00018460 =00000005                M spatnum	=	spatnum+1
00018460 =00000005                M spal	=	val
00018460                            	spFeedback	$06
00018460 =00000006                M spfe	=	val
00018460                            	spDetune	$07, $02, $03, $05
00018460 =00000007                M spde1	=	op1
00018460 =00000002                M spde2	=	op2
00018460 =00000003                M spde3	=	op3
00018460 =00000005                M spde4	=	op4
00018460                            	spMultiple	$00, $00, $02, $01
00018460 =00000000                M spmu1	=	op1
00018460 =00000000                M spmu2	=	op2
00018460 =00000002                M spmu3	=	op3
00018460 =00000001                M spmu4	=	op4
00018460                            	spRateScale	$00, $00, $00, $00
00018460 =00000000                M sprs1	=	op1
00018460 =00000000                M sprs2	=	op2
00018460 =00000000                M sprs3	=	op3
00018460 =00000000                M sprs4	=	op4
00018460                            	spAttackRt	$1F, $1F, $1F, $1F
00018460 =0000001F                M spar1	=	op1
00018460 =0000001F                M spar2	=	op2
00018460 =0000001F                M spar3	=	op3
00018460 =0000001F                M spar4	=	op4
00018460                            	spAmpMod	$00, $00, $00, $00
00018460 =00000000                M spam1	=	op1
00018460 =00000000                M spam2	=	op2
00018460 =00000000                M spam3	=	op3
00018460 =00000000                M spam4	=	op4
00018460                            	spSustainRt	$01, $08, $0C, $06
00018460 =00000001                M spsr1	=	op1
00018460 =00000008                M spsr2	=	op2
00018460 =0000000C                M spsr3	=	op3
00018460 =00000006                M spsr4	=	op4
00018460                            	spSustainLv	$04, $07, $08, $07
00018460 =00000004                M spsl1	=	op1
00018460 =00000007                M spsl2	=	op2
00018460 =00000008                M spsl3	=	op3
00018460 =00000007                M spsl4	=	op4
00018460                            	spDecayRt	$05, $09, $10, $09
00018460 =00000005                M spdr1	=	op1
00018460 =00000009                M spdr2	=	op2
00018460 =00000010                M spdr3	=	op3
00018460 =00000009                M spdr4	=	op4
00018460                            	spReleaseRt	$06, $0A, $0A, $0A
00018460 =00000006                M sprr1	=	op1
00018460 =0000000A                M sprr2	=	op2
00018460 =0000000A                M sprr3	=	op3
00018460 =0000000A                M sprr4	=	op4
00018460                            	spSSGEG		$00, $00, $00, $00
00018460 =00000000                M spss1	=	op1
00018460 =00000000                M spss2	=	op2
00018460 =00000000                M spss3	=	op3
00018460 =00000000                M spss4	=	op4
00018460                            	spTotalLv	$12, $00, $00, $00
00018460 =00000012                M sptl1	=	op1
00018460 =00000000                M sptl2	=	op2
00018460 =00000000                M sptl3	=	op3
00018460 =00000000                M sptl4	=	op4
00018460 35                       M 	dc.b	(spfe<<3)+spal
00018461 =00000080                M sptlmask4	set	$80
00018461 =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
00018461 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00018461 =00000000                M sptlmask1	set	((spal=7)<<7)
00018461 7032 2051                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00018465 1F1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00018469 010C 0806                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001846D 0510 0909                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00018471 468A 7A7A                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00018475 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00018479 1280 8080                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001847D 4E41 54                  M 	dc.b	'NAT'
00018480                            
00018480                            	; Patch $05
00018480                            	; $37
00018480                            	; $32, $74, $0E, $40,	$1F, $1F, $5F, $1F
00018480                            	; $14, $14, $10, $14,	$07, $0B, $15, $07
00018480                            	; $27, $27, $F6, $27,	$83, $80, $83, $83
00018480                            	spAlgorithm	$07
00018480 =00000006                M spatnum	=	spatnum+1
00018480 =00000007                M spal	=	val
00018480                            	spFeedback	$06
00018480 =00000006                M spfe	=	val
00018480                            	spDetune	$03, $00, $07, $04
00018480 =00000003                M spde1	=	op1
00018480 =00000000                M spde2	=	op2
00018480 =00000007                M spde3	=	op3
00018480 =00000004                M spde4	=	op4
00018480                            	spMultiple	$02, $0E, $04, $00
00018480 =00000002                M spmu1	=	op1
00018480 =0000000E                M spmu2	=	op2
00018480 =00000004                M spmu3	=	op3
00018480 =00000000                M spmu4	=	op4
00018480                            	spRateScale	$00, $01, $00, $00
00018480 =00000000                M sprs1	=	op1
00018480 =00000001                M sprs2	=	op2
00018480 =00000000                M sprs3	=	op3
00018480 =00000000                M sprs4	=	op4
00018480                            	spAttackRt	$1F, $1F, $1F, $1F
00018480 =0000001F                M spar1	=	op1
00018480 =0000001F                M spar2	=	op2
00018480 =0000001F                M spar3	=	op3
00018480 =0000001F                M spar4	=	op4
00018480                            	spAmpMod	$00, $00, $00, $00
00018480 =00000000                M spam1	=	op1
00018480 =00000000                M spam2	=	op2
00018480 =00000000                M spam3	=	op3
00018480 =00000000                M spam4	=	op4
00018480                            	spSustainRt	$14, $10, $14, $14
00018480 =00000014                M spsr1	=	op1
00018480 =00000010                M spsr2	=	op2
00018480 =00000014                M spsr3	=	op3
00018480 =00000014                M spsr4	=	op4
00018480                            	spSustainLv	$02, $0F, $02, $02
00018480 =00000002                M spsl1	=	op1
00018480 =0000000F                M spsl2	=	op2
00018480 =00000002                M spsl3	=	op3
00018480 =00000002                M spsl4	=	op4
00018480                            	spDecayRt	$07, $15, $0B, $07
00018480 =00000007                M spdr1	=	op1
00018480 =00000015                M spdr2	=	op2
00018480 =0000000B                M spdr3	=	op3
00018480 =00000007                M spdr4	=	op4
00018480                            	spReleaseRt	$07, $06, $07, $07
00018480 =00000007                M sprr1	=	op1
00018480 =00000006                M sprr2	=	op2
00018480 =00000007                M sprr3	=	op3
00018480 =00000007                M sprr4	=	op4
00018480                            	spSSGEG		$00, $00, $00, $00
00018480 =00000000                M spss1	=	op1
00018480 =00000000                M spss2	=	op2
00018480 =00000000                M spss3	=	op3
00018480 =00000000                M spss4	=	op4
00018480                            	spTotalLv	$03, $03, $00, $03
00018480 =00000003                M sptl1	=	op1
00018480 =00000003                M sptl2	=	op2
00018480 =00000000                M sptl3	=	op3
00018480 =00000003                M sptl4	=	op4
00018480 37                       M 	dc.b	(spfe<<3)+spal
00018481 =00000080                M sptlmask4	set	$80
00018481 =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
00018481 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00018481 =FFFFFF80                M sptlmask1	set	((spal=7)<<7)
00018481 3274 0E40                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00018485 1F1F 5F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00018489 1414 1014                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001848D 070B 1507                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00018491 2727 F627                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00018495 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00018499 8380 8383                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001849D 4E41 54                  M 	dc.b	'NAT'
000184A0                            
000184A0                            	; Patch $06
000184A0                            	; $35
000184A0                            	; $73, $34, $06, $44,	$1F, $14, $1F, $14
000184A0                            	; $03, $00, $00, $00,	$05, $04, $05, $04
000184A0                            	; $C7, $77, $77, $77,	$1E, $80, $82, $80
000184A0                            	spAlgorithm	$05
000184A0 =00000007                M spatnum	=	spatnum+1
000184A0 =00000005                M spal	=	val
000184A0                            	spFeedback	$06
000184A0 =00000006                M spfe	=	val
000184A0                            	spDetune	$07, $00, $03, $04
000184A0 =00000007                M spde1	=	op1
000184A0 =00000000                M spde2	=	op2
000184A0 =00000003                M spde3	=	op3
000184A0 =00000004                M spde4	=	op4
000184A0                            	spMultiple	$03, $06, $04, $04
000184A0 =00000003                M spmu1	=	op1
000184A0 =00000006                M spmu2	=	op2
000184A0 =00000004                M spmu3	=	op3
000184A0 =00000004                M spmu4	=	op4
000184A0                            	spRateScale	$00, $00, $00, $00
000184A0 =00000000                M sprs1	=	op1
000184A0 =00000000                M sprs2	=	op2
000184A0 =00000000                M sprs3	=	op3
000184A0 =00000000                M sprs4	=	op4
000184A0                            	spAttackRt	$1F, $1F, $14, $14
000184A0 =0000001F                M spar1	=	op1
000184A0 =0000001F                M spar2	=	op2
000184A0 =00000014                M spar3	=	op3
000184A0 =00000014                M spar4	=	op4
000184A0                            	spAmpMod	$00, $00, $00, $00
000184A0 =00000000                M spam1	=	op1
000184A0 =00000000                M spam2	=	op2
000184A0 =00000000                M spam3	=	op3
000184A0 =00000000                M spam4	=	op4
000184A0                            	spSustainRt	$03, $00, $00, $00
000184A0 =00000003                M spsr1	=	op1
000184A0 =00000000                M spsr2	=	op2
000184A0 =00000000                M spsr3	=	op3
000184A0 =00000000                M spsr4	=	op4
000184A0                            	spSustainLv	$0C, $07, $07, $07
000184A0 =0000000C                M spsl1	=	op1
000184A0 =00000007                M spsl2	=	op2
000184A0 =00000007                M spsl3	=	op3
000184A0 =00000007                M spsl4	=	op4
000184A0                            	spDecayRt	$05, $05, $04, $04
000184A0 =00000005                M spdr1	=	op1
000184A0 =00000005                M spdr2	=	op2
000184A0 =00000004                M spdr3	=	op3
000184A0 =00000004                M spdr4	=	op4
000184A0                            	spReleaseRt	$07, $07, $07, $07
000184A0 =00000007                M sprr1	=	op1
000184A0 =00000007                M sprr2	=	op2
000184A0 =00000007                M sprr3	=	op3
000184A0 =00000007                M sprr4	=	op4
000184A0                            	spSSGEG		$00, $00, $00, $00
000184A0 =00000000                M spss1	=	op1
000184A0 =00000000                M spss2	=	op2
000184A0 =00000000                M spss3	=	op3
000184A0 =00000000                M spss4	=	op4
000184A0                            	spTotalLv	$1E, $02, $00, $00
000184A0 =0000001E                M sptl1	=	op1
000184A0 =00000002                M sptl2	=	op2
000184A0 =00000000                M sptl3	=	op3
000184A0 =00000000                M sptl4	=	op4
000184A0 35                       M 	dc.b	(spfe<<3)+spal
000184A1 =00000080                M sptlmask4	set	$80
000184A1 =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
000184A1 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
000184A1 =00000000                M sptlmask1	set	((spal=7)<<7)
000184A1 7334 0644                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
000184A5 1F14 1F14                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
000184A9 0300 0000                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
000184AD 0504 0504                M 	dc.b	spdr1,spdr3,spdr2,spdr4
000184B1 C777 7777                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
000184B5 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
000184B9 1E80 8280                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
000184BD 4E41 54                  M 	dc.b	'NAT'
000184C0                            
000184C0                            GameNo_FM1:
000184C0                            ;	;sRawFreq	$00
000184C0                            ;	;sPitchSlide	$00
000184C0                            	ssMod68k	$0C, $01, $03, $02
000184C0 F00C 0103 02             M 	dc.b	$f0,$0c,$01,$03,$02
000184C5                            	sVoice		$05
000184C5 E805                     M 	dc.b	$e8,$05
000184C7                            	ssDetune	$03
000184C7 E103                     M 	dc.b	$e1,$03
000184C9                            
000184C9                            GameNo_Jump1:
000184C9                            	sCall		GameNo_Call1
000184C9 F8                       M 	dc.b	$f8
000184CA 0000                     M 	dc.w	gameno_call1-*-1
000184CC C10C 0C09 C0BE 06C0        	dc.b nE5, $0C, $0C, $09, nEb5, nCs5, $06, nEb5
000184D4 18BC BE0C 0C09 C0C1        	dc.b $18, nB4, nCs5, $0C, $0C, $09, nEb5, nE5
000184DC 06C3 1809 C5C6 06C8        	dc.b $06, nFs5, $18, $09, nAb5, nA5, $06, nB5
000184E4 18C0 C124 C306 C5C6        	dc.b $18, nEb5, nE5, $24, nFs5, $06, nAb5, nA5
000184EC 1809 C8CA 06CC 30          	dc.b $18, $09, nB5, nCs6, $06, nEb6, $30
000184F3                            	sCall		GameNo_Call1
000184F3 F8                       M 	dc.b	$f8
000184F4 0000                     M 	dc.w	gameno_call1-*-1
000184F6 CD18 D209 D1CF 06D1        	dc.b nE6, $18, nA6, $09, nAb6, nFs6, $06, nAb6
000184FE 1809 D2D4 06D2 18CA        	dc.b $18, $09, nA6, nB6, $06, nA6, $18, nCs6
00018506 CC24 CA06 CCCD 09CC        	dc.b nEb6, $24, nCs6, $06, nEb6, nE6, $09, nEb6
0001850E CA06 09CC CD06 CF09        	dc.b nCs6, $06, $09, nEb6, nE6, $06, nFs6, $09
00018516 CDCC 0609 CDCF 06D0        	dc.b nE6, nEb6, $06, $09, nE6, nFs6, $06, nG6
0001851E 1809 D7D5 06D4 30          	dc.b $18, $09, nD7, nC7, $06, nB6, $30
00018525                            	sJump		GameNo_Jump1
00018525 F6                       M 	dc.b	$f6
00018526 FFA2                     M 	dc.w	gameno_jump1-*-1
00018528                            
00018528                            GameNo_Call1:
00018528 B90C BCC5 09C3 C106        	dc.b nAb4, $0C, nB4, nAb5, $09, nFs5, nE5, $06
00018530 C00C BCC5 09C0 C506        	dc.b nEb5, $0C, nB4, nAb5, $09, nEb5, nAb5, $06
00018538 C60C C609 C8C6 06C8        	dc.b nA5, $0C, nA5, $09, nB5, nA5, $06, nB5
00018540 CACC 03CA C8CC 03CA        	dc.b nCs6, nEb6, $03, nCs6, nB5, nEb6, $03, nCs6
00018548 C8CC C8CA 0CCC             	dc.b nB5, nEb6, nB5, nCs6, $0C, nEb6
0001854E                            	sLoop		$02, $02, GameNo_Call1
0001854E F702                     M 	dc.b	$f7,$02
00018550 FFD7                     M 	dc.w	gameno_call1-*-1
00018552 02                       M 	dc.b	$02
00018553                            	sRet
00018553 F9                       M 	dc.b	$f9
00018554                            
00018554                            GameNo_FM2:
00018554                            	;sRawFreq	$00
00018554                            	;sPitchSlide	$00
00018554                            	ssMod68k	$0C, $01, $03, $02
00018554 F00C 0103 02             M 	dc.b	$f0,$0c,$01,$03,$02
00018559                            	sVoice		$06
00018559 E806                     M 	dc.b	$e8,$06
0001855B                            	sPan		spLeft, $00
0001855B E080                     M 	dc.b	$e0,spleft|$00
0001855D                            
0001855D                            GameNo_Jump2:
0001855D                            	sCall		GameNo_Call2
0001855D F8                       M 	dc.b	$f8
0001855E 0000                     M 	dc.w	gameno_call2-*-1
00018560                            	sCall		GameNo_Call3
00018560 F8                       M 	dc.b	$f8
00018561 0000                     M 	dc.w	gameno_call3-*-1
00018563                            	sCall		GameNo_Call3
00018563 F8                       M 	dc.b	$f8
00018564 0000                     M 	dc.w	gameno_call3-*-1
00018566                            	sCall		GameNo_Call4
00018566 F8                       M 	dc.b	$f8
00018567 0000                     M 	dc.w	gameno_call4-*-1
00018569                            	sCall		GameNo_Call4
00018569 F8                       M 	dc.b	$f8
0001856A 0000                     M 	dc.w	gameno_call4-*-1
0001856C                            	sCall		GameNo_Call3
0001856C F8                       M 	dc.b	$f8
0001856D 0000                     M 	dc.w	gameno_call3-*-1
0001856F                            	sCall		GameNo_Call4
0001856F F8                       M 	dc.b	$f8
00018570 0000                     M 	dc.w	gameno_call4-*-1
00018572                            	sCall		GameNo_Call4
00018572 F8                       M 	dc.b	$f8
00018573 0000                     M 	dc.w	gameno_call4-*-1
00018575                            	sCall		GameNo_Call3
00018575 F8                       M 	dc.b	$f8
00018576 0000                     M 	dc.w	gameno_call3-*-1
00018578                            	sCall		GameNo_Call2
00018578 F8                       M 	dc.b	$f8
00018579 0000                     M 	dc.w	gameno_call2-*-1
0001857B 800C BEBE 0903 8006        	dc.b nRst, $0C, nCs5, nCs5, $09, $03, nRst, $06
00018583 BE                         	dc.b nCs5
00018584                            	sCall		GameNo_Call5
00018584 F8                       M 	dc.b	$f8
00018585 0000                     M 	dc.w	gameno_call5-*-1
00018587                            	sCall		GameNo_Call4
00018587 F8                       M 	dc.b	$f8
00018588 0000                     M 	dc.w	gameno_call4-*-1
0001858A                            	sCall		GameNo_Call3
0001858A F8                       M 	dc.b	$f8
0001858B 0000                     M 	dc.w	gameno_call3-*-1
0001858D                            	sCall		GameNo_Call4
0001858D F8                       M 	dc.b	$f8
0001858E 0000                     M 	dc.w	gameno_call4-*-1
00018590                            	sCall		GameNo_Call4
00018590 F8                       M 	dc.b	$f8
00018591 0000                     M 	dc.w	gameno_call4-*-1
00018593 8006 BF09 0380 06BF        	dc.b nRst, $06, nD5, $09, $03, nRst, $06, nD5
0001859B 0903 8006 BF06             	dc.b $09, $03, nRst, $06, nD5, $06
000185A1                            	sCall		GameNo_Call5
000185A1 F8                       M 	dc.b	$f8
000185A2 0000                     M 	dc.w	gameno_call5-*-1
000185A4                            	sJump		GameNo_Jump2
000185A4 F6                       M 	dc.b	$f6
000185A5 FFB7                     M 	dc.w	gameno_jump2-*-1
000185A7                            
000185A7                            GameNo_Call2:
000185A7                            	sCall		GameNo_Call3
000185A7 F8                       M 	dc.b	$f8
000185A8 0000                     M 	dc.w	gameno_call3-*-1
000185AA                            	sLoop		$01, $02, GameNo_Call2
000185AA F701                     M 	dc.b	$f7,$01
000185AC FFFA                     M 	dc.w	gameno_call2-*-1
000185AE 02                       M 	dc.b	$02
000185AF                            	sCall		GameNo_Call4
000185AF F8                       M 	dc.b	$f8
000185B0 0000                     M 	dc.w	gameno_call4-*-1
000185B2 8006 C009 0380 C0C1        	dc.b nRst, $06, nEb5, $09, $03, nRst, nEb5, nE5
000185BA 06C1 C0C0                  	dc.b $06, nE5, nEb5, nEb5
000185BE                            	sLoop		$02, $02, GameNo_Call2
000185BE F702                     M 	dc.b	$f7,$02
000185C0 FFE6                     M 	dc.w	gameno_call2-*-1
000185C2 02                       M 	dc.b	$02
000185C3                            	sRet
000185C3 F9                       M 	dc.b	$f9
000185C4                            
000185C4                            GameNo_Call3:
000185C4 8006 BC09 0380 06BC        	dc.b nRst, $06, nB4, $09, $03, nRst, $06, nB4
000185CC 0903 8006 BC06             	dc.b $09, $03, nRst, $06, nB4, $06
000185D2                            	sRet
000185D2 F9                       M 	dc.b	$f9
000185D3                            
000185D3                            GameNo_Call4:
000185D3 8006 BE09 0380 06BE        	dc.b nRst, $06, nCs5, $09, $03, nRst, $06, nCs5
000185DB 0903 8006 BE06             	dc.b $09, $03, nRst, $06, nCs5, $06
000185E1                            	sRet
000185E1 F9                       M 	dc.b	$f9
000185E2                            
000185E2                            GameNo_Call5:
000185E2 8006 C009 0380 06C0        	dc.b nRst, $06, nEb5, $09, $03, nRst, $06, nEb5
000185EA 0903 8006 C006             	dc.b $09, $03, nRst, $06, nEb5, $06
000185F0                            	sRet
000185F0 F9                       M 	dc.b	$f9
000185F1                            
000185F1                            GameNo_FM3:
000185F1                            	;sRawFreq	$00
000185F1                            	;sPitchSlide	$00
000185F1                            	ssMod68k	$0C, $01, $03, $02
000185F1 F00C 0103 02             M 	dc.b	$f0,$0c,$01,$03,$02
000185F6                            	sVoice		$06
000185F6 E806                     M 	dc.b	$e8,$06
000185F8                            	sPan		spRight, $00
000185F8 E040                     M 	dc.b	$e0,spright|$00
000185FA                            
000185FA                            GameNo_Jump3:
000185FA                            	sCall		GameNo_Call6
000185FA F8                       M 	dc.b	$f8
000185FB 0000                     M 	dc.w	gameno_call6-*-1
000185FD                            	sCall		GameNo_Call7
000185FD F8                       M 	dc.b	$f8
000185FE 0000                     M 	dc.w	gameno_call7-*-1
00018600                            	sCall		GameNo_Call8
00018600 F8                       M 	dc.b	$f8
00018601 0000                     M 	dc.w	gameno_call8-*-1
00018603                            	sCall		GameNo_Call8
00018603 F8                       M 	dc.b	$f8
00018604 0000                     M 	dc.w	gameno_call8-*-1
00018606                            	sCall		GameNo_Call7
00018606 F8                       M 	dc.b	$f8
00018607 0000                     M 	dc.w	gameno_call7-*-1
00018609                            	sCall		GameNo_Call8
00018609 F8                       M 	dc.b	$f8
0001860A 0000                     M 	dc.w	gameno_call8-*-1
0001860C                            	sCall		GameNo_Call9
0001860C F8                       M 	dc.b	$f8
0001860D 0000                     M 	dc.w	gameno_call9-*-1
0001860F                            	sCall		GameNo_Call6
0001860F F8                       M 	dc.b	$f8
00018610 0000                     M 	dc.w	gameno_call6-*-1
00018612 800C BABA 0903 8006        	dc.b nRst, $0C, nA4, nA4, $09, $03, nRst, $06
0001861A BA                         	dc.b nA4
0001861B                            	sCall		GameNo_Call10
0001861B F8                       M 	dc.b	$f8
0001861C 0000                     M 	dc.w	gameno_call10-*-1
0001861E                            	sCall		GameNo_Call8
0001861E F8                       M 	dc.b	$f8
0001861F 0000                     M 	dc.w	gameno_call8-*-1
00018621                            	sCall		GameNo_Call9
00018621 F8                       M 	dc.b	$f8
00018622 0000                     M 	dc.w	gameno_call9-*-1
00018624                            	sCall		GameNo_Call8
00018624 F8                       M 	dc.b	$f8
00018625 0000                     M 	dc.w	gameno_call8-*-1
00018627                            	sCall		GameNo_Call8
00018627 F8                       M 	dc.b	$f8
00018628 0000                     M 	dc.w	gameno_call8-*-1
0001862A                            	sCall		GameNo_Call10
0001862A F8                       M 	dc.b	$f8
0001862B 0000                     M 	dc.w	gameno_call10-*-1
0001862D                            	sCall		GameNo_Call10
0001862D F8                       M 	dc.b	$f8
0001862E 0000                     M 	dc.w	gameno_call10-*-1
00018630                            	sJump		GameNo_Jump3
00018630 F6                       M 	dc.b	$f6
00018631 FFC8                     M 	dc.w	gameno_jump3-*-1
00018633                            
00018633                            GameNo_Call6:
00018633                            	sCall		GameNo_Call7
00018633 F8                       M 	dc.b	$f8
00018634 0000                     M 	dc.w	gameno_call7-*-1
00018636                            	sCall		GameNo_Call8
00018636 F8                       M 	dc.b	$f8
00018637 0000                     M 	dc.w	gameno_call8-*-1
00018639 8006 BC09 0380 BCBA        	dc.b nRst, $06, nB4, $09, $03, nRst, nB4, nA4
00018641 06BA B9B9                  	dc.b $06, nA4, nAb4, nAb4
00018645                            	sLoop		$02, $02, GameNo_Call6
00018645 F702                     M 	dc.b	$f7,$02
00018647 FFEB                     M 	dc.w	gameno_call6-*-1
00018649 02                       M 	dc.b	$02
0001864A                            	sRet
0001864A F9                       M 	dc.b	$f9
0001864B                            
0001864B                            GameNo_Call7:
0001864B 8006 B909 0380 06B9        	dc.b nRst, $06, nAb4, $09, $03, nRst, $06, nAb4
00018653 0903 8006 B906             	dc.b $09, $03, nRst, $06, nAb4, $06
00018659                            	sLoop		$01, $02, GameNo_Call7
00018659 F701                     M 	dc.b	$f7,$01
0001865B FFEF                     M 	dc.w	gameno_call7-*-1
0001865D 02                       M 	dc.b	$02
0001865E                            	sRet
0001865E F9                       M 	dc.b	$f9
0001865F                            
0001865F                            GameNo_Call8:
0001865F 8006 BA09 0380 06BA        	dc.b nRst, $06, nA4, $09, $03, nRst, $06, nA4
00018667 0903 8006 BA06             	dc.b $09, $03, nRst, $06, nA4, $06
0001866D                            	sRet
0001866D F9                       M 	dc.b	$f9
0001866E                            
0001866E                            GameNo_Call10:
0001866E 8006 BC09 0380 06BC        	dc.b nRst, $06, nB4, $09, $03, nRst, $06, nB4
00018676 0903 8006 BC06             	dc.b $09, $03, nRst, $06, nB4, $06
0001867C                            	sRet
0001867C F9                       M 	dc.b	$f9
0001867D                            
0001867D                            GameNo_Call9:
0001867D 8006 B709 0380 06B7        	dc.b nRst, $06, nFs4, $09, $03, nRst, $06, nFs4
00018685 0903 8006 B706             	dc.b $09, $03, nRst, $06, nFs4, $06
0001868B                            	sRet
0001868B F9                       M 	dc.b	$f9
0001868C                            
0001868C                            GameNo_FM6:
0001868C                            	;sRawFreq	$00
0001868C                            	;sPitchSlide	$00
0001868C                            	ssMod68k	$0C, $01, $03, $02
0001868C F00C 0103 02             M 	dc.b	$f0,$0c,$01,$03,$02
00018691                            	sVoice		$05
00018691 E805                     M 	dc.b	$e8,$05
00018693 8008                       	dc.b nRst, $08
00018695                            	ssDetune	$FD
00018695 E1FD                     M 	dc.b	$e1,$fd
00018697                            	sJump		GameNo_Jump1
00018697 F6                       M 	dc.b	$f6
00018698 FE30                     M 	dc.w	gameno_jump1-*-1
0001869A                            
0001869A                            GameNo_PSG1:
0001869A                            	;sRawFreq	$00
0001869A                            	;sPitchSlide	$00
0001869A                            	ssMod68k	$0C, $01, $01, $04
0001869A F00C 0101 04             M 	dc.b	$f0,$0c,$01,$01,$04
0001869F                            	sVoice		vGameNo01
0001869F E806                     M 	dc.b	$e8,vgameno01
000186A1                            
000186A1                            GameNo_Jump6:
000186A1                            	sCall		GameNo_Call17
000186A1 F8                       M 	dc.b	$f8
000186A2 0000                     M 	dc.w	gameno_call17-*-1
000186A4 BC09 C103 8006 BC06        	dc.b nB4, $09, nE5, $03, nRst, $06, nB4, $06
000186AC 0903 8006 B906 BC09        	dc.b $09, $03, nRst, $06, nAb4, $06, nB4, $09
000186B4 C003 8006 BC06 0903        	dc.b nEb5, $03, nRst, $06, nB4, $06, $09, $03
000186BC 8006 B906 BA09 BE03        	dc.b nRst, $06, nAb4, $06, nA4, $09, nCs5, $03
000186C4 8006 BA06 0903 8006        	dc.b nRst, $06, nA4, $06, $09, $03, nRst, $06
000186CC BE06 BE09 0380 06BE        	dc.b nCs5, $06, nCs5, $09, $03, nRst, $06, nCs5
000186D4 0609 C0C1 06C0 0903        	dc.b $06, $09, nEb5, nE5, $06, nEb5, $09, $03
000186DC 8006 C006 BC09 0380        	dc.b nRst, $06, nEb5, $06, nB4, $09, $03, nRst
000186E4 06BC 06BE 0903 8006        	dc.b $06, nB4, $06, nCs5, $09, $03, nRst, $06
000186EC BE06 0903 C006 C106        	dc.b nCs5, $06, $09, $03, nEb5, $06, nE5, $06
000186F4 C309 0380 06C3 06BE        	dc.b nFs5, $09, $03, nRst, $06, nFs5, $06, nCs5
000186FC 0903 8006 BE06 BC09        	dc.b $09, $03, nRst, $06, nCs5, $06, nB4, $09
00018704 0380 06BC 06BE 03C0        	dc.b $03, nRst, $06, nB4, $06, nCs5, $03, nEb5
0001870C C1C3 C1C3 C5C6             	dc.b nE5, nFs5, nE5, nFs5, nAb5, nA5
00018712                            	sCall		GameNo_Call17
00018712 F8                       M 	dc.b	$f8
00018713 0000                     M 	dc.w	gameno_call17-*-1
00018715 800C BEC1 09C0 BE06        	dc.b nRst, $0C, nCs5, nE5, $09, nEb5, nCs5, $06
0001871D C018 09C1 09C3 06C1        	dc.b nEb5, $18, $09, nE5, $09, nFs5, $06, nE5
00018725 18BA BC24 BA06 BCBE        	dc.b $18, nA4, nB4, $24, nA4, $06, nB4, nCs5
0001872D 09BC BA06 09BC BE06        	dc.b $09, nB4, nA4, $06, $09, nB4, nCs5, $06
00018735 BE09 BCBA 0609 BCBE        	dc.b nCs5, $09, nB4, nA4, $06, $09, nB4, nCs5
0001873D 06BF 1809 C8C6 06C5        	dc.b $06, nD5, $18, $09, nB5, nA5, $06, nAb5
00018745 30                         	dc.b $30
00018746                            	sJump		GameNo_Jump6
00018746 F6                       M 	dc.b	$f6
00018747 FF59                     M 	dc.w	gameno_jump6-*-1
00018749                            
00018749                            GameNo_Call17:
00018749 B903 BCC1 C5BC 8009        	dc.b nAb4, $03, nB4, nE5, nAb5, nB4, nRst, $09
00018751 C1C1 C106 B903 BCC0        	dc.b nE5, nE5, nE5, $06, nAb4, $03, nB4, nEb5
00018759 C5BC 8009 C0C0 C006        	dc.b nAb5, nB4, nRst, $09, nEb5, nEb5, nEb5, $06
00018761 BA03 BEC1 C6BE 8009        	dc.b nA4, $03, nCs5, nE5, nA5, nCs5, nRst, $09
00018769 C1C1 C106 C803 C6C3        	dc.b nE5, nE5, nE5, $06, nB5, $03, nA5, nFs5
00018771 C8C6 C3CC C8C1 0CC5        	dc.b nB5, nA5, nFs5, nEb6, nB5, nE5, $0C, nAb5
00018779                            	sLoop		$02, $02, GameNo_Call17
00018779 F702                     M 	dc.b	$f7,$02
0001877B FFCD                     M 	dc.w	gameno_call17-*-1
0001877D 02                       M 	dc.b	$02
0001877E                            	sRet
0001877E F9                       M 	dc.b	$f9
0001877F                            
0001877F                            GameNo_PSG2:
0001877F                            	;sRawFreq	$00
0001877F                            	;sPitchSlide	$00
0001877F                            	ssMod68k	$0C, $01, $01, $04
0001877F F00C 0101 04             M 	dc.b	$f0,$0c,$01,$01,$04
00018784                            	sVoice		vGameNo01
00018784 E806                     M 	dc.b	$e8,vgameno01
00018786                            
00018786                            GameNo_Jump7:
00018786                            	sCall		GameNo_Call18
00018786 F8                       M 	dc.b	$f8
00018787 0000                     M 	dc.w	gameno_call18-*-1
00018789 B909 BC03 8006 B906        	dc.b nAb4, $09, nB4, $03, nRst, $06, nAb4, $06
00018791 0903 8006 B506 B909        	dc.b $09, $03, nRst, $06, nE4, $06, nAb4, $09
00018799 BC03 8006 B906 0903        	dc.b nB4, $03, nRst, $06, nAb4, $06, $09, $03
000187A1 8006 B406 B509 BA03        	dc.b nRst, $06, nEb4, $06, nE4, $09, nA4, $03
000187A9 8006 B506 0903 8006        	dc.b nRst, $06, nE4, $06, $09, $03, nRst, $06
000187B1 BA06 BA09 0380 06BA        	dc.b nA4, $06, nA4, $09, $03, nRst, $06, nA4
000187B9 0609 BCBE 06BC 0903        	dc.b $06, $09, nB4, nCs5, $06, nB4, $09, $03
000187C1 8006 BC06 B909 0380        	dc.b nRst, $06, nB4, $06, nAb4, $09, $03, nRst
000187C9 06B9 06B9 0903 8006        	dc.b $06, nAb4, $06, nAb4, $09, $03, nRst, $06
000187D1 B906 0903 BC06 BE06        	dc.b nAb4, $06, $09, $03, nB4, $06, nCs5, $06
000187D9 BE09 0380 06BE 06BA        	dc.b nCs5, $09, $03, nRst, $06, nCs5, $06, nA4
000187E1 0903 8006 BA06 B709        	dc.b $09, $03, nRst, $06, nA4, $06, nFs4, $09
000187E9 0380 06B7 06BE 03C0        	dc.b $03, nRst, $06, nFs4, $06, nCs5, $03, nEb5
000187F1 C1C3 BEC0 C1C3             	dc.b nE5, nFs5, nCs5, nEb5, nE5, nFs5
000187F7                            	sCall		GameNo_Call18
000187F7 F8                       M 	dc.b	$f8
000187F8 0000                     M 	dc.w	gameno_call18-*-1
000187FA 800C BABE 09BC BA06        	dc.b nRst, $0C, nA4, nCs5, $09, nB4, nA4, $06
00018802 BC18 09BE 09C0 06BE        	dc.b nB4, $18, $09, nCs5, $09, nEb5, $06, nCs5
0001880A 18B5 B724 B506 B7BA        	dc.b $18, nE4, nFs4, $24, nE4, $06, nFs4, nA4
00018812 09B9 B506 09B9 BA06        	dc.b $09, nAb4, nE4, $06, $09, nAb4, nA4, $06
0001881A BA09 B9B7 0609 B9BA        	dc.b nA4, $09, nAb4, nFs4, $06, $09, nAb4, nA4
00018822 06BC 1809 C4C2 06C0        	dc.b $06, nB4, $18, $09, nG5, nF5, $06, nEb5
0001882A 30                         	dc.b $30
0001882B                            	sJump		GameNo_Jump7
0001882B F6                       M 	dc.b	$f6
0001882C FF59                     M 	dc.w	gameno_jump7-*-1
0001882E                            
0001882E                            GameNo_Call18:
0001882E B503 B9BC C1B9 8009        	dc.b nE4, $03, nAb4, nB4, nE5, nAb4, nRst, $09
00018836 BCBC BC06 B403 B9BC        	dc.b nB4, nB4, nB4, $06, nEb4, $03, nAb4, nB4
0001883E C0B9 8009 BCBC BC06        	dc.b nEb5, nAb4, nRst, $09, nB4, nB4, nB4, $06
00018846 B703 BABE C1BA 8009        	dc.b nFs4, $03, nA4, nCs5, nE5, nA4, nRst, $09
0001884E BEBE BE06                  	dc.b nCs5, nCs5, nCs5, $06
00018852                            	saVol		$02
00018852 ED02                     M 	dc.b	$ed,$02
00018854 8008 C803 C6C3 C8C6        	dc.b nRst, $08, nB5, $03, nA5, nFs5, nB5, nA5
0001885C C301                       	dc.b nFs5, $01
0001885E                            	saVol		$FE
0001885E EDFE                     M 	dc.b	$ed,$fe
00018860 BA0C BC                    	dc.b nA4, $0C, nB4
00018863                            	sLoop		$02, $02, GameNo_Call18
00018863 F702                     M 	dc.b	$f7,$02
00018865 FFC8                     M 	dc.w	gameno_call18-*-1
00018867 02                       M 	dc.b	$02
00018868                            	sRet
00018868 F9                       M 	dc.b	$f9
00018869 FD00 FC00                  	dc.b $FD, $00, $FC, $00	; Unused
0001886D                            
0001886D                            GameNo_FM4:
0001886D                            	;sRawFreq	$00
0001886D                            	;sPitchSlide	$00
0001886D                            
0001886D                            GameNo_Jump4:
0001886D                            	ssMod68k	$0C, $01, $03, $02
0001886D F00C 0103 02             M 	dc.b	$f0,$0c,$01,$03,$02
00018872                            	sVoice		$04
00018872 E804                     M 	dc.b	$e8,$04
00018874                            	sCall		GameNo_Call11
00018874 F8                       M 	dc.b	$f8
00018875 0000                     M 	dc.w	gameno_call11-*-1
00018877 9103 9395 9180 0C91        	dc.b nE1, $03, nFs1, nAb1, nE1, nRst, $0C, nE1
0001887F 0603 0603 0695 0396        	dc.b $06, $03, $06, $03, $06, nAb1, $03, nA1
00018887 9895 800C 9506 0306        	dc.b nB1, nAb1, nRst, $0C, nAb1, $06, $03, $06
0001888F 0306 9603 989A 9680        	dc.b $03, $06, nA1, $03, nB1, nCs2, nA1, nRst
00018897 0C96 0603 0603 0693        	dc.b $0C, nA1, $06, $03, $06, $03, $06, nFs1
0001889F 0395 9693 800C 9318        	dc.b $03, nAb1, nA1, nFs1, nRst, $0C, nFs1, $18
000188A7 9503 9698 9509 0609        	dc.b nAb1, $03, nA1, nB1, nAb1, $09, $06, $09
000188AF A109 9506 8E03 9091        	dc.b nAb2, $09, nAb1, $06, nCs1, $03, nEb1, nE1
000188B7 9A09 0609 A609 9A06        	dc.b nCs2, $09, $06, $09, nCs3, $09, nCs2, $06
000188BF 9309 9F06 0393 0306        	dc.b nFs1, $09, nFs2, $06, $03, nFs1, $03, $06
000188C7 039F 9306 9F03 9306        	dc.b $03, nFs2, nFs1, $06, nFs2, $03, nFs1, $06
000188CF 9830                       	dc.b nB1, $30
000188D1                            	sCall		GameNo_Call11
000188D1 F8                       M 	dc.b	$f8
000188D2 0000                     M 	dc.w	gameno_call11-*-1
000188D4                            	sVoice		$03
000188D4 E803                     M 	dc.b	$e8,$03
000188D6 800C                       	dc.b nRst, $0C
000188D8                            	sVoice		$04
000188D8 E804                     M 	dc.b	$e8,$04
000188DA 960C 06A2 0303 9606        	dc.b nA1, $0C, $06, nA2, $03, $03, nA1, $06
000188E2 A203 03                    	dc.b nA2, $03, $03
000188E5                            
000188E5                            GameNo_Loop3:
000188E5 9506 A103 03               	dc.b nAb1, $06, nAb2, $03, $03
000188EA                            	sLoop		$02, $04, GameNo_Loop3
000188EA F702                     M 	dc.b	$f7,$02
000188EC FFF8                     M 	dc.w	gameno_loop3-*-1
000188EE 04                       M 	dc.b	$04
000188EF                            
000188EF                            GameNo_Loop4:
000188EF 9306 9F03 03               	dc.b nFs1, $06, nFs2, $03, $03
000188F4                            	sLoop		$02, $04, GameNo_Loop4
000188F4 F702                     M 	dc.b	$f7,$02
000188F6 FFF8                     M 	dc.w	gameno_loop4-*-1
000188F8 04                       M 	dc.b	$04
000188F9                            
000188F9                            GameNo_Loop5:
000188F9 9806 A403 03               	dc.b nB1, $06, nB2, $03, $03
000188FE                            	sLoop		$02, $04, GameNo_Loop5
000188FE F702                     M 	dc.b	$f7,$02
00018900 FFF8                     M 	dc.w	gameno_loop5-*-1
00018902 04                       M 	dc.b	$04
00018903                            
00018903                            GameNo_Loop6:
00018903 9606 A203 03               	dc.b nA1, $06, nA2, $03, $03
00018908                            	sLoop		$02, $04, GameNo_Loop6
00018908 F702                     M 	dc.b	$f7,$02
0001890A FFF8                     M 	dc.w	gameno_loop6-*-1
0001890C 04                       M 	dc.b	$04
0001890D                            
0001890D                            GameNo_Loop7:
0001890D 9306 9F03 03               	dc.b nFs1, $06, nFs2, $03, $03
00018912                            	sLoop		$02, $04, GameNo_Loop7
00018912 F702                     M 	dc.b	$f7,$02
00018914 FFF8                     M 	dc.w	gameno_loop7-*-1
00018916 04                       M 	dc.b	$04
00018917                            	saTranspose	$01
00018917 E401                     M 	dc.b	$e4,$01
00018919                            	sLoop		$01, $03, GameNo_Loop7
00018919 F701                     M 	dc.b	$f7,$01
0001891B FFF1                     M 	dc.w	gameno_loop7-*-1
0001891D 03                       M 	dc.b	$03
0001891E                            	saTranspose	$FD
0001891E E4FD                     M 	dc.b	$e4,$fd
00018920                            	sJump		GameNo_Jump4
00018920 F6                       M 	dc.b	$f6
00018921 FF4B                     M 	dc.w	gameno_jump4-*-1
00018923                            
00018923                            GameNo_Call11:
00018923 9106 9D03 03               	dc.b nE1, $06, nE2, $03, $03
00018928                            	sLoop		$02, $04, GameNo_Call11
00018928 F702                     M 	dc.b	$f7,$02
0001892A FFF8                     M 	dc.w	gameno_call11-*-1
0001892C 04                       M 	dc.b	$04
0001892D                            
0001892D                            GameNo_Loop1:
0001892D 9506 A103 03               	dc.b nAb1, $06, nAb2, $03, $03
00018932                            	sLoop		$02, $04, GameNo_Loop1
00018932 F702                     M 	dc.b	$f7,$02
00018934 FFF8                     M 	dc.w	gameno_loop1-*-1
00018936 04                       M 	dc.b	$04
00018937                            
00018937                            GameNo_Loop2:
00018937 9606 A203 03               	dc.b nA1, $06, nA2, $03, $03
0001893C                            	sLoop		$02, $04, GameNo_Loop2
0001893C F702                     M 	dc.b	$f7,$02
0001893E FFF8                     M 	dc.w	gameno_loop2-*-1
00018940 04                       M 	dc.b	$04
00018941 9806 A403 0398 06A4        	dc.b nB1, $06, nB2, $03, $03, nB1, $06, nB2
00018949 0303 9606 A295 A1          	dc.b $03, $03, nA1, $06, nA2, nAb1, nAb2
00018950                            	sLoop		$01, $02, GameNo_Call11
00018950 F701                     M 	dc.b	$f7,$01
00018952 FFD0                     M 	dc.w	gameno_call11-*-1
00018954 02                       M 	dc.b	$02
00018955                            	sRet
00018955 F9                       M 	dc.b	$f9
00018956                            
00018956                            GameNo_DAC1:
00018956                            	sStop
00018956 F5                       M 	dc.b	$f5
00018957                            
00018957                            GameNo_DAC2:
00018957                            	sCall		GameNo_Call20
00018957 F8                       M 	dc.b	$f8
00018958 0000                     M 	dc.w	gameno_call20-*-1
0001895A                            	sCall		GameNo_Call23
0001895A F8                       M 	dc.b	$f8
0001895B 0000                     M 	dc.w	gameno_call23-*-1
0001895D                            	sCall		GameNo_Call20
0001895D F8                       M 	dc.b	$f8
0001895E 0000                     M 	dc.w	gameno_call20-*-1
00018960                            	sCall		GameNo_Call24
00018960 F8                       M 	dc.b	$f8
00018961 0000                     M 	dc.w	gameno_call24-*-1
00018963                            	sJump		GameNo_DAC2
00018963 F6                       M 	dc.b	$f6
00018964 FFF2                     M 	dc.w	gameno_dac2-*-1
00018966                            
00018966                            GameNo_Call20:
00018966                            	sCall		GameNo_Call21
00018966 F8                       M 	dc.b	$f8
00018967 0000                     M 	dc.w	gameno_call21-*-1
00018969                            	sCall		GameNo_Call22
00018969 F8                       M 	dc.b	$f8
0001896A 0000                     M 	dc.w	gameno_call22-*-1
0001896C                            	sLoop		$00, $06, GameNo_Call20
0001896C F700                     M 	dc.b	$f7,$00
0001896E FFF7                     M 	dc.w	gameno_call20-*-1
00018970 06                       M 	dc.b	$06
00018971                            	sRet
00018971 F9                       M 	dc.b	$f9
00018972                            
00018972                            GameNo_Call23:
00018972                            	sCall		GameNo_Call21
00018972 F8                       M 	dc.b	$f8
00018973 0000                     M 	dc.w	gameno_call21-*-1
00018975                            	sCall		GameNo_Call22
00018975 F8                       M 	dc.b	$f8
00018976 0000                     M 	dc.w	gameno_call22-*-1
00018978                            
00018978 830C 0303 0303             	dc.b dSnare, $0C, $03, $03, $03, $03
0001897E                            	sRet
0001897E F9                       M 	dc.b	$f9
0001897F                            
0001897F                            GameNo_Call21:
0001897F 8206                       	dc.b dLowKick, $06
00018981                            	saVol	$04
00018981 ED04                     M 	dc.b	$ed,$04
00018983 87                         	dc.b dLowTom
00018984                            	saVol	-$04
00018984 EDFC                     M 	dc.b	$ed,-$04
00018986                            	sRet
00018986 F9                       M 	dc.b	$f9
00018987                            
00018987                            GameNo_Call22:
00018987 8306                       	dc.b dSnare, $06
00018989                            	saVol	$04
00018989 ED04                     M 	dc.b	$ed,$04
0001898B 87                         	dc.b dLowTom
0001898C                            	saVol	-$04
0001898C EDFC                     M 	dc.b	$ed,-$04
0001898E                            	sRet
0001898E F9                       M 	dc.b	$f9
0001898F                            
0001898F                            GameNo_Call24:
0001898F 8303 0303 03               	dc.b dSnare, $03, $03, $03, $03
00018994                            	sLoop		$02, $04, GameNo_Call24
00018994 F702                     M 	dc.b	$f7,$02
00018996 FFF8                     M 	dc.w	gameno_call24-*-1
00018998 04                       M 	dc.b	$04
00018999                            	sRet
00018999 F9                       M 	dc.b	$f9
0001899A                            
0001899A                            GameNo_FM5:
0001899A                            	;sRawFreq	$00
0001899A                            	;sPitchSlide	$00
0001899A                            
0001899A                            GameNo_Jump5:
0001899A                            	sCall		GameNo_Call12
0001899A F8                       M 	dc.b	$f8
0001899B 0000                     M 	dc.w	gameno_call12-*-1
0001899D                            	sCall		GameNo_Call15
0001899D F8                       M 	dc.b	$f8
0001899E 0000                     M 	dc.w	gameno_call15-*-1
000189A0                            	sCall		GameNo_Call12
000189A0 F8                       M 	dc.b	$f8
000189A1 0000                     M 	dc.w	gameno_call12-*-1
000189A3                            	sCall		GameNo_Call16
000189A3 F8                       M 	dc.b	$f8
000189A4 0000                     M 	dc.w	gameno_call16-*-1
000189A6                            	sJump		GameNo_Jump5
000189A6 F6                       M 	dc.b	$f6
000189A7 FFF2                     M 	dc.w	gameno_jump5-*-1
000189A9                            
000189A9                            GameNo_Call12:
000189A9                            	sCall		GameNo_Call13
000189A9 F8                       M 	dc.b	$f8
000189AA 0000                     M 	dc.w	gameno_call13-*-1
000189AC                            	sCall		GameNo_Call14
000189AC F8                       M 	dc.b	$f8
000189AD 0000                     M 	dc.w	gameno_call14-*-1
000189AF                            	sCall		GameNo_Call13
000189AF F8                       M 	dc.b	$f8
000189B0 0000                     M 	dc.w	gameno_call13-*-1
000189B2                            	sCall		GameNo_Call14
000189B2 F8                       M 	dc.b	$f8
000189B3 0000                     M 	dc.w	gameno_call14-*-1
000189B5                            	sLoop		$02, $03, GameNo_Call12
000189B5 F702                     M 	dc.b	$f7,$02
000189B7 FFF1                     M 	dc.w	gameno_call12-*-1
000189B9 03                       M 	dc.b	$03
000189BA                            	sRet
000189BA F9                       M 	dc.b	$f9
000189BB                            
000189BB                            GameNo_Call13:
000189BB                            	ssMod68k	$01, $01, $E2, $30
000189BB F001 01E2 30             M 	dc.b	$f0,$01,$01,$e2,$30
000189C0                            	sPan		spCenter, $00
000189C0 E0C0                     M 	dc.b	$e0,spcenter|$00
000189C2                            	sVoice		$00
000189C2 E800                     M 	dc.b	$e8,$00
000189C4 A206                       	dc.b nA2, $06
000189C6                            	;sModEnv		$E0
000189C6                            ;	dc.b $40
000189C6                            	sVoice		$01
000189C6 E801                     M 	dc.b	$e8,$01
000189C8 CB                         	dc.b nD6
000189C9                            	sRet
000189C9 F9                       M 	dc.b	$f9
000189CA                            
000189CA                            GameNo_Call14:
000189CA                            	;sModEnv		$E0
000189CA                            ;	dc.b nEb5
000189CA                            	sVoice		$02
000189CA E802                     M 	dc.b	$e8,$02
000189CC 9D06                       	dc.b nE2, $06
000189CE                            	;sModEnv		$E0
000189CE                            ;	dc.b nRst
000189CE                            	sVoice		$01
000189CE E801                     M 	dc.b	$e8,$01
000189D0 CB                         	dc.b nD6
000189D1                            	sRet
000189D1 F9                       M 	dc.b	$f9
000189D2                            
000189D2                            GameNo_Call15:
000189D2                            	sCall		GameNo_Call13
000189D2 F8                       M 	dc.b	$f8
000189D3 FFE7                     M 	dc.w	gameno_call13-*-1
000189D5                            	sCall		GameNo_Call14
000189D5 F8                       M 	dc.b	$f8
000189D6 FFF3                     M 	dc.w	gameno_call14-*-1
000189D8                            	;sModEnv		$E0
000189D8                            ;	dc.b nEb5
000189D8                            	sVoice		$02
000189D8 E802                     M 	dc.b	$e8,$02
000189DA 9D0C 03                    	dc.b nE2, $0C, $03
000189DD                            	saVol		$04
000189DD ED04                     M 	dc.b	$ed,$04
000189DF 0303 03                    	dc.b $03, $03, $03
000189E2                            	saVol		$FC
000189E2 EDFC                     M 	dc.b	$ed,$fc
000189E4                            	sRet
000189E4 F9                       M 	dc.b	$f9
000189E5                            
000189E5                            GameNo_Call16:
000189E5                            	;sModEnv		$E0
000189E5                            ;	dc.b nEb5
000189E5                            	sVoice		$02
000189E5 E802                     M 	dc.b	$e8,$02
000189E7 9D03                       	dc.b nE2, $03
000189E9                            	saVol		$04
000189E9 ED04                     M 	dc.b	$ed,$04
000189EB 0303 03                    	dc.b $03, $03, $03
000189EE                            	saVol		$FC
000189EE EDFC                     M 	dc.b	$ed,$fc
000189F0                            	sLoop		$02, $04, GameNo_Call16
000189F0 F702                     M 	dc.b	$f7,$02
000189F2 FFF2                     M 	dc.w	gameno_call16-*-1
000189F4 04                       M 	dc.b	$04
000189F5                            	sRet
000189F5 F9                       M 	dc.b	$f9
000189F6                            
000189F6                            GameNo_PSG3:
000189F6                            	;sRawFreq	$00
000189F6                            	;sPitchSlide	$00
000189F6                            	sNoisePSG	$E4
000189F6 F3E4                     M 	dc.b	$f3,$e4
000189F8                            
000189F8                            GameNo_Jump8:
000189F8                            	sNoteTimeOut	$02
000189F8 FD02                     M 	dc.b	$fd,$02
000189FA A503                       	dc.b nC3, $03
000189FC                            	sNoteTimeOut	$01
000189FC FD01                     M 	dc.b	$fd,$01
000189FE 0303 03                    	dc.b $03, $03, $03
00018A01                            	sJump		GameNo_Jump8
00018A01 F6                       M 	dc.b	$f6
00018A02 FFF5                     M 	dc.w	gameno_jump8-*-1
00018A04 =00000012                M a	=	a+1
00018A04                          M 	even
00018A04                          M b	equs	dmus12
00018A04                          M _mus_towerpuppet
00018A04                          M dmusa12	include	"driver/music/towerpuppet.asm"
00018A04                            TowerPuppet_Header:
00018A04                            	sHeaderInit
00018A04 =00018A04                M spointzero	=	*
00018A04 =00000000                M spatnum	=	0
00018A04                            	sHeaderTempo	$02, $08
00018A04 0108                     M 	dc.b	$02-1,$08
00018A06                            	sHeaderCh	$05, $03
00018A06 04                       M 	dc.b	$05-1
00018A07 02                       M 	dc.b	$03-1
00018A08                            	sHeaderDAC	TowerPuppet_DAC1, $08
00018A08 0000                     M 	dc.w	towerpuppet_dac1-spointzero
00018A0A 08                       M 	dc.b	$08
00018A0B 00                       M 	dc.b	$00
00018A0C                            	sHeaderDAC	TowerPuppet_DAC2, $08
00018A0C 0000                     M 	dc.w	towerpuppet_dac2-spointzero
00018A0E 08                       M 	dc.b	$08
00018A0F 00                       M 	dc.b	$00
00018A10                            	sHeaderFM	TowerPuppet_FM1, $00, $10
00018A10 0000                     M 	dc.w	towerpuppet_fm1-spointzero
00018A12 0010                     M 	dc.b	$00,$10
00018A14                            	sHeaderFM	TowerPuppet_FM2, $00, $0A
00018A14 0000                     M 	dc.w	towerpuppet_fm2-spointzero
00018A16 000A                     M 	dc.b	$00,$0a
00018A18                            	sHeaderFM	TowerPuppet_FM3, $00, $10
00018A18 0000                     M 	dc.w	towerpuppet_fm3-spointzero
00018A1A 0010                     M 	dc.b	$00,$10
00018A1C                            	sHeaderFM	TowerPuppet_FM4, $00, $10
00018A1C 0000                     M 	dc.w	towerpuppet_fm4-spointzero
00018A1E 0010                     M 	dc.b	$00,$10
00018A20                            	sHeaderFM	TowerPuppet_FM5, $00, $1F
00018A20 0000                     M 	dc.w	towerpuppet_fm5-spointzero
00018A22 001F                     M 	dc.b	$00,$1f
00018A24                            	sHeaderPSG	TowerPuppet_PSG1, $DC, $01, $00, v00
00018A24 0000                     M 	dc.w	towerpuppet_psg1-spointzero
00018A26 DC01 0000                M 	dc.b	$dc,$01,$00,v00
00018A2A                            	sHeaderPSG	TowerPuppet_PSG2, $DC, $03, $00, v00
00018A2A 0000                     M 	dc.w	towerpuppet_psg2-spointzero
00018A2C DC03 0000                M 	dc.b	$dc,$03,$00,v00
00018A30                            	sHeaderPSG	TowerPuppet_PSG3, $00, $01, $00, vDyHe03
00018A30 0000                     M 	dc.w	towerpuppet_psg3-spointzero
00018A32 0001 000E                M 	dc.b	$00,$01,$00,vdyhe03
00018A36                            
00018A36                            	; Patch $00
00018A36                            	; $06
00018A36                            	; $01, $33, $71, $32,	$0A, $88, $4C, $52
00018A36                            	; $00, $05, $00, $09,	$01, $00, $01, $00
00018A36                            	; $03, $03, $24, $05,	$4D, $85, $80, $81
00018A36                            	spAlgorithm	$06
00018A36 =00000001                M spatnum	=	spatnum+1
00018A36 =00000006                M spal	=	val
00018A36                            	spFeedback	$00
00018A36 =00000000                M spfe	=	val
00018A36                            	spDetune	$00, $07, $03, $03
00018A36 =00000000                M spde1	=	op1
00018A36 =00000007                M spde2	=	op2
00018A36 =00000003                M spde3	=	op3
00018A36 =00000003                M spde4	=	op4
00018A36                            	spMultiple	$01, $01, $03, $02
00018A36 =00000001                M spmu1	=	op1
00018A36 =00000001                M spmu2	=	op2
00018A36 =00000003                M spmu3	=	op3
00018A36 =00000002                M spmu4	=	op4
00018A36                            	spRateScale	$00, $01, $02, $01
00018A36 =00000000                M sprs1	=	op1
00018A36 =00000001                M sprs2	=	op2
00018A36 =00000002                M sprs3	=	op3
00018A36 =00000001                M sprs4	=	op4
00018A36                            	spAttackRt	$0A, $0C, $08, $12
00018A36 =0000000A                M spar1	=	op1
00018A36 =0000000C                M spar2	=	op2
00018A36 =00000008                M spar3	=	op3
00018A36 =00000012                M spar4	=	op4
00018A36                            	spAmpMod	$00, $00, $00, $00
00018A36 =00000000                M spam1	=	op1
00018A36 =00000000                M spam2	=	op2
00018A36 =00000000                M spam3	=	op3
00018A36 =00000000                M spam4	=	op4
00018A36                            	spSustainRt	$00, $00, $05, $09
00018A36 =00000000                M spsr1	=	op1
00018A36 =00000000                M spsr2	=	op2
00018A36 =00000005                M spsr3	=	op3
00018A36 =00000009                M spsr4	=	op4
00018A36                            	spSustainLv	$00, $02, $00, $00
00018A36 =00000000                M spsl1	=	op1
00018A36 =00000002                M spsl2	=	op2
00018A36 =00000000                M spsl3	=	op3
00018A36 =00000000                M spsl4	=	op4
00018A36                            	spDecayRt	$01, $01, $00, $00
00018A36 =00000001                M spdr1	=	op1
00018A36 =00000001                M spdr2	=	op2
00018A36 =00000000                M spdr3	=	op3
00018A36 =00000000                M spdr4	=	op4
00018A36                            	spReleaseRt	$03, $04, $03, $05
00018A36 =00000003                M sprr1	=	op1
00018A36 =00000004                M sprr2	=	op2
00018A36 =00000003                M sprr3	=	op3
00018A36 =00000005                M sprr4	=	op4
00018A36                            	spSSGEG		$00, $00, $00, $00
00018A36 =00000000                M spss1	=	op1
00018A36 =00000000                M spss2	=	op2
00018A36 =00000000                M spss3	=	op3
00018A36 =00000000                M spss4	=	op4
00018A36                            	spTotalLv	$4D, $00, $05, $01
00018A36 =0000004D                M sptl1	=	op1
00018A36 =00000000                M sptl2	=	op2
00018A36 =00000005                M sptl3	=	op3
00018A36 =00000001                M sptl4	=	op4
00018A36 06                       M 	dc.b	(spfe<<3)+spal
00018A37 =00000080                M sptlmask4	set	$80
00018A37 =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
00018A37 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00018A37 =00000000                M sptlmask1	set	((spal=7)<<7)
00018A37 0133 7132                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00018A3B 0A88 4C52                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00018A3F 0005 0009                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00018A43 0100 0100                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00018A47 0303 2405                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00018A4B 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00018A4F 4D85 8081                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00018A53 4E41 54                  M 	dc.b	'NAT'
00018A56                            
00018A56                            	; Patch $01
00018A56                            	; $3D
00018A56                            	; $01, $21, $51, $01,	$12, $14, $14, $0F
00018A56                            	; $0A, $05, $05, $05,	$00, $00, $00, $00
00018A56                            	; $26, $28, $28, $18,	$19, $80, $80, $80
00018A56                            	spAlgorithm	$05
00018A56 =00000002                M spatnum	=	spatnum+1
00018A56 =00000005                M spal	=	val
00018A56                            	spFeedback	$07
00018A56 =00000007                M spfe	=	val
00018A56                            	spDetune	$00, $05, $02, $00
00018A56 =00000000                M spde1	=	op1
00018A56 =00000005                M spde2	=	op2
00018A56 =00000002                M spde3	=	op3
00018A56 =00000000                M spde4	=	op4
00018A56                            	spMultiple	$01, $01, $01, $01
00018A56 =00000001                M spmu1	=	op1
00018A56 =00000001                M spmu2	=	op2
00018A56 =00000001                M spmu3	=	op3
00018A56 =00000001                M spmu4	=	op4
00018A56                            	spRateScale	$00, $00, $00, $00
00018A56 =00000000                M sprs1	=	op1
00018A56 =00000000                M sprs2	=	op2
00018A56 =00000000                M sprs3	=	op3
00018A56 =00000000                M sprs4	=	op4
00018A56                            	spAttackRt	$12, $14, $14, $0F
00018A56 =00000012                M spar1	=	op1
00018A56 =00000014                M spar2	=	op2
00018A56 =00000014                M spar3	=	op3
00018A56 =0000000F                M spar4	=	op4
00018A56                            	spAmpMod	$00, $00, $00, $00
00018A56 =00000000                M spam1	=	op1
00018A56 =00000000                M spam2	=	op2
00018A56 =00000000                M spam3	=	op3
00018A56 =00000000                M spam4	=	op4
00018A56                            	spSustainRt	$0A, $05, $05, $05
00018A56 =0000000A                M spsr1	=	op1
00018A56 =00000005                M spsr2	=	op2
00018A56 =00000005                M spsr3	=	op3
00018A56 =00000005                M spsr4	=	op4
00018A56                            	spSustainLv	$02, $02, $02, $01
00018A56 =00000002                M spsl1	=	op1
00018A56 =00000002                M spsl2	=	op2
00018A56 =00000002                M spsl3	=	op3
00018A56 =00000001                M spsl4	=	op4
00018A56                            	spDecayRt	$00, $00, $00, $00
00018A56 =00000000                M spdr1	=	op1
00018A56 =00000000                M spdr2	=	op2
00018A56 =00000000                M spdr3	=	op3
00018A56 =00000000                M spdr4	=	op4
00018A56                            	spReleaseRt	$06, $08, $08, $08
00018A56 =00000006                M sprr1	=	op1
00018A56 =00000008                M sprr2	=	op2
00018A56 =00000008                M sprr3	=	op3
00018A56 =00000008                M sprr4	=	op4
00018A56                            	spSSGEG		$00, $00, $00, $00
00018A56 =00000000                M spss1	=	op1
00018A56 =00000000                M spss2	=	op2
00018A56 =00000000                M spss3	=	op3
00018A56 =00000000                M spss4	=	op4
00018A56                            	spTotalLv	$19, $00, $00, $00
00018A56 =00000019                M sptl1	=	op1
00018A56 =00000000                M sptl2	=	op2
00018A56 =00000000                M sptl3	=	op3
00018A56 =00000000                M sptl4	=	op4
00018A56 3D                       M 	dc.b	(spfe<<3)+spal
00018A57 =00000080                M sptlmask4	set	$80
00018A57 =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
00018A57 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00018A57 =00000000                M sptlmask1	set	((spal=7)<<7)
00018A57 0121 5101                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00018A5B 1214 140F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00018A5F 0A05 0505                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00018A63 0000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00018A67 2628 2818                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00018A6B 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00018A6F 1980 8080                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00018A73 4E41 54                  M 	dc.b	'NAT'
00018A76                            
00018A76                            	; Patch $02
00018A76                            	; $16
00018A76                            	; $7A, $74, $3C, $31,	$1F, $1F, $1F, $1F
00018A76                            	; $0A, $07, $0C, $06,	$07, $0A, $07, $05
00018A76                            	; $25, $A7, $A7, $55,	$14, $85, $8A, $80
00018A76                            	spAlgorithm	$06
00018A76 =00000003                M spatnum	=	spatnum+1
00018A76 =00000006                M spal	=	val
00018A76                            	spFeedback	$02
00018A76 =00000002                M spfe	=	val
00018A76                            	spDetune	$07, $03, $07, $03
00018A76 =00000007                M spde1	=	op1
00018A76 =00000003                M spde2	=	op2
00018A76 =00000007                M spde3	=	op3
00018A76 =00000003                M spde4	=	op4
00018A76                            	spMultiple	$0A, $0C, $04, $01
00018A76 =0000000A                M spmu1	=	op1
00018A76 =0000000C                M spmu2	=	op2
00018A76 =00000004                M spmu3	=	op3
00018A76 =00000001                M spmu4	=	op4
00018A76                            	spRateScale	$00, $00, $00, $00
00018A76 =00000000                M sprs1	=	op1
00018A76 =00000000                M sprs2	=	op2
00018A76 =00000000                M sprs3	=	op3
00018A76 =00000000                M sprs4	=	op4
00018A76                            	spAttackRt	$1F, $1F, $1F, $1F
00018A76 =0000001F                M spar1	=	op1
00018A76 =0000001F                M spar2	=	op2
00018A76 =0000001F                M spar3	=	op3
00018A76 =0000001F                M spar4	=	op4
00018A76                            	spAmpMod	$00, $00, $00, $00
00018A76 =00000000                M spam1	=	op1
00018A76 =00000000                M spam2	=	op2
00018A76 =00000000                M spam3	=	op3
00018A76 =00000000                M spam4	=	op4
00018A76                            	spSustainRt	$0A, $0C, $07, $06
00018A76 =0000000A                M spsr1	=	op1
00018A76 =0000000C                M spsr2	=	op2
00018A76 =00000007                M spsr3	=	op3
00018A76 =00000006                M spsr4	=	op4
00018A76                            	spSustainLv	$02, $0A, $0A, $05
00018A76 =00000002                M spsl1	=	op1
00018A76 =0000000A                M spsl2	=	op2
00018A76 =0000000A                M spsl3	=	op3
00018A76 =00000005                M spsl4	=	op4
00018A76                            	spDecayRt	$07, $07, $0A, $05
00018A76 =00000007                M spdr1	=	op1
00018A76 =00000007                M spdr2	=	op2
00018A76 =0000000A                M spdr3	=	op3
00018A76 =00000005                M spdr4	=	op4
00018A76                            	spReleaseRt	$05, $07, $07, $05
00018A76 =00000005                M sprr1	=	op1
00018A76 =00000007                M sprr2	=	op2
00018A76 =00000007                M sprr3	=	op3
00018A76 =00000005                M sprr4	=	op4
00018A76                            	spSSGEG		$00, $00, $00, $00
00018A76 =00000000                M spss1	=	op1
00018A76 =00000000                M spss2	=	op2
00018A76 =00000000                M spss3	=	op3
00018A76 =00000000                M spss4	=	op4
00018A76                            	spTotalLv	$14, $0A, $05, $00
00018A76 =00000014                M sptl1	=	op1
00018A76 =0000000A                M sptl2	=	op2
00018A76 =00000005                M sptl3	=	op3
00018A76 =00000000                M sptl4	=	op4
00018A76 16                       M 	dc.b	(spfe<<3)+spal
00018A77 =00000080                M sptlmask4	set	$80
00018A77 =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
00018A77 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00018A77 =00000000                M sptlmask1	set	((spal=7)<<7)
00018A77 7A74 3C31                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00018A7B 1F1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00018A7F 0A07 0C06                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00018A83 070A 0705                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00018A87 25A7 A755                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00018A8B 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00018A8F 1485 8A80                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00018A93 4E41 54                  M 	dc.b	'NAT'
00018A96                            
00018A96                            	; Patch $03
00018A96                            	; $3B
00018A96                            	; $00, $00, $00, $01,	$99, $9F, $1F, $1F
00018A96                            	; $0F, $0F, $14, $0F,	$00, $00, $00, $00
00018A96                            	; $F8, $F8, $F8, $FA,	$28, $1E, $05, $80
00018A96                            	spAlgorithm	$03
00018A96 =00000004                M spatnum	=	spatnum+1
00018A96 =00000003                M spal	=	val
00018A96                            	spFeedback	$07
00018A96 =00000007                M spfe	=	val
00018A96                            	spDetune	$00, $00, $00, $00
00018A96 =00000000                M spde1	=	op1
00018A96 =00000000                M spde2	=	op2
00018A96 =00000000                M spde3	=	op3
00018A96 =00000000                M spde4	=	op4
00018A96                            	spMultiple	$00, $00, $00, $01
00018A96 =00000000                M spmu1	=	op1
00018A96 =00000000                M spmu2	=	op2
00018A96 =00000000                M spmu3	=	op3
00018A96 =00000001                M spmu4	=	op4
00018A96                            	spRateScale	$02, $00, $02, $00
00018A96 =00000002                M sprs1	=	op1
00018A96 =00000000                M sprs2	=	op2
00018A96 =00000002                M sprs3	=	op3
00018A96 =00000000                M sprs4	=	op4
00018A96                            	spAttackRt	$19, $1F, $1F, $1F
00018A96 =00000019                M spar1	=	op1
00018A96 =0000001F                M spar2	=	op2
00018A96 =0000001F                M spar3	=	op3
00018A96 =0000001F                M spar4	=	op4
00018A96                            	spAmpMod	$00, $00, $00, $00
00018A96 =00000000                M spam1	=	op1
00018A96 =00000000                M spam2	=	op2
00018A96 =00000000                M spam3	=	op3
00018A96 =00000000                M spam4	=	op4
00018A96                            	spSustainRt	$0F, $14, $0F, $0F
00018A96 =0000000F                M spsr1	=	op1
00018A96 =00000014                M spsr2	=	op2
00018A96 =0000000F                M spsr3	=	op3
00018A96 =0000000F                M spsr4	=	op4
00018A96                            	spSustainLv	$0F, $0F, $0F, $0F
00018A96 =0000000F                M spsl1	=	op1
00018A96 =0000000F                M spsl2	=	op2
00018A96 =0000000F                M spsl3	=	op3
00018A96 =0000000F                M spsl4	=	op4
00018A96                            	spDecayRt	$00, $00, $00, $00
00018A96 =00000000                M spdr1	=	op1
00018A96 =00000000                M spdr2	=	op2
00018A96 =00000000                M spdr3	=	op3
00018A96 =00000000                M spdr4	=	op4
00018A96                            	spReleaseRt	$08, $08, $08, $0A
00018A96 =00000008                M sprr1	=	op1
00018A96 =00000008                M sprr2	=	op2
00018A96 =00000008                M sprr3	=	op3
00018A96 =0000000A                M sprr4	=	op4
00018A96                            	spSSGEG		$00, $00, $00, $00
00018A96 =00000000                M spss1	=	op1
00018A96 =00000000                M spss2	=	op2
00018A96 =00000000                M spss3	=	op3
00018A96 =00000000                M spss4	=	op4
00018A96                            	spTotalLv	$28, $05, $1E, $00
00018A96 =00000028                M sptl1	=	op1
00018A96 =00000005                M sptl2	=	op2
00018A96 =0000001E                M sptl3	=	op3
00018A96 =00000000                M sptl4	=	op4
00018A96 3B                       M 	dc.b	(spfe<<3)+spal
00018A97 =00000080                M sptlmask4	set	$80
00018A97 =00000000                M sptlmask2	set	((spal>=5)<<7)
00018A97 =00000000                M sptlmask3	set	((spal>=4)<<7)
00018A97 =00000000                M sptlmask1	set	((spal=7)<<7)
00018A97 0000 0001                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00018A9B 999F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00018A9F 0F0F 140F                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00018AA3 0000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00018AA7 F8F8 F8FA                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00018AAB 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00018AAF 281E 0580                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00018AB3 4E41 54                  M 	dc.b	'NAT'
00018AB6                            
00018AB6                            	; Patch $04
00018AB6                            	; $3A
00018AB6                            	; $31, $02, $02, $72,	$8F, $8F, $4F, $4D
00018AB6                            	; $09, $09, $00, $06,	$00, $00, $00, $00
00018AB6                            	; $15, $F5, $05, $08,	$17, $1E, $16, $80
00018AB6                            	spAlgorithm	$02
00018AB6 =00000005                M spatnum	=	spatnum+1
00018AB6 =00000002                M spal	=	val
00018AB6                            	spFeedback	$07
00018AB6 =00000007                M spfe	=	val
00018AB6                            	spDetune	$03, $00, $00, $07
00018AB6 =00000003                M spde1	=	op1
00018AB6 =00000000                M spde2	=	op2
00018AB6 =00000000                M spde3	=	op3
00018AB6 =00000007                M spde4	=	op4
00018AB6                            	spMultiple	$01, $02, $02, $02
00018AB6 =00000001                M spmu1	=	op1
00018AB6 =00000002                M spmu2	=	op2
00018AB6 =00000002                M spmu3	=	op3
00018AB6 =00000002                M spmu4	=	op4
00018AB6                            	spRateScale	$02, $01, $02, $01
00018AB6 =00000002                M sprs1	=	op1
00018AB6 =00000001                M sprs2	=	op2
00018AB6 =00000002                M sprs3	=	op3
00018AB6 =00000001                M sprs4	=	op4
00018AB6                            	spAttackRt	$0F, $0F, $0F, $0D
00018AB6 =0000000F                M spar1	=	op1
00018AB6 =0000000F                M spar2	=	op2
00018AB6 =0000000F                M spar3	=	op3
00018AB6 =0000000D                M spar4	=	op4
00018AB6                            	spAmpMod	$00, $00, $00, $00
00018AB6 =00000000                M spam1	=	op1
00018AB6 =00000000                M spam2	=	op2
00018AB6 =00000000                M spam3	=	op3
00018AB6 =00000000                M spam4	=	op4
00018AB6                            	spSustainRt	$09, $00, $09, $06
00018AB6 =00000009                M spsr1	=	op1
00018AB6 =00000000                M spsr2	=	op2
00018AB6 =00000009                M spsr3	=	op3
00018AB6 =00000006                M spsr4	=	op4
00018AB6                            	spSustainLv	$01, $00, $0F, $00
00018AB6 =00000001                M spsl1	=	op1
00018AB6 =00000000                M spsl2	=	op2
00018AB6 =0000000F                M spsl3	=	op3
00018AB6 =00000000                M spsl4	=	op4
00018AB6                            	spDecayRt	$00, $00, $00, $00
00018AB6 =00000000                M spdr1	=	op1
00018AB6 =00000000                M spdr2	=	op2
00018AB6 =00000000                M spdr3	=	op3
00018AB6 =00000000                M spdr4	=	op4
00018AB6                            	spReleaseRt	$05, $05, $05, $08
00018AB6 =00000005                M sprr1	=	op1
00018AB6 =00000005                M sprr2	=	op2
00018AB6 =00000005                M sprr3	=	op3
00018AB6 =00000008                M sprr4	=	op4
00018AB6                            	spSSGEG		$00, $00, $00, $00
00018AB6 =00000000                M spss1	=	op1
00018AB6 =00000000                M spss2	=	op2
00018AB6 =00000000                M spss3	=	op3
00018AB6 =00000000                M spss4	=	op4
00018AB6                            	spTotalLv	$17, $16, $1E, $00
00018AB6 =00000017                M sptl1	=	op1
00018AB6 =00000016                M sptl2	=	op2
00018AB6 =0000001E                M sptl3	=	op3
00018AB6 =00000000                M sptl4	=	op4
00018AB6 3A                       M 	dc.b	(spfe<<3)+spal
00018AB7 =00000080                M sptlmask4	set	$80
00018AB7 =00000000                M sptlmask2	set	((spal>=5)<<7)
00018AB7 =00000000                M sptlmask3	set	((spal>=4)<<7)
00018AB7 =00000000                M sptlmask1	set	((spal=7)<<7)
00018AB7 3102 0272                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00018ABB 8F8F 4F4D                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00018ABF 0909 0006                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00018AC3 0000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00018AC7 15F5 0508                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00018ACB 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00018ACF 171E 1680                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00018AD3 4E41 54                  M 	dc.b	'NAT'
00018AD6                            
00018AD6                            	; Patch $05
00018AD6                            	; $30
00018AD6                            	; $30, $3A, $30, $30,	$9E, $D8, $DC, $DC
00018AD6                            	; $0E, $0A, $04, $05,	$08, $08, $08, $08
00018AD6                            	; $B6, $B6, $B6, $B6,	$14, $2F, $14, $80
00018AD6                            	spAlgorithm	$00
00018AD6 =00000006                M spatnum	=	spatnum+1
00018AD6 =00000000                M spal	=	val
00018AD6                            	spFeedback	$06
00018AD6 =00000006                M spfe	=	val
00018AD6                            	spDetune	$03, $03, $03, $03
00018AD6 =00000003                M spde1	=	op1
00018AD6 =00000003                M spde2	=	op2
00018AD6 =00000003                M spde3	=	op3
00018AD6 =00000003                M spde4	=	op4
00018AD6                            	spMultiple	$00, $00, $0A, $00
00018AD6 =00000000                M spmu1	=	op1
00018AD6 =00000000                M spmu2	=	op2
00018AD6 =0000000A                M spmu3	=	op3
00018AD6 =00000000                M spmu4	=	op4
00018AD6                            	spRateScale	$02, $03, $03, $03
00018AD6 =00000002                M sprs1	=	op1
00018AD6 =00000003                M sprs2	=	op2
00018AD6 =00000003                M sprs3	=	op3
00018AD6 =00000003                M sprs4	=	op4
00018AD6                            	spAttackRt	$1E, $1C, $18, $1C
00018AD6 =0000001E                M spar1	=	op1
00018AD6 =0000001C                M spar2	=	op2
00018AD6 =00000018                M spar3	=	op3
00018AD6 =0000001C                M spar4	=	op4
00018AD6                            	spAmpMod	$00, $00, $00, $00
00018AD6 =00000000                M spam1	=	op1
00018AD6 =00000000                M spam2	=	op2
00018AD6 =00000000                M spam3	=	op3
00018AD6 =00000000                M spam4	=	op4
00018AD6                            	spSustainRt	$0E, $04, $0A, $05
00018AD6 =0000000E                M spsr1	=	op1
00018AD6 =00000004                M spsr2	=	op2
00018AD6 =0000000A                M spsr3	=	op3
00018AD6 =00000005                M spsr4	=	op4
00018AD6                            	spSustainLv	$0B, $0B, $0B, $0B
00018AD6 =0000000B                M spsl1	=	op1
00018AD6 =0000000B                M spsl2	=	op2
00018AD6 =0000000B                M spsl3	=	op3
00018AD6 =0000000B                M spsl4	=	op4
00018AD6                            	spDecayRt	$08, $08, $08, $08
00018AD6 =00000008                M spdr1	=	op1
00018AD6 =00000008                M spdr2	=	op2
00018AD6 =00000008                M spdr3	=	op3
00018AD6 =00000008                M spdr4	=	op4
00018AD6                            	spReleaseRt	$06, $06, $06, $06
00018AD6 =00000006                M sprr1	=	op1
00018AD6 =00000006                M sprr2	=	op2
00018AD6 =00000006                M sprr3	=	op3
00018AD6 =00000006                M sprr4	=	op4
00018AD6                            	spSSGEG		$00, $00, $00, $00
00018AD6 =00000000                M spss1	=	op1
00018AD6 =00000000                M spss2	=	op2
00018AD6 =00000000                M spss3	=	op3
00018AD6 =00000000                M spss4	=	op4
00018AD6                            	spTotalLv	$14, $14, $2F, $00
00018AD6 =00000014                M sptl1	=	op1
00018AD6 =00000014                M sptl2	=	op2
00018AD6 =0000002F                M sptl3	=	op3
00018AD6 =00000000                M sptl4	=	op4
00018AD6 30                       M 	dc.b	(spfe<<3)+spal
00018AD7 =00000080                M sptlmask4	set	$80
00018AD7 =00000000                M sptlmask2	set	((spal>=5)<<7)
00018AD7 =00000000                M sptlmask3	set	((spal>=4)<<7)
00018AD7 =00000000                M sptlmask1	set	((spal=7)<<7)
00018AD7 303A 3030                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00018ADB 9ED8 DCDC                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00018ADF 0E0A 0405                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00018AE3 0808 0808                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00018AE7 B6B6 B6B6                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00018AEB 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00018AEF 142F 1480                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00018AF3 4E41 54                  M 	dc.b	'NAT'
00018AF6                            
00018AF6                            	; Patch $06
00018AF6                            	; $3B
00018AF6                            	; $61, $02, $24, $05,	$5F, $5B, $5E, $4D
00018AF6                            	; $04, $04, $08, $06,	$00, $00, $00, $04
00018AF6                            	; $24, $23, $28, $26,	$1E, $20, $24, $80
00018AF6                            	spAlgorithm	$03
00018AF6 =00000007                M spatnum	=	spatnum+1
00018AF6 =00000003                M spal	=	val
00018AF6                            	spFeedback	$07
00018AF6 =00000007                M spfe	=	val
00018AF6                            	spDetune	$06, $02, $00, $00
00018AF6 =00000006                M spde1	=	op1
00018AF6 =00000002                M spde2	=	op2
00018AF6 =00000000                M spde3	=	op3
00018AF6 =00000000                M spde4	=	op4
00018AF6                            	spMultiple	$01, $04, $02, $05
00018AF6 =00000001                M spmu1	=	op1
00018AF6 =00000004                M spmu2	=	op2
00018AF6 =00000002                M spmu3	=	op3
00018AF6 =00000005                M spmu4	=	op4
00018AF6                            	spRateScale	$01, $01, $01, $01
00018AF6 =00000001                M sprs1	=	op1
00018AF6 =00000001                M sprs2	=	op2
00018AF6 =00000001                M sprs3	=	op3
00018AF6 =00000001                M sprs4	=	op4
00018AF6                            	spAttackRt	$1F, $1E, $1B, $0D
00018AF6 =0000001F                M spar1	=	op1
00018AF6 =0000001E                M spar2	=	op2
00018AF6 =0000001B                M spar3	=	op3
00018AF6 =0000000D                M spar4	=	op4
00018AF6                            	spAmpMod	$00, $00, $00, $00
00018AF6 =00000000                M spam1	=	op1
00018AF6 =00000000                M spam2	=	op2
00018AF6 =00000000                M spam3	=	op3
00018AF6 =00000000                M spam4	=	op4
00018AF6                            	spSustainRt	$04, $08, $04, $06
00018AF6 =00000004                M spsr1	=	op1
00018AF6 =00000008                M spsr2	=	op2
00018AF6 =00000004                M spsr3	=	op3
00018AF6 =00000006                M spsr4	=	op4
00018AF6                            	spSustainLv	$02, $02, $02, $02
00018AF6 =00000002                M spsl1	=	op1
00018AF6 =00000002                M spsl2	=	op2
00018AF6 =00000002                M spsl3	=	op3
00018AF6 =00000002                M spsl4	=	op4
00018AF6                            	spDecayRt	$00, $00, $00, $04
00018AF6 =00000000                M spdr1	=	op1
00018AF6 =00000000                M spdr2	=	op2
00018AF6 =00000000                M spdr3	=	op3
00018AF6 =00000004                M spdr4	=	op4
00018AF6                            	spReleaseRt	$04, $08, $03, $06
00018AF6 =00000004                M sprr1	=	op1
00018AF6 =00000008                M sprr2	=	op2
00018AF6 =00000003                M sprr3	=	op3
00018AF6 =00000006                M sprr4	=	op4
00018AF6                            	spSSGEG		$00, $00, $00, $00
00018AF6 =00000000                M spss1	=	op1
00018AF6 =00000000                M spss2	=	op2
00018AF6 =00000000                M spss3	=	op3
00018AF6 =00000000                M spss4	=	op4
00018AF6                            	spTotalLv	$1E, $24, $20, $00
00018AF6 =0000001E                M sptl1	=	op1
00018AF6 =00000024                M sptl2	=	op2
00018AF6 =00000020                M sptl3	=	op3
00018AF6 =00000000                M sptl4	=	op4
00018AF6 3B                       M 	dc.b	(spfe<<3)+spal
00018AF7 =00000080                M sptlmask4	set	$80
00018AF7 =00000000                M sptlmask2	set	((spal>=5)<<7)
00018AF7 =00000000                M sptlmask3	set	((spal>=4)<<7)
00018AF7 =00000000                M sptlmask1	set	((spal=7)<<7)
00018AF7 6102 2405                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00018AFB 5F5B 5E4D                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00018AFF 0404 0806                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00018B03 0000 0004                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00018B07 2423 2826                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00018B0B 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00018B0F 1E20 2480                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00018B13 4E41 54                  M 	dc.b	'NAT'
00018B16                            
00018B16                            	; Patch $07
00018B16                            	; $00
00018B16                            	; $02, $07, $00, $01,	$DF, $DF, $1F, $1F
00018B16                            	; $12, $11, $14, $0E,	$0A, $00, $0A, $0D
00018B16                            	; $F3, $F6, $F3, $F8,	$22, $07, $20, $80
00018B16                            	spAlgorithm	$00
00018B16 =00000008                M spatnum	=	spatnum+1
00018B16 =00000000                M spal	=	val
00018B16                            	spFeedback	$00
00018B16 =00000000                M spfe	=	val
00018B16                            	spDetune	$00, $00, $00, $00
00018B16 =00000000                M spde1	=	op1
00018B16 =00000000                M spde2	=	op2
00018B16 =00000000                M spde3	=	op3
00018B16 =00000000                M spde4	=	op4
00018B16                            	spMultiple	$02, $00, $07, $01
00018B16 =00000002                M spmu1	=	op1
00018B16 =00000000                M spmu2	=	op2
00018B16 =00000007                M spmu3	=	op3
00018B16 =00000001                M spmu4	=	op4
00018B16                            	spRateScale	$03, $00, $03, $00
00018B16 =00000003                M sprs1	=	op1
00018B16 =00000000                M sprs2	=	op2
00018B16 =00000003                M sprs3	=	op3
00018B16 =00000000                M sprs4	=	op4
00018B16                            	spAttackRt	$1F, $1F, $1F, $1F
00018B16 =0000001F                M spar1	=	op1
00018B16 =0000001F                M spar2	=	op2
00018B16 =0000001F                M spar3	=	op3
00018B16 =0000001F                M spar4	=	op4
00018B16                            	spAmpMod	$00, $00, $00, $00
00018B16 =00000000                M spam1	=	op1
00018B16 =00000000                M spam2	=	op2
00018B16 =00000000                M spam3	=	op3
00018B16 =00000000                M spam4	=	op4
00018B16                            	spSustainRt	$12, $14, $11, $0E
00018B16 =00000012                M spsr1	=	op1
00018B16 =00000014                M spsr2	=	op2
00018B16 =00000011                M spsr3	=	op3
00018B16 =0000000E                M spsr4	=	op4
00018B16                            	spSustainLv	$0F, $0F, $0F, $0F
00018B16 =0000000F                M spsl1	=	op1
00018B16 =0000000F                M spsl2	=	op2
00018B16 =0000000F                M spsl3	=	op3
00018B16 =0000000F                M spsl4	=	op4
00018B16                            	spDecayRt	$0A, $0A, $00, $0D
00018B16 =0000000A                M spdr1	=	op1
00018B16 =0000000A                M spdr2	=	op2
00018B16 =00000000                M spdr3	=	op3
00018B16 =0000000D                M spdr4	=	op4
00018B16                            	spReleaseRt	$03, $03, $06, $08
00018B16 =00000003                M sprr1	=	op1
00018B16 =00000003                M sprr2	=	op2
00018B16 =00000006                M sprr3	=	op3
00018B16 =00000008                M sprr4	=	op4
00018B16                            	spSSGEG		$00, $00, $00, $00
00018B16 =00000000                M spss1	=	op1
00018B16 =00000000                M spss2	=	op2
00018B16 =00000000                M spss3	=	op3
00018B16 =00000000                M spss4	=	op4
00018B16                            	spTotalLv	$22, $20, $07, $00
00018B16 =00000022                M sptl1	=	op1
00018B16 =00000020                M sptl2	=	op2
00018B16 =00000007                M sptl3	=	op3
00018B16 =00000000                M sptl4	=	op4
00018B16 00                       M 	dc.b	(spfe<<3)+spal
00018B17 =00000080                M sptlmask4	set	$80
00018B17 =00000000                M sptlmask2	set	((spal>=5)<<7)
00018B17 =00000000                M sptlmask3	set	((spal>=4)<<7)
00018B17 =00000000                M sptlmask1	set	((spal=7)<<7)
00018B17 0207 0001                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00018B1B DFDF 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00018B1F 1211 140E                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00018B23 0A00 0A0D                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00018B27 F3F6 F3F8                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00018B2B 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00018B2F 2207 2080                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00018B33 4E41 54                  M 	dc.b	'NAT'
00018B36                            
00018B36                            	; Patch $08
00018B36                            	; $28
00018B36                            	; $2F, $68, $37, $32,	$1F, $1F, $1F, $1F
00018B36                            	; $15, $15, $15, $13,	$13, $0C, $0D, $10
00018B36                            	; $26, $26, $36, $29,	$00, $06, $1A, $80
00018B36                            	spAlgorithm	$00
00018B36 =00000009                M spatnum	=	spatnum+1
00018B36 =00000000                M spal	=	val
00018B36                            	spFeedback	$05
00018B36 =00000005                M spfe	=	val
00018B36                            	spDetune	$02, $03, $06, $03
00018B36 =00000002                M spde1	=	op1
00018B36 =00000003                M spde2	=	op2
00018B36 =00000006                M spde3	=	op3
00018B36 =00000003                M spde4	=	op4
00018B36                            	spMultiple	$0F, $07, $08, $02
00018B36 =0000000F                M spmu1	=	op1
00018B36 =00000007                M spmu2	=	op2
00018B36 =00000008                M spmu3	=	op3
00018B36 =00000002                M spmu4	=	op4
00018B36                            	spRateScale	$00, $00, $00, $00
00018B36 =00000000                M sprs1	=	op1
00018B36 =00000000                M sprs2	=	op2
00018B36 =00000000                M sprs3	=	op3
00018B36 =00000000                M sprs4	=	op4
00018B36                            	spAttackRt	$1F, $1F, $1F, $1F
00018B36 =0000001F                M spar1	=	op1
00018B36 =0000001F                M spar2	=	op2
00018B36 =0000001F                M spar3	=	op3
00018B36 =0000001F                M spar4	=	op4
00018B36                            	spAmpMod	$00, $00, $00, $00
00018B36 =00000000                M spam1	=	op1
00018B36 =00000000                M spam2	=	op2
00018B36 =00000000                M spam3	=	op3
00018B36 =00000000                M spam4	=	op4
00018B36                            	spSustainRt	$15, $15, $15, $13
00018B36 =00000015                M spsr1	=	op1
00018B36 =00000015                M spsr2	=	op2
00018B36 =00000015                M spsr3	=	op3
00018B36 =00000013                M spsr4	=	op4
00018B36                            	spSustainLv	$02, $03, $02, $02
00018B36 =00000002                M spsl1	=	op1
00018B36 =00000003                M spsl2	=	op2
00018B36 =00000002                M spsl3	=	op3
00018B36 =00000002                M spsl4	=	op4
00018B36                            	spDecayRt	$13, $0D, $0C, $10
00018B36 =00000013                M spdr1	=	op1
00018B36 =0000000D                M spdr2	=	op2
00018B36 =0000000C                M spdr3	=	op3
00018B36 =00000010                M spdr4	=	op4
00018B36                            	spReleaseRt	$06, $06, $06, $09
00018B36 =00000006                M sprr1	=	op1
00018B36 =00000006                M sprr2	=	op2
00018B36 =00000006                M sprr3	=	op3
00018B36 =00000009                M sprr4	=	op4
00018B36                            	spSSGEG		$00, $00, $00, $00
00018B36 =00000000                M spss1	=	op1
00018B36 =00000000                M spss2	=	op2
00018B36 =00000000                M spss3	=	op3
00018B36 =00000000                M spss4	=	op4
00018B36                            	spTotalLv	$00, $1A, $06, $00
00018B36 =00000000                M sptl1	=	op1
00018B36 =0000001A                M sptl2	=	op2
00018B36 =00000006                M sptl3	=	op3
00018B36 =00000000                M sptl4	=	op4
00018B36 28                       M 	dc.b	(spfe<<3)+spal
00018B37 =00000080                M sptlmask4	set	$80
00018B37 =00000000                M sptlmask2	set	((spal>=5)<<7)
00018B37 =00000000                M sptlmask3	set	((spal>=4)<<7)
00018B37 =00000000                M sptlmask1	set	((spal=7)<<7)
00018B37 2F68 3732                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00018B3B 1F1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00018B3F 1515 1513                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00018B43 130C 0D10                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00018B47 2626 3629                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00018B4B 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00018B4F 0006 1A80                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00018B53 4E41 54                  M 	dc.b	'NAT'
00018B56                            
00018B56                            	; Patch $09
00018B56                            	; $3A
00018B56                            	; $32, $56, $32, $42,	$8D, $4F, $15, $52
00018B56                            	; $06, $08, $07, $04,	$02, $00, $00, $00
00018B56                            	; $1F, $1F, $2F, $2F,	$19, $20, $2A, $80
00018B56                            	spAlgorithm	$02
00018B56 =0000000A                M spatnum	=	spatnum+1
00018B56 =00000002                M spal	=	val
00018B56                            	spFeedback	$07
00018B56 =00000007                M spfe	=	val
00018B56                            	spDetune	$03, $03, $05, $04
00018B56 =00000003                M spde1	=	op1
00018B56 =00000003                M spde2	=	op2
00018B56 =00000005                M spde3	=	op3
00018B56 =00000004                M spde4	=	op4
00018B56                            	spMultiple	$02, $02, $06, $02
00018B56 =00000002                M spmu1	=	op1
00018B56 =00000002                M spmu2	=	op2
00018B56 =00000006                M spmu3	=	op3
00018B56 =00000002                M spmu4	=	op4
00018B56                            	spRateScale	$02, $00, $01, $01
00018B56 =00000002                M sprs1	=	op1
00018B56 =00000000                M sprs2	=	op2
00018B56 =00000001                M sprs3	=	op3
00018B56 =00000001                M sprs4	=	op4
00018B56                            	spAttackRt	$0D, $15, $0F, $12
00018B56 =0000000D                M spar1	=	op1
00018B56 =00000015                M spar2	=	op2
00018B56 =0000000F                M spar3	=	op3
00018B56 =00000012                M spar4	=	op4
00018B56                            	spAmpMod	$00, $00, $00, $00
00018B56 =00000000                M spam1	=	op1
00018B56 =00000000                M spam2	=	op2
00018B56 =00000000                M spam3	=	op3
00018B56 =00000000                M spam4	=	op4
00018B56                            	spSustainRt	$06, $07, $08, $04
00018B56 =00000006                M spsr1	=	op1
00018B56 =00000007                M spsr2	=	op2
00018B56 =00000008                M spsr3	=	op3
00018B56 =00000004                M spsr4	=	op4
00018B56                            	spSustainLv	$01, $02, $01, $02
00018B56 =00000001                M spsl1	=	op1
00018B56 =00000002                M spsl2	=	op2
00018B56 =00000001                M spsl3	=	op3
00018B56 =00000002                M spsl4	=	op4
00018B56                            	spDecayRt	$02, $00, $00, $00
00018B56 =00000002                M spdr1	=	op1
00018B56 =00000000                M spdr2	=	op2
00018B56 =00000000                M spdr3	=	op3
00018B56 =00000000                M spdr4	=	op4
00018B56                            	spReleaseRt	$0F, $0F, $0F, $0F
00018B56 =0000000F                M sprr1	=	op1
00018B56 =0000000F                M sprr2	=	op2
00018B56 =0000000F                M sprr3	=	op3
00018B56 =0000000F                M sprr4	=	op4
00018B56                            	spSSGEG		$00, $00, $00, $00
00018B56 =00000000                M spss1	=	op1
00018B56 =00000000                M spss2	=	op2
00018B56 =00000000                M spss3	=	op3
00018B56 =00000000                M spss4	=	op4
00018B56                            	spTotalLv	$19, $2A, $20, $00
00018B56 =00000019                M sptl1	=	op1
00018B56 =0000002A                M sptl2	=	op2
00018B56 =00000020                M sptl3	=	op3
00018B56 =00000000                M sptl4	=	op4
00018B56 3A                       M 	dc.b	(spfe<<3)+spal
00018B57 =00000080                M sptlmask4	set	$80
00018B57 =00000000                M sptlmask2	set	((spal>=5)<<7)
00018B57 =00000000                M sptlmask3	set	((spal>=4)<<7)
00018B57 =00000000                M sptlmask1	set	((spal=7)<<7)
00018B57 3256 3242                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00018B5B 8D4F 1552                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00018B5F 0608 0704                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00018B63 0200 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00018B67 1F1F 2F2F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00018B6B 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00018B6F 1920 2A80                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00018B73 4E41 54                  M 	dc.b	'NAT'
00018B76                            
00018B76                            	; Patch $0A
00018B76                            	; $3A
00018B76                            	; $31, $37, $31, $31,	$8D, $8D, $8E, $53
00018B76                            	; $0E, $0E, $0E, $03,	$06, $06, $06, $05
00018B76                            	; $1F, $FF, $1F, $0F,	$17, $25, $23, $80
00018B76                            	spAlgorithm	$02
00018B76 =0000000B                M spatnum	=	spatnum+1
00018B76 =00000002                M spal	=	val
00018B76                            	spFeedback	$07
00018B76 =00000007                M spfe	=	val
00018B76                            	spDetune	$03, $03, $03, $03
00018B76 =00000003                M spde1	=	op1
00018B76 =00000003                M spde2	=	op2
00018B76 =00000003                M spde3	=	op3
00018B76 =00000003                M spde4	=	op4
00018B76                            	spMultiple	$01, $01, $07, $01
00018B76 =00000001                M spmu1	=	op1
00018B76 =00000001                M spmu2	=	op2
00018B76 =00000007                M spmu3	=	op3
00018B76 =00000001                M spmu4	=	op4
00018B76                            	spRateScale	$02, $02, $02, $01
00018B76 =00000002                M sprs1	=	op1
00018B76 =00000002                M sprs2	=	op2
00018B76 =00000002                M sprs3	=	op3
00018B76 =00000001                M sprs4	=	op4
00018B76                            	spAttackRt	$0D, $0E, $0D, $13
00018B76 =0000000D                M spar1	=	op1
00018B76 =0000000E                M spar2	=	op2
00018B76 =0000000D                M spar3	=	op3
00018B76 =00000013                M spar4	=	op4
00018B76                            	spAmpMod	$00, $00, $00, $00
00018B76 =00000000                M spam1	=	op1
00018B76 =00000000                M spam2	=	op2
00018B76 =00000000                M spam3	=	op3
00018B76 =00000000                M spam4	=	op4
00018B76                            	spSustainRt	$0E, $0E, $0E, $03
00018B76 =0000000E                M spsr1	=	op1
00018B76 =0000000E                M spsr2	=	op2
00018B76 =0000000E                M spsr3	=	op3
00018B76 =00000003                M spsr4	=	op4
00018B76                            	spSustainLv	$01, $01, $0F, $00
00018B76 =00000001                M spsl1	=	op1
00018B76 =00000001                M spsl2	=	op2
00018B76 =0000000F                M spsl3	=	op3
00018B76 =00000000                M spsl4	=	op4
00018B76                            	spDecayRt	$06, $06, $06, $05
00018B76 =00000006                M spdr1	=	op1
00018B76 =00000006                M spdr2	=	op2
00018B76 =00000006                M spdr3	=	op3
00018B76 =00000005                M spdr4	=	op4
00018B76                            	spReleaseRt	$0F, $0F, $0F, $0F
00018B76 =0000000F                M sprr1	=	op1
00018B76 =0000000F                M sprr2	=	op2
00018B76 =0000000F                M sprr3	=	op3
00018B76 =0000000F                M sprr4	=	op4
00018B76                            	spSSGEG		$00, $00, $00, $00
00018B76 =00000000                M spss1	=	op1
00018B76 =00000000                M spss2	=	op2
00018B76 =00000000                M spss3	=	op3
00018B76 =00000000                M spss4	=	op4
00018B76                            	spTotalLv	$17, $23, $25, $00
00018B76 =00000017                M sptl1	=	op1
00018B76 =00000023                M sptl2	=	op2
00018B76 =00000025                M sptl3	=	op3
00018B76 =00000000                M sptl4	=	op4
00018B76 3A                       M 	dc.b	(spfe<<3)+spal
00018B77 =00000080                M sptlmask4	set	$80
00018B77 =00000000                M sptlmask2	set	((spal>=5)<<7)
00018B77 =00000000                M sptlmask3	set	((spal>=4)<<7)
00018B77 =00000000                M sptlmask1	set	((spal=7)<<7)
00018B77 3137 3131                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00018B7B 8D8D 8E53                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00018B7F 0E0E 0E03                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00018B83 0606 0605                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00018B87 1FFF 1F0F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00018B8B 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00018B8F 1725 2380                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00018B93 4E41 54                  M 	dc.b	'NAT'
00018B96                            
00018B96                            	; Patch $0B
00018B96                            	; $3A
00018B96                            	; $41, $45, $31, $41,	$59, $59, $5C, $4E
00018B96                            	; $0A, $0B, $0D, $04,	$00, $00, $00, $00
00018B96                            	; $1F, $5F, $2F, $0F,	$1D, $0F, $30, $80
00018B96                            	spAlgorithm	$02
00018B96 =0000000C                M spatnum	=	spatnum+1
00018B96 =00000002                M spal	=	val
00018B96                            	spFeedback	$07
00018B96 =00000007                M spfe	=	val
00018B96                            	spDetune	$04, $03, $04, $04
00018B96 =00000004                M spde1	=	op1
00018B96 =00000003                M spde2	=	op2
00018B96 =00000004                M spde3	=	op3
00018B96 =00000004                M spde4	=	op4
00018B96                            	spMultiple	$01, $01, $05, $01
00018B96 =00000001                M spmu1	=	op1
00018B96 =00000001                M spmu2	=	op2
00018B96 =00000005                M spmu3	=	op3
00018B96 =00000001                M spmu4	=	op4
00018B96                            	spRateScale	$01, $01, $01, $01
00018B96 =00000001                M sprs1	=	op1
00018B96 =00000001                M sprs2	=	op2
00018B96 =00000001                M sprs3	=	op3
00018B96 =00000001                M sprs4	=	op4
00018B96                            	spAttackRt	$19, $1C, $19, $0E
00018B96 =00000019                M spar1	=	op1
00018B96 =0000001C                M spar2	=	op2
00018B96 =00000019                M spar3	=	op3
00018B96 =0000000E                M spar4	=	op4
00018B96                            	spAmpMod	$00, $00, $00, $00
00018B96 =00000000                M spam1	=	op1
00018B96 =00000000                M spam2	=	op2
00018B96 =00000000                M spam3	=	op3
00018B96 =00000000                M spam4	=	op4
00018B96                            	spSustainRt	$0A, $0D, $0B, $04
00018B96 =0000000A                M spsr1	=	op1
00018B96 =0000000D                M spsr2	=	op2
00018B96 =0000000B                M spsr3	=	op3
00018B96 =00000004                M spsr4	=	op4
00018B96                            	spSustainLv	$01, $02, $05, $00
00018B96 =00000001                M spsl1	=	op1
00018B96 =00000002                M spsl2	=	op2
00018B96 =00000005                M spsl3	=	op3
00018B96 =00000000                M spsl4	=	op4
00018B96                            	spDecayRt	$00, $00, $00, $00
00018B96 =00000000                M spdr1	=	op1
00018B96 =00000000                M spdr2	=	op2
00018B96 =00000000                M spdr3	=	op3
00018B96 =00000000                M spdr4	=	op4
00018B96                            	spReleaseRt	$0F, $0F, $0F, $0F
00018B96 =0000000F                M sprr1	=	op1
00018B96 =0000000F                M sprr2	=	op2
00018B96 =0000000F                M sprr3	=	op3
00018B96 =0000000F                M sprr4	=	op4
00018B96                            	spSSGEG		$00, $00, $00, $00
00018B96 =00000000                M spss1	=	op1
00018B96 =00000000                M spss2	=	op2
00018B96 =00000000                M spss3	=	op3
00018B96 =00000000                M spss4	=	op4
00018B96                            	spTotalLv	$1D, $30, $0F, $00
00018B96 =0000001D                M sptl1	=	op1
00018B96 =00000030                M sptl2	=	op2
00018B96 =0000000F                M sptl3	=	op3
00018B96 =00000000                M sptl4	=	op4
00018B96 3A                       M 	dc.b	(spfe<<3)+spal
00018B97 =00000080                M sptlmask4	set	$80
00018B97 =00000000                M sptlmask2	set	((spal>=5)<<7)
00018B97 =00000000                M sptlmask3	set	((spal>=4)<<7)
00018B97 =00000000                M sptlmask1	set	((spal=7)<<7)
00018B97 4145 3141                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00018B9B 5959 5C4E                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00018B9F 0A0B 0D04                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00018BA3 0000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00018BA7 1F5F 2F0F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00018BAB 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00018BAF 1D0F 3080                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00018BB3 4E41 54                  M 	dc.b	'NAT'
00018BB6                            
00018BB6                            	; Patch $0C
00018BB6                            	; $2A
00018BB6                            	; $23, $3A, $32, $74,	$1E, $1F, $1F, $1F
00018BB6                            	; $17, $1B, $02, $03,	$00, $08, $03, $0B
00018BB6                            	; $3F, $3F, $0F, $6F,	$0C, $0C, $1C, $84
00018BB6                            	spAlgorithm	$02
00018BB6 =0000000D                M spatnum	=	spatnum+1
00018BB6 =00000002                M spal	=	val
00018BB6                            	spFeedback	$05
00018BB6 =00000005                M spfe	=	val
00018BB6                            	spDetune	$02, $03, $03, $07
00018BB6 =00000002                M spde1	=	op1
00018BB6 =00000003                M spde2	=	op2
00018BB6 =00000003                M spde3	=	op3
00018BB6 =00000007                M spde4	=	op4
00018BB6                            	spMultiple	$03, $02, $0A, $04
00018BB6 =00000003                M spmu1	=	op1
00018BB6 =00000002                M spmu2	=	op2
00018BB6 =0000000A                M spmu3	=	op3
00018BB6 =00000004                M spmu4	=	op4
00018BB6                            	spRateScale	$00, $00, $00, $00
00018BB6 =00000000                M sprs1	=	op1
00018BB6 =00000000                M sprs2	=	op2
00018BB6 =00000000                M sprs3	=	op3
00018BB6 =00000000                M sprs4	=	op4
00018BB6                            	spAttackRt	$1E, $1F, $1F, $1F
00018BB6 =0000001E                M spar1	=	op1
00018BB6 =0000001F                M spar2	=	op2
00018BB6 =0000001F                M spar3	=	op3
00018BB6 =0000001F                M spar4	=	op4
00018BB6                            	spAmpMod	$00, $00, $00, $00
00018BB6 =00000000                M spam1	=	op1
00018BB6 =00000000                M spam2	=	op2
00018BB6 =00000000                M spam3	=	op3
00018BB6 =00000000                M spam4	=	op4
00018BB6                            	spSustainRt	$17, $02, $1B, $03
00018BB6 =00000017                M spsr1	=	op1
00018BB6 =00000002                M spsr2	=	op2
00018BB6 =0000001B                M spsr3	=	op3
00018BB6 =00000003                M spsr4	=	op4
00018BB6                            	spSustainLv	$03, $00, $03, $06
00018BB6 =00000003                M spsl1	=	op1
00018BB6 =00000000                M spsl2	=	op2
00018BB6 =00000003                M spsl3	=	op3
00018BB6 =00000006                M spsl4	=	op4
00018BB6                            	spDecayRt	$00, $03, $08, $0B
00018BB6 =00000000                M spdr1	=	op1
00018BB6 =00000003                M spdr2	=	op2
00018BB6 =00000008                M spdr3	=	op3
00018BB6 =0000000B                M spdr4	=	op4
00018BB6                            	spReleaseRt	$0F, $0F, $0F, $0F
00018BB6 =0000000F                M sprr1	=	op1
00018BB6 =0000000F                M sprr2	=	op2
00018BB6 =0000000F                M sprr3	=	op3
00018BB6 =0000000F                M sprr4	=	op4
00018BB6                            	spSSGEG		$00, $00, $00, $00
00018BB6 =00000000                M spss1	=	op1
00018BB6 =00000000                M spss2	=	op2
00018BB6 =00000000                M spss3	=	op3
00018BB6 =00000000                M spss4	=	op4
00018BB6                            	spTotalLv	$0C, $1C, $0C, $04
00018BB6 =0000000C                M sptl1	=	op1
00018BB6 =0000001C                M sptl2	=	op2
00018BB6 =0000000C                M sptl3	=	op3
00018BB6 =00000004                M sptl4	=	op4
00018BB6 2A                       M 	dc.b	(spfe<<3)+spal
00018BB7 =00000080                M sptlmask4	set	$80
00018BB7 =00000000                M sptlmask2	set	((spal>=5)<<7)
00018BB7 =00000000                M sptlmask3	set	((spal>=4)<<7)
00018BB7 =00000000                M sptlmask1	set	((spal=7)<<7)
00018BB7 233A 3274                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00018BBB 1E1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00018BBF 171B 0203                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00018BC3 0008 030B                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00018BC7 3F3F 0F6F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00018BCB 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00018BCF 0C0C 1C84                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00018BD3 4E41 54                  M 	dc.b	'NAT'
00018BD6                            
00018BD6                            	; Patch $0D
00018BD6                            	; $3D
00018BD6                            	; $01, $65, $14, $30,	$8E, $52, $17, $4C
00018BD6                            	; $08, $08, $0E, $03,	$00, $00, $00, $00
00018BD6                            	; $1D, $1A, $18, $1A,	$1A, $80, $80, $88
00018BD6                            	spAlgorithm	$05
00018BD6 =0000000E                M spatnum	=	spatnum+1
00018BD6 =00000005                M spal	=	val
00018BD6                            	spFeedback	$07
00018BD6 =00000007                M spfe	=	val
00018BD6                            	spDetune	$00, $01, $06, $03
00018BD6 =00000000                M spde1	=	op1
00018BD6 =00000001                M spde2	=	op2
00018BD6 =00000006                M spde3	=	op3
00018BD6 =00000003                M spde4	=	op4
00018BD6                            	spMultiple	$01, $04, $05, $00
00018BD6 =00000001                M spmu1	=	op1
00018BD6 =00000004                M spmu2	=	op2
00018BD6 =00000005                M spmu3	=	op3
00018BD6 =00000000                M spmu4	=	op4
00018BD6                            	spRateScale	$02, $00, $01, $01
00018BD6 =00000002                M sprs1	=	op1
00018BD6 =00000000                M sprs2	=	op2
00018BD6 =00000001                M sprs3	=	op3
00018BD6 =00000001                M sprs4	=	op4
00018BD6                            	spAttackRt	$0E, $17, $12, $0C
00018BD6 =0000000E                M spar1	=	op1
00018BD6 =00000017                M spar2	=	op2
00018BD6 =00000012                M spar3	=	op3
00018BD6 =0000000C                M spar4	=	op4
00018BD6                            	spAmpMod	$00, $00, $00, $00
00018BD6 =00000000                M spam1	=	op1
00018BD6 =00000000                M spam2	=	op2
00018BD6 =00000000                M spam3	=	op3
00018BD6 =00000000                M spam4	=	op4
00018BD6                            	spSustainRt	$08, $0E, $08, $03
00018BD6 =00000008                M spsr1	=	op1
00018BD6 =0000000E                M spsr2	=	op2
00018BD6 =00000008                M spsr3	=	op3
00018BD6 =00000003                M spsr4	=	op4
00018BD6                            	spSustainLv	$01, $01, $01, $01
00018BD6 =00000001                M spsl1	=	op1
00018BD6 =00000001                M spsl2	=	op2
00018BD6 =00000001                M spsl3	=	op3
00018BD6 =00000001                M spsl4	=	op4
00018BD6                            	spDecayRt	$00, $00, $00, $00
00018BD6 =00000000                M spdr1	=	op1
00018BD6 =00000000                M spdr2	=	op2
00018BD6 =00000000                M spdr3	=	op3
00018BD6 =00000000                M spdr4	=	op4
00018BD6                            	spReleaseRt	$0D, $08, $0A, $0A
00018BD6 =0000000D                M sprr1	=	op1
00018BD6 =00000008                M sprr2	=	op2
00018BD6 =0000000A                M sprr3	=	op3
00018BD6 =0000000A                M sprr4	=	op4
00018BD6                            	spSSGEG		$00, $00, $00, $00
00018BD6 =00000000                M spss1	=	op1
00018BD6 =00000000                M spss2	=	op2
00018BD6 =00000000                M spss3	=	op3
00018BD6 =00000000                M spss4	=	op4
00018BD6                            	spTotalLv	$1A, $00, $00, $08
00018BD6 =0000001A                M sptl1	=	op1
00018BD6 =00000000                M sptl2	=	op2
00018BD6 =00000000                M sptl3	=	op3
00018BD6 =00000008                M sptl4	=	op4
00018BD6 3D                       M 	dc.b	(spfe<<3)+spal
00018BD7 =00000080                M sptlmask4	set	$80
00018BD7 =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
00018BD7 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00018BD7 =00000000                M sptlmask1	set	((spal=7)<<7)
00018BD7 0165 1430                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00018BDB 8E52 174C                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00018BDF 0808 0E03                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00018BE3 0000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00018BE7 1D1A 181A                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00018BEB 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00018BEF 1A80 8088                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00018BF3 4E41 54                  M 	dc.b	'NAT'
00018BF6                            
00018BF6                            	; Patch $0E
00018BF6                            	; $2C
00018BF6                            	; $61, $04, $01, $33,	$5F, $94, $58, $94
00018BF6                            	; $05, $05, $05, $07,	$02, $02, $02, $02
00018BF6                            	; $1F, $68, $16, $A7,	$1E, $80, $15, $81
00018BF6                            	spAlgorithm	$04
00018BF6 =0000000F                M spatnum	=	spatnum+1
00018BF6 =00000004                M spal	=	val
00018BF6                            	spFeedback	$05
00018BF6 =00000005                M spfe	=	val
00018BF6                            	spDetune	$06, $00, $00, $03
00018BF6 =00000006                M spde1	=	op1
00018BF6 =00000000                M spde2	=	op2
00018BF6 =00000000                M spde3	=	op3
00018BF6 =00000003                M spde4	=	op4
00018BF6                            	spMultiple	$01, $01, $04, $03
00018BF6 =00000001                M spmu1	=	op1
00018BF6 =00000001                M spmu2	=	op2
00018BF6 =00000004                M spmu3	=	op3
00018BF6 =00000003                M spmu4	=	op4
00018BF6                            	spRateScale	$01, $01, $02, $02
00018BF6 =00000001                M sprs1	=	op1
00018BF6 =00000001                M sprs2	=	op2
00018BF6 =00000002                M sprs3	=	op3
00018BF6 =00000002                M sprs4	=	op4
00018BF6                            	spAttackRt	$1F, $18, $14, $14
00018BF6 =0000001F                M spar1	=	op1
00018BF6 =00000018                M spar2	=	op2
00018BF6 =00000014                M spar3	=	op3
00018BF6 =00000014                M spar4	=	op4
00018BF6                            	spAmpMod	$00, $00, $00, $00
00018BF6 =00000000                M spam1	=	op1
00018BF6 =00000000                M spam2	=	op2
00018BF6 =00000000                M spam3	=	op3
00018BF6 =00000000                M spam4	=	op4
00018BF6                            	spSustainRt	$05, $05, $05, $07
00018BF6 =00000005                M spsr1	=	op1
00018BF6 =00000005                M spsr2	=	op2
00018BF6 =00000005                M spsr3	=	op3
00018BF6 =00000007                M spsr4	=	op4
00018BF6                            	spSustainLv	$01, $01, $06, $0A
00018BF6 =00000001                M spsl1	=	op1
00018BF6 =00000001                M spsl2	=	op2
00018BF6 =00000006                M spsl3	=	op3
00018BF6 =0000000A                M spsl4	=	op4
00018BF6                            	spDecayRt	$02, $02, $02, $02
00018BF6 =00000002                M spdr1	=	op1
00018BF6 =00000002                M spdr2	=	op2
00018BF6 =00000002                M spdr3	=	op3
00018BF6 =00000002                M spdr4	=	op4
00018BF6                            	spReleaseRt	$0F, $06, $08, $07
00018BF6 =0000000F                M sprr1	=	op1
00018BF6 =00000006                M sprr2	=	op2
00018BF6 =00000008                M sprr3	=	op3
00018BF6 =00000007                M sprr4	=	op4
00018BF6                            	spSSGEG		$00, $00, $00, $00
00018BF6 =00000000                M spss1	=	op1
00018BF6 =00000000                M spss2	=	op2
00018BF6 =00000000                M spss3	=	op3
00018BF6 =00000000                M spss4	=	op4
00018BF6                            	spTotalLv	$1E, $15, $00, $01
00018BF6 =0000001E                M sptl1	=	op1
00018BF6 =00000015                M sptl2	=	op2
00018BF6 =00000000                M sptl3	=	op3
00018BF6 =00000001                M sptl4	=	op4
00018BF6 2C                       M 	dc.b	(spfe<<3)+spal
00018BF7 =00000080                M sptlmask4	set	$80
00018BF7 =00000000                M sptlmask2	set	((spal>=5)<<7)
00018BF7 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00018BF7 =00000000                M sptlmask1	set	((spal=7)<<7)
00018BF7 6104 0133                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00018BFB 5F94 5894                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00018BFF 0505 0507                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00018C03 0202 0202                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00018C07 1F68 16A7                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00018C0B 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00018C0F 1E80 1581                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00018C13 4E41 54                  M 	dc.b	'NAT'
00018C16                            
00018C16                            	; Patch $0F
00018C16                            	; $3A
00018C16                            	; $3C, $4F, $31, $23,	$1F, $DF, $1F, $9F
00018C16                            	; $0C, $02, $0C, $05,	$04, $04, $04, $07
00018C16                            	; $1F, $FF, $0F, $2F,	$20, $39, $1E, $80
00018C16                            	spAlgorithm	$02
00018C16 =00000010                M spatnum	=	spatnum+1
00018C16 =00000002                M spal	=	val
00018C16                            	spFeedback	$07
00018C16 =00000007                M spfe	=	val
00018C16                            	spDetune	$03, $03, $04, $02
00018C16 =00000003                M spde1	=	op1
00018C16 =00000003                M spde2	=	op2
00018C16 =00000004                M spde3	=	op3
00018C16 =00000002                M spde4	=	op4
00018C16                            	spMultiple	$0C, $01, $0F, $03
00018C16 =0000000C                M spmu1	=	op1
00018C16 =00000001                M spmu2	=	op2
00018C16 =0000000F                M spmu3	=	op3
00018C16 =00000003                M spmu4	=	op4
00018C16                            	spRateScale	$00, $00, $03, $02
00018C16 =00000000                M sprs1	=	op1
00018C16 =00000000                M sprs2	=	op2
00018C16 =00000003                M sprs3	=	op3
00018C16 =00000002                M sprs4	=	op4
00018C16                            	spAttackRt	$1F, $1F, $1F, $1F
00018C16 =0000001F                M spar1	=	op1
00018C16 =0000001F                M spar2	=	op2
00018C16 =0000001F                M spar3	=	op3
00018C16 =0000001F                M spar4	=	op4
00018C16                            	spAmpMod	$00, $00, $00, $00
00018C16 =00000000                M spam1	=	op1
00018C16 =00000000                M spam2	=	op2
00018C16 =00000000                M spam3	=	op3
00018C16 =00000000                M spam4	=	op4
00018C16                            	spSustainRt	$0C, $0C, $02, $05
00018C16 =0000000C                M spsr1	=	op1
00018C16 =0000000C                M spsr2	=	op2
00018C16 =00000002                M spsr3	=	op3
00018C16 =00000005                M spsr4	=	op4
00018C16                            	spSustainLv	$01, $00, $0F, $02
00018C16 =00000001                M spsl1	=	op1
00018C16 =00000000                M spsl2	=	op2
00018C16 =0000000F                M spsl3	=	op3
00018C16 =00000002                M spsl4	=	op4
00018C16                            	spDecayRt	$04, $04, $04, $07
00018C16 =00000004                M spdr1	=	op1
00018C16 =00000004                M spdr2	=	op2
00018C16 =00000004                M spdr3	=	op3
00018C16 =00000007                M spdr4	=	op4
00018C16                            	spReleaseRt	$0F, $0F, $0F, $0F
00018C16 =0000000F                M sprr1	=	op1
00018C16 =0000000F                M sprr2	=	op2
00018C16 =0000000F                M sprr3	=	op3
00018C16 =0000000F                M sprr4	=	op4
00018C16                            	spSSGEG		$00, $00, $00, $00
00018C16 =00000000                M spss1	=	op1
00018C16 =00000000                M spss2	=	op2
00018C16 =00000000                M spss3	=	op3
00018C16 =00000000                M spss4	=	op4
00018C16                            	spTotalLv	$20, $1E, $39, $00
00018C16 =00000020                M sptl1	=	op1
00018C16 =0000001E                M sptl2	=	op2
00018C16 =00000039                M sptl3	=	op3
00018C16 =00000000                M sptl4	=	op4
00018C16 3A                       M 	dc.b	(spfe<<3)+spal
00018C17 =00000080                M sptlmask4	set	$80
00018C17 =00000000                M sptlmask2	set	((spal>=5)<<7)
00018C17 =00000000                M sptlmask3	set	((spal>=4)<<7)
00018C17 =00000000                M sptlmask1	set	((spal=7)<<7)
00018C17 3C4F 3123                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00018C1B 1FDF 1F9F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00018C1F 0C02 0C05                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00018C23 0404 0407                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00018C27 1FFF 0F2F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00018C2B 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00018C2F 2039 1E80                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00018C33 4E41 54                  M 	dc.b	'NAT'
00018C36                            
00018C36                            	; Patch $10
00018C36                            	; $38
00018C36                            	; $63, $31, $31, $31,	$10, $13, $1A, $1B
00018C36                            	; $0E, $00, $00, $00,	$00, $00, $00, $00
00018C36                            	; $3F, $0F, $0F, $0F,	$1A, $19, $1A, $80
00018C36                            	spAlgorithm	$00
00018C36 =00000011                M spatnum	=	spatnum+1
00018C36 =00000000                M spal	=	val
00018C36                            	spFeedback	$07
00018C36 =00000007                M spfe	=	val
00018C36                            	spDetune	$06, $03, $03, $03
00018C36 =00000006                M spde1	=	op1
00018C36 =00000003                M spde2	=	op2
00018C36 =00000003                M spde3	=	op3
00018C36 =00000003                M spde4	=	op4
00018C36                            	spMultiple	$03, $01, $01, $01
00018C36 =00000003                M spmu1	=	op1
00018C36 =00000001                M spmu2	=	op2
00018C36 =00000001                M spmu3	=	op3
00018C36 =00000001                M spmu4	=	op4
00018C36                            	spRateScale	$00, $00, $00, $00
00018C36 =00000000                M sprs1	=	op1
00018C36 =00000000                M sprs2	=	op2
00018C36 =00000000                M sprs3	=	op3
00018C36 =00000000                M sprs4	=	op4
00018C36                            	spAttackRt	$10, $1A, $13, $1B
00018C36 =00000010                M spar1	=	op1
00018C36 =0000001A                M spar2	=	op2
00018C36 =00000013                M spar3	=	op3
00018C36 =0000001B                M spar4	=	op4
00018C36                            	spAmpMod	$00, $00, $00, $00
00018C36 =00000000                M spam1	=	op1
00018C36 =00000000                M spam2	=	op2
00018C36 =00000000                M spam3	=	op3
00018C36 =00000000                M spam4	=	op4
00018C36                            	spSustainRt	$0E, $00, $00, $00
00018C36 =0000000E                M spsr1	=	op1
00018C36 =00000000                M spsr2	=	op2
00018C36 =00000000                M spsr3	=	op3
00018C36 =00000000                M spsr4	=	op4
00018C36                            	spSustainLv	$03, $00, $00, $00
00018C36 =00000003                M spsl1	=	op1
00018C36 =00000000                M spsl2	=	op2
00018C36 =00000000                M spsl3	=	op3
00018C36 =00000000                M spsl4	=	op4
00018C36                            	spDecayRt	$00, $00, $00, $00
00018C36 =00000000                M spdr1	=	op1
00018C36 =00000000                M spdr2	=	op2
00018C36 =00000000                M spdr3	=	op3
00018C36 =00000000                M spdr4	=	op4
00018C36                            	spReleaseRt	$0F, $0F, $0F, $0F
00018C36 =0000000F                M sprr1	=	op1
00018C36 =0000000F                M sprr2	=	op2
00018C36 =0000000F                M sprr3	=	op3
00018C36 =0000000F                M sprr4	=	op4
00018C36                            	spSSGEG		$00, $00, $00, $00
00018C36 =00000000                M spss1	=	op1
00018C36 =00000000                M spss2	=	op2
00018C36 =00000000                M spss3	=	op3
00018C36 =00000000                M spss4	=	op4
00018C36                            	spTotalLv	$1A, $1A, $19, $00
00018C36 =0000001A                M sptl1	=	op1
00018C36 =0000001A                M sptl2	=	op2
00018C36 =00000019                M sptl3	=	op3
00018C36 =00000000                M sptl4	=	op4
00018C36 38                       M 	dc.b	(spfe<<3)+spal
00018C37 =00000080                M sptlmask4	set	$80
00018C37 =00000000                M sptlmask2	set	((spal>=5)<<7)
00018C37 =00000000                M sptlmask3	set	((spal>=4)<<7)
00018C37 =00000000                M sptlmask1	set	((spal=7)<<7)
00018C37 6331 3131                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00018C3B 1013 1A1B                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00018C3F 0E00 0000                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00018C43 0000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00018C47 3F0F 0F0F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00018C4B 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00018C4F 1A19 1A80                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00018C53 4E41 54                  M 	dc.b	'NAT'
00018C56                            
00018C56                            	; Patch $11
00018C56                            	; $3D
00018C56                            	; $65, $28, $04, $61,	$DF, $1F, $1F, $1F
00018C56                            	; $12, $04, $0F, $0F,	$00, $00, $00, $00
00018C56                            	; $2F, $09, $0F, $0F,	$26, $8A, $8B, $80
00018C56                            	spAlgorithm	$05
00018C56 =00000012                M spatnum	=	spatnum+1
00018C56 =00000005                M spal	=	val
00018C56                            	spFeedback	$07
00018C56 =00000007                M spfe	=	val
00018C56                            	spDetune	$06, $00, $02, $06
00018C56 =00000006                M spde1	=	op1
00018C56 =00000000                M spde2	=	op2
00018C56 =00000002                M spde3	=	op3
00018C56 =00000006                M spde4	=	op4
00018C56                            	spMultiple	$05, $04, $08, $01
00018C56 =00000005                M spmu1	=	op1
00018C56 =00000004                M spmu2	=	op2
00018C56 =00000008                M spmu3	=	op3
00018C56 =00000001                M spmu4	=	op4
00018C56                            	spRateScale	$03, $00, $00, $00
00018C56 =00000003                M sprs1	=	op1
00018C56 =00000000                M sprs2	=	op2
00018C56 =00000000                M sprs3	=	op3
00018C56 =00000000                M sprs4	=	op4
00018C56                            	spAttackRt	$1F, $1F, $1F, $1F
00018C56 =0000001F                M spar1	=	op1
00018C56 =0000001F                M spar2	=	op2
00018C56 =0000001F                M spar3	=	op3
00018C56 =0000001F                M spar4	=	op4
00018C56                            	spAmpMod	$00, $00, $00, $00
00018C56 =00000000                M spam1	=	op1
00018C56 =00000000                M spam2	=	op2
00018C56 =00000000                M spam3	=	op3
00018C56 =00000000                M spam4	=	op4
00018C56                            	spSustainRt	$12, $0F, $04, $0F
00018C56 =00000012                M spsr1	=	op1
00018C56 =0000000F                M spsr2	=	op2
00018C56 =00000004                M spsr3	=	op3
00018C56 =0000000F                M spsr4	=	op4
00018C56                            	spSustainLv	$02, $00, $00, $00
00018C56 =00000002                M spsl1	=	op1
00018C56 =00000000                M spsl2	=	op2
00018C56 =00000000                M spsl3	=	op3
00018C56 =00000000                M spsl4	=	op4
00018C56                            	spDecayRt	$00, $00, $00, $00
00018C56 =00000000                M spdr1	=	op1
00018C56 =00000000                M spdr2	=	op2
00018C56 =00000000                M spdr3	=	op3
00018C56 =00000000                M spdr4	=	op4
00018C56                            	spReleaseRt	$0F, $0F, $09, $0F
00018C56 =0000000F                M sprr1	=	op1
00018C56 =0000000F                M sprr2	=	op2
00018C56 =00000009                M sprr3	=	op3
00018C56 =0000000F                M sprr4	=	op4
00018C56                            	spSSGEG		$00, $00, $00, $00
00018C56 =00000000                M spss1	=	op1
00018C56 =00000000                M spss2	=	op2
00018C56 =00000000                M spss3	=	op3
00018C56 =00000000                M spss4	=	op4
00018C56                            	spTotalLv	$26, $0B, $0A, $00
00018C56 =00000026                M sptl1	=	op1
00018C56 =0000000B                M sptl2	=	op2
00018C56 =0000000A                M sptl3	=	op3
00018C56 =00000000                M sptl4	=	op4
00018C56 3D                       M 	dc.b	(spfe<<3)+spal
00018C57 =00000080                M sptlmask4	set	$80
00018C57 =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
00018C57 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00018C57 =00000000                M sptlmask1	set	((spal=7)<<7)
00018C57 6528 0461                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00018C5B DF1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00018C5F 1204 0F0F                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00018C63 0000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00018C67 2F09 0F0F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00018C6B 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00018C6F 268A 8B80                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00018C73 4E41 54                  M 	dc.b	'NAT'
00018C76                            
00018C76                            	; Patch $12
00018C76                            	; $30
00018C76                            	; $75, $75, $71, $31,	$D8, $58, $96, $94
00018C76                            	; $01, $0B, $03, $08,	$01, $04, $01, $01
00018C76                            	; $F3, $23, $34, $35,	$34, $29, $10, $80
00018C76                            	spAlgorithm	$00
00018C76 =00000013                M spatnum	=	spatnum+1
00018C76 =00000000                M spal	=	val
00018C76                            	spFeedback	$06
00018C76 =00000006                M spfe	=	val
00018C76                            	spDetune	$07, $07, $07, $03
00018C76 =00000007                M spde1	=	op1
00018C76 =00000007                M spde2	=	op2
00018C76 =00000007                M spde3	=	op3
00018C76 =00000003                M spde4	=	op4
00018C76                            	spMultiple	$05, $01, $05, $01
00018C76 =00000005                M spmu1	=	op1
00018C76 =00000001                M spmu2	=	op2
00018C76 =00000005                M spmu3	=	op3
00018C76 =00000001                M spmu4	=	op4
00018C76                            	spRateScale	$03, $02, $01, $02
00018C76 =00000003                M sprs1	=	op1
00018C76 =00000002                M sprs2	=	op2
00018C76 =00000001                M sprs3	=	op3
00018C76 =00000002                M sprs4	=	op4
00018C76                            	spAttackRt	$18, $16, $18, $14
00018C76 =00000018                M spar1	=	op1
00018C76 =00000016                M spar2	=	op2
00018C76 =00000018                M spar3	=	op3
00018C76 =00000014                M spar4	=	op4
00018C76                            	spAmpMod	$00, $00, $00, $00
00018C76 =00000000                M spam1	=	op1
00018C76 =00000000                M spam2	=	op2
00018C76 =00000000                M spam3	=	op3
00018C76 =00000000                M spam4	=	op4
00018C76                            	spSustainRt	$01, $03, $0B, $08
00018C76 =00000001                M spsr1	=	op1
00018C76 =00000003                M spsr2	=	op2
00018C76 =0000000B                M spsr3	=	op3
00018C76 =00000008                M spsr4	=	op4
00018C76                            	spSustainLv	$0F, $03, $02, $03
00018C76 =0000000F                M spsl1	=	op1
00018C76 =00000003                M spsl2	=	op2
00018C76 =00000002                M spsl3	=	op3
00018C76 =00000003                M spsl4	=	op4
00018C76                            	spDecayRt	$01, $01, $04, $01
00018C76 =00000001                M spdr1	=	op1
00018C76 =00000001                M spdr2	=	op2
00018C76 =00000004                M spdr3	=	op3
00018C76 =00000001                M spdr4	=	op4
00018C76                            	spReleaseRt	$03, $04, $03, $05
00018C76 =00000003                M sprr1	=	op1
00018C76 =00000004                M sprr2	=	op2
00018C76 =00000003                M sprr3	=	op3
00018C76 =00000005                M sprr4	=	op4
00018C76                            	spSSGEG		$00, $00, $00, $00
00018C76 =00000000                M spss1	=	op1
00018C76 =00000000                M spss2	=	op2
00018C76 =00000000                M spss3	=	op3
00018C76 =00000000                M spss4	=	op4
00018C76                            	spTotalLv	$34, $10, $29, $00
00018C76 =00000034                M sptl1	=	op1
00018C76 =00000010                M sptl2	=	op2
00018C76 =00000029                M sptl3	=	op3
00018C76 =00000000                M sptl4	=	op4
00018C76 30                       M 	dc.b	(spfe<<3)+spal
00018C77 =00000080                M sptlmask4	set	$80
00018C77 =00000000                M sptlmask2	set	((spal>=5)<<7)
00018C77 =00000000                M sptlmask3	set	((spal>=4)<<7)
00018C77 =00000000                M sptlmask1	set	((spal=7)<<7)
00018C77 7575 7131                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00018C7B D858 9694                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00018C7F 010B 0308                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00018C83 0104 0101                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00018C87 F323 3435                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00018C8B 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00018C8F 3429 1080                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00018C93 4E41 54                  M 	dc.b	'NAT'
00018C96                            
00018C96                            	; Patch $13
00018C96                            	; $1C
00018C96                            	; $76, $74, $36, $34,	$94, $99, $94, $99
00018C96                            	; $08, $0A, $08, $0A,	$00, $05, $00, $05
00018C96                            	; $35, $47, $35, $47,	$1E, $80, $19, $80
00018C96                            	spAlgorithm	$04
00018C96 =00000014                M spatnum	=	spatnum+1
00018C96 =00000004                M spal	=	val
00018C96                            	spFeedback	$03
00018C96 =00000003                M spfe	=	val
00018C96                            	spDetune	$07, $03, $07, $03
00018C96 =00000007                M spde1	=	op1
00018C96 =00000003                M spde2	=	op2
00018C96 =00000007                M spde3	=	op3
00018C96 =00000003                M spde4	=	op4
00018C96                            	spMultiple	$06, $06, $04, $04
00018C96 =00000006                M spmu1	=	op1
00018C96 =00000006                M spmu2	=	op2
00018C96 =00000004                M spmu3	=	op3
00018C96 =00000004                M spmu4	=	op4
00018C96                            	spRateScale	$02, $02, $02, $02
00018C96 =00000002                M sprs1	=	op1
00018C96 =00000002                M sprs2	=	op2
00018C96 =00000002                M sprs3	=	op3
00018C96 =00000002                M sprs4	=	op4
00018C96                            	spAttackRt	$14, $14, $19, $19
00018C96 =00000014                M spar1	=	op1
00018C96 =00000014                M spar2	=	op2
00018C96 =00000019                M spar3	=	op3
00018C96 =00000019                M spar4	=	op4
00018C96                            	spAmpMod	$00, $00, $00, $00
00018C96 =00000000                M spam1	=	op1
00018C96 =00000000                M spam2	=	op2
00018C96 =00000000                M spam3	=	op3
00018C96 =00000000                M spam4	=	op4
00018C96                            	spSustainRt	$08, $08, $0A, $0A
00018C96 =00000008                M spsr1	=	op1
00018C96 =00000008                M spsr2	=	op2
00018C96 =0000000A                M spsr3	=	op3
00018C96 =0000000A                M spsr4	=	op4
00018C96                            	spSustainLv	$03, $03, $04, $04
00018C96 =00000003                M spsl1	=	op1
00018C96 =00000003                M spsl2	=	op2
00018C96 =00000004                M spsl3	=	op3
00018C96 =00000004                M spsl4	=	op4
00018C96                            	spDecayRt	$00, $00, $05, $05
00018C96 =00000000                M spdr1	=	op1
00018C96 =00000000                M spdr2	=	op2
00018C96 =00000005                M spdr3	=	op3
00018C96 =00000005                M spdr4	=	op4
00018C96                            	spReleaseRt	$05, $05, $07, $07
00018C96 =00000005                M sprr1	=	op1
00018C96 =00000005                M sprr2	=	op2
00018C96 =00000007                M sprr3	=	op3
00018C96 =00000007                M sprr4	=	op4
00018C96                            	spSSGEG		$00, $00, $00, $00
00018C96 =00000000                M spss1	=	op1
00018C96 =00000000                M spss2	=	op2
00018C96 =00000000                M spss3	=	op3
00018C96 =00000000                M spss4	=	op4
00018C96                            	spTotalLv	$1E, $19, $00, $00
00018C96 =0000001E                M sptl1	=	op1
00018C96 =00000019                M sptl2	=	op2
00018C96 =00000000                M sptl3	=	op3
00018C96 =00000000                M sptl4	=	op4
00018C96 1C                       M 	dc.b	(spfe<<3)+spal
00018C97 =00000080                M sptlmask4	set	$80
00018C97 =00000000                M sptlmask2	set	((spal>=5)<<7)
00018C97 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00018C97 =00000000                M sptlmask1	set	((spal=7)<<7)
00018C97 7674 3634                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00018C9B 9499 9499                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00018C9F 080A 080A                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00018CA3 0005 0005                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00018CA7 3547 3547                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00018CAB 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00018CAF 1E80 1980                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00018CB3 4E41 54                  M 	dc.b	'NAT'
00018CB6                            
00018CB6                            	; Patch $14
00018CB6                            	; $3A
00018CB6                            	; $42, $4A, $32, $42,	$5C, $53, $5C, $4F
00018CB6                            	; $07, $0F, $0C, $0A,	$00, $00, $00, $00
00018CB6                            	; $1F, $36, $18, $07,	$1B, $0C, $33, $80
00018CB6                            	spAlgorithm	$02
00018CB6 =00000015                M spatnum	=	spatnum+1
00018CB6 =00000002                M spal	=	val
00018CB6                            	spFeedback	$07
00018CB6 =00000007                M spfe	=	val
00018CB6                            	spDetune	$04, $03, $04, $04
00018CB6 =00000004                M spde1	=	op1
00018CB6 =00000003                M spde2	=	op2
00018CB6 =00000004                M spde3	=	op3
00018CB6 =00000004                M spde4	=	op4
00018CB6                            	spMultiple	$02, $02, $0A, $02
00018CB6 =00000002                M spmu1	=	op1
00018CB6 =00000002                M spmu2	=	op2
00018CB6 =0000000A                M spmu3	=	op3
00018CB6 =00000002                M spmu4	=	op4
00018CB6                            	spRateScale	$01, $01, $01, $01
00018CB6 =00000001                M sprs1	=	op1
00018CB6 =00000001                M sprs2	=	op2
00018CB6 =00000001                M sprs3	=	op3
00018CB6 =00000001                M sprs4	=	op4
00018CB6                            	spAttackRt	$1C, $1C, $13, $0F
00018CB6 =0000001C                M spar1	=	op1
00018CB6 =0000001C                M spar2	=	op2
00018CB6 =00000013                M spar3	=	op3
00018CB6 =0000000F                M spar4	=	op4
00018CB6                            	spAmpMod	$00, $00, $00, $00
00018CB6 =00000000                M spam1	=	op1
00018CB6 =00000000                M spam2	=	op2
00018CB6 =00000000                M spam3	=	op3
00018CB6 =00000000                M spam4	=	op4
00018CB6                            	spSustainRt	$07, $0C, $0F, $0A
00018CB6 =00000007                M spsr1	=	op1
00018CB6 =0000000C                M spsr2	=	op2
00018CB6 =0000000F                M spsr3	=	op3
00018CB6 =0000000A                M spsr4	=	op4
00018CB6                            	spSustainLv	$01, $01, $03, $00
00018CB6 =00000001                M spsl1	=	op1
00018CB6 =00000001                M spsl2	=	op2
00018CB6 =00000003                M spsl3	=	op3
00018CB6 =00000000                M spsl4	=	op4
00018CB6                            	spDecayRt	$00, $00, $00, $00
00018CB6 =00000000                M spdr1	=	op1
00018CB6 =00000000                M spdr2	=	op2
00018CB6 =00000000                M spdr3	=	op3
00018CB6 =00000000                M spdr4	=	op4
00018CB6                            	spReleaseRt	$0F, $08, $06, $07
00018CB6 =0000000F                M sprr1	=	op1
00018CB6 =00000008                M sprr2	=	op2
00018CB6 =00000006                M sprr3	=	op3
00018CB6 =00000007                M sprr4	=	op4
00018CB6                            	spSSGEG		$00, $00, $00, $00
00018CB6 =00000000                M spss1	=	op1
00018CB6 =00000000                M spss2	=	op2
00018CB6 =00000000                M spss3	=	op3
00018CB6 =00000000                M spss4	=	op4
00018CB6                            	spTotalLv	$1B, $33, $0C, $00
00018CB6 =0000001B                M sptl1	=	op1
00018CB6 =00000033                M sptl2	=	op2
00018CB6 =0000000C                M sptl3	=	op3
00018CB6 =00000000                M sptl4	=	op4
00018CB6 3A                       M 	dc.b	(spfe<<3)+spal
00018CB7 =00000080                M sptlmask4	set	$80
00018CB7 =00000000                M sptlmask2	set	((spal>=5)<<7)
00018CB7 =00000000                M sptlmask3	set	((spal>=4)<<7)
00018CB7 =00000000                M sptlmask1	set	((spal=7)<<7)
00018CB7 424A 3242                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00018CBB 5C53 5C4F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00018CBF 070F 0C0A                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00018CC3 0000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00018CC7 1F36 1807                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00018CCB 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00018CCF 1B0C 3380                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00018CD3 4E41 54                  M 	dc.b	'NAT'
00018CD6                            
00018CD6                            	; Patch $15
00018CD6                            	; $16
00018CD6                            	; $7A, $74, $3C, $31,	$1F, $1F, $1F, $1F
00018CD6                            	; $0A, $07, $0C, $06,	$07, $0A, $07, $05
00018CD6                            	; $25, $A7, $A7, $55,	$14, $85, $8A, $80
00018CD6                            	spAlgorithm	$06
00018CD6 =00000016                M spatnum	=	spatnum+1
00018CD6 =00000006                M spal	=	val
00018CD6                            	spFeedback	$02
00018CD6 =00000002                M spfe	=	val
00018CD6                            	spDetune	$07, $03, $07, $03
00018CD6 =00000007                M spde1	=	op1
00018CD6 =00000003                M spde2	=	op2
00018CD6 =00000007                M spde3	=	op3
00018CD6 =00000003                M spde4	=	op4
00018CD6                            	spMultiple	$0A, $0C, $04, $01
00018CD6 =0000000A                M spmu1	=	op1
00018CD6 =0000000C                M spmu2	=	op2
00018CD6 =00000004                M spmu3	=	op3
00018CD6 =00000001                M spmu4	=	op4
00018CD6                            	spRateScale	$00, $00, $00, $00
00018CD6 =00000000                M sprs1	=	op1
00018CD6 =00000000                M sprs2	=	op2
00018CD6 =00000000                M sprs3	=	op3
00018CD6 =00000000                M sprs4	=	op4
00018CD6                            	spAttackRt	$1F, $1F, $1F, $1F
00018CD6 =0000001F                M spar1	=	op1
00018CD6 =0000001F                M spar2	=	op2
00018CD6 =0000001F                M spar3	=	op3
00018CD6 =0000001F                M spar4	=	op4
00018CD6                            	spAmpMod	$00, $00, $00, $00
00018CD6 =00000000                M spam1	=	op1
00018CD6 =00000000                M spam2	=	op2
00018CD6 =00000000                M spam3	=	op3
00018CD6 =00000000                M spam4	=	op4
00018CD6                            	spSustainRt	$0A, $0C, $07, $06
00018CD6 =0000000A                M spsr1	=	op1
00018CD6 =0000000C                M spsr2	=	op2
00018CD6 =00000007                M spsr3	=	op3
00018CD6 =00000006                M spsr4	=	op4
00018CD6                            	spSustainLv	$02, $0A, $0A, $05
00018CD6 =00000002                M spsl1	=	op1
00018CD6 =0000000A                M spsl2	=	op2
00018CD6 =0000000A                M spsl3	=	op3
00018CD6 =00000005                M spsl4	=	op4
00018CD6                            	spDecayRt	$07, $07, $0A, $05
00018CD6 =00000007                M spdr1	=	op1
00018CD6 =00000007                M spdr2	=	op2
00018CD6 =0000000A                M spdr3	=	op3
00018CD6 =00000005                M spdr4	=	op4
00018CD6                            	spReleaseRt	$05, $07, $07, $05
00018CD6 =00000005                M sprr1	=	op1
00018CD6 =00000007                M sprr2	=	op2
00018CD6 =00000007                M sprr3	=	op3
00018CD6 =00000005                M sprr4	=	op4
00018CD6                            	spSSGEG		$00, $00, $00, $00
00018CD6 =00000000                M spss1	=	op1
00018CD6 =00000000                M spss2	=	op2
00018CD6 =00000000                M spss3	=	op3
00018CD6 =00000000                M spss4	=	op4
00018CD6                            	spTotalLv	$14, $0A, $05, $00
00018CD6 =00000014                M sptl1	=	op1
00018CD6 =0000000A                M sptl2	=	op2
00018CD6 =00000005                M sptl3	=	op3
00018CD6 =00000000                M sptl4	=	op4
00018CD6 16                       M 	dc.b	(spfe<<3)+spal
00018CD7 =00000080                M sptlmask4	set	$80
00018CD7 =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
00018CD7 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00018CD7 =00000000                M sptlmask1	set	((spal=7)<<7)
00018CD7 7A74 3C31                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00018CDB 1F1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00018CDF 0A07 0C06                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00018CE3 070A 0705                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00018CE7 25A7 A755                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00018CEB 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00018CEF 1485 8A80                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00018CF3 4E41 54                  M 	dc.b	'NAT'
00018CF6                            
00018CF6                            	; Patch $16
00018CF6                            	; $3D
00018CF6                            	; $01, $21, $51, $01,	$12, $14, $14, $0F
00018CF6                            	; $0A, $05, $05, $05,	$00, $00, $00, $00
00018CF6                            	; $2B, $2B, $2B, $1B,	$19, $80, $80, $80
00018CF6                            	spAlgorithm	$05
00018CF6 =00000017                M spatnum	=	spatnum+1
00018CF6 =00000005                M spal	=	val
00018CF6                            	spFeedback	$07
00018CF6 =00000007                M spfe	=	val
00018CF6                            	spDetune	$00, $05, $02, $00
00018CF6 =00000000                M spde1	=	op1
00018CF6 =00000005                M spde2	=	op2
00018CF6 =00000002                M spde3	=	op3
00018CF6 =00000000                M spde4	=	op4
00018CF6                            	spMultiple	$01, $01, $01, $01
00018CF6 =00000001                M spmu1	=	op1
00018CF6 =00000001                M spmu2	=	op2
00018CF6 =00000001                M spmu3	=	op3
00018CF6 =00000001                M spmu4	=	op4
00018CF6                            	spRateScale	$00, $00, $00, $00
00018CF6 =00000000                M sprs1	=	op1
00018CF6 =00000000                M sprs2	=	op2
00018CF6 =00000000                M sprs3	=	op3
00018CF6 =00000000                M sprs4	=	op4
00018CF6                            	spAttackRt	$12, $14, $14, $0F
00018CF6 =00000012                M spar1	=	op1
00018CF6 =00000014                M spar2	=	op2
00018CF6 =00000014                M spar3	=	op3
00018CF6 =0000000F                M spar4	=	op4
00018CF6                            	spAmpMod	$00, $00, $00, $00
00018CF6 =00000000                M spam1	=	op1
00018CF6 =00000000                M spam2	=	op2
00018CF6 =00000000                M spam3	=	op3
00018CF6 =00000000                M spam4	=	op4
00018CF6                            	spSustainRt	$0A, $05, $05, $05
00018CF6 =0000000A                M spsr1	=	op1
00018CF6 =00000005                M spsr2	=	op2
00018CF6 =00000005                M spsr3	=	op3
00018CF6 =00000005                M spsr4	=	op4
00018CF6                            	spSustainLv	$02, $02, $02, $01
00018CF6 =00000002                M spsl1	=	op1
00018CF6 =00000002                M spsl2	=	op2
00018CF6 =00000002                M spsl3	=	op3
00018CF6 =00000001                M spsl4	=	op4
00018CF6                            	spDecayRt	$00, $00, $00, $00
00018CF6 =00000000                M spdr1	=	op1
00018CF6 =00000000                M spdr2	=	op2
00018CF6 =00000000                M spdr3	=	op3
00018CF6 =00000000                M spdr4	=	op4
00018CF6                            	spReleaseRt	$0B, $0B, $0B, $0B
00018CF6 =0000000B                M sprr1	=	op1
00018CF6 =0000000B                M sprr2	=	op2
00018CF6 =0000000B                M sprr3	=	op3
00018CF6 =0000000B                M sprr4	=	op4
00018CF6                            	spSSGEG		$00, $00, $00, $00
00018CF6 =00000000                M spss1	=	op1
00018CF6 =00000000                M spss2	=	op2
00018CF6 =00000000                M spss3	=	op3
00018CF6 =00000000                M spss4	=	op4
00018CF6                            	spTotalLv	$19, $00, $00, $00
00018CF6 =00000019                M sptl1	=	op1
00018CF6 =00000000                M sptl2	=	op2
00018CF6 =00000000                M sptl3	=	op3
00018CF6 =00000000                M sptl4	=	op4
00018CF6 3D                       M 	dc.b	(spfe<<3)+spal
00018CF7 =00000080                M sptlmask4	set	$80
00018CF7 =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
00018CF7 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00018CF7 =00000000                M sptlmask1	set	((spal=7)<<7)
00018CF7 0121 5101                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00018CFB 1214 140F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00018CFF 0A05 0505                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00018D03 0000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00018D07 2B2B 2B1B                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00018D0B 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00018D0F 1980 8080                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00018D13 4E41 54                  M 	dc.b	'NAT'
00018D16                            
00018D16                            	; Patch $17
00018D16                            	; $35
00018D16                            	; $31, $38, $30, $31,	$9E, $D8, $DF, $DC
00018D16                            	; $0E, $0A, $01, $05,	$08, $08, $08, $08
00018D16                            	; $B6, $B6, $B6, $B6,	$14, $87, $80, $80
00018D16                            	spAlgorithm	$05
00018D16 =00000018                M spatnum	=	spatnum+1
00018D16 =00000005                M spal	=	val
00018D16                            	spFeedback	$06
00018D16 =00000006                M spfe	=	val
00018D16                            	spDetune	$03, $03, $03, $03
00018D16 =00000003                M spde1	=	op1
00018D16 =00000003                M spde2	=	op2
00018D16 =00000003                M spde3	=	op3
00018D16 =00000003                M spde4	=	op4
00018D16                            	spMultiple	$01, $00, $08, $01
00018D16 =00000001                M spmu1	=	op1
00018D16 =00000000                M spmu2	=	op2
00018D16 =00000008                M spmu3	=	op3
00018D16 =00000001                M spmu4	=	op4
00018D16                            	spRateScale	$02, $03, $03, $03
00018D16 =00000002                M sprs1	=	op1
00018D16 =00000003                M sprs2	=	op2
00018D16 =00000003                M sprs3	=	op3
00018D16 =00000003                M sprs4	=	op4
00018D16                            	spAttackRt	$1E, $1F, $18, $1C
00018D16 =0000001E                M spar1	=	op1
00018D16 =0000001F                M spar2	=	op2
00018D16 =00000018                M spar3	=	op3
00018D16 =0000001C                M spar4	=	op4
00018D16                            	spAmpMod	$00, $00, $00, $00
00018D16 =00000000                M spam1	=	op1
00018D16 =00000000                M spam2	=	op2
00018D16 =00000000                M spam3	=	op3
00018D16 =00000000                M spam4	=	op4
00018D16                            	spSustainRt	$0E, $01, $0A, $05
00018D16 =0000000E                M spsr1	=	op1
00018D16 =00000001                M spsr2	=	op2
00018D16 =0000000A                M spsr3	=	op3
00018D16 =00000005                M spsr4	=	op4
00018D16                            	spSustainLv	$0B, $0B, $0B, $0B
00018D16 =0000000B                M spsl1	=	op1
00018D16 =0000000B                M spsl2	=	op2
00018D16 =0000000B                M spsl3	=	op3
00018D16 =0000000B                M spsl4	=	op4
00018D16                            	spDecayRt	$08, $08, $08, $08
00018D16 =00000008                M spdr1	=	op1
00018D16 =00000008                M spdr2	=	op2
00018D16 =00000008                M spdr3	=	op3
00018D16 =00000008                M spdr4	=	op4
00018D16                            	spReleaseRt	$06, $06, $06, $06
00018D16 =00000006                M sprr1	=	op1
00018D16 =00000006                M sprr2	=	op2
00018D16 =00000006                M sprr3	=	op3
00018D16 =00000006                M sprr4	=	op4
00018D16                            	spSSGEG		$00, $00, $00, $00
00018D16 =00000000                M spss1	=	op1
00018D16 =00000000                M spss2	=	op2
00018D16 =00000000                M spss3	=	op3
00018D16 =00000000                M spss4	=	op4
00018D16                            	spTotalLv	$14, $00, $07, $00
00018D16 =00000014                M sptl1	=	op1
00018D16 =00000000                M sptl2	=	op2
00018D16 =00000007                M sptl3	=	op3
00018D16 =00000000                M sptl4	=	op4
00018D16 35                       M 	dc.b	(spfe<<3)+spal
00018D17 =00000080                M sptlmask4	set	$80
00018D17 =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
00018D17 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00018D17 =00000000                M sptlmask1	set	((spal=7)<<7)
00018D17 3138 3031                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00018D1B 9ED8 DFDC                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00018D1F 0E0A 0105                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00018D23 0808 0808                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00018D27 B6B6 B6B6                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00018D2B 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00018D2F 1487 8080                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00018D33 4E41 54                  M 	dc.b	'NAT'
00018D36                            
00018D36                            	; Patch $18
00018D36                            	; $18
00018D36                            	; $32, $30, $30, $30,	$9E, $DC, $1C, $9A
00018D36                            	; $0D, $06, $04, $01,	$08, $0A, $03, $05
00018D36                            	; $B6, $B6, $36, $26,	$2C, $22, $14, $80
00018D36                            	spAlgorithm	$00
00018D36 =00000019                M spatnum	=	spatnum+1
00018D36 =00000000                M spal	=	val
00018D36                            	spFeedback	$03
00018D36 =00000003                M spfe	=	val
00018D36                            	spDetune	$03, $03, $03, $03
00018D36 =00000003                M spde1	=	op1
00018D36 =00000003                M spde2	=	op2
00018D36 =00000003                M spde3	=	op3
00018D36 =00000003                M spde4	=	op4
00018D36                            	spMultiple	$02, $00, $00, $00
00018D36 =00000002                M spmu1	=	op1
00018D36 =00000000                M spmu2	=	op2
00018D36 =00000000                M spmu3	=	op3
00018D36 =00000000                M spmu4	=	op4
00018D36                            	spRateScale	$02, $00, $03, $02
00018D36 =00000002                M sprs1	=	op1
00018D36 =00000000                M sprs2	=	op2
00018D36 =00000003                M sprs3	=	op3
00018D36 =00000002                M sprs4	=	op4
00018D36                            	spAttackRt	$1E, $1C, $1C, $1A
00018D36 =0000001E                M spar1	=	op1
00018D36 =0000001C                M spar2	=	op2
00018D36 =0000001C                M spar3	=	op3
00018D36 =0000001A                M spar4	=	op4
00018D36                            	spAmpMod	$00, $00, $00, $00
00018D36 =00000000                M spam1	=	op1
00018D36 =00000000                M spam2	=	op2
00018D36 =00000000                M spam3	=	op3
00018D36 =00000000                M spam4	=	op4
00018D36                            	spSustainRt	$0D, $04, $06, $01
00018D36 =0000000D                M spsr1	=	op1
00018D36 =00000004                M spsr2	=	op2
00018D36 =00000006                M spsr3	=	op3
00018D36 =00000001                M spsr4	=	op4
00018D36                            	spSustainLv	$0B, $03, $0B, $02
00018D36 =0000000B                M spsl1	=	op1
00018D36 =00000003                M spsl2	=	op2
00018D36 =0000000B                M spsl3	=	op3
00018D36 =00000002                M spsl4	=	op4
00018D36                            	spDecayRt	$08, $03, $0A, $05
00018D36 =00000008                M spdr1	=	op1
00018D36 =00000003                M spdr2	=	op2
00018D36 =0000000A                M spdr3	=	op3
00018D36 =00000005                M spdr4	=	op4
00018D36                            	spReleaseRt	$06, $06, $06, $06
00018D36 =00000006                M sprr1	=	op1
00018D36 =00000006                M sprr2	=	op2
00018D36 =00000006                M sprr3	=	op3
00018D36 =00000006                M sprr4	=	op4
00018D36                            	spSSGEG		$00, $00, $00, $00
00018D36 =00000000                M spss1	=	op1
00018D36 =00000000                M spss2	=	op2
00018D36 =00000000                M spss3	=	op3
00018D36 =00000000                M spss4	=	op4
00018D36                            	spTotalLv	$2C, $14, $22, $00
00018D36 =0000002C                M sptl1	=	op1
00018D36 =00000014                M sptl2	=	op2
00018D36 =00000022                M sptl3	=	op3
00018D36 =00000000                M sptl4	=	op4
00018D36 18                       M 	dc.b	(spfe<<3)+spal
00018D37 =00000080                M sptlmask4	set	$80
00018D37 =00000000                M sptlmask2	set	((spal>=5)<<7)
00018D37 =00000000                M sptlmask3	set	((spal>=4)<<7)
00018D37 =00000000                M sptlmask1	set	((spal=7)<<7)
00018D37 3230 3030                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00018D3B 9EDC 1C9A                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00018D3F 0D06 0401                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00018D43 080A 0305                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00018D47 B6B6 3626                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00018D4B 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00018D4F 2C22 1480                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00018D53 4E41 54                  M 	dc.b	'NAT'
00018D56                            
00018D56                            	; Patch $19
00018D56                            	; $38
00018D56                            	; $58, $33, $53, $31,	$5F, $5F, $1C, $5F
00018D56                            	; $09, $0A, $06, $02,	$00, $00, $00, $08
00018D56                            	; $F6, $F9, $F8, $08,	$27, $1D, $22, $81
00018D56                            	spAlgorithm	$00
00018D56 =0000001A                M spatnum	=	spatnum+1
00018D56 =00000000                M spal	=	val
00018D56                            	spFeedback	$07
00018D56 =00000007                M spfe	=	val
00018D56                            	spDetune	$05, $05, $03, $03
00018D56 =00000005                M spde1	=	op1
00018D56 =00000005                M spde2	=	op2
00018D56 =00000003                M spde3	=	op3
00018D56 =00000003                M spde4	=	op4
00018D56                            	spMultiple	$08, $03, $03, $01
00018D56 =00000008                M spmu1	=	op1
00018D56 =00000003                M spmu2	=	op2
00018D56 =00000003                M spmu3	=	op3
00018D56 =00000001                M spmu4	=	op4
00018D56                            	spRateScale	$01, $00, $01, $01
00018D56 =00000001                M sprs1	=	op1
00018D56 =00000000                M sprs2	=	op2
00018D56 =00000001                M sprs3	=	op3
00018D56 =00000001                M sprs4	=	op4
00018D56                            	spAttackRt	$1F, $1C, $1F, $1F
00018D56 =0000001F                M spar1	=	op1
00018D56 =0000001C                M spar2	=	op2
00018D56 =0000001F                M spar3	=	op3
00018D56 =0000001F                M spar4	=	op4
00018D56                            	spAmpMod	$00, $00, $00, $00
00018D56 =00000000                M spam1	=	op1
00018D56 =00000000                M spam2	=	op2
00018D56 =00000000                M spam3	=	op3
00018D56 =00000000                M spam4	=	op4
00018D56                            	spSustainRt	$09, $06, $0A, $02
00018D56 =00000009                M spsr1	=	op1
00018D56 =00000006                M spsr2	=	op2
00018D56 =0000000A                M spsr3	=	op3
00018D56 =00000002                M spsr4	=	op4
00018D56                            	spSustainLv	$0F, $0F, $0F, $00
00018D56 =0000000F                M spsl1	=	op1
00018D56 =0000000F                M spsl2	=	op2
00018D56 =0000000F                M spsl3	=	op3
00018D56 =00000000                M spsl4	=	op4
00018D56                            	spDecayRt	$00, $00, $00, $08
00018D56 =00000000                M spdr1	=	op1
00018D56 =00000000                M spdr2	=	op2
00018D56 =00000000                M spdr3	=	op3
00018D56 =00000008                M spdr4	=	op4
00018D56                            	spReleaseRt	$06, $08, $09, $08
00018D56 =00000006                M sprr1	=	op1
00018D56 =00000008                M sprr2	=	op2
00018D56 =00000009                M sprr3	=	op3
00018D56 =00000008                M sprr4	=	op4
00018D56                            	spSSGEG		$00, $00, $00, $00
00018D56 =00000000                M spss1	=	op1
00018D56 =00000000                M spss2	=	op2
00018D56 =00000000                M spss3	=	op3
00018D56 =00000000                M spss4	=	op4
00018D56                            	spTotalLv	$27, $22, $1D, $01
00018D56 =00000027                M sptl1	=	op1
00018D56 =00000022                M sptl2	=	op2
00018D56 =0000001D                M sptl3	=	op3
00018D56 =00000001                M sptl4	=	op4
00018D56 38                       M 	dc.b	(spfe<<3)+spal
00018D57 =00000080                M sptlmask4	set	$80
00018D57 =00000000                M sptlmask2	set	((spal>=5)<<7)
00018D57 =00000000                M sptlmask3	set	((spal>=4)<<7)
00018D57 =00000000                M sptlmask1	set	((spal=7)<<7)
00018D57 5833 5331                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00018D5B 5F5F 1C5F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00018D5F 090A 0602                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00018D63 0000 0008                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00018D67 F6F9 F808                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00018D6B 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00018D6F 271D 2281                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00018D73 4E41 54                  M 	dc.b	'NAT'
00018D76                            
00018D76                            	; Patch $1A
00018D76                            	; $24
00018D76                            	; $3E, $31, $16, $11,	$1F, $98, $1F, $9F
00018D76                            	; $0F, $01, $0E, $01,	$0E, $05, $08, $05
00018D76                            	; $50, $02, $60, $02,	$2A, $81, $20, $81
00018D76                            	spAlgorithm	$04
00018D76 =0000001B                M spatnum	=	spatnum+1
00018D76 =00000004                M spal	=	val
00018D76                            	spFeedback	$04
00018D76 =00000004                M spfe	=	val
00018D76                            	spDetune	$03, $01, $03, $01
00018D76 =00000003                M spde1	=	op1
00018D76 =00000001                M spde2	=	op2
00018D76 =00000003                M spde3	=	op3
00018D76 =00000001                M spde4	=	op4
00018D76                            	spMultiple	$0E, $06, $01, $01
00018D76 =0000000E                M spmu1	=	op1
00018D76 =00000006                M spmu2	=	op2
00018D76 =00000001                M spmu3	=	op3
00018D76 =00000001                M spmu4	=	op4
00018D76                            	spRateScale	$00, $00, $02, $02
00018D76 =00000000                M sprs1	=	op1
00018D76 =00000000                M sprs2	=	op2
00018D76 =00000002                M sprs3	=	op3
00018D76 =00000002                M sprs4	=	op4
00018D76                            	spAttackRt	$1F, $1F, $18, $1F
00018D76 =0000001F                M spar1	=	op1
00018D76 =0000001F                M spar2	=	op2
00018D76 =00000018                M spar3	=	op3
00018D76 =0000001F                M spar4	=	op4
00018D76                            	spAmpMod	$00, $00, $00, $00
00018D76 =00000000                M spam1	=	op1
00018D76 =00000000                M spam2	=	op2
00018D76 =00000000                M spam3	=	op3
00018D76 =00000000                M spam4	=	op4
00018D76                            	spSustainRt	$0F, $0E, $01, $01
00018D76 =0000000F                M spsr1	=	op1
00018D76 =0000000E                M spsr2	=	op2
00018D76 =00000001                M spsr3	=	op3
00018D76 =00000001                M spsr4	=	op4
00018D76                            	spSustainLv	$05, $06, $00, $00
00018D76 =00000005                M spsl1	=	op1
00018D76 =00000006                M spsl2	=	op2
00018D76 =00000000                M spsl3	=	op3
00018D76 =00000000                M spsl4	=	op4
00018D76                            	spDecayRt	$0E, $08, $05, $05
00018D76 =0000000E                M spdr1	=	op1
00018D76 =00000008                M spdr2	=	op2
00018D76 =00000005                M spdr3	=	op3
00018D76 =00000005                M spdr4	=	op4
00018D76                            	spReleaseRt	$00, $00, $02, $02
00018D76 =00000000                M sprr1	=	op1
00018D76 =00000000                M sprr2	=	op2
00018D76 =00000002                M sprr3	=	op3
00018D76 =00000002                M sprr4	=	op4
00018D76                            	spSSGEG		$00, $00, $00, $00
00018D76 =00000000                M spss1	=	op1
00018D76 =00000000                M spss2	=	op2
00018D76 =00000000                M spss3	=	op3
00018D76 =00000000                M spss4	=	op4
00018D76                            	spTotalLv	$2A, $20, $01, $01
00018D76 =0000002A                M sptl1	=	op1
00018D76 =00000020                M sptl2	=	op2
00018D76 =00000001                M sptl3	=	op3
00018D76 =00000001                M sptl4	=	op4
00018D76 24                       M 	dc.b	(spfe<<3)+spal
00018D77 =00000080                M sptlmask4	set	$80
00018D77 =00000000                M sptlmask2	set	((spal>=5)<<7)
00018D77 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00018D77 =00000000                M sptlmask1	set	((spal=7)<<7)
00018D77 3E31 1611                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00018D7B 1F98 1F9F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00018D7F 0F01 0E01                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00018D83 0E05 0805                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00018D87 5002 6002                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00018D8B 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00018D8F 2A81 2081                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00018D93 4E41 54                  M 	dc.b	'NAT'
00018D96                            
00018D96                            	; Patch $1B
00018D96                            	; $1C
00018D96                            	; $3F, $03, $31, $31,	$1F, $1B, $1E, $1E
00018D96                            	; $0F, $07, $06, $07,	$00, $0A, $00, $00
00018D96                            	; $8A, $86, $F6, $F7,	$26, $80, $17, $80
00018D96                            	spAlgorithm	$04
00018D96 =0000001C                M spatnum	=	spatnum+1
00018D96 =00000004                M spal	=	val
00018D96                            	spFeedback	$03
00018D96 =00000003                M spfe	=	val
00018D96                            	spDetune	$03, $03, $00, $03
00018D96 =00000003                M spde1	=	op1
00018D96 =00000003                M spde2	=	op2
00018D96 =00000000                M spde3	=	op3
00018D96 =00000003                M spde4	=	op4
00018D96                            	spMultiple	$0F, $01, $03, $01
00018D96 =0000000F                M spmu1	=	op1
00018D96 =00000001                M spmu2	=	op2
00018D96 =00000003                M spmu3	=	op3
00018D96 =00000001                M spmu4	=	op4
00018D96                            	spRateScale	$00, $00, $00, $00
00018D96 =00000000                M sprs1	=	op1
00018D96 =00000000                M sprs2	=	op2
00018D96 =00000000                M sprs3	=	op3
00018D96 =00000000                M sprs4	=	op4
00018D96                            	spAttackRt	$1F, $1E, $1B, $1E
00018D96 =0000001F                M spar1	=	op1
00018D96 =0000001E                M spar2	=	op2
00018D96 =0000001B                M spar3	=	op3
00018D96 =0000001E                M spar4	=	op4
00018D96                            	spAmpMod	$00, $00, $00, $00
00018D96 =00000000                M spam1	=	op1
00018D96 =00000000                M spam2	=	op2
00018D96 =00000000                M spam3	=	op3
00018D96 =00000000                M spam4	=	op4
00018D96                            	spSustainRt	$0F, $06, $07, $07
00018D96 =0000000F                M spsr1	=	op1
00018D96 =00000006                M spsr2	=	op2
00018D96 =00000007                M spsr3	=	op3
00018D96 =00000007                M spsr4	=	op4
00018D96                            	spSustainLv	$08, $0F, $08, $0F
00018D96 =00000008                M spsl1	=	op1
00018D96 =0000000F                M spsl2	=	op2
00018D96 =00000008                M spsl3	=	op3
00018D96 =0000000F                M spsl4	=	op4
00018D96                            	spDecayRt	$00, $00, $0A, $00
00018D96 =00000000                M spdr1	=	op1
00018D96 =00000000                M spdr2	=	op2
00018D96 =0000000A                M spdr3	=	op3
00018D96 =00000000                M spdr4	=	op4
00018D96                            	spReleaseRt	$0A, $06, $06, $07
00018D96 =0000000A                M sprr1	=	op1
00018D96 =00000006                M sprr2	=	op2
00018D96 =00000006                M sprr3	=	op3
00018D96 =00000007                M sprr4	=	op4
00018D96                            	spSSGEG		$00, $00, $00, $00
00018D96 =00000000                M spss1	=	op1
00018D96 =00000000                M spss2	=	op2
00018D96 =00000000                M spss3	=	op3
00018D96 =00000000                M spss4	=	op4
00018D96                            	spTotalLv	$26, $17, $00, $00
00018D96 =00000026                M sptl1	=	op1
00018D96 =00000017                M sptl2	=	op2
00018D96 =00000000                M sptl3	=	op3
00018D96 =00000000                M sptl4	=	op4
00018D96 1C                       M 	dc.b	(spfe<<3)+spal
00018D97 =00000080                M sptlmask4	set	$80
00018D97 =00000000                M sptlmask2	set	((spal>=5)<<7)
00018D97 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00018D97 =00000000                M sptlmask1	set	((spal=7)<<7)
00018D97 3F03 3131                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00018D9B 1F1B 1E1E                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00018D9F 0F07 0607                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00018DA3 000A 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00018DA7 8A86 F6F7                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00018DAB 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00018DAF 2680 1780                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00018DB3 4E41 54                  M 	dc.b	'NAT'
00018DB6                            
00018DB6                            	; Patch $1C
00018DB6                            	; $3A
00018DB6                            	; $31, $37, $31, $31,	$8D, $8D, $8E, $53
00018DB6                            	; $0E, $0E, $0E, $03,	$06, $06, $06, $04
00018DB6                            	; $1F, $FF, $1F, $0F,	$18, $23, $1E, $80
00018DB6                            	spAlgorithm	$02
00018DB6 =0000001D                M spatnum	=	spatnum+1
00018DB6 =00000002                M spal	=	val
00018DB6                            	spFeedback	$07
00018DB6 =00000007                M spfe	=	val
00018DB6                            	spDetune	$03, $03, $03, $03
00018DB6 =00000003                M spde1	=	op1
00018DB6 =00000003                M spde2	=	op2
00018DB6 =00000003                M spde3	=	op3
00018DB6 =00000003                M spde4	=	op4
00018DB6                            	spMultiple	$01, $01, $07, $01
00018DB6 =00000001                M spmu1	=	op1
00018DB6 =00000001                M spmu2	=	op2
00018DB6 =00000007                M spmu3	=	op3
00018DB6 =00000001                M spmu4	=	op4
00018DB6                            	spRateScale	$02, $02, $02, $01
00018DB6 =00000002                M sprs1	=	op1
00018DB6 =00000002                M sprs2	=	op2
00018DB6 =00000002                M sprs3	=	op3
00018DB6 =00000001                M sprs4	=	op4
00018DB6                            	spAttackRt	$0D, $0E, $0D, $13
00018DB6 =0000000D                M spar1	=	op1
00018DB6 =0000000E                M spar2	=	op2
00018DB6 =0000000D                M spar3	=	op3
00018DB6 =00000013                M spar4	=	op4
00018DB6                            	spAmpMod	$00, $00, $00, $00
00018DB6 =00000000                M spam1	=	op1
00018DB6 =00000000                M spam2	=	op2
00018DB6 =00000000                M spam3	=	op3
00018DB6 =00000000                M spam4	=	op4
00018DB6                            	spSustainRt	$0E, $0E, $0E, $03
00018DB6 =0000000E                M spsr1	=	op1
00018DB6 =0000000E                M spsr2	=	op2
00018DB6 =0000000E                M spsr3	=	op3
00018DB6 =00000003                M spsr4	=	op4
00018DB6                            	spSustainLv	$01, $01, $0F, $00
00018DB6 =00000001                M spsl1	=	op1
00018DB6 =00000001                M spsl2	=	op2
00018DB6 =0000000F                M spsl3	=	op3
00018DB6 =00000000                M spsl4	=	op4
00018DB6                            	spDecayRt	$06, $06, $06, $04
00018DB6 =00000006                M spdr1	=	op1
00018DB6 =00000006                M spdr2	=	op2
00018DB6 =00000006                M spdr3	=	op3
00018DB6 =00000004                M spdr4	=	op4
00018DB6                            	spReleaseRt	$0F, $0F, $0F, $0F
00018DB6 =0000000F                M sprr1	=	op1
00018DB6 =0000000F                M sprr2	=	op2
00018DB6 =0000000F                M sprr3	=	op3
00018DB6 =0000000F                M sprr4	=	op4
00018DB6                            	spSSGEG		$00, $00, $00, $00
00018DB6 =00000000                M spss1	=	op1
00018DB6 =00000000                M spss2	=	op2
00018DB6 =00000000                M spss3	=	op3
00018DB6 =00000000                M spss4	=	op4
00018DB6                            	spTotalLv	$18, $1E, $23, $00
00018DB6 =00000018                M sptl1	=	op1
00018DB6 =0000001E                M sptl2	=	op2
00018DB6 =00000023                M sptl3	=	op3
00018DB6 =00000000                M sptl4	=	op4
00018DB6 3A                       M 	dc.b	(spfe<<3)+spal
00018DB7 =00000080                M sptlmask4	set	$80
00018DB7 =00000000                M sptlmask2	set	((spal>=5)<<7)
00018DB7 =00000000                M sptlmask3	set	((spal>=4)<<7)
00018DB7 =00000000                M sptlmask1	set	((spal=7)<<7)
00018DB7 3137 3131                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00018DBB 8D8D 8E53                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00018DBF 0E0E 0E03                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00018DC3 0606 0604                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00018DC7 1FFF 1F0F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00018DCB 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00018DCF 1823 1E80                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00018DD3 4E41 54                  M 	dc.b	'NAT'
00018DD6                            
00018DD6                            	; Patch $1D
00018DD6                            	; $3C
00018DD6                            	; $32, $32, $51, $02,	$1F, $0B, $1F, $0E
00018DD6                            	; $07, $1F, $07, $1F,	$00, $00, $00, $00
00018DD6                            	; $12, $05, $13, $07,	$1B, $81, $12, $80
00018DD6                            	spAlgorithm	$04
00018DD6 =0000001E                M spatnum	=	spatnum+1
00018DD6 =00000004                M spal	=	val
00018DD6                            	spFeedback	$07
00018DD6 =00000007                M spfe	=	val
00018DD6                            	spDetune	$03, $05, $03, $00
00018DD6 =00000003                M spde1	=	op1
00018DD6 =00000005                M spde2	=	op2
00018DD6 =00000003                M spde3	=	op3
00018DD6 =00000000                M spde4	=	op4
00018DD6                            	spMultiple	$02, $01, $02, $02
00018DD6 =00000002                M spmu1	=	op1
00018DD6 =00000001                M spmu2	=	op2
00018DD6 =00000002                M spmu3	=	op3
00018DD6 =00000002                M spmu4	=	op4
00018DD6                            	spRateScale	$00, $00, $00, $00
00018DD6 =00000000                M sprs1	=	op1
00018DD6 =00000000                M sprs2	=	op2
00018DD6 =00000000                M sprs3	=	op3
00018DD6 =00000000                M sprs4	=	op4
00018DD6                            	spAttackRt	$1F, $1F, $0B, $0E
00018DD6 =0000001F                M spar1	=	op1
00018DD6 =0000001F                M spar2	=	op2
00018DD6 =0000000B                M spar3	=	op3
00018DD6 =0000000E                M spar4	=	op4
00018DD6                            	spAmpMod	$00, $00, $00, $00
00018DD6 =00000000                M spam1	=	op1
00018DD6 =00000000                M spam2	=	op2
00018DD6 =00000000                M spam3	=	op3
00018DD6 =00000000                M spam4	=	op4
00018DD6                            	spSustainRt	$07, $07, $1F, $1F
00018DD6 =00000007                M spsr1	=	op1
00018DD6 =00000007                M spsr2	=	op2
00018DD6 =0000001F                M spsr3	=	op3
00018DD6 =0000001F                M spsr4	=	op4
00018DD6                            	spSustainLv	$01, $01, $00, $00
00018DD6 =00000001                M spsl1	=	op1
00018DD6 =00000001                M spsl2	=	op2
00018DD6 =00000000                M spsl3	=	op3
00018DD6 =00000000                M spsl4	=	op4
00018DD6                            	spDecayRt	$00, $00, $00, $00
00018DD6 =00000000                M spdr1	=	op1
00018DD6 =00000000                M spdr2	=	op2
00018DD6 =00000000                M spdr3	=	op3
00018DD6 =00000000                M spdr4	=	op4
00018DD6                            	spReleaseRt	$02, $03, $05, $07
00018DD6 =00000002                M sprr1	=	op1
00018DD6 =00000003                M sprr2	=	op2
00018DD6 =00000005                M sprr3	=	op3
00018DD6 =00000007                M sprr4	=	op4
00018DD6                            	spSSGEG		$00, $00, $00, $00
00018DD6 =00000000                M spss1	=	op1
00018DD6 =00000000                M spss2	=	op2
00018DD6 =00000000                M spss3	=	op3
00018DD6 =00000000                M spss4	=	op4
00018DD6                            	spTotalLv	$1B, $12, $01, $00
00018DD6 =0000001B                M sptl1	=	op1
00018DD6 =00000012                M sptl2	=	op2
00018DD6 =00000001                M sptl3	=	op3
00018DD6 =00000000                M sptl4	=	op4
00018DD6 3C                       M 	dc.b	(spfe<<3)+spal
00018DD7 =00000080                M sptlmask4	set	$80
00018DD7 =00000000                M sptlmask2	set	((spal>=5)<<7)
00018DD7 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
00018DD7 =00000000                M sptlmask1	set	((spal=7)<<7)
00018DD7 3232 5102                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00018DDB 1F0B 1F0E                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00018DDF 071F 071F                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00018DE3 0000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00018DE7 1205 1307                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00018DEB 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00018DEF 1B81 1280                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00018DF3 4E41 54                  M 	dc.b	'NAT'
00018DF6                            
00018DF6                            	; Patch $1E
00018DF6                            	; $3A
00018DF6                            	; $11, $01, $01, $01,	$DF, $1F, $1F, $1A
00018DF6                            	; $1F, $1F, $1F, $1F,	$09, $08, $07, $00
00018DF6                            	; $04, $04, $04, $05,	$1D, $26, $18, $80
00018DF6                            	spAlgorithm	$02
00018DF6 =0000001F                M spatnum	=	spatnum+1
00018DF6 =00000002                M spal	=	val
00018DF6                            	spFeedback	$07
00018DF6 =00000007                M spfe	=	val
00018DF6                            	spDetune	$01, $00, $00, $00
00018DF6 =00000001                M spde1	=	op1
00018DF6 =00000000                M spde2	=	op2
00018DF6 =00000000                M spde3	=	op3
00018DF6 =00000000                M spde4	=	op4
00018DF6                            	spMultiple	$01, $01, $01, $01
00018DF6 =00000001                M spmu1	=	op1
00018DF6 =00000001                M spmu2	=	op2
00018DF6 =00000001                M spmu3	=	op3
00018DF6 =00000001                M spmu4	=	op4
00018DF6                            	spRateScale	$03, $00, $00, $00
00018DF6 =00000003                M sprs1	=	op1
00018DF6 =00000000                M sprs2	=	op2
00018DF6 =00000000                M sprs3	=	op3
00018DF6 =00000000                M sprs4	=	op4
00018DF6                            	spAttackRt	$1F, $1F, $1F, $1A
00018DF6 =0000001F                M spar1	=	op1
00018DF6 =0000001F                M spar2	=	op2
00018DF6 =0000001F                M spar3	=	op3
00018DF6 =0000001A                M spar4	=	op4
00018DF6                            	spAmpMod	$00, $00, $00, $00
00018DF6 =00000000                M spam1	=	op1
00018DF6 =00000000                M spam2	=	op2
00018DF6 =00000000                M spam3	=	op3
00018DF6 =00000000                M spam4	=	op4
00018DF6                            	spSustainRt	$1F, $1F, $1F, $1F
00018DF6 =0000001F                M spsr1	=	op1
00018DF6 =0000001F                M spsr2	=	op2
00018DF6 =0000001F                M spsr3	=	op3
00018DF6 =0000001F                M spsr4	=	op4
00018DF6                            	spSustainLv	$00, $00, $00, $00
00018DF6 =00000000                M spsl1	=	op1
00018DF6 =00000000                M spsl2	=	op2
00018DF6 =00000000                M spsl3	=	op3
00018DF6 =00000000                M spsl4	=	op4
00018DF6                            	spDecayRt	$09, $07, $08, $00
00018DF6 =00000009                M spdr1	=	op1
00018DF6 =00000007                M spdr2	=	op2
00018DF6 =00000008                M spdr3	=	op3
00018DF6 =00000000                M spdr4	=	op4
00018DF6                            	spReleaseRt	$04, $04, $04, $05
00018DF6 =00000004                M sprr1	=	op1
00018DF6 =00000004                M sprr2	=	op2
00018DF6 =00000004                M sprr3	=	op3
00018DF6 =00000005                M sprr4	=	op4
00018DF6                            	spSSGEG		$00, $00, $00, $00
00018DF6 =00000000                M spss1	=	op1
00018DF6 =00000000                M spss2	=	op2
00018DF6 =00000000                M spss3	=	op3
00018DF6 =00000000                M spss4	=	op4
00018DF6                            	spTotalLv	$1D, $18, $26, $00
00018DF6 =0000001D                M sptl1	=	op1
00018DF6 =00000018                M sptl2	=	op2
00018DF6 =00000026                M sptl3	=	op3
00018DF6 =00000000                M sptl4	=	op4
00018DF6 3A                       M 	dc.b	(spfe<<3)+spal
00018DF7 =00000080                M sptlmask4	set	$80
00018DF7 =00000000                M sptlmask2	set	((spal>=5)<<7)
00018DF7 =00000000                M sptlmask3	set	((spal>=4)<<7)
00018DF7 =00000000                M sptlmask1	set	((spal=7)<<7)
00018DF7 1101 0101                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00018DFB DF1F 1F1A                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00018DFF 1F1F 1F1F                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00018E03 0908 0700                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00018E07 0404 0405                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00018E0B 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00018E0F 1D26 1880                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00018E13 4E41 54                  M 	dc.b	'NAT'
00018E16                            
00018E16                            	; Patch $1F
00018E16                            	; $38
00018E16                            	; $20, $62, $70, $32,	$14, $12, $0A, $0A
00018E16                            	; $0E, $0E, $09, $1F,	$00, $00, $00, $00
00018E16                            	; $5F, $5F, $AF, $0F,	$1C, $28, $14, $83
00018E16                            	spAlgorithm	$00
00018E16 =00000020                M spatnum	=	spatnum+1
00018E16 =00000000                M spal	=	val
00018E16                            	spFeedback	$07
00018E16 =00000007                M spfe	=	val
00018E16                            	spDetune	$02, $07, $06, $03
00018E16 =00000002                M spde1	=	op1
00018E16 =00000007                M spde2	=	op2
00018E16 =00000006                M spde3	=	op3
00018E16 =00000003                M spde4	=	op4
00018E16                            	spMultiple	$00, $00, $02, $02
00018E16 =00000000                M spmu1	=	op1
00018E16 =00000000                M spmu2	=	op2
00018E16 =00000002                M spmu3	=	op3
00018E16 =00000002                M spmu4	=	op4
00018E16                            	spRateScale	$00, $00, $00, $00
00018E16 =00000000                M sprs1	=	op1
00018E16 =00000000                M sprs2	=	op2
00018E16 =00000000                M sprs3	=	op3
00018E16 =00000000                M sprs4	=	op4
00018E16                            	spAttackRt	$14, $0A, $12, $0A
00018E16 =00000014                M spar1	=	op1
00018E16 =0000000A                M spar2	=	op2
00018E16 =00000012                M spar3	=	op3
00018E16 =0000000A                M spar4	=	op4
00018E16                            	spAmpMod	$00, $00, $00, $00
00018E16 =00000000                M spam1	=	op1
00018E16 =00000000                M spam2	=	op2
00018E16 =00000000                M spam3	=	op3
00018E16 =00000000                M spam4	=	op4
00018E16                            	spSustainRt	$0E, $09, $0E, $1F
00018E16 =0000000E                M spsr1	=	op1
00018E16 =00000009                M spsr2	=	op2
00018E16 =0000000E                M spsr3	=	op3
00018E16 =0000001F                M spsr4	=	op4
00018E16                            	spSustainLv	$05, $0A, $05, $00
00018E16 =00000005                M spsl1	=	op1
00018E16 =0000000A                M spsl2	=	op2
00018E16 =00000005                M spsl3	=	op3
00018E16 =00000000                M spsl4	=	op4
00018E16                            	spDecayRt	$00, $00, $00, $00
00018E16 =00000000                M spdr1	=	op1
00018E16 =00000000                M spdr2	=	op2
00018E16 =00000000                M spdr3	=	op3
00018E16 =00000000                M spdr4	=	op4
00018E16                            	spReleaseRt	$0F, $0F, $0F, $0F
00018E16 =0000000F                M sprr1	=	op1
00018E16 =0000000F                M sprr2	=	op2
00018E16 =0000000F                M sprr3	=	op3
00018E16 =0000000F                M sprr4	=	op4
00018E16                            	spSSGEG		$00, $00, $00, $00
00018E16 =00000000                M spss1	=	op1
00018E16 =00000000                M spss2	=	op2
00018E16 =00000000                M spss3	=	op3
00018E16 =00000000                M spss4	=	op4
00018E16                            	spTotalLv	$1C, $14, $28, $03
00018E16 =0000001C                M sptl1	=	op1
00018E16 =00000014                M sptl2	=	op2
00018E16 =00000028                M sptl3	=	op3
00018E16 =00000003                M sptl4	=	op4
00018E16 38                       M 	dc.b	(spfe<<3)+spal
00018E17 =00000080                M sptlmask4	set	$80
00018E17 =00000000                M sptlmask2	set	((spal>=5)<<7)
00018E17 =00000000                M sptlmask3	set	((spal>=4)<<7)
00018E17 =00000000                M sptlmask1	set	((spal=7)<<7)
00018E17 2062 7032                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00018E1B 1412 0A0A                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00018E1F 0E0E 091F                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00018E23 0000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00018E27 5F5F AF0F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00018E2B 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00018E2F 1C28 1483                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00018E33 4E41 54                  M 	dc.b	'NAT'
00018E36                            
00018E36                            	; Patch $20
00018E36                            	; $3A
00018E36                            	; $11, $01, $01, $01,	$DF, $1F, $1F, $1A
00018E36                            	; $1F, $1F, $1F, $1F,	$09, $08, $07, $00
00018E36                            	; $04, $04, $04, $0A,	$1D, $26, $18, $80
00018E36                            	spAlgorithm	$02
00018E36 =00000021                M spatnum	=	spatnum+1
00018E36 =00000002                M spal	=	val
00018E36                            	spFeedback	$07
00018E36 =00000007                M spfe	=	val
00018E36                            	spDetune	$01, $00, $00, $00
00018E36 =00000001                M spde1	=	op1
00018E36 =00000000                M spde2	=	op2
00018E36 =00000000                M spde3	=	op3
00018E36 =00000000                M spde4	=	op4
00018E36                            	spMultiple	$01, $01, $01, $01
00018E36 =00000001                M spmu1	=	op1
00018E36 =00000001                M spmu2	=	op2
00018E36 =00000001                M spmu3	=	op3
00018E36 =00000001                M spmu4	=	op4
00018E36                            	spRateScale	$03, $00, $00, $00
00018E36 =00000003                M sprs1	=	op1
00018E36 =00000000                M sprs2	=	op2
00018E36 =00000000                M sprs3	=	op3
00018E36 =00000000                M sprs4	=	op4
00018E36                            	spAttackRt	$1F, $1F, $1F, $1A
00018E36 =0000001F                M spar1	=	op1
00018E36 =0000001F                M spar2	=	op2
00018E36 =0000001F                M spar3	=	op3
00018E36 =0000001A                M spar4	=	op4
00018E36                            	spAmpMod	$00, $00, $00, $00
00018E36 =00000000                M spam1	=	op1
00018E36 =00000000                M spam2	=	op2
00018E36 =00000000                M spam3	=	op3
00018E36 =00000000                M spam4	=	op4
00018E36                            	spSustainRt	$1F, $1F, $1F, $1F
00018E36 =0000001F                M spsr1	=	op1
00018E36 =0000001F                M spsr2	=	op2
00018E36 =0000001F                M spsr3	=	op3
00018E36 =0000001F                M spsr4	=	op4
00018E36                            	spSustainLv	$00, $00, $00, $00
00018E36 =00000000                M spsl1	=	op1
00018E36 =00000000                M spsl2	=	op2
00018E36 =00000000                M spsl3	=	op3
00018E36 =00000000                M spsl4	=	op4
00018E36                            	spDecayRt	$09, $07, $08, $00
00018E36 =00000009                M spdr1	=	op1
00018E36 =00000007                M spdr2	=	op2
00018E36 =00000008                M spdr3	=	op3
00018E36 =00000000                M spdr4	=	op4
00018E36                            	spReleaseRt	$04, $04, $04, $0A
00018E36 =00000004                M sprr1	=	op1
00018E36 =00000004                M sprr2	=	op2
00018E36 =00000004                M sprr3	=	op3
00018E36 =0000000A                M sprr4	=	op4
00018E36                            	spSSGEG		$00, $00, $00, $00
00018E36 =00000000                M spss1	=	op1
00018E36 =00000000                M spss2	=	op2
00018E36 =00000000                M spss3	=	op3
00018E36 =00000000                M spss4	=	op4
00018E36                            	spTotalLv	$1D, $18, $26, $00
00018E36 =0000001D                M sptl1	=	op1
00018E36 =00000018                M sptl2	=	op2
00018E36 =00000026                M sptl3	=	op3
00018E36 =00000000                M sptl4	=	op4
00018E36 3A                       M 	dc.b	(spfe<<3)+spal
00018E37 =00000080                M sptlmask4	set	$80
00018E37 =00000000                M sptlmask2	set	((spal>=5)<<7)
00018E37 =00000000                M sptlmask3	set	((spal>=4)<<7)
00018E37 =00000000                M sptlmask1	set	((spal=7)<<7)
00018E37 1101 0101                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
00018E3B DF1F 1F1A                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
00018E3F 1F1F 1F1F                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
00018E43 0908 0700                M 	dc.b	spdr1,spdr3,spdr2,spdr4
00018E47 0404 040A                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
00018E4B 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
00018E4F 1D26 1880                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
00018E53 4E41 54                  M 	dc.b	'NAT'
00018E56                            
00018E56                            TowerPuppet_FM1:
00018E56                            	saVol		$02
00018E56 ED02                     M 	dc.b	$ed,$02
00018E58                            	sVoice		$1B
00018E58 E81B                     M 	dc.b	$e8,$1b
00018E5A                            	ssLFO		$F9, $0B|spCentre
00018E5A EFF9 CB                  M 	dc.b	$ef,$f9,$0b|spcentre
00018E5D                            	ssMod68k	$14, $02, $05, $02
00018E5D F014 0205 02             M 	dc.b	$f0,$14,$02,$05,$02
00018E62 BD02 BF0C 8004 BD18        	dc.b nC5, $02, nD5, $0C, nRst, $04, nC5, $18
00018E6A 8006 BA01 BC0C 8005        	dc.b nRst, $06, nA4, $01, nB4, $0C, nRst, $05
00018E72 BD18 8006 BF0C 8006        	dc.b nC5, $18, nRst, $06, nD5, $0C, nRst, $06
00018E7A BD18 8006                  	dc.b nC5, $18, nRst, $06
00018E7E                            	saVol		$FE
00018E7E EDFE                     M 	dc.b	$ed,$fe
00018E80                            	ssMod68k	$14, $02, $02, $06
00018E80 F014 0202 06             M 	dc.b	$f0,$14,$02,$02,$06
00018E85                            	saVol		$FB
00018E85 EDFB                     M 	dc.b	$ed,$fb
00018E87                            	sVoice		$06
00018E87 E806                     M 	dc.b	$e8,$06
00018E89                            	saVol		$FF
00018E89 EDFF                     M 	dc.b	$ed,$ff
00018E8B BD02 8004                  	dc.b nC5, $02, nRst, $04
00018E8F                            	saVol		$01
00018E8F ED01                     M 	dc.b	$ed,$01
00018E91                            	saVol		$01
00018E91 ED01                     M 	dc.b	$ed,$01
00018E93 BE02 8004                  	dc.b nCs5, $02, nRst, $04
00018E97                            	saVol		$FF
00018E97 EDFF                     M 	dc.b	$ed,$ff
00018E99                            	saVol		$FF
00018E99 EDFF                     M 	dc.b	$ed,$ff
00018E9B BD02 8004                  	dc.b nC5, $02, nRst, $04
00018E9F                            	saVol		$01
00018E9F ED01                     M 	dc.b	$ed,$01
00018EA1                            	saVol		$01
00018EA1 ED01                     M 	dc.b	$ed,$01
00018EA3 BF02 8004                  	dc.b nD5, $02, nRst, $04
00018EA7                            	saVol		$FF
00018EA7 EDFF                     M 	dc.b	$ed,$ff
00018EA9                            	saVol		$FF
00018EA9 EDFF                     M 	dc.b	$ed,$ff
00018EAB BD02 8004                  	dc.b nC5, $02, nRst, $04
00018EAF                            	saVol		$01
00018EAF ED01                     M 	dc.b	$ed,$01
00018EB1                            	saVol		$01
00018EB1 ED01                     M 	dc.b	$ed,$01
00018EB3 C002 8004                  	dc.b nEb5, $02, nRst, $04
00018EB7                            	saVol		$FF
00018EB7 EDFF                     M 	dc.b	$ed,$ff
00018EB9                            	saVol		$FF
00018EB9 EDFF                     M 	dc.b	$ed,$ff
00018EBB BD02 8004                  	dc.b nC5, $02, nRst, $04
00018EBF                            	saVol		$01
00018EBF ED01                     M 	dc.b	$ed,$01
00018EC1                            	saVol		$01
00018EC1 ED01                     M 	dc.b	$ed,$01
00018EC3 C102 8004                  	dc.b nE5, $02, nRst, $04
00018EC7                            	saVol		$FF
00018EC7 EDFF                     M 	dc.b	$ed,$ff
00018EC9                            	saVol		$05
00018EC9 ED05                     M 	dc.b	$ed,$05
00018ECB                            	ssMod68k	$14, $02, $05, $02
00018ECB F014 0205 02             M 	dc.b	$f0,$14,$02,$05,$02
00018ED0                            	saVol		$02
00018ED0 ED02                     M 	dc.b	$ed,$02
00018ED2                            	sVoice		$1B
00018ED2 E81B                     M 	dc.b	$e8,$1b
00018ED4 BD01 BF0C 8005 BD18        	dc.b nC5, $01, nD5, $0C, nRst, $05, nC5, $18
00018EDC 8006 BC0C 8006 BD18        	dc.b nRst, $06, nB4, $0C, nRst, $06, nC5, $18
00018EE4 8006 BD01 BF0C 8005        	dc.b nRst, $06, nC5, $01, nD5, $0C, nRst, $05
00018EEC BD18 8006                  	dc.b nC5, $18, nRst, $06
00018EF0                            	saVol		$FE
00018EF0 EDFE                     M 	dc.b	$ed,$fe
00018EF2                            	ssMod68k	$14, $02, $02, $06
00018EF2 F014 0202 06             M 	dc.b	$f0,$14,$02,$02,$06
00018EF7                            	sPan		spRight, $00
00018EF7 E040                     M 	dc.b	$e0,spright|$00
00018EF9                            	sVoice		$1D
00018EF9 E81D                     M 	dc.b	$e8,$1d
00018EFB C402 8007 C302 8007        	dc.b nG5, $02, nRst, $07, nFs5, $02, nRst, $07
00018F03 C202 8007 C102 8007        	dc.b nF5, $02, nRst, $07, nE5, $02, nRst, $07
00018F0B C002 8004 BF02 8004        	dc.b nEb5, $02, nRst, $04, nD5, $02, nRst, $04
00018F13                            	sPan		spCenter, $00
00018F13 E0C0                     M 	dc.b	$e0,spcenter|$00
00018F15 800C                       	dc.b nRst, $0C
00018F17                            	sVoice		$01
00018F17 E801                     M 	dc.b	$e8,$01
00018F19                            	saVol		$F0
00018F19 EDF0                     M 	dc.b	$ed,$f0
00018F1B                            	sPan		spLeft, $00
00018F1B E080                     M 	dc.b	$e0,spleft|$00
00018F1D B801 B7B6 B5B4 B3B2        	dc.b nG4, $01, nFs4, nF4, nE4, nEb4, nD4, nCs4
00018F25                            	saVol		$10
00018F25 ED10                     M 	dc.b	$ed,$10
00018F27                            	saVol		$FB
00018F27 EDFB                     M 	dc.b	$ed,$fb
00018F29                            	sPan		spCenter, $00
00018F29 E0C0                     M 	dc.b	$e0,spcenter|$00
00018F2B B1B0                       	dc.b nC4, nB3
00018F2D                            	saVol		$05
00018F2D ED05                     M 	dc.b	$ed,$05
00018F2F                            	saVol		$F7
00018F2F EDF7                     M 	dc.b	$ed,$f7
00018F31                            	sPan		spRight, $00
00018F31 E040                     M 	dc.b	$e0,spright|$00
00018F33 AF                         	dc.b nBb3
00018F34                            	saVol		$01
00018F34 ED01                     M 	dc.b	$ed,$01
00018F36 AE                         	dc.b nA3
00018F37                            	saVol		$02
00018F37 ED02                     M 	dc.b	$ed,$02
00018F39 AD                         	dc.b nAb3
00018F3A                            	sPan		spCenter, $00
00018F3A E0C0                     M 	dc.b	$e0,spcenter|$00
00018F3C                            	saVol		$06
00018F3C ED06                     M 	dc.b	$ed,$06
00018F3E                            	saVol		$02
00018F3E ED02                     M 	dc.b	$ed,$02
00018F40                            	sVoice		$0E
00018F40 E80E                     M 	dc.b	$e8,$0e
00018F42                            
00018F42                            TowerPuppet_Loop1:
00018F42 C602 8010 C503 8080        	dc.b nA5, $02, nRst, $10, nAb5, $03, nRst, nRst
00018F4A 12C7 1E80 06C2 0280        	dc.b $12, nBb5, $1E, nRst, $06, nF5, $02, nRst
00018F52 04C2 06C7 0280 04C6        	dc.b $04, nF5, $06, nBb5, $02, nRst, $04, nA5
00018F5A 0380 0FC5 0480 0280        	dc.b $03, nRst, $0F, nAb5, $04, nRst, $02, nRst
00018F62 12C7 0F80 03C7 0980        	dc.b $12, nBb5, $0F, nRst, $03, nBb5, $09, nRst
00018F6A 03C2 0280 04C7 0C80        	dc.b $03, nF5, $02, nRst, $04, nBb5, $0C, nRst
00018F72 06                         	dc.b $06
00018F73                            	sLoop		$00, $02, TowerPuppet_Loop1
00018F73 F700                     M 	dc.b	$f7,$00
00018F75 FFCC                     M 	dc.w	towerpuppet_loop1-*-1
00018F77 02                       M 	dc.b	$02
00018F78                            	saVol		$FE
00018F78 EDFE                     M 	dc.b	$ed,$fe
00018F7A                            	saVol		$FF
00018F7A EDFF                     M 	dc.b	$ed,$ff
00018F7C                            	sVoice		$0D
00018F7C E80D                     M 	dc.b	$e8,$0d
00018F7E C902 8001 BD02 8001        	dc.b nC6, $02, nRst, $01, nC5, $02, nRst, $01
00018F86 C202 8004 C902 8004        	dc.b nF5, $02, nRst, $04, nC6, $02, nRst, $04
00018F8E C709 BD02 8001 C202        	dc.b nBb5, $09, nC5, $02, nRst, $01, nF5, $02
00018F96 8004 C702 8004 C606        	dc.b nRst, $04, nBb5, $02, nRst, $04, nA5, $06
00018F9E E7C6 03BD 0280 01C2        	dc.b sHold, nA5, $03, nC5, $02, nRst, $01, nF5
00018FA6 0280 04C6 0280 04C4        	dc.b $02, nRst, $04, nA5, $02, nRst, $04, nG5
00018FAE 0CC2 0280 04C1 0280        	dc.b $0C, nF5, $02, nRst, $04, nE5, $02, nRst
00018FB6 04C2 06E7 C206 BD02        	dc.b $04, nF5, $06, sHold, nF5, $06, nC5, $02
00018FBE 8004 C202 8004 C90C        	dc.b nRst, $04, nF5, $02, nRst, $04, nC6, $0C
00018FC6 BD02 8004 BD02 8004        	dc.b nC5, $02, nRst, $04, nC5, $02, nRst, $04
00018FCE C206 E7C2 C102 8004        	dc.b nF5, $06, sHold, nF5, nE5, $02, nRst, $04
00018FD6 C202 8004 BD06 E7BD        	dc.b nF5, $02, nRst, $04, nC5, $06, sHold, nC5
00018FDE 0480 02BB 0480 0280        	dc.b $04, nRst, $02, nBb4, $04, nRst, $02, nRst
00018FE6 0CC9 0280 01BD 0280        	dc.b $0C, nC6, $02, nRst, $01, nC5, $02, nRst
00018FEE 01C2 0280 04C9 0280        	dc.b $01, nF5, $02, nRst, $04, nC6, $02, nRst
00018FF6 04C7 09BD 0280 01C2        	dc.b $04, nBb5, $09, nC5, $02, nRst, $01, nF5
00018FFE 0280 04C7 0280 04C6        	dc.b $02, nRst, $04, nBb5, $02, nRst, $04, nA5
00019006 06E7 C603 BD02 8001        	dc.b $06, sHold, nA5, $03, nC5, $02, nRst, $01
0001900E C202 8004 C602 8004        	dc.b nF5, $02, nRst, $04, nA5, $02, nRst, $04
00019016 C40C C202 8004 C102        	dc.b nG5, $0C, nF5, $02, nRst, $04, nE5, $02
0001901E 8004 C206 E7C2 C90C        	dc.b nRst, $04, nF5, $06, sHold, nF5, nC6, $0C
00019026 CEC9 0280 04C9 0280        	dc.b nF6, nC6, $02, nRst, $04, nC6, $02, nRst
0001902E 04CC 06E7 CCCB 0280        	dc.b $04, nEb6, $06, sHold, nEb6, nD6, $02, nRst
00019036 04C7 0280 04C2 06E7        	dc.b $04, nBb5, $02, nRst, $04, nF5, $06, sHold
0001903E C204 8002 C404 8002        	dc.b nF5, $04, nRst, $02, nG5, $04, nRst, $02
00019046 800C                       	dc.b nRst, $0C
00019048                            	saVol		$01
00019048 ED01                     M 	dc.b	$ed,$01
0001904A                            	saVol		$FC
0001904A EDFC                     M 	dc.b	$ed,$fc
0001904C                            	sVoice		$1A
0001904C E81A                     M 	dc.b	$e8,$1a
0001904E C602 8004 C802 8004        	dc.b nA5, $02, nRst, $04, nB5, $02, nRst, $04
00019056 CA02 8004 CD06 80CB        	dc.b nCs6, $02, nRst, $04, nE6, $06, nRst, nD6
0001905E 0280 04CA 0280 04CA        	dc.b $02, nRst, $04, nCs6, $02, nRst, $04, nCs6
00019066 0C80 06CB 0380 C406        	dc.b $0C, nRst, $06, nD6, $03, nRst, nG5, $06
0001906E E7C4 1280 06C3 0280        	dc.b sHold, nG5, $12, nRst, $06, nFs5, $02, nRst
00019076 04C4 0280 04C6 0380        	dc.b $04, nG5, $02, nRst, $04, nA5, $03, nRst
0001907E CA06 80C8 0380 C302        	dc.b nCs6, $06, nRst, nB5, $03, nRst, nFs5, $02
00019086 8004 C609 8003 C402        	dc.b nRst, $04, nA5, $09, nRst, $03, nG5, $02
0001908E 8004 C302 8004 C406        	dc.b nRst, $04, nFs5, $02, nRst, $04, nG5, $06
00019096 E7C4 1280 06C5 12C3        	dc.b sHold, nG5, $12, nRst, $06, nAb5, $12, nFs5
0001909E C10C 8006 CD0F 8003        	dc.b nE5, $0C, nRst, $06, nE6, $0F, nRst, $03
000190A6 CC06 80C8 80CA 0280        	dc.b nEb6, $06, nRst, nB5, nRst, nCs6, $02, nRst
000190AE 04C1 0280 04C1 1880        	dc.b $04, nE5, $02, nRst, $04, nE5, $18, nRst
000190B6 06C1 0280 01C3 03C5        	dc.b $06, nE5, $02, nRst, $01, nFs5, $03, nAb5
000190BE 06BE 0280 04C5 0380        	dc.b $06, nCs5, $02, nRst, $04, nAb5, $03, nRst
000190C6 C306 E7C3 C502 8004        	dc.b nFs5, $06, sHold, nFs5, nAb5, $02, nRst, $04
000190CE C60C C824 C10C C812        	dc.b nA5, $0C, nB5, $24, nE5, $0C, nB5, $12
000190D6 C6CB 0CCD 60               	dc.b nA5, nD6, $0C, nE6, $60
000190DB                            	saVol		$04
000190DB ED04                     M 	dc.b	$ed,$04
000190DD                            	sJump		TowerPuppet_FM1
000190DD F6                       M 	dc.b	$f6
000190DE FD77                     M 	dc.w	towerpuppet_fm1-*-1
000190E0                            
000190E0                            TowerPuppet_FM2:
000190E0                            	saVol		$04
000190E0 ED04                     M 	dc.b	$ed,$04
000190E2                            	sVoice		$11
000190E2 E811                     M 	dc.b	$e8,$11
000190E4 AA06 AEB0 B1B0 B1AE        	dc.b nF3, $06, nA3, nB3, nC4, nB3, nC4, nA3
000190EC B3AA AEB0 B1B0 B1AE        	dc.b nD4, nF3, nA3, nB3, nC4, nB3, nC4, nA3
000190F4 B3AA AEB0 B1B0 B1AE        	dc.b nD4, nF3, nA3, nB3, nC4, nB3, nC4, nA3
000190FC B3A5 A8A5 A9A5 AAA5        	dc.b nD4, nC3, nEb3, nC3, nE3, nC3, nF3, nC3
00019104 ABAA AEB0 B1B0 B1AE        	dc.b nFs3, nF3, nA3, nB3, nC4, nB3, nC4, nA3
0001910C B3AA AEB0 B1B0 B1AE        	dc.b nD4, nF3, nA3, nB3, nC4, nB3, nC4, nA3
00019114 B3AA AEB0 B1B0 B1AE        	dc.b nD4, nF3, nA3, nB3, nC4, nB3, nC4, nA3
0001911C B3A6 09A5 A4A3 A206        	dc.b nD4, nCs3, $09, nC3, nB2, nBb2, nA2, $06
00019124 A1                         	dc.b nAb2
00019125                            	saVol		$FC
00019125 EDFC                     M 	dc.b	$ed,$fc
00019127 8018                       	dc.b nRst, $18
00019129                            	sVoice		$17
00019129 E817                     M 	dc.b	$e8,$17
0001912B 9E06 AAA9 AAA2 AAA3        	dc.b nF2, $06, nF3, nE3, nF3, nA2, nF3, nBb2
00019133 AAA5 AAA9 AAA3 AAA5        	dc.b nF3, nC3, nF3, nE3, nF3, nBb2, nF3, nC3
0001913B AA9E AAA9 AAA2 AAA3        	dc.b nF3, nF2, nF3, nE3, nF3, nA2, nF3, nBb2
00019143 AAA5 AAA9 AAA3 AAA5        	dc.b nF3, nC3, nF3, nE3, nF3, nBb2, nF3, nC3
0001914B AA9E AAA9 AAA2 AAA3        	dc.b nF3, nF2, nF3, nE3, nF3, nA2, nF3, nBb2
00019153 AAA5 AAA9 AAA3 AAA5        	dc.b nF3, nC3, nF3, nE3, nF3, nBb2, nF3, nC3
0001915B AA9E AAA9 AAA2 AAA3        	dc.b nF3, nF2, nF3, nE3, nF3, nA2, nF3, nBb2
00019163 AAA5 AAA9 AAA3 AAA5        	dc.b nF3, nC3, nF3, nE3, nF3, nBb2, nF3, nC3
0001916B AA9E 069E 0280 049E        	dc.b nF3, nF2, $06, nF2, $02, nRst, $04, nF2
00019173 0280 049E 0380 9E02        	dc.b $02, nRst, $04, nF2, $03, nRst, nF2, $02
0001917B 8004 9E02 8004 9E02        	dc.b nRst, $04, nF2, $02, nRst, $04, nF2, $02
00019183 8004 9E02 8004 9E02        	dc.b nRst, $04, nF2, $02, nRst, $04, nF2, $02
0001918B 8004 9E02 8004 9E02        	dc.b nRst, $04, nF2, $02, nRst, $04, nF2, $02
00019193 8004 A30C A302 8004        	dc.b nRst, $04, nBb2, $0C, nBb2, $02, nRst, $04
0001919B A30C A202 8004 A202        	dc.b nBb2, $0C, nA2, $02, nRst, $04, nA2, $02
000191A3 8004 A202 8004 A10C        	dc.b nRst, $04, nA2, $02, nRst, $04, nAb2, $0C
000191AB A102 8004 A102 8004        	dc.b nAb2, $02, nRst, $04, nAb2, $02, nRst, $04
000191B3 A006 E7A0 06A0 0280        	dc.b nG2, $06, sHold, nG2, $06, nG2, $02, nRst
000191BB 04A0 0280 0499 06E7        	dc.b $04, nG2, $02, nRst, $04, nC2, $06, sHold
000191C3 999B 9D0C 9E02 8004        	dc.b nC2, nD2, nE2, $0C, nF2, $02, nRst, $04
000191CB 9E02 8004 9E02 8004        	dc.b nF2, $02, nRst, $04, nF2, $02, nRst, $04
000191D3 9E03 809E 0280 049E        	dc.b nF2, $03, nRst, nF2, $02, nRst, $04, nF2
000191DB 0280 049E 0280 049E        	dc.b $02, nRst, $04, nF2, $02, nRst, $04, nF2
000191E3 0280 049E 0280 049E        	dc.b $02, nRst, $04, nF2, $02, nRst, $04, nF2
000191EB 0280 049E 0280 04A3        	dc.b $02, nRst, $04, nF2, $02, nRst, $04, nBb2
000191F3 0CA3 0280 04A3 0CA2        	dc.b $0C, nBb2, $02, nRst, $04, nBb2, $0C, nA2
000191FB 0280 04A2 0280 04A2        	dc.b $02, nRst, $04, nA2, $02, nRst, $04, nA2
00019203 0380 A10C A102 8004        	dc.b $03, nRst, nAb2, $0C, nAb2, $02, nRst, $04
0001920B A103 80A0 0980 03A0        	dc.b nAb2, $03, nRst, nG2, $09, nRst, $03, nG2
00019213 0280 04A0 06A5 E7A5        	dc.b $02, nRst, $04, nG2, $06, nC3, sHold, nC3
0001921B A7A9 0980 03A7 0280        	dc.b nD3, nE3, $09, nRst, $03, nD3, $02, nRst
00019223 04A7 0280 04A7 0280        	dc.b $04, nD3, $02, nRst, $04, nD3, $02, nRst
0001922B 04A7 0280 04A7 0280        	dc.b $04, nD3, $02, nRst, $04, nD3, $02, nRst
00019233 04A7 0280 04A7 06A0        	dc.b $04, nD3, $02, nRst, $04, nD3, $06, nG2
0001923B 0280 04A0 0280 04A0        	dc.b $02, nRst, $04, nG2, $02, nRst, $04, nG2
00019243 0280 04A0 0380 A202        	dc.b $02, nRst, $04, nG2, $03, nRst, nA2, $02
0001924B 8004 A202 8004 A202        	dc.b nRst, $04, nA2, $02, nRst, $04, nA2, $02
00019253 8004 A206 A402 8004        	dc.b nRst, $04, nA2, $06, nB2, $02, nRst, $04
0001925B A402 8004 A402 8004        	dc.b nB2, $02, nRst, $04, nB2, $02, nRst, $04
00019263 A402 8004 A402 8004        	dc.b nB2, $02, nRst, $04, nB2, $02, nRst, $04
0001926B A402 8004 A402 8004        	dc.b nB2, $02, nRst, $04, nB2, $02, nRst, $04
00019273 A406 A503 80A5 0280        	dc.b nB2, $06, nC3, $03, nRst, nC3, $02, nRst
0001927B 04A5 0280 04A5 0380        	dc.b $04, nC3, $02, nRst, $04, nC3, $03, nRst
00019283 A702 8004 A702 8004        	dc.b nD3, $02, nRst, $04, nD3, $02, nRst, $04
0001928B A702 8004 A502 8004        	dc.b nD3, $02, nRst, $04, nC3, $02, nRst, $04
00019293 A502 8004 A402 8004        	dc.b nC3, $02, nRst, $04, nB2, $02, nRst, $04
0001929B A402 8004 A402 8004        	dc.b nB2, $02, nRst, $04, nB2, $02, nRst, $04
000192A3 A402 8004 A402 8004        	dc.b nB2, $02, nRst, $04, nB2, $02, nRst, $04
000192AB A402 8004 A406 A302        	dc.b nB2, $02, nRst, $04, nB2, $06, nBb2, $02
000192B3 8004 A302 8004 A302        	dc.b nRst, $04, nBb2, $02, nRst, $04, nBb2, $02
000192BB 8004 A302 8004 A302        	dc.b nRst, $04, nBb2, $02, nRst, $04, nBb2, $02
000192C3 8004 A302 8004 A302        	dc.b nRst, $04, nBb2, $02, nRst, $04, nBb2, $02
000192CB 8004 A303 80A2 80A2        	dc.b nRst, $04, nBb2, $03, nRst, nA2, nRst, nA2
000192D3 0280 04A2 0280 04A2        	dc.b $02, nRst, $04, nA2, $02, nRst, $04, nA2
000192DB 0280 04A2 0280 04A2        	dc.b $02, nRst, $04, nA2, $02, nRst, $04, nA2
000192E3 0280 04A2 0280 04A2        	dc.b $02, nRst, $04, nA2, $02, nRst, $04, nA2
000192EB 06A4 0280 04A4 0280        	dc.b $06, nB2, $02, nRst, $04, nB2, $02, nRst
000192F3 04A4 0280 04A4 0280        	dc.b $04, nB2, $02, nRst, $04, nB2, $02, nRst
000192FB 04A4 0280 04A4 0280        	dc.b $04, nB2, $02, nRst, $04, nB2, $02, nRst
00019303 04A4 0280 04A4 06A5        	dc.b $04, nB2, $02, nRst, $04, nB2, $06, nC3
0001930B 0380 A502 8004 A502        	dc.b $03, nRst, nC3, $02, nRst, $04, nC3, $02
00019313 8004 A502 8004 A502        	dc.b nRst, $04, nC3, $02, nRst, $04, nC3, $02
0001931B 8004 A502 8004 A502        	dc.b nRst, $04, nC3, $02, nRst, $04, nC3, $02
00019323 8004 A506 A702 8004        	dc.b nRst, $04, nC3, $06, nD3, $02, nRst, $04
0001932B A702 8004 A702 8004        	dc.b nD3, $02, nRst, $04, nD3, $02, nRst, $04
00019333 A702 8004 A702 8004        	dc.b nD3, $02, nRst, $04, nD3, $02, nRst, $04
0001933B A703 809B 0280 049B        	dc.b nD3, $03, nRst, nD2, $02, nRst, $04, nD2
00019343 06A7 9D02 8004 9D02        	dc.b $06, nD3, nE2, $02, nRst, $04, nE2, $02
0001934B 8004 A906 9DA7 9D02        	dc.b nRst, $04, nE3, $06, nE2, nD3, nE2, $02
00019353 8004 9D03 80A5 069D        	dc.b nRst, $04, nE2, $03, nRst, nC3, $06, nE2
0001935B 0280 049D 06A4 9D03        	dc.b $02, nRst, $04, nE2, $06, nB2, nE2, $03
00019363 80A1 06A2 A4A9             	dc.b nRst, nAb2, $06, nA2, nB2, nE3
00019369                            	sJump		TowerPuppet_FM2
00019369 F6                       M 	dc.b	$f6
0001936A FD75                     M 	dc.w	towerpuppet_fm2-*-1
0001936C                            
0001936C                            TowerPuppet_FM3:
0001936C                            	saVol		$02
0001936C ED02                     M 	dc.b	$ed,$02
0001936E                            	ssLFO		$08, $0C|spCentre
0001936E EF08 CC                  M 	dc.b	$ef,$08,$0c|spcentre
00019371                            	ssMod68k	$16, $02, $03, $04
00019371 F016 0203 04             M 	dc.b	$f0,$16,$02,$03,$04
00019376                            	sVoice		$1A
00019376 E81A                     M 	dc.b	$e8,$1a
00019378 BB0C 8006 BA18 8006        	dc.b nBb4, $0C, nRst, $06, nA4, $18, nRst, $06
00019380 B90C 8006 BA18 8006        	dc.b nAb4, $0C, nRst, $06, nA4, $18, nRst, $06
00019388 BB0C 8006 BA18 8006        	dc.b nBb4, $0C, nRst, $06, nA4, $18, nRst, $06
00019390 8030 BB0C 8006 BA18        	dc.b nRst, $30, nBb4, $0C, nRst, $06, nA4, $18
00019398 8006 B90C 8006 BA18        	dc.b nRst, $06, nAb4, $0C, nRst, $06, nA4, $18
000193A0 8006 BB0C 8006 BA18        	dc.b nRst, $06, nBb4, $0C, nRst, $06, nA4, $18
000193A8 8006                       	dc.b nRst, $06
000193AA                            	saVol		$FE
000193AA EDFE                     M 	dc.b	$ed,$fe
000193AC                            	saTranspose	$F4
000193AC E4F4                     M 	dc.b	$e4,$f4
000193AE                            	sPan		spLeft, $00
000193AE E080                     M 	dc.b	$e0,spleft|$00
000193B0                            	sVoice		$1D
000193B0 E81D                     M 	dc.b	$e8,$1d
000193B2 B802 8007 B702 8007        	dc.b nG4, $02, nRst, $07, nFs4, $02, nRst, $07
000193BA B602 8007 B502 8007        	dc.b nF4, $02, nRst, $07, nE4, $02, nRst, $07
000193C2 B402 8004 B302 8004        	dc.b nEb4, $02, nRst, $04, nD4, $02, nRst, $04
000193CA                            	sPan		spCenter, $00
000193CA E0C0                     M 	dc.b	$e0,spcenter|$00
000193CC                            	saTranspose	$0C
000193CC E40C                     M 	dc.b	$e4,$0c
000193CE 8018                       	dc.b nRst, $18
000193D0                            	saVol		$F8
000193D0 EDF8                     M 	dc.b	$ed,$f8
000193D2                            	ssMod68k	$11, $01, $04, $05
000193D2 F011 0104 05             M 	dc.b	$f0,$11,$01,$04,$05
000193D7                            	sPan		spRight, $00
000193D7 E040                     M 	dc.b	$e0,spright|$00
000193D9                            	sVoice		$0A
000193D9 E80A                     M 	dc.b	$e8,$0a
000193DB                            
000193DB                            TowerPuppet_Loop2:
000193DB C902 8004                  	dc.b nC6, $02, nRst, $04
000193DF                            	saVol		$14
000193DF ED14                     M 	dc.b	$ed,$14
000193E1 C902 8004                  	dc.b nC6, $02, nRst, $04
000193E5                            	saVol		$0A
000193E5 ED0A                     M 	dc.b	$ed,$0a
000193E7 C902 8004                  	dc.b nC6, $02, nRst, $04
000193EB                            	saVol		$E2
000193EB EDE2                     M 	dc.b	$ed,$e2
000193ED C903 8004                  	dc.b nC6, $03, nRst, $04
000193F1                            	saVol		$14
000193F1 ED14                     M 	dc.b	$ed,$14
000193F3 C902 8004                  	dc.b nC6, $02, nRst, $04
000193F7                            	saVol		$0A
000193F7 ED0A                     M 	dc.b	$ed,$0a
000193F9 C902 8009                  	dc.b nC6, $02, nRst, $09
000193FD                            	saVol		$E2
000193FD EDE2                     M 	dc.b	$ed,$e2
000193FF C91E 8006 C702 8004        	dc.b nC6, $1E, nRst, $06, nBb5, $02, nRst, $04
00019407 C706 C903 80C9 8004        	dc.b nBb5, $06, nC6, $03, nRst, nC6, nRst, $04
0001940F                            	saVol		$14
0001940F ED14                     M 	dc.b	$ed,$14
00019411 C902 8004                  	dc.b nC6, $02, nRst, $04
00019415                            	saVol		$0A
00019415 ED0A                     M 	dc.b	$ed,$0a
00019417 C902 8003                  	dc.b nC6, $02, nRst, $03
0001941B                            	saVol		$E2
0001941B EDE2                     M 	dc.b	$ed,$e2
0001941D C904 8004                  	dc.b nC6, $04, nRst, $04
00019421                            	saVol		$14
00019421 ED14                     M 	dc.b	$ed,$14
00019423 C902 8004                  	dc.b nC6, $02, nRst, $04
00019427                            	saVol		$0A
00019427 ED0A                     M 	dc.b	$ed,$0a
00019429 C902 8008                  	dc.b nC6, $02, nRst, $08
0001942D                            	saVol		$E2
0001942D EDE2                     M 	dc.b	$ed,$e2
0001942F CC0F 8003 CB09 8003        	dc.b nEb6, $0F, nRst, $03, nD6, $09, nRst, $03
00019437 C702 8004 CB0C 8006        	dc.b nBb5, $02, nRst, $04, nD6, $0C, nRst, $06
0001943F                            	sLoop		$00, $02, TowerPuppet_Loop2
0001943F F700                     M 	dc.b	$f7,$00
00019441 FF99                     M 	dc.w	towerpuppet_loop2-*-1
00019443 02                       M 	dc.b	$02
00019444                            	saVol		$08
00019444 ED08                     M 	dc.b	$ed,$08
00019446                            	saVol		$F6
00019446 EDF6                     M 	dc.b	$ed,$f6
00019448                            	sVoice		$1E
00019448 E81E                     M 	dc.b	$e8,$1e
0001944A                            
0001944A                            TowerPuppet_Loop3:
0001944A                            	sPan		spLeft, $00
0001944A E080                     M 	dc.b	$e0,spleft|$00
0001944C C103 C2C9                  	dc.b nE5, $03, nF5, nC6
00019450                            	sPan		spRight, $00
00019450 E040                     M 	dc.b	$e0,spright|$00
00019452 C1C2 C9                    	dc.b nE5, nF5, nC6
00019455                            	sPan		spLeft, $00
00019455 E080                     M 	dc.b	$e0,spleft|$00
00019457 C1C2 C9                    	dc.b nE5, nF5, nC6
0001945A                            	sPan		spRight, $00
0001945A E040                     M 	dc.b	$e0,spright|$00
0001945C C1C2 C980 0C               	dc.b nE5, nF5, nC6, nRst, $0C
00019461                            	sLoop		$00, $08, TowerPuppet_Loop3
00019461 F700                     M 	dc.b	$f7,$00
00019463 FFE6                     M 	dc.w	towerpuppet_loop3-*-1
00019465 08                       M 	dc.b	$08
00019466                            	saVol		$0A
00019466 ED0A                     M 	dc.b	$ed,$0a
00019468                            	sPan		spRight, $00
00019468 E040                     M 	dc.b	$e0,spright|$00
0001946A                            	saVol		$F4
0001946A EDF4                     M 	dc.b	$ed,$f4
0001946C                            	sVoice		$0C
0001946C E80C                     M 	dc.b	$e8,$0c
0001946E                            
0001946E                            TowerPuppet_Loop4:
0001946E A702 80                    	dc.b nD3, $02, nRst
00019471                            	saVol		$0C
00019471 ED0C                     M 	dc.b	$ed,$0c
00019473 A701                       	dc.b nD3, $01
00019475                            	saVol		$F4
00019475 EDF4                     M 	dc.b	$ed,$f4
00019477 80                         	dc.b nRst
00019478                            	sLoop		$00, $07, TowerPuppet_Loop4
00019478 F700                     M 	dc.b	$f7,$00
0001947A FFF3                     M 	dc.w	towerpuppet_loop4-*-1
0001947C 07                       M 	dc.b	$07
0001947D                            
0001947D                            TowerPuppet_Loop5:
0001947D AC02 80                    	dc.b nG3, $02, nRst
00019480                            	saVol		$0C
00019480 ED0C                     M 	dc.b	$ed,$0c
00019482 AC01                       	dc.b nG3, $01
00019484                            	saVol		$F4
00019484 EDF4                     M 	dc.b	$ed,$f4
00019486 80                         	dc.b nRst
00019487                            	sLoop		$00, $04, TowerPuppet_Loop5
00019487 F700                     M 	dc.b	$f7,$00
00019489 FFF3                     M 	dc.w	towerpuppet_loop5-*-1
0001948B 04                       M 	dc.b	$04
0001948C                            
0001948C                            TowerPuppet_Loop6:
0001948C AE02 80                    	dc.b nA3, $02, nRst
0001948F                            	saVol		$0C
0001948F ED0C                     M 	dc.b	$ed,$0c
00019491 AE01                       	dc.b nA3, $01
00019493                            	saVol		$F4
00019493 EDF4                     M 	dc.b	$ed,$f4
00019495 80                         	dc.b nRst
00019496                            	sLoop		$00, $04, TowerPuppet_Loop6
00019496 F700                     M 	dc.b	$f7,$00
00019498 FFF3                     M 	dc.w	towerpuppet_loop6-*-1
0001949A 04                       M 	dc.b	$04
0001949B                            
0001949B                            TowerPuppet_Loop7:
0001949B B002 80                    	dc.b nB3, $02, nRst
0001949E                            	saVol		$0C
0001949E ED0C                     M 	dc.b	$ed,$0c
000194A0 B001                       	dc.b nB3, $01
000194A2                            	saVol		$F4
000194A2 EDF4                     M 	dc.b	$ed,$f4
000194A4 80                         	dc.b nRst
000194A5                            	sLoop		$00, $07, TowerPuppet_Loop7
000194A5 F700                     M 	dc.b	$f7,$00
000194A7 FFF3                     M 	dc.w	towerpuppet_loop7-*-1
000194A9 07                       M 	dc.b	$07
000194AA                            	ssMod68k	$05, $01, $04, $05
000194AA F005 0104 05             M 	dc.b	$f0,$05,$01,$04,$05
000194AF B006                       	dc.b nB3, $06
000194B1                            	ssMod68k	$0A, $01, $04, $05
000194B1 F00A 0104 05             M 	dc.b	$f0,$0a,$01,$04,$05
000194B6                            
000194B6                            TowerPuppet_Loop8:
000194B6 B102 80                    	dc.b nC4, $02, nRst
000194B9                            	saVol		$0C
000194B9 ED0C                     M 	dc.b	$ed,$0c
000194BB B101                       	dc.b nC4, $01
000194BD                            	saVol		$F4
000194BD EDF4                     M 	dc.b	$ed,$f4
000194BF 80                         	dc.b nRst
000194C0                            	sLoop		$00, $04, TowerPuppet_Loop8
000194C0 F700                     M 	dc.b	$f7,$00
000194C2 FFF3                     M 	dc.w	towerpuppet_loop8-*-1
000194C4 04                       M 	dc.b	$04
000194C5                            
000194C5                            TowerPuppet_Loop9:
000194C5 B302 80                    	dc.b nD4, $02, nRst
000194C8                            	saVol		$0C
000194C8 ED0C                     M 	dc.b	$ed,$0c
000194CA B301                       	dc.b nD4, $01
000194CC                            	saVol		$F4
000194CC EDF4                     M 	dc.b	$ed,$f4
000194CE 80                         	dc.b nRst
000194CF                            	sLoop		$00, $03, TowerPuppet_Loop9
000194CF F700                     M 	dc.b	$f7,$00
000194D1 FFF3                     M 	dc.w	towerpuppet_loop9-*-1
000194D3 03                       M 	dc.b	$03
000194D4 B102 80                    	dc.b nC4, $02, nRst
000194D7                            	saVol		$0C
000194D7 ED0C                     M 	dc.b	$ed,$0c
000194D9 B101                       	dc.b nC4, $01
000194DB                            	saVol		$F4
000194DB EDF4                     M 	dc.b	$ed,$f4
000194DD 80B1 0280                  	dc.b nRst, nC4, $02, nRst
000194E1                            	saVol		$0C
000194E1 ED0C                     M 	dc.b	$ed,$0c
000194E3 B101                       	dc.b nC4, $01
000194E5                            	saVol		$F4
000194E5 EDF4                     M 	dc.b	$ed,$f4
000194E7 80                         	dc.b nRst
000194E8                            
000194E8                            TowerPuppet_Loop10:
000194E8 B002 80                    	dc.b nB3, $02, nRst
000194EB                            	saVol		$0C
000194EB ED0C                     M 	dc.b	$ed,$0c
000194ED B001                       	dc.b nB3, $01
000194EF                            	saVol		$F4
000194EF EDF4                     M 	dc.b	$ed,$f4
000194F1 80                         	dc.b nRst
000194F2                            	sLoop		$00, $06, TowerPuppet_Loop10
000194F2 F700                     M 	dc.b	$f7,$00
000194F4 FFF3                     M 	dc.w	towerpuppet_loop10-*-1
000194F6 06                       M 	dc.b	$06
000194F7                            	ssMod68k	$05, $01, $04, $05
000194F7 F005 0104 05             M 	dc.b	$f0,$05,$01,$04,$05
000194FC B006                       	dc.b nB3, $06
000194FE                            	ssMod68k	$0A, $01, $04, $05
000194FE F00A 0104 05             M 	dc.b	$f0,$0a,$01,$04,$05
00019503                            
00019503                            TowerPuppet_Loop11:
00019503 AF02 80                    	dc.b nBb3, $02, nRst
00019506                            	saVol		$0C
00019506 ED0C                     M 	dc.b	$ed,$0c
00019508 AF01                       	dc.b nBb3, $01
0001950A                            	saVol		$F4
0001950A EDF4                     M 	dc.b	$ed,$f4
0001950C 80AF 0280                  	dc.b nRst, nBb3, $02, nRst
00019510                            	saVol		$0C
00019510 ED0C                     M 	dc.b	$ed,$0c
00019512 AF01                       	dc.b nBb3, $01
00019514                            	saVol		$F4
00019514 EDF4                     M 	dc.b	$ed,$f4
00019516 80AF 02                    	dc.b nRst, nBb3, $02
00019519                            	saVol		$0C
00019519 ED0C                     M 	dc.b	$ed,$0c
0001951B AF01                       	dc.b nBb3, $01
0001951D                            	saVol		$F4
0001951D EDF4                     M 	dc.b	$ed,$f4
0001951F                            	sLoop		$00, $02, TowerPuppet_Loop11
0001951F F700                     M 	dc.b	$f7,$00
00019521 FFE1                     M 	dc.w	towerpuppet_loop11-*-1
00019523 02                       M 	dc.b	$02
00019524 8006                       	dc.b nRst, $06
00019526                            
00019526                            TowerPuppet_Loop12:
00019526 AF02 80                    	dc.b nBb3, $02, nRst
00019529                            	saVol		$0C
00019529 ED0C                     M 	dc.b	$ed,$0c
0001952B AF01                       	dc.b nBb3, $01
0001952D                            	saVol		$F4
0001952D EDF4                     M 	dc.b	$ed,$f4
0001952F 80                         	dc.b nRst
00019530                            	sLoop		$00, $03, TowerPuppet_Loop12
00019530 F700                     M 	dc.b	$f7,$00
00019532 FFF3                     M 	dc.w	towerpuppet_loop12-*-1
00019534 03                       M 	dc.b	$03
00019535                            
00019535                            TowerPuppet_Loop13:
00019535 AE02                       	dc.b nA3, $02
00019537                            	saVol		$0B
00019537 ED0B                     M 	dc.b	$ed,$0b
00019539 AE01                       	dc.b nA3, $01
0001953B                            	saVol		$F5
0001953B EDF5                     M 	dc.b	$ed,$f5
0001953D AE02                       	dc.b nA3, $02
0001953F                            	saVol		$0B
0001953F ED0B                     M 	dc.b	$ed,$0b
00019541 AE01                       	dc.b nA3, $01
00019543                            	saVol		$F5
00019543 EDF5                     M 	dc.b	$ed,$f5
00019545 B902                       	dc.b nAb4, $02
00019547                            	saVol		$0B
00019547 ED0B                     M 	dc.b	$ed,$0b
00019549 B901                       	dc.b nAb4, $01
0001954B                            	saVol		$F5
0001954B EDF5                     M 	dc.b	$ed,$f5
0001954D B902                       	dc.b nAb4, $02
0001954F                            	saVol		$0B
0001954F ED0B                     M 	dc.b	$ed,$0b
00019551 B901                       	dc.b nAb4, $01
00019553                            	saVol		$F5
00019553 EDF5                     M 	dc.b	$ed,$f5
00019555                            	sLoop		$00, $04, TowerPuppet_Loop13
00019555 F700                     M 	dc.b	$f7,$00
00019557 FFDD                     M 	dc.w	towerpuppet_loop13-*-1
00019559 04                       M 	dc.b	$04
0001955A                            
0001955A                            TowerPuppet_Loop14:
0001955A B002                       	dc.b nB3, $02
0001955C                            	saVol		$0B
0001955C ED0B                     M 	dc.b	$ed,$0b
0001955E B001                       	dc.b nB3, $01
00019560                            	saVol		$F5
00019560 EDF5                     M 	dc.b	$ed,$f5
00019562 B002                       	dc.b nB3, $02
00019564                            	saVol		$0B
00019564 ED0B                     M 	dc.b	$ed,$0b
00019566 B001                       	dc.b nB3, $01
00019568                            	saVol		$F5
00019568 EDF5                     M 	dc.b	$ed,$f5
0001956A B902                       	dc.b nAb4, $02
0001956C                            	saVol		$0B
0001956C ED0B                     M 	dc.b	$ed,$0b
0001956E B901                       	dc.b nAb4, $01
00019570                            	saVol		$F5
00019570 EDF5                     M 	dc.b	$ed,$f5
00019572 B902                       	dc.b nAb4, $02
00019574                            	saVol		$0B
00019574 ED0B                     M 	dc.b	$ed,$0b
00019576 B901                       	dc.b nAb4, $01
00019578                            	saVol		$F5
00019578 EDF5                     M 	dc.b	$ed,$f5
0001957A                            	sLoop		$00, $04, TowerPuppet_Loop14
0001957A F700                     M 	dc.b	$f7,$00
0001957C FFDD                     M 	dc.w	towerpuppet_loop14-*-1
0001957E 04                       M 	dc.b	$04
0001957F                            	saVol		$0C
0001957F ED0C                     M 	dc.b	$ed,$0c
00019581                            	saVol		$F4
00019581 EDF4                     M 	dc.b	$ed,$f4
00019583                            	sPan		spRight, $00
00019583 E040                     M 	dc.b	$e0,spright|$00
00019585                            	sVoice		$0C
00019585 E80C                     M 	dc.b	$e8,$0c
00019587 B102                       	dc.b nC4, $02
00019589                            	saVol		$0B
00019589 ED0B                     M 	dc.b	$ed,$0b
0001958B B101                       	dc.b nC4, $01
0001958D                            	saVol		$F5
0001958D EDF5                     M 	dc.b	$ed,$f5
0001958F B102                       	dc.b nC4, $02
00019591                            	saVol		$0B
00019591 ED0B                     M 	dc.b	$ed,$0b
00019593 B101                       	dc.b nC4, $01
00019595                            	saVol		$F5
00019595 EDF5                     M 	dc.b	$ed,$f5
00019597                            	sPan		spLeft, $00
00019597 E080                     M 	dc.b	$e0,spleft|$00
00019599                            	saVol		$03
00019599 ED03                     M 	dc.b	$ed,$03
0001959B                            	sVoice		$02
0001959B E802                     M 	dc.b	$e8,$02
0001959D BD02                       	dc.b nC5, $02
0001959F                            	saVol		$0B
0001959F ED0B                     M 	dc.b	$ed,$0b
000195A1 BD01                       	dc.b nC5, $01
000195A3                            	saVol		$F5
000195A3 EDF5                     M 	dc.b	$ed,$f5
000195A5 BD02                       	dc.b nC5, $02
000195A7                            	saVol		$0B
000195A7 ED0B                     M 	dc.b	$ed,$0b
000195A9 BD01                       	dc.b nC5, $01
000195AB                            	saVol		$F5
000195AB EDF5                     M 	dc.b	$ed,$f5
000195AD BC02                       	dc.b nB4, $02
000195AF                            	saVol		$0B
000195AF ED0B                     M 	dc.b	$ed,$0b
000195B1 BC01                       	dc.b nB4, $01
000195B3                            	saVol		$F5
000195B3 EDF5                     M 	dc.b	$ed,$f5
000195B5 BC02                       	dc.b nB4, $02
000195B7                            	saVol		$0B
000195B7 ED0B                     M 	dc.b	$ed,$0b
000195B9 BC01                       	dc.b nB4, $01
000195BB                            	saVol		$F5
000195BB EDF5                     M 	dc.b	$ed,$f5
000195BD                            	saVol		$FD
000195BD EDFD                     M 	dc.b	$ed,$fd
000195BF                            	sPan		spRight, $00
000195BF E040                     M 	dc.b	$e0,spright|$00
000195C1                            	sVoice		$0C
000195C1 E80C                     M 	dc.b	$e8,$0c
000195C3 B102                       	dc.b nC4, $02
000195C5                            	saVol		$0B
000195C5 ED0B                     M 	dc.b	$ed,$0b
000195C7 B101                       	dc.b nC4, $01
000195C9                            	saVol		$F5
000195C9 EDF5                     M 	dc.b	$ed,$f5
000195CB B102                       	dc.b nC4, $02
000195CD                            	saVol		$0B
000195CD ED0B                     M 	dc.b	$ed,$0b
000195CF B101                       	dc.b nC4, $01
000195D1                            	saVol		$F5
000195D1 EDF5                     M 	dc.b	$ed,$f5
000195D3                            	sPan		spLeft, $00
000195D3 E080                     M 	dc.b	$e0,spleft|$00
000195D5                            	saVol		$03
000195D5 ED03                     M 	dc.b	$ed,$03
000195D7                            	sVoice		$02
000195D7 E802                     M 	dc.b	$e8,$02
000195D9 BD02                       	dc.b nC5, $02
000195DB                            	saVol		$0B
000195DB ED0B                     M 	dc.b	$ed,$0b
000195DD BD01                       	dc.b nC5, $01
000195DF                            	saVol		$F5
000195DF EDF5                     M 	dc.b	$ed,$f5
000195E1 BD02                       	dc.b nC5, $02
000195E3                            	saVol		$0B
000195E3 ED0B                     M 	dc.b	$ed,$0b
000195E5 BD01                       	dc.b nC5, $01
000195E7                            	saVol		$F5
000195E7 EDF5                     M 	dc.b	$ed,$f5
000195E9                            	saVol		$FD
000195E9 EDFD                     M 	dc.b	$ed,$fd
000195EB                            	sPan		spRight, $00
000195EB E040                     M 	dc.b	$e0,spright|$00
000195ED                            	sVoice		$0C
000195ED E80C                     M 	dc.b	$e8,$0c
000195EF B102                       	dc.b nC4, $02
000195F1                            	saVol		$0B
000195F1 ED0B                     M 	dc.b	$ed,$0b
000195F3 B101                       	dc.b nC4, $01
000195F5                            	saVol		$F5
000195F5 EDF5                     M 	dc.b	$ed,$f5
000195F7                            	sPan		spLeft, $00
000195F7 E080                     M 	dc.b	$e0,spleft|$00
000195F9                            	saVol		$03
000195F9 ED03                     M 	dc.b	$ed,$03
000195FB                            	sVoice		$02
000195FB E802                     M 	dc.b	$e8,$02
000195FD BC02                       	dc.b nB4, $02
000195FF                            	saVol		$0B
000195FF ED0B                     M 	dc.b	$ed,$0b
00019601 BC01                       	dc.b nB4, $01
00019603                            	saVol		$F5
00019603 EDF5                     M 	dc.b	$ed,$f5
00019605 BC02                       	dc.b nB4, $02
00019607                            	saVol		$0B
00019607 ED0B                     M 	dc.b	$ed,$0b
00019609 BC01                       	dc.b nB4, $01
0001960B                            	saVol		$F5
0001960B EDF5                     M 	dc.b	$ed,$f5
0001960D                            	saVol		$FD
0001960D EDFD                     M 	dc.b	$ed,$fd
0001960F                            	sPan		spRight, $00
0001960F E040                     M 	dc.b	$e0,spright|$00
00019611                            	sVoice		$0C
00019611 E80C                     M 	dc.b	$e8,$0c
00019613 B102                       	dc.b nC4, $02
00019615                            	saVol		$0B
00019615 ED0B                     M 	dc.b	$ed,$0b
00019617 B101                       	dc.b nC4, $01
00019619                            	saVol		$F5
00019619 EDF5                     M 	dc.b	$ed,$f5
0001961B B102                       	dc.b nC4, $02
0001961D                            	saVol		$0B
0001961D ED0B                     M 	dc.b	$ed,$0b
0001961F B101                       	dc.b nC4, $01
00019621                            	saVol		$F5
00019621 EDF5                     M 	dc.b	$ed,$f5
00019623                            	sPan		spLeft, $00
00019623 E080                     M 	dc.b	$e0,spleft|$00
00019625                            	saVol		$03
00019625 ED03                     M 	dc.b	$ed,$03
00019627                            	sVoice		$02
00019627 E802                     M 	dc.b	$e8,$02
00019629 BD02                       	dc.b nC5, $02
0001962B                            	saVol		$0B
0001962B ED0B                     M 	dc.b	$ed,$0b
0001962D BD01                       	dc.b nC5, $01
0001962F                            	saVol		$F5
0001962F EDF5                     M 	dc.b	$ed,$f5
00019631                            	saVol		$FD
00019631 EDFD                     M 	dc.b	$ed,$fd
00019633                            	sPan		spRight, $00
00019633 E040                     M 	dc.b	$e0,spright|$00
00019635                            	sVoice		$0C
00019635 E80C                     M 	dc.b	$e8,$0c
00019637 B302                       	dc.b nD4, $02
00019639                            	saVol		$0B
00019639 ED0B                     M 	dc.b	$ed,$0b
0001963B B301                       	dc.b nD4, $01
0001963D                            	saVol		$F5
0001963D EDF5                     M 	dc.b	$ed,$f5
0001963F B302                       	dc.b nD4, $02
00019641                            	saVol		$0B
00019641 ED0B                     M 	dc.b	$ed,$0b
00019643 B301                       	dc.b nD4, $01
00019645                            	saVol		$F5
00019645 EDF5                     M 	dc.b	$ed,$f5
00019647                            	sPan		spLeft, $00
00019647 E080                     M 	dc.b	$e0,spleft|$00
00019649                            	saVol		$03
00019649 ED03                     M 	dc.b	$ed,$03
0001964B                            	sVoice		$02
0001964B E802                     M 	dc.b	$e8,$02
0001964D BF02                       	dc.b nD5, $02
0001964F                            	saVol		$0B
0001964F ED0B                     M 	dc.b	$ed,$0b
00019651 BF01                       	dc.b nD5, $01
00019653                            	saVol		$F5
00019653 EDF5                     M 	dc.b	$ed,$f5
00019655 BF02                       	dc.b nD5, $02
00019657                            	saVol		$0B
00019657 ED0B                     M 	dc.b	$ed,$0b
00019659 BF01                       	dc.b nD5, $01
0001965B                            	saVol		$F5
0001965B EDF5                     M 	dc.b	$ed,$f5
0001965D BD02                       	dc.b nC5, $02
0001965F                            	saVol		$0B
0001965F ED0B                     M 	dc.b	$ed,$0b
00019661 BD01                       	dc.b nC5, $01
00019663                            	saVol		$F5
00019663 EDF5                     M 	dc.b	$ed,$f5
00019665 BD02                       	dc.b nC5, $02
00019667                            	saVol		$0B
00019667 ED0B                     M 	dc.b	$ed,$0b
00019669 BD01                       	dc.b nC5, $01
0001966B                            	saVol		$F5
0001966B EDF5                     M 	dc.b	$ed,$f5
0001966D                            	saVol		$FD
0001966D EDFD                     M 	dc.b	$ed,$fd
0001966F                            	sPan		spRight, $00
0001966F E040                     M 	dc.b	$e0,spright|$00
00019671                            	sVoice		$0C
00019671 E80C                     M 	dc.b	$e8,$0c
00019673 B302                       	dc.b nD4, $02
00019675                            	saVol		$0B
00019675 ED0B                     M 	dc.b	$ed,$0b
00019677 B301                       	dc.b nD4, $01
00019679                            	saVol		$F5
00019679 EDF5                     M 	dc.b	$ed,$f5
0001967B B302                       	dc.b nD4, $02
0001967D                            	saVol		$0B
0001967D ED0B                     M 	dc.b	$ed,$0b
0001967F B301                       	dc.b nD4, $01
00019681                            	saVol		$F5
00019681 EDF5                     M 	dc.b	$ed,$f5
00019683                            	sPan		spLeft, $00
00019683 E080                     M 	dc.b	$e0,spleft|$00
00019685                            	saVol		$03
00019685 ED03                     M 	dc.b	$ed,$03
00019687                            	sVoice		$02
00019687 E802                     M 	dc.b	$e8,$02
00019689 BF02                       	dc.b nD5, $02
0001968B                            	saVol		$0B
0001968B ED0B                     M 	dc.b	$ed,$0b
0001968D BF01                       	dc.b nD5, $01
0001968F                            	saVol		$F5
0001968F EDF5                     M 	dc.b	$ed,$f5
00019691 BF02                       	dc.b nD5, $02
00019693                            	saVol		$0B
00019693 ED0B                     M 	dc.b	$ed,$0b
00019695 BF01                       	dc.b nD5, $01
00019697                            	saVol		$F5
00019697 EDF5                     M 	dc.b	$ed,$f5
00019699                            	saVol		$FD
00019699 EDFD                     M 	dc.b	$ed,$fd
0001969B                            	sPan		spRight, $00
0001969B E040                     M 	dc.b	$e0,spright|$00
0001969D                            	sVoice		$0C
0001969D E80C                     M 	dc.b	$e8,$0c
0001969F B302                       	dc.b nD4, $02
000196A1                            	saVol		$0B
000196A1 ED0B                     M 	dc.b	$ed,$0b
000196A3 B301                       	dc.b nD4, $01
000196A5                            	saVol		$F5
000196A5 EDF5                     M 	dc.b	$ed,$f5
000196A7                            	sPan		spLeft, $00
000196A7 E080                     M 	dc.b	$e0,spleft|$00
000196A9                            	saVol		$03
000196A9 ED03                     M 	dc.b	$ed,$03
000196AB                            	sVoice		$02
000196AB E802                     M 	dc.b	$e8,$02
000196AD BD02                       	dc.b nC5, $02
000196AF                            	saVol		$0B
000196AF ED0B                     M 	dc.b	$ed,$0b
000196B1 BD01                       	dc.b nC5, $01
000196B3                            	saVol		$F5
000196B3 EDF5                     M 	dc.b	$ed,$f5
000196B5 BD02                       	dc.b nC5, $02
000196B7                            	saVol		$0B
000196B7 ED0B                     M 	dc.b	$ed,$0b
000196B9 BD01                       	dc.b nC5, $01
000196BB                            	saVol		$F5
000196BB EDF5                     M 	dc.b	$ed,$f5
000196BD                            	saVol		$FD
000196BD EDFD                     M 	dc.b	$ed,$fd
000196BF                            	sPan		spRight, $00
000196BF E040                     M 	dc.b	$e0,spright|$00
000196C1                            	sVoice		$0C
000196C1 E80C                     M 	dc.b	$e8,$0c
000196C3 B302                       	dc.b nD4, $02
000196C5                            	saVol		$0B
000196C5 ED0B                     M 	dc.b	$ed,$0b
000196C7 B301                       	dc.b nD4, $01
000196C9                            	saVol		$F5
000196C9 EDF5                     M 	dc.b	$ed,$f5
000196CB B302                       	dc.b nD4, $02
000196CD                            	saVol		$0B
000196CD ED0B                     M 	dc.b	$ed,$0b
000196CF B301                       	dc.b nD4, $01
000196D1                            	saVol		$F5
000196D1 EDF5                     M 	dc.b	$ed,$f5
000196D3                            	sPan		spLeft, $00
000196D3 E080                     M 	dc.b	$e0,spleft|$00
000196D5                            	saVol		$03
000196D5 ED03                     M 	dc.b	$ed,$03
000196D7                            	sVoice		$02
000196D7 E802                     M 	dc.b	$e8,$02
000196D9 BF02                       	dc.b nD5, $02
000196DB                            	saVol		$0B
000196DB ED0B                     M 	dc.b	$ed,$0b
000196DD BF01                       	dc.b nD5, $01
000196DF                            	saVol		$F5
000196DF EDF5                     M 	dc.b	$ed,$f5
000196E1                            	saVol		$FD
000196E1 EDFD                     M 	dc.b	$ed,$fd
000196E3                            
000196E3                            TowerPuppet_Loop15:
000196E3                            	sPan		spRight, $00
000196E3 E040                     M 	dc.b	$e0,spright|$00
000196E5                            	sVoice		$0C
000196E5 E80C                     M 	dc.b	$e8,$0c
000196E7 B502                       	dc.b nE4, $02
000196E9                            	saVol		$0B
000196E9 ED0B                     M 	dc.b	$ed,$0b
000196EB B501                       	dc.b nE4, $01
000196ED                            	saVol		$F5
000196ED EDF5                     M 	dc.b	$ed,$f5
000196EF B502                       	dc.b nE4, $02
000196F1                            	saVol		$0B
000196F1 ED0B                     M 	dc.b	$ed,$0b
000196F3 B501                       	dc.b nE4, $01
000196F5                            	saVol		$F5
000196F5 EDF5                     M 	dc.b	$ed,$f5
000196F7                            	sPan		spLeft, $00
000196F7 E080                     M 	dc.b	$e0,spleft|$00
000196F9                            	saVol		$03
000196F9 ED03                     M 	dc.b	$ed,$03
000196FB                            	sVoice		$02
000196FB E802                     M 	dc.b	$e8,$02
000196FD C102                       	dc.b nE5, $02
000196FF                            	saVol		$0B
000196FF ED0B                     M 	dc.b	$ed,$0b
00019701 C101                       	dc.b nE5, $01
00019703                            	saVol		$F5
00019703 EDF5                     M 	dc.b	$ed,$f5
00019705 C102                       	dc.b nE5, $02
00019707                            	saVol		$0B
00019707 ED0B                     M 	dc.b	$ed,$0b
00019709 C101                       	dc.b nE5, $01
0001970B                            	saVol		$F5
0001970B EDF5                     M 	dc.b	$ed,$f5
0001970D BF02                       	dc.b nD5, $02
0001970F                            	saVol		$0B
0001970F ED0B                     M 	dc.b	$ed,$0b
00019711 BF01                       	dc.b nD5, $01
00019713                            	saVol		$F5
00019713 EDF5                     M 	dc.b	$ed,$f5
00019715 BF02                       	dc.b nD5, $02
00019717                            	saVol		$0B
00019717 ED0B                     M 	dc.b	$ed,$0b
00019719 BF01                       	dc.b nD5, $01
0001971B                            	saVol		$F5
0001971B EDF5                     M 	dc.b	$ed,$f5
0001971D                            	saVol		$FD
0001971D EDFD                     M 	dc.b	$ed,$fd
0001971F                            	sPan		spRight, $00
0001971F E040                     M 	dc.b	$e0,spright|$00
00019721                            	sVoice		$0C
00019721 E80C                     M 	dc.b	$e8,$0c
00019723 B502                       	dc.b nE4, $02
00019725                            	saVol		$0B
00019725 ED0B                     M 	dc.b	$ed,$0b
00019727 B501                       	dc.b nE4, $01
00019729                            	saVol		$F5
00019729 EDF5                     M 	dc.b	$ed,$f5
0001972B B502                       	dc.b nE4, $02
0001972D                            	saVol		$0B
0001972D ED0B                     M 	dc.b	$ed,$0b
0001972F B501                       	dc.b nE4, $01
00019731                            	saVol		$F5
00019731 EDF5                     M 	dc.b	$ed,$f5
00019733                            	sPan		spLeft, $00
00019733 E080                     M 	dc.b	$e0,spleft|$00
00019735                            	saVol		$03
00019735 ED03                     M 	dc.b	$ed,$03
00019737                            	sVoice		$02
00019737 E802                     M 	dc.b	$e8,$02
00019739 C102                       	dc.b nE5, $02
0001973B                            	saVol		$0B
0001973B ED0B                     M 	dc.b	$ed,$0b
0001973D C101                       	dc.b nE5, $01
0001973F                            	saVol		$F5
0001973F EDF5                     M 	dc.b	$ed,$f5
00019741 C102                       	dc.b nE5, $02
00019743                            	saVol		$0B
00019743 ED0B                     M 	dc.b	$ed,$0b
00019745 C101                       	dc.b nE5, $01
00019747                            	saVol		$F5
00019747 EDF5                     M 	dc.b	$ed,$f5
00019749                            	saVol		$FD
00019749 EDFD                     M 	dc.b	$ed,$fd
0001974B                            	sPan		spRight, $00
0001974B E040                     M 	dc.b	$e0,spright|$00
0001974D                            	sVoice		$0C
0001974D E80C                     M 	dc.b	$e8,$0c
0001974F B502                       	dc.b nE4, $02
00019751                            	saVol		$0B
00019751 ED0B                     M 	dc.b	$ed,$0b
00019753 B501                       	dc.b nE4, $01
00019755                            	saVol		$F5
00019755 EDF5                     M 	dc.b	$ed,$f5
00019757                            	sPan		spLeft, $00
00019757 E080                     M 	dc.b	$e0,spleft|$00
00019759                            	saVol		$03
00019759 ED03                     M 	dc.b	$ed,$03
0001975B                            	sVoice		$02
0001975B E802                     M 	dc.b	$e8,$02
0001975D BF02                       	dc.b nD5, $02
0001975F                            	saVol		$0B
0001975F ED0B                     M 	dc.b	$ed,$0b
00019761 BF01                       	dc.b nD5, $01
00019763                            	saVol		$F5
00019763 EDF5                     M 	dc.b	$ed,$f5
00019765 BF02                       	dc.b nD5, $02
00019767                            	saVol		$0B
00019767 ED0B                     M 	dc.b	$ed,$0b
00019769 BF01                       	dc.b nD5, $01
0001976B                            	saVol		$F5
0001976B EDF5                     M 	dc.b	$ed,$f5
0001976D                            	saVol		$FD
0001976D EDFD                     M 	dc.b	$ed,$fd
0001976F                            	sPan		spRight, $00
0001976F E040                     M 	dc.b	$e0,spright|$00
00019771                            	sVoice		$0C
00019771 E80C                     M 	dc.b	$e8,$0c
00019773 B502                       	dc.b nE4, $02
00019775                            	saVol		$0B
00019775 ED0B                     M 	dc.b	$ed,$0b
00019777 B501                       	dc.b nE4, $01
00019779                            	saVol		$F5
00019779 EDF5                     M 	dc.b	$ed,$f5
0001977B B502                       	dc.b nE4, $02
0001977D                            	saVol		$0B
0001977D ED0B                     M 	dc.b	$ed,$0b
0001977F B501                       	dc.b nE4, $01
00019781                            	saVol		$F5
00019781 EDF5                     M 	dc.b	$ed,$f5
00019783                            	sPan		spLeft, $00
00019783 E080                     M 	dc.b	$e0,spleft|$00
00019785                            	saVol		$03
00019785 ED03                     M 	dc.b	$ed,$03
00019787                            	sVoice		$02
00019787 E802                     M 	dc.b	$e8,$02
00019789 C102                       	dc.b nE5, $02
0001978B                            	saVol		$0B
0001978B ED0B                     M 	dc.b	$ed,$0b
0001978D C101                       	dc.b nE5, $01
0001978F                            	saVol		$F5
0001978F EDF5                     M 	dc.b	$ed,$f5
00019791                            	saVol		$FD
00019791 EDFD                     M 	dc.b	$ed,$fd
00019793                            	sLoop		$00, $02, TowerPuppet_Loop15
00019793 F700                     M 	dc.b	$f7,$00
00019795 FF4D                     M 	dc.w	towerpuppet_loop15-*-1
00019797 02                       M 	dc.b	$02
00019798                            	saVol		$0C
00019798 ED0C                     M 	dc.b	$ed,$0c
0001979A                            	sPan		spCenter, $00
0001979A E0C0                     M 	dc.b	$e0,spcenter|$00
0001979C                            	sJump		TowerPuppet_FM3
0001979C F6                       M 	dc.b	$f6
0001979D FBCE                     M 	dc.w	towerpuppet_fm3-*-1
0001979F                            
0001979F                            TowerPuppet_FM4:
0001979F 800C                       	dc.b nRst, $0C
000197A1                            	sPan		spLeft, $00
000197A1 E080                     M 	dc.b	$e0,spleft|$00
000197A3                            	saVol		$F0
000197A3 EDF0                     M 	dc.b	$ed,$f0
000197A5                            	sVoice		$07
000197A5 E807                     M 	dc.b	$e8,$07
000197A7                            	ssMod68k	$0C, $01, $A1, $CA
000197A7 F00C 01A1 CA             M 	dc.b	$f0,$0c,$01,$a1,$ca
000197AC AA80 AA                    	dc.b nF3, nRst, nF3
000197AF                            	sModOff
000197AF EC                       M 	dc.b	$ec
000197B0                            	saVol		$10
000197B0 ED10                     M 	dc.b	$ed,$10
000197B2                            	sPan		spCenter, $00
000197B2 E0C0                     M 	dc.b	$e0,spcenter|$00
000197B4                            	saVol		$F4
000197B4 EDF4                     M 	dc.b	$ed,$f4
000197B6                            	sVoice		$08
000197B6 E808                     M 	dc.b	$e8,$08
000197B8 C903 C9C9 C9               	dc.b nC6, $03, nC6, nC6, nC6
000197BD                            	saVol		$0C
000197BD ED0C                     M 	dc.b	$ed,$0c
000197BF                            	sPan		spLeft, $00
000197BF E080                     M 	dc.b	$e0,spleft|$00
000197C1                            	saVol		$F0
000197C1 EDF0                     M 	dc.b	$ed,$f0
000197C3                            	sVoice		$07
000197C3 E807                     M 	dc.b	$e8,$07
000197C5                            	ssMod68k	$0C, $01, $A1, $CA
000197C5 F00C 01A1 CA             M 	dc.b	$f0,$0c,$01,$a1,$ca
000197CA AA06                       	dc.b nF3, $06
000197CC                            	sModOff
000197CC EC                       M 	dc.b	$ec
000197CD                            	saVol		$10
000197CD ED10                     M 	dc.b	$ed,$10
000197CF                            	sPan		spCenter, $00
000197CF E0C0                     M 	dc.b	$e0,spcenter|$00
000197D1                            	saVol		$F4
000197D1 EDF4                     M 	dc.b	$ed,$f4
000197D3                            	sVoice		$08
000197D3 E808                     M 	dc.b	$e8,$08
000197D5 C903 C9C9 C9C9 06          	dc.b nC6, $03, nC6, nC6, nC6, nC6, $06
000197DC                            	saVol		$0C
000197DC ED0C                     M 	dc.b	$ed,$0c
000197DE                            	sPan		spLeft, $00
000197DE E080                     M 	dc.b	$e0,spleft|$00
000197E0                            	saVol		$F0
000197E0 EDF0                     M 	dc.b	$ed,$f0
000197E2                            	sVoice		$07
000197E2 E807                     M 	dc.b	$e8,$07
000197E4                            	ssMod68k	$0C, $01, $A1, $CA
000197E4 F00C 01A1 CA             M 	dc.b	$f0,$0c,$01,$a1,$ca
000197E9 AA06                       	dc.b nF3, $06
000197EB                            	sModOff
000197EB EC                       M 	dc.b	$ec
000197EC                            	saVol		$10
000197EC ED10                     M 	dc.b	$ed,$10
000197EE                            	sPan		spCenter, $00
000197EE E0C0                     M 	dc.b	$e0,spcenter|$00
000197F0                            	saVol		$F4
000197F0 EDF4                     M 	dc.b	$ed,$f4
000197F2                            	sVoice		$08
000197F2 E808                     M 	dc.b	$e8,$08
000197F4 C903 C9                    	dc.b nC6, $03, nC6
000197F7                            	saVol		$0C
000197F7 ED0C                     M 	dc.b	$ed,$0c
000197F9                            	sLoop		$00, $04, TowerPuppet_FM4
000197F9 F700                     M 	dc.b	$f7,$00
000197FB FFA3                     M 	dc.w	towerpuppet_fm4-*-1
000197FD 04                       M 	dc.b	$04
000197FE 8018                       	dc.b nRst, $18
00019800                            	saVol		$F9
00019800 EDF9                     M 	dc.b	$ed,$f9
00019802                            	ssMod68k	$10, $01, $04, $05
00019802 F010 0104 05             M 	dc.b	$f0,$10,$01,$04,$05
00019807                            	sVoice		$1C
00019807 E81C                     M 	dc.b	$e8,$1c
00019809                            	sPan		spLeft, $00
00019809 E080                     M 	dc.b	$e0,spleft|$00
0001980B                            
0001980B                            TowerPuppet_Loop16:
0001980B C202 8004                  	dc.b nF5, $02, nRst, $04
0001980F                            	saVol		$14
0001980F ED14                     M 	dc.b	$ed,$14
00019811 C202 8004                  	dc.b nF5, $02, nRst, $04
00019815                            	saVol		$0A
00019815 ED0A                     M 	dc.b	$ed,$0a
00019817 C202 8004                  	dc.b nF5, $02, nRst, $04
0001981B                            	saVol		$E2
0001981B EDE2                     M 	dc.b	$ed,$e2
0001981D C003 8004                  	dc.b nEb5, $03, nRst, $04
00019821                            	saVol		$14
00019821 ED14                     M 	dc.b	$ed,$14
00019823 C002 8004                  	dc.b nEb5, $02, nRst, $04
00019827                            	saVol		$0A
00019827 ED0A                     M 	dc.b	$ed,$0a
00019829 C002 8009                  	dc.b nEb5, $02, nRst, $09
0001982D                            	saVol		$E2
0001982D EDE2                     M 	dc.b	$ed,$e2
0001982F BF1E 8006 BF02 8004        	dc.b nD5, $1E, nRst, $06, nD5, $02, nRst, $04
00019837 BF06 C103 80C2 8004        	dc.b nD5, $06, nE5, $03, nRst, nF5, nRst, $04
0001983F                            	saVol		$14
0001983F ED14                     M 	dc.b	$ed,$14
00019841 C202 8004                  	dc.b nF5, $02, nRst, $04
00019845                            	saVol		$0A
00019845 ED0A                     M 	dc.b	$ed,$0a
00019847 C202 8003                  	dc.b nF5, $02, nRst, $03
0001984B                            	saVol		$E2
0001984B EDE2                     M 	dc.b	$ed,$e2
0001984D C004 8004                  	dc.b nEb5, $04, nRst, $04
00019851                            	saVol		$14
00019851 ED14                     M 	dc.b	$ed,$14
00019853 C002 8004                  	dc.b nEb5, $02, nRst, $04
00019857                            	saVol		$0A
00019857 ED0A                     M 	dc.b	$ed,$0a
00019859 C002 8008                  	dc.b nEb5, $02, nRst, $08
0001985D                            	saVol		$E2
0001985D EDE2                     M 	dc.b	$ed,$e2
0001985F C40F 8003 C209 8003        	dc.b nG5, $0F, nRst, $03, nF5, $09, nRst, $03
00019867 BF02 8004 C20C 8006        	dc.b nD5, $02, nRst, $04, nF5, $0C, nRst, $06
0001986F                            	sLoop		$00, $02, TowerPuppet_Loop16
0001986F F700                     M 	dc.b	$f7,$00
00019871 FF99                     M 	dc.w	towerpuppet_loop16-*-1
00019873 02                       M 	dc.b	$02
00019874                            	saVol		$07
00019874 ED07                     M 	dc.b	$ed,$07
00019876                            	sModOff
00019876 EC                       M 	dc.b	$ec
00019877 8018 8030 8080 8080        	dc.b nRst, $18, nRst, $30, nRst, nRst, nRst, nRst
0001987F 8080 8018                  	dc.b nRst, nRst, nRst, $18
00019883                            	saVol		$05
00019883 ED05                     M 	dc.b	$ed,$05
00019885                            	saTranspose	$F4
00019885 E4F4                     M 	dc.b	$e4,$f4
00019887                            	ssLFO		$0C, $0C|spCentre
00019887 EF0C CC                  M 	dc.b	$ef,$0c,$0c|spcentre
0001988A                            	sVoice		$00
0001988A E800                     M 	dc.b	$e8,$00
0001988C                            	ssMod68k	$11, $02, $04, $04
0001988C F011 0204 04             M 	dc.b	$f0,$11,$02,$04,$04
00019891 BF18 E7BF 1EBE 06BF        	dc.b nD5, $18, sHold, nD5, $1E, nCs5, $06, nD5
00019899 C4E7 C4C3 0CC1 18BE        	dc.b nG5, sHold, nG5, nFs5, $0C, nE5, $18, nCs5
000198A1 12BF 0CC6 18E7 C606        	dc.b $12, nD5, $0C, nA5, $18, sHold, nA5, $06
000198A9 C406 C3C4                  	dc.b nG5, $06, nFs5, nG5
000198AD                            	sModOff
000198AD EC                       M 	dc.b	$ec
000198AE                            	saTranspose	$0C
000198AE E40C                     M 	dc.b	$e4,$0c
000198B0                            	saVol		$FB
000198B0 EDFB                     M 	dc.b	$ed,$fb
000198B2                            	saVol		$F7
000198B2 EDF7                     M 	dc.b	$ed,$f7
000198B4                            	sVoice		$1E
000198B4 E81E                     M 	dc.b	$e8,$1e
000198B6 BC02                       	dc.b nB4, $02
000198B8                            	saVol		$0B
000198B8 ED0B                     M 	dc.b	$ed,$0b
000198BA BC01                       	dc.b nB4, $01
000198BC                            	saVol		$F5
000198BC EDF5                     M 	dc.b	$ed,$f5
000198BE C102                       	dc.b nE5, $02
000198C0                            	saVol		$0B
000198C0 ED0B                     M 	dc.b	$ed,$0b
000198C2 C101                       	dc.b nE5, $01
000198C4                            	saVol		$F5
000198C4 EDF5                     M 	dc.b	$ed,$f5
000198C6 C502                       	dc.b nAb5, $02
000198C8                            	saVol		$0B
000198C8 ED0B                     M 	dc.b	$ed,$0b
000198CA C501                       	dc.b nAb5, $01
000198CC                            	saVol		$F5
000198CC EDF5                     M 	dc.b	$ed,$f5
000198CE BC02                       	dc.b nB4, $02
000198D0                            	saVol		$0B
000198D0 ED0B                     M 	dc.b	$ed,$0b
000198D2 BC01                       	dc.b nB4, $01
000198D4                            	saVol		$F5
000198D4 EDF5                     M 	dc.b	$ed,$f5
000198D6 C102                       	dc.b nE5, $02
000198D8                            	saVol		$0B
000198D8 ED0B                     M 	dc.b	$ed,$0b
000198DA C101                       	dc.b nE5, $01
000198DC                            	saVol		$F5
000198DC EDF5                     M 	dc.b	$ed,$f5
000198DE C502                       	dc.b nAb5, $02
000198E0                            	saVol		$0B
000198E0 ED0B                     M 	dc.b	$ed,$0b
000198E2 C501                       	dc.b nAb5, $01
000198E4                            	saVol		$F5
000198E4 EDF5                     M 	dc.b	$ed,$f5
000198E6 BC02                       	dc.b nB4, $02
000198E8                            	saVol		$0B
000198E8 ED0B                     M 	dc.b	$ed,$0b
000198EA BC01                       	dc.b nB4, $01
000198EC                            	saVol		$F5
000198EC EDF5                     M 	dc.b	$ed,$f5
000198EE C102                       	dc.b nE5, $02
000198F0                            	saVol		$0B
000198F0 ED0B                     M 	dc.b	$ed,$0b
000198F2 C101                       	dc.b nE5, $01
000198F4                            	saVol		$F5
000198F4 EDF5                     M 	dc.b	$ed,$f5
000198F6 C502                       	dc.b nAb5, $02
000198F8                            	saVol		$0B
000198F8 ED0B                     M 	dc.b	$ed,$0b
000198FA C501                       	dc.b nAb5, $01
000198FC                            	saVol		$F5
000198FC EDF5                     M 	dc.b	$ed,$f5
000198FE BC02                       	dc.b nB4, $02
00019900                            	saVol		$0B
00019900 ED0B                     M 	dc.b	$ed,$0b
00019902 BC01                       	dc.b nB4, $01
00019904                            	saVol		$F5
00019904 EDF5                     M 	dc.b	$ed,$f5
00019906 C102                       	dc.b nE5, $02
00019908                            	saVol		$0B
00019908 ED0B                     M 	dc.b	$ed,$0b
0001990A C101                       	dc.b nE5, $01
0001990C                            	saVol		$F5
0001990C EDF5                     M 	dc.b	$ed,$f5
0001990E C502                       	dc.b nAb5, $02
00019910                            	saVol		$0B
00019910 ED0B                     M 	dc.b	$ed,$0b
00019912 C501                       	dc.b nAb5, $01
00019914                            	saVol		$F5
00019914 EDF5                     M 	dc.b	$ed,$f5
00019916 800C BB02                  	dc.b nRst, $0C, nBb4, $02
0001991A                            	saVol		$0B
0001991A ED0B                     M 	dc.b	$ed,$0b
0001991C BB01                       	dc.b nBb4, $01
0001991E                            	saVol		$F5
0001991E EDF5                     M 	dc.b	$ed,$f5
00019920 BE02                       	dc.b nCs5, $02
00019922                            	saVol		$0B
00019922 ED0B                     M 	dc.b	$ed,$0b
00019924 BE01                       	dc.b nCs5, $01
00019926                            	saVol		$F5
00019926 EDF5                     M 	dc.b	$ed,$f5
00019928 C302                       	dc.b nFs5, $02
0001992A                            	saVol		$0B
0001992A ED0B                     M 	dc.b	$ed,$0b
0001992C C301                       	dc.b nFs5, $01
0001992E                            	saVol		$F5
0001992E EDF5                     M 	dc.b	$ed,$f5
00019930 BB02                       	dc.b nBb4, $02
00019932                            	saVol		$0B
00019932 ED0B                     M 	dc.b	$ed,$0b
00019934 BB01                       	dc.b nBb4, $01
00019936                            	saVol		$F5
00019936 EDF5                     M 	dc.b	$ed,$f5
00019938 BE02                       	dc.b nCs5, $02
0001993A                            	saVol		$0B
0001993A ED0B                     M 	dc.b	$ed,$0b
0001993C BE01                       	dc.b nCs5, $01
0001993E                            	saVol		$F5
0001993E EDF5                     M 	dc.b	$ed,$f5
00019940 C302                       	dc.b nFs5, $02
00019942                            	saVol		$0B
00019942 ED0B                     M 	dc.b	$ed,$0b
00019944 C301                       	dc.b nFs5, $01
00019946                            	saVol		$F5
00019946 EDF5                     M 	dc.b	$ed,$f5
00019948 BB02                       	dc.b nBb4, $02
0001994A                            	saVol		$0B
0001994A ED0B                     M 	dc.b	$ed,$0b
0001994C BB01                       	dc.b nBb4, $01
0001994E                            	saVol		$F5
0001994E EDF5                     M 	dc.b	$ed,$f5
00019950 BE02                       	dc.b nCs5, $02
00019952                            	saVol		$0B
00019952 ED0B                     M 	dc.b	$ed,$0b
00019954 BE01                       	dc.b nCs5, $01
00019956                            	saVol		$F5
00019956 EDF5                     M 	dc.b	$ed,$f5
00019958 B702                       	dc.b nFs4, $02
0001995A                            	saVol		$0B
0001995A ED0B                     M 	dc.b	$ed,$0b
0001995C C301                       	dc.b nFs5, $01
0001995E                            	saVol		$F5
0001995E EDF5                     M 	dc.b	$ed,$f5
00019960 BB02                       	dc.b nBb4, $02
00019962                            	saVol		$0B
00019962 ED0B                     M 	dc.b	$ed,$0b
00019964 BB01                       	dc.b nBb4, $01
00019966                            	saVol		$F5
00019966 EDF5                     M 	dc.b	$ed,$f5
00019968 BE02                       	dc.b nCs5, $02
0001996A                            	saVol		$0B
0001996A ED0B                     M 	dc.b	$ed,$0b
0001996C BE01                       	dc.b nCs5, $01
0001996E                            	saVol		$F5
0001996E EDF5                     M 	dc.b	$ed,$f5
00019970 C302                       	dc.b nFs5, $02
00019972                            	saVol		$0B
00019972 ED0B                     M 	dc.b	$ed,$0b
00019974 C301                       	dc.b nFs5, $01
00019976                            	saVol		$F5
00019976 EDF5                     M 	dc.b	$ed,$f5
00019978 800C BA02                  	dc.b nRst, $0C, nA4, $02
0001997C                            	saVol		$0B
0001997C ED0B                     M 	dc.b	$ed,$0b
0001997E BA01                       	dc.b nA4, $01
00019980                            	saVol		$F5
00019980 EDF5                     M 	dc.b	$ed,$f5
00019982 BE02                       	dc.b nCs5, $02
00019984                            	saVol		$0B
00019984 ED0B                     M 	dc.b	$ed,$0b
00019986 BE01                       	dc.b nCs5, $01
00019988                            	saVol		$F5
00019988 EDF5                     M 	dc.b	$ed,$f5
0001998A C102                       	dc.b nE5, $02
0001998C                            	saVol		$0B
0001998C ED0B                     M 	dc.b	$ed,$0b
0001998E C101                       	dc.b nE5, $01
00019990                            	saVol		$F5
00019990 EDF5                     M 	dc.b	$ed,$f5
00019992 BA02                       	dc.b nA4, $02
00019994                            	saVol		$0B
00019994 ED0B                     M 	dc.b	$ed,$0b
00019996 BA01                       	dc.b nA4, $01
00019998                            	saVol		$F5
00019998 EDF5                     M 	dc.b	$ed,$f5
0001999A BE02                       	dc.b nCs5, $02
0001999C                            	saVol		$0B
0001999C ED0B                     M 	dc.b	$ed,$0b
0001999E BE01                       	dc.b nCs5, $01
000199A0                            	saVol		$F5
000199A0 EDF5                     M 	dc.b	$ed,$f5
000199A2 C102                       	dc.b nE5, $02
000199A4                            	saVol		$0B
000199A4 ED0B                     M 	dc.b	$ed,$0b
000199A6 C101                       	dc.b nE5, $01
000199A8                            	saVol		$F5
000199A8 EDF5                     M 	dc.b	$ed,$f5
000199AA BA02                       	dc.b nA4, $02
000199AC                            	saVol		$0B
000199AC ED0B                     M 	dc.b	$ed,$0b
000199AE BA01                       	dc.b nA4, $01
000199B0                            	saVol		$F5
000199B0 EDF5                     M 	dc.b	$ed,$f5
000199B2 BE02                       	dc.b nCs5, $02
000199B4                            	saVol		$0B
000199B4 ED0B                     M 	dc.b	$ed,$0b
000199B6 BE01                       	dc.b nCs5, $01
000199B8                            	saVol		$F5
000199B8 EDF5                     M 	dc.b	$ed,$f5
000199BA C102                       	dc.b nE5, $02
000199BC                            	saVol		$0B
000199BC ED0B                     M 	dc.b	$ed,$0b
000199BE C101                       	dc.b nE5, $01
000199C0                            	saVol		$F5
000199C0 EDF5                     M 	dc.b	$ed,$f5
000199C2 BA02                       	dc.b nA4, $02
000199C4                            	saVol		$0B
000199C4 ED0B                     M 	dc.b	$ed,$0b
000199C6 BA01                       	dc.b nA4, $01
000199C8                            	saVol		$F5
000199C8 EDF5                     M 	dc.b	$ed,$f5
000199CA BE02                       	dc.b nCs5, $02
000199CC                            	saVol		$0B
000199CC ED0B                     M 	dc.b	$ed,$0b
000199CE BE01                       	dc.b nCs5, $01
000199D0                            	saVol		$F5
000199D0 EDF5                     M 	dc.b	$ed,$f5
000199D2 C102                       	dc.b nE5, $02
000199D4                            	saVol		$0B
000199D4 ED0B                     M 	dc.b	$ed,$0b
000199D6 C101                       	dc.b nE5, $01
000199D8                            	saVol		$F5
000199D8 EDF5                     M 	dc.b	$ed,$f5
000199DA 800C                       	dc.b nRst, $0C
000199DC                            	saVol		$FE
000199DC EDFE                     M 	dc.b	$ed,$fe
000199DE BE06 BABE BC80 BE          	dc.b nCs5, $06, nA4, nCs5, nB4, nRst, nCs5
000199E5                            	sVoice		$20
000199E5 E820                     M 	dc.b	$e8,$20
000199E7 C0E7 BF01 E7BE E7BD        	dc.b nEb5, sHold, nD5, $01, sHold, nCs5, sHold, nC5
000199EF E7BC E7BB E7BA E7B9        	dc.b sHold, nB4, sHold, nBb4, sHold, nA4, sHold, nAb4
000199F7 E7B8 E7B7 E7B6 E7B5        	dc.b sHold, nG4, sHold, nFs4, sHold, nF4, sHold, nE4
000199FF E7B4 8012                  	dc.b sHold, nEb4, nRst, $12
00019A03                            	saVol		$02
00019A03 ED02                     M 	dc.b	$ed,$02
00019A05                            	saVol		$09
00019A05 ED09                     M 	dc.b	$ed,$09
00019A07                            	sPan		spCenter, $00
00019A07 E0C0                     M 	dc.b	$e0,spcenter|$00
00019A09                            	ssMod68k	$0C, $01, $A1, $CA
00019A09 F00C 01A1 CA             M 	dc.b	$f0,$0c,$01,$a1,$ca
00019A0E                            	saVol		$01
00019A0E ED01                     M 	dc.b	$ed,$01
00019A10                            	sVoice		$05
00019A10 E805                     M 	dc.b	$e8,$05
00019A12                            	saTranspose	$18
00019A12 E418                     M 	dc.b	$e4,$18
00019A14 8030 8018 9D02 8004        	dc.b nRst, $30, nRst, $18, nE2, $02, nRst, $04
00019A1C 9D02 8004 A906 9DA7        	dc.b nE2, $02, nRst, $04, nE3, $06, nE2, nD3
00019A24 9D02 8004 9D03 80A5        	dc.b nE2, $02, nRst, $04, nE2, $03, nRst, nC3
00019A2C 069D 0280 049D 06A4        	dc.b $06, nE2, $02, nRst, $04, nE2, $06, nB2
00019A34 9D03 80A1 06A2 A4A9        	dc.b nE2, $03, nRst, nAb2, $06, nA2, nB2, nE3
00019A3C                            	sModOff
00019A3C EC                       M 	dc.b	$ec
00019A3D                            	ssLFO		$00, $00|spCentre
00019A3D EF00 C0                  M 	dc.b	$ef,$00,$00|spcentre
00019A40                            	saVol		$FF
00019A40 EDFF                     M 	dc.b	$ed,$ff
00019A42                            	saTranspose	$E8
00019A42 E4E8                     M 	dc.b	$e4,$e8
00019A44                            	sJump		TowerPuppet_FM4
00019A44 F6                       M 	dc.b	$f6
00019A45 FD59                     M 	dc.w	towerpuppet_fm4-*-1
00019A47                            
00019A47                            TowerPuppet_FM5:
00019A47 800C                       	dc.b nRst, $0C
00019A49                            	sJump		TowerPuppet_FM1
00019A49 F6                       M 	dc.b	$f6
00019A4A F40B                     M 	dc.w	towerpuppet_fm1-*-1
00019A4C                            
00019A4C                            TowerPuppet_PSG1:
00019A4C 8030 8080                  	dc.b nRst, $30, nRst, nRst
00019A50                            	sVoice		vDyHe0A
00019A50 E810                     M 	dc.b	$e8,vdyhe0a
00019A52                            	saVol		$01
00019A52 ED01                     M 	dc.b	$ed,$01
00019A54 C904 8002 CA04 8002        	dc.b nC6, $04, nRst, $02, nCs6, $04, nRst, $02
00019A5C C904 8002 CB04 8002        	dc.b nC6, $04, nRst, $02, nD6, $04, nRst, $02
00019A64 C904 8002 CC04 8002        	dc.b nC6, $04, nRst, $02, nEb6, $04, nRst, $02
00019A6C C904 8002 CD04 8002        	dc.b nC6, $04, nRst, $02, nE6, $04, nRst, $02
00019A74                            	saVol		$FF
00019A74 EDFF                     M 	dc.b	$ed,$ff
00019A76 8030 8080 8080 18          	dc.b nRst, $30, nRst, nRst, nRst, nRst, $18
00019A7D                            	sVoice		v00
00019A7D E800                     M 	dc.b	$e8,v00
00019A7F                            	saVol		$01
00019A7F ED01                     M 	dc.b	$ed,$01
00019A81                            	saTranspose	$F4
00019A81 E4F4                     M 	dc.b	$e4,$f4
00019A83                            	ssMod68k	$13, $02, $02, $02
00019A83 F013 0202 02             M 	dc.b	$f0,$13,$02,$02,$02
00019A88                            
00019A88                            TowerPuppet_Loop17:
00019A88 C602 8010 C503 8080        	dc.b nA5, $02, nRst, $10, nAb5, $03, nRst, nRst
00019A90 12C7 1E80 06C2 0280        	dc.b $12, nBb5, $1E, nRst, $06, nF5, $02, nRst
00019A98 04C2 06C7 0280 04C6        	dc.b $04, nF5, $06, nBb5, $02, nRst, $04, nA5
00019AA0 0380 0FC5 0480 0280        	dc.b $03, nRst, $0F, nAb5, $04, nRst, $02, nRst
00019AA8 12C7 0F80 03C7 0980        	dc.b $12, nBb5, $0F, nRst, $03, nBb5, $09, nRst
00019AB0 03C2 0280 04C7 0C80        	dc.b $03, nF5, $02, nRst, $04, nBb5, $0C, nRst
00019AB8 06                         	dc.b $06
00019AB9                            	sLoop		$00, $02, TowerPuppet_Loop17
00019AB9 F700                     M 	dc.b	$f7,$00
00019ABB FFCC                     M 	dc.w	towerpuppet_loop17-*-1
00019ABD 02                       M 	dc.b	$02
00019ABE                            	saVol		$FF
00019ABE EDFF                     M 	dc.b	$ed,$ff
00019AC0                            	saTranspose	$0C
00019AC0 E40C                     M 	dc.b	$e4,$0c
00019AC2                            	sModOff
00019AC2 EC                       M 	dc.b	$ec
00019AC3                            	saVol		$01
00019AC3 ED01                     M 	dc.b	$ed,$01
00019AC5 C902 8001 BD02 8001        	dc.b nC6, $02, nRst, $01, nC5, $02, nRst, $01
00019ACD C202 8004 C902 8004        	dc.b nF5, $02, nRst, $04, nC6, $02, nRst, $04
00019AD5 C709 BD02 8001 C202        	dc.b nBb5, $09, nC5, $02, nRst, $01, nF5, $02
00019ADD 8004 C702 8004 C606        	dc.b nRst, $04, nBb5, $02, nRst, $04, nA5, $06
00019AE5 E7C6 03BD 0280 01C2        	dc.b sHold, nA5, $03, nC5, $02, nRst, $01, nF5
00019AED 0280 04C6 0280 04C4        	dc.b $02, nRst, $04, nA5, $02, nRst, $04, nG5
00019AF5 0CC2 0280 04C1 0280        	dc.b $0C, nF5, $02, nRst, $04, nE5, $02, nRst
00019AFD 04C2 06E7 C206 BD02        	dc.b $04, nF5, $06, sHold, nF5, $06, nC5, $02
00019B05 8004 C202 8004 C90C        	dc.b nRst, $04, nF5, $02, nRst, $04, nC6, $0C
00019B0D BD02 8004 BD02 8004        	dc.b nC5, $02, nRst, $04, nC5, $02, nRst, $04
00019B15 C206 E7C2 C102 8004        	dc.b nF5, $06, sHold, nF5, nE5, $02, nRst, $04
00019B1D C202 8004 BD06 E7BD        	dc.b nF5, $02, nRst, $04, nC5, $06, sHold, nC5
00019B25 0480 02BB 0480 0280        	dc.b $04, nRst, $02, nBb4, $04, nRst, $02, nRst
00019B2D 0CC9 0280 01BD 0280        	dc.b $0C, nC6, $02, nRst, $01, nC5, $02, nRst
00019B35 01C2 0280 04C9 0280        	dc.b $01, nF5, $02, nRst, $04, nC6, $02, nRst
00019B3D 04C7 09BD 0280 01C2        	dc.b $04, nBb5, $09, nC5, $02, nRst, $01, nF5
00019B45 0280 04C7 0280 04C6        	dc.b $02, nRst, $04, nBb5, $02, nRst, $04, nA5
00019B4D 06E7 C603 BD02 8001        	dc.b $06, sHold, nA5, $03, nC5, $02, nRst, $01
00019B55 C202 8004 C602 8004        	dc.b nF5, $02, nRst, $04, nA5, $02, nRst, $04
00019B5D C40C C202 8004 C102        	dc.b nG5, $0C, nF5, $02, nRst, $04, nE5, $02
00019B65 8004 C206 E7C2 C90C        	dc.b nRst, $04, nF5, $06, sHold, nF5, nC6, $0C
00019B6D CEC9 0280 04C9 0280        	dc.b nF6, nC6, $02, nRst, $04, nC6, $02, nRst
00019B75 04CC 06E7 CCCB 0280        	dc.b $04, nEb6, $06, sHold, nEb6, nD6, $02, nRst
00019B7D 04C7 0280 04C2 06E7        	dc.b $04, nBb5, $02, nRst, $04, nF5, $06, sHold
00019B85 C204 8002 C404 8002        	dc.b nF5, $04, nRst, $02, nG5, $04, nRst, $02
00019B8D 800C                       	dc.b nRst, $0C
00019B8F                            	saVol		$FF
00019B8F EDFF                     M 	dc.b	$ed,$ff
00019B91                            	saVol		$01
00019B91 ED01                     M 	dc.b	$ed,$01
00019B93                            	sVoice		v00
00019B93 E800                     M 	dc.b	$e8,v00
00019B95                            	ssMod68k	$14, $02, $02, $02
00019B95 F014 0202 02             M 	dc.b	$f0,$14,$02,$02,$02
00019B9A BF18 E7BF 1EBE 06BF        	dc.b nD5, $18, sHold, nD5, $1E, nCs5, $06, nD5
00019BA2 C4E7 C4C3 0CC1 1680        	dc.b nG5, sHold, nG5, nFs5, $0C, nE5, $16, nRst
00019BAA 02BE 12BF 0B80 01C6        	dc.b $02, nCs5, $12, nD5, $0B, nRst, $01, nA5
00019BB2 18E7 C605 8001 C406        	dc.b $18, sHold, nA5, $05, nRst, $01, nG5, $06
00019BBA C3C4                       	dc.b nFs5, nG5
00019BBC                            	saVol		$FF
00019BBC EDFF                     M 	dc.b	$ed,$ff
00019BBE                            	saVol		$02
00019BBE ED02                     M 	dc.b	$ed,$02
00019BC0 C511 8001 C312 C10D        	dc.b nAb5, $11, nRst, $01, nFs5, $12, nE5, $0D
00019BC8 8005 CD12 CC0C C809        	dc.b nRst, $05, nE6, $12, nEb6, $0C, nB5, $09
00019BD0 8003 CA06 C104 8002        	dc.b nRst, $03, nCs6, $06, nE5, $04, nRst, $02
00019BD8 C118 8006 C102 8001        	dc.b nE5, $18, nRst, $06, nE5, $02, nRst, $01
00019BE0 C302 8001 BE06 BA03        	dc.b nFs5, $02, nRst, $01, nCs5, $06, nA4, $03
00019BE8 80BE 06BC E7BC BEC0        	dc.b nRst, nCs5, $06, nB4, sHold, nB4, nCs5, nEb5
00019BF0 0C                         	dc.b $0C
00019BF1                            	saVol		$FE
00019BF1 EDFE                     M 	dc.b	$ed,$fe
00019BF3 C112 C603 CDE7 CD0C        	dc.b nE5, $12, nA5, $03, nE6, sHold, nE6, $0C
00019BFB C109 8003 C112 C603        	dc.b nE5, $09, nRst, $03, nE5, $12, nA5, $03
00019C03 CDE7 CD0C C109 8003        	dc.b nE6, sHold, nE6, $0C, nE5, $09, nRst, $03
00019C0B                            	ssMod68k	$04, $01, $02, $08
00019C0B F004 0102 08             M 	dc.b	$f0,$04,$01,$02,$08
00019C10 C1C6 CDC1 C6CD C1C6        	dc.b nE5, nA5, nE6, nE5, nA5, nE6, nE5, nA5
00019C18 CDC1 C6CD C1C6 CDC1        	dc.b nE6, nE5, nA5, nE6, nE5, nA5, nE6, nE5
00019C20 C6C8 CBC6 C5C6 CBC3        	dc.b nA5, nB5, nD6, nA5, nAb5, nA5, nD6, nFs5
00019C28 C5C8 C3C6 C5BF C1CB        	dc.b nAb5, nB5, nFs5, nA5, nAb5, nD5, nE5, nD6
00019C30                            	sModOff
00019C30 EC                       M 	dc.b	$ec
00019C31                            	sJump		TowerPuppet_PSG1
00019C31 F6                       M 	dc.b	$f6
00019C32 FE19                     M 	dc.w	towerpuppet_psg1-*-1
00019C34                            
00019C34                            TowerPuppet_PSG2:
00019C34 8030 8080 8080 8080        	dc.b nRst, $30, nRst, nRst, nRst, nRst, nRst, nRst
00019C3C 8080 18                    	dc.b nRst, nRst, $18
00019C3F                            	saVol		$02
00019C3F ED02                     M 	dc.b	$ed,$02
00019C41                            	ssMod68k	$14, $02, $02, $02
00019C41 F014 0202 02             M 	dc.b	$f0,$14,$02,$02,$02
00019C46                            
00019C46                            TowerPuppet_Loop18:
00019C46 C202 8004                  	dc.b nF5, $02, nRst, $04
00019C4A                            	saVol		$02
00019C4A ED02                     M 	dc.b	$ed,$02
00019C4C C202 8004                  	dc.b nF5, $02, nRst, $04
00019C50                            	saVol		$01
00019C50 ED01                     M 	dc.b	$ed,$01
00019C52 C202 8004                  	dc.b nF5, $02, nRst, $04
00019C56                            	saVol		$FD
00019C56 EDFD                     M 	dc.b	$ed,$fd
00019C58 C003 8004                  	dc.b nEb5, $03, nRst, $04
00019C5C                            	saVol		$02
00019C5C ED02                     M 	dc.b	$ed,$02
00019C5E C002 8004                  	dc.b nEb5, $02, nRst, $04
00019C62                            	saVol		$01
00019C62 ED01                     M 	dc.b	$ed,$01
00019C64 C002 8009                  	dc.b nEb5, $02, nRst, $09
00019C68                            	saVol		$FD
00019C68 EDFD                     M 	dc.b	$ed,$fd
00019C6A BF1E 8006 BF02 8004        	dc.b nD5, $1E, nRst, $06, nD5, $02, nRst, $04
00019C72 BF06 C103 80C2 8004        	dc.b nD5, $06, nE5, $03, nRst, nF5, nRst, $04
00019C7A                            	saVol		$02
00019C7A ED02                     M 	dc.b	$ed,$02
00019C7C C202 8004                  	dc.b nF5, $02, nRst, $04
00019C80                            	saVol		$01
00019C80 ED01                     M 	dc.b	$ed,$01
00019C82 C202 8003                  	dc.b nF5, $02, nRst, $03
00019C86                            	saVol		$FD
00019C86 EDFD                     M 	dc.b	$ed,$fd
00019C88 C004 8004                  	dc.b nEb5, $04, nRst, $04
00019C8C                            	saVol		$02
00019C8C ED02                     M 	dc.b	$ed,$02
00019C8E C002 8004                  	dc.b nEb5, $02, nRst, $04
00019C92                            	saVol		$01
00019C92 ED01                     M 	dc.b	$ed,$01
00019C94 C002 8008                  	dc.b nEb5, $02, nRst, $08
00019C98                            	saVol		$FD
00019C98 EDFD                     M 	dc.b	$ed,$fd
00019C9A C40F 8003 C209 8003        	dc.b nG5, $0F, nRst, $03, nF5, $09, nRst, $03
00019CA2 BF02 8004 C20C 8006        	dc.b nD5, $02, nRst, $04, nF5, $0C, nRst, $06
00019CAA                            	sLoop		$00, $02, TowerPuppet_Loop18
00019CAA F700                     M 	dc.b	$f7,$00
00019CAC FF99                     M 	dc.w	towerpuppet_loop18-*-1
00019CAE 02                       M 	dc.b	$02
00019CAF                            	sModOff
00019CAF EC                       M 	dc.b	$ec
00019CB0                            	saVol		$FE
00019CB0 EDFE                     M 	dc.b	$ed,$fe
00019CB2                            	saVol		$02
00019CB2 ED02                     M 	dc.b	$ed,$02
00019CB4                            	saTranspose	$F4
00019CB4 E4F4                     M 	dc.b	$e4,$f4
00019CB6                            
00019CB6                            TowerPuppet_Loop19:
00019CB6 C103 C2C9 C1C2 C9C1        	dc.b nE5, $03, nF5, nC6, nE5, nF5, nC6, nE5
00019CBE C2C9 C1C2 C980 0C          	dc.b nF5, nC6, nE5, nF5, nC6, nRst, $0C
00019CC5                            	sLoop		$00, $08, TowerPuppet_Loop19
00019CC5 F700                     M 	dc.b	$f7,$00
00019CC7 FFEE                     M 	dc.w	towerpuppet_loop19-*-1
00019CC9 08                       M 	dc.b	$08
00019CCA                            	saVol		$FE
00019CCA EDFE                     M 	dc.b	$ed,$fe
00019CCC                            	saTranspose	$0C
00019CCC E40C                     M 	dc.b	$e4,$0c
00019CCE                            	ssMod68k	$16, $02, $02, $02
00019CCE F016 0202 02             M 	dc.b	$f0,$16,$02,$02,$02
00019CD3                            	saVol		$02
00019CD3 ED02                     M 	dc.b	$ed,$02
00019CD5 C604 8002 C804 8002        	dc.b nA5, $04, nRst, $02, nB5, $04, nRst, $02
00019CDD CA04 8002 CD0C CB04        	dc.b nCs6, $04, nRst, $02, nE6, $0C, nD6, $04
00019CE5 8002 CA04 8002 CA0C        	dc.b nRst, $02, nCs6, $04, nRst, $02, nCs6, $0C
00019CED 8006 CB03 80C4 06E7        	dc.b nRst, $06, nD6, $03, nRst, nG5, $06, sHold
00019CF5 C412 8006 C304 8002        	dc.b nG5, $12, nRst, $06, nFs5, $04, nRst, $02
00019CFD C404 8002 C604 8002        	dc.b nG5, $04, nRst, $02, nA5, $04, nRst, $02
00019D05 CA0C C804 8002 C304        	dc.b nCs6, $0C, nB5, $04, nRst, $02, nFs5, $04
00019D0D 8002 C609 8003 C404        	dc.b nRst, $02, nA5, $09, nRst, $03, nG5, $04
00019D15 8002 C304 8002 C406        	dc.b nRst, $02, nFs5, $04, nRst, $02, nG5, $06
00019D1D E7C4 1280 06               	dc.b sHold, nG5, $12, nRst, $06
00019D22                            	saVol		$FE
00019D22 EDFE                     M 	dc.b	$ed,$fe
00019D24                            	saTranspose	$F4
00019D24 E4F4                     M 	dc.b	$e4,$f4
00019D26                            	saVol		$01
00019D26 ED01                     M 	dc.b	$ed,$01
00019D28 BC03 C1C5 BCC1 C5BC        	dc.b nB4, $03, nE5, nAb5, nB4, nE5, nAb5, nB4
00019D30 C1C5 BCC1 C580 0CBB        	dc.b nE5, nAb5, nB4, nE5, nAb5, nRst, $0C, nBb4
00019D38 03BE C3BB BEC3 BBBE        	dc.b $03, nCs5, nFs5, nBb4, nCs5, nFs5, nBb4, nCs5
00019D40 C3BB BEC3 800C BA03        	dc.b nFs5, nBb4, nCs5, nFs5, nRst, $0C, nA4, $03
00019D48 BEC1 BABE C1BA BEC1        	dc.b nCs5, nE5, nA4, nCs5, nE5, nA4, nCs5, nE5
00019D50 BABE C180 0CBE 06BA        	dc.b nA4, nCs5, nE5, nRst, $0C, nCs5, $06, nA4
00019D58 BEBC 80BE C080             	dc.b nCs5, nB4, nRst, nCs5, nEb5, nRst
00019D5E                            	saVol		$FF
00019D5E EDFF                     M 	dc.b	$ed,$ff
00019D60                            	saTranspose	$0C
00019D60 E40C                     M 	dc.b	$e4,$0c
00019D62                            	saVol		$01
00019D62 ED01                     M 	dc.b	$ed,$01
00019D64                            	ssMod68k	$14, $02, $02, $02
00019D64 F014 0202 02             M 	dc.b	$f0,$14,$02,$02,$02
00019D69 C824 C10C C812 C6CB        	dc.b nB5, $24, nE5, $0C, nB5, $12, nA5, nD6
00019D71 0CCD 60                    	dc.b $0C, nE6, $60
00019D74                            	saVol		$FF
00019D74 EDFF                     M 	dc.b	$ed,$ff
00019D76                            	sJump		TowerPuppet_PSG2
00019D76 F6                       M 	dc.b	$f6
00019D77 FEBC                     M 	dc.w	towerpuppet_psg2-*-1
00019D79                            
00019D79                            TowerPuppet_PSG3:
00019D79                            	sNoisePSG	$E7
00019D79 F3E7                     M 	dc.b	$f3,$e7
00019D7B                            
00019D7B                            TowerPuppet_Loop20:
00019D7B                            	sNoteTimeOut	$01
00019D7B FD01                     M 	dc.b	$fd,$01
00019D7D                            	sVoice		vDyHe03
00019D7D E80E                     M 	dc.b	$e8,vdyhe03
00019D7F C603 C6                    	dc.b nA5, $03, nA5
00019D82                            	sNoteTimeOut	$03
00019D82 FD03                     M 	dc.b	$fd,$03
00019D84                            	sVoice		vDyHe05
00019D84 E80F                     M 	dc.b	$e8,vdyhe05
00019D86 C6                         	dc.b nA5
00019D87                            	sNoteTimeOut	$01
00019D87 FD01                     M 	dc.b	$fd,$01
00019D89                            	sVoice		vDyHe03
00019D89 E80E                     M 	dc.b	$e8,vdyhe03
00019D8B C6C6 C6                    	dc.b nA5, nA5, nA5
00019D8E                            	sNoteTimeOut	$03
00019D8E FD03                     M 	dc.b	$fd,$03
00019D90                            	sVoice		vDyHe05
00019D90 E80F                     M 	dc.b	$e8,vdyhe05
00019D92 C6                         	dc.b nA5
00019D93                            	sNoteTimeOut	$01
00019D93 FD01                     M 	dc.b	$fd,$01
00019D95                            	sVoice		vDyHe03
00019D95 E80E                     M 	dc.b	$e8,vdyhe03
00019D97 C6C6 C6                    	dc.b nA5, nA5, nA5
00019D9A                            	sNoteTimeOut	$03
00019D9A FD03                     M 	dc.b	$fd,$03
00019D9C                            	sVoice		vDyHe05
00019D9C E80F                     M 	dc.b	$e8,vdyhe05
00019D9E C6                         	dc.b nA5
00019D9F                            	sNoteTimeOut	$01
00019D9F FD01                     M 	dc.b	$fd,$01
00019DA1                            	sVoice		vDyHe03
00019DA1 E80E                     M 	dc.b	$e8,vdyhe03
00019DA3 C6C6                       	dc.b nA5, nA5
00019DA5                            	sNoteTimeOut	$03
00019DA5 FD03                     M 	dc.b	$fd,$03
00019DA7                            	sVoice		vDyHe05
00019DA7 E80F                     M 	dc.b	$e8,vdyhe05
00019DA9 C6                         	dc.b nA5
00019DAA                            	sNoteTimeOut	$04
00019DAA FD04                     M 	dc.b	$fd,$04
00019DAC                            	sVoice		vDyHe05
00019DAC E80F                     M 	dc.b	$e8,vdyhe05
00019DAE C6                         	dc.b nA5
00019DAF                            	sNoteTimeOut	$01
00019DAF FD01                     M 	dc.b	$fd,$01
00019DB1                            	sVoice		vDyHe03
00019DB1 E80E                     M 	dc.b	$e8,vdyhe03
00019DB3 C6                         	dc.b nA5
00019DB4                            	sNoteTimeOut	$05
00019DB4 FD05                     M 	dc.b	$fd,$05
00019DB6                            	sVoice		vDyHe03
00019DB6 E80E                     M 	dc.b	$e8,vdyhe03
00019DB8 C60C C6C6 C6               	dc.b nA5, $0C, nA5, nA5, nA5
00019DBD                            	sLoop		$00, $12, TowerPuppet_Loop20
00019DBD F700                     M 	dc.b	$f7,$00
00019DBF FFBB                     M 	dc.w	towerpuppet_loop20-*-1
00019DC1 12                       M 	dc.b	$12
00019DC2                            	sNoteTimeOut	$01
00019DC2 FD01                     M 	dc.b	$fd,$01
00019DC4                            	sVoice		vDyHe03
00019DC4 E80E                     M 	dc.b	$e8,vdyhe03
00019DC6 C603 C6                    	dc.b nA5, $03, nA5
00019DC9                            	sNoteTimeOut	$03
00019DC9 FD03                     M 	dc.b	$fd,$03
00019DCB                            	sVoice		vDyHe05
00019DCB E80F                     M 	dc.b	$e8,vdyhe05
00019DCD C6                         	dc.b nA5
00019DCE                            	sNoteTimeOut	$01
00019DCE FD01                     M 	dc.b	$fd,$01
00019DD0                            	sVoice		vDyHe03
00019DD0 E80E                     M 	dc.b	$e8,vdyhe03
00019DD2 C6C6 C6                    	dc.b nA5, nA5, nA5
00019DD5                            	sNoteTimeOut	$03
00019DD5 FD03                     M 	dc.b	$fd,$03
00019DD7                            	sVoice		vDyHe05
00019DD7 E80F                     M 	dc.b	$e8,vdyhe05
00019DD9 C6                         	dc.b nA5
00019DDA                            	sNoteTimeOut	$01
00019DDA FD01                     M 	dc.b	$fd,$01
00019DDC                            	sVoice		vDyHe03
00019DDC E80E                     M 	dc.b	$e8,vdyhe03
00019DDE C6                         	dc.b nA5
00019DDF                            	sJump		TowerPuppet_PSG3
00019DDF F6                       M 	dc.b	$f6
00019DE0 FF98                     M 	dc.w	towerpuppet_psg3-*-1
00019DE2                            
00019DE2                            TowerPuppet_DAC1:
00019DE2                            	sPan		spNone		; Allow DAC2 to control panning
00019DE2 E000                     M 	dc.b	$e0,spnone
00019DE4                            	sStop
00019DE4 F5                       M 	dc.b	$f5
00019DE5                            
00019DE5 =00000081                  d81 =	dKick
00019DE5 =00000083                  d82 =	dSnare
00019DE5 =00000083                  d84 =	dSnare
00019DE5 =00000083                  d87 =	dSnare
00019DE5 =00000085                  d88 =	dHiTom
00019DE5 =00000086                  d89 =	dTom
00019DE5 =00000082                  d8A =	dLowKick
00019DE5 =00000084                  d8C =	dClap
00019DE5 =00000084                  dA2 =	dClap
00019DE5 =00000084                  dA3 =	dClap
00019DE5                            
00019DE5                            TowerPuppet_DAC2:
00019DE5 840C 8606 8106 810C        	dc.b d8C, $0C, d89, $06, d81, $06, d81, $0C
00019DED 86                         	dc.b d89
00019DEE                            	sPan		spLeft, $00
00019DEE E080                     M 	dc.b	$e0,spleft|$00
00019DF0 8303 83                    	dc.b d87, $03, d87
00019DF3                            	sPan		spCenter, $00
00019DF3 E0C0                     M 	dc.b	$e0,spcenter|$00
00019DF5 81                         	dc.b d81
00019DF6                            	sPan		spLeft, $00
00019DF6 E080                     M 	dc.b	$e0,spleft|$00
00019DF8 8303                       	dc.b d87, $03
00019DFA                            	sPan		spCenter, $00
00019DFA E0C0                     M 	dc.b	$e0,spcenter|$00
00019DFC 8606                       	dc.b d89, $06
00019DFE                            	sPan		spLeft, $00
00019DFE E080                     M 	dc.b	$e0,spleft|$00
00019E00 8303 83                    	dc.b d87, $03, d87
00019E03                            	sPan		spCenter, $00
00019E03 E0C0                     M 	dc.b	$e0,spcenter|$00
00019E05 81                         	dc.b d81
00019E06                            	sPan		spLeft, $00
00019E06 E080                     M 	dc.b	$e0,spleft|$00
00019E08 8383 06                    	dc.b d87, d84, $06
00019E0B                            	sPan		spCenter, $00
00019E0B E0C0                     M 	dc.b	$e0,spcenter|$00
00019E0D 8681 0383 810C 8606        	dc.b d89, d81, $03, d84, d81, $0C, d89, $06
00019E15 8181 0C86 0681             	dc.b d81, d81, $0C, d89, $06, d81
00019E1B                            	sPan		spLeft, $00
00019E1B E080                     M 	dc.b	$e0,spleft|$00
00019E1D 8303                       	dc.b d87, $03
00019E1F                            	sPan		spCenter, $00
00019E1F E0C0                     M 	dc.b	$e0,spcenter|$00
00019E21 8181                       	dc.b d81, d81
00019E23                            	sPan		spLeft, $00
00019E23 E080                     M 	dc.b	$e0,spleft|$00
00019E25 8303                       	dc.b d87, $03
00019E27                            	sPan		spCenter, $00
00019E27 E0C0                     M 	dc.b	$e0,spcenter|$00
00019E29 8606 8103                  	dc.b d89, $06, d81, $03
00019E2D                            	sPan		spLeft, $00
00019E2D E080                     M 	dc.b	$e0,spleft|$00
00019E2F 83                         	dc.b d87
00019E30                            	sPan		spCenter, $00
00019E30 E0C0                     M 	dc.b	$e0,spcenter|$00
00019E32 8103                       	dc.b d81, $03
00019E34                            	sPan		spLeft, $00
00019E34 E080                     M 	dc.b	$e0,spleft|$00
00019E36 8383 06                    	dc.b d87, d84, $06
00019E39                            	sPan		spCenter, $00
00019E39 E0C0                     M 	dc.b	$e0,spcenter|$00
00019E3B 8606 8103                  	dc.b d89, $06, d81, $03
00019E3F                            	sPan		spLeft, $00
00019E3F E080                     M 	dc.b	$e0,spleft|$00
00019E41 83                         	dc.b d87
00019E42                            	sPan		spCenter, $00
00019E42 E0C0                     M 	dc.b	$e0,spcenter|$00
00019E44                            	sPan		spRight, $00
00019E44 E040                     M 	dc.b	$e0,spright|$00
00019E46 840C                       	dc.b d8C, $0C
00019E48                            	sPan		spCenter, $00
00019E48 E0C0                     M 	dc.b	$e0,spcenter|$00
00019E4A 8606 8181 0C86 0C          	dc.b d89, $06, d81, d81, $0C, d89, $0C
00019E51                            	sPan		spLeft, $00
00019E51 E080                     M 	dc.b	$e0,spleft|$00
00019E53 8303 83                    	dc.b d87, $03, d87
00019E56                            	sPan		spCenter, $00
00019E56 E0C0                     M 	dc.b	$e0,spcenter|$00
00019E58 81                         	dc.b d81
00019E59                            	sPan		spLeft, $00
00019E59 E080                     M 	dc.b	$e0,spleft|$00
00019E5B 8303                       	dc.b d87, $03
00019E5D                            	sPan		spCenter, $00
00019E5D E0C0                     M 	dc.b	$e0,spcenter|$00
00019E5F 8606                       	dc.b d89, $06
00019E61                            	sPan		spLeft, $00
00019E61 E080                     M 	dc.b	$e0,spleft|$00
00019E63 8303 83                    	dc.b d87, $03, d87
00019E66                            	sPan		spCenter, $00
00019E66 E0C0                     M 	dc.b	$e0,spcenter|$00
00019E68 81                         	dc.b d81
00019E69                            	sPan		spLeft, $00
00019E69 E080                     M 	dc.b	$e0,spleft|$00
00019E6B 8383 06                    	dc.b d87, d84, $06
00019E6E                            	sPan		spCenter, $00
00019E6E E0C0                     M 	dc.b	$e0,spcenter|$00
00019E70 8606 8103 8381 0C86        	dc.b d89, $06, d81, $03, d84, d81, $0C, d89
00019E78 0681 0681 0C86 0681        	dc.b $06, d81, $06, d81, $0C, d89, $06, d81
00019E80                            
00019E80                            	ssVol		$00
00019E80 EE00                     M 	dc.b	$ee,$00
00019E82                            	sModePitchDAC
00019E82 F2                       M 	dc.b	$f2
00019E83                            	sVoice		dOrchHit
00019E83 E889                     M 	dc.b	$e8,dorchhit
00019E85 B709 B6B5 B4B3 06B2        	dc.b nFs4, $09, nF4, nE4, nEb4, nD4, $06, nCs4
00019E8D                            	sModeSampDAC
00019E8D F1                       M 	dc.b	$f1
00019E8E                            	ssVol		$08
00019E8E EE08                     M 	dc.b	$ee,$08
00019E90                            
00019E90 8503 8584 0C81 0281        	dc.b d88, $03, d88, d8C, $0C, d81, $02, d81
00019E98 8181 0C83 0681 810C        	dc.b d81, d81, $0C, d82, $06, d81, d81, $0C
00019EA0 8381 03                    	dc.b d82, d81, $03
00019EA3                            	sPan		spLeft, $00
00019EA3 E080                     M 	dc.b	$e0,spleft|$00
00019EA5 83                         	dc.b d87
00019EA6                            	sPan		spCenter, $00
00019EA6 E0C0                     M 	dc.b	$e0,spcenter|$00
00019EA8 8081 8306 8103             	dc.b nRst, d81, d82, $06, d81, $03
00019EAE                            	sPan		spLeft, $00
00019EAE E080                     M 	dc.b	$e0,spleft|$00
00019EB0 8380 8383 80               	dc.b d87, nRst, d87, d87, nRst
00019EB5                            	sPan		spCenter, $00
00019EB5 E0C0                     M 	dc.b	$e0,spcenter|$00
00019EB7 8306 8103 8381 0C83        	dc.b d82, $06, d81, $03, d84, d81, $0C, d82
00019EBF 0681 8180 8381             	dc.b $06, d81, d81, nRst, d82, d81
00019EC5                            	sPan		spLeft, $00
00019EC5 E080                     M 	dc.b	$e0,spleft|$00
00019EC7 8303                       	dc.b d87, $03
00019EC9                            	sPan		spCenter, $00
00019EC9 E0C0                     M 	dc.b	$e0,spcenter|$00
00019ECB 8106 8103 8306             	dc.b d81, $06, d81, $03, d82, $06
00019ED1                            	sPan		spLeft, $00
00019ED1 E080                     M 	dc.b	$e0,spleft|$00
00019ED3 8303 83                    	dc.b d87, $03, d87
00019ED6                            	sPan		spCenter, $00
00019ED6 E0C0                     M 	dc.b	$e0,spcenter|$00
00019ED8 81                         	dc.b d81
00019ED9                            	sPan		spLeft, $00
00019ED9 E080                     M 	dc.b	$e0,spleft|$00
00019EDB 8383 06                    	dc.b d87, d87, $06
00019EDE                            	sPan		spCenter, $00
00019EDE E0C0                     M 	dc.b	$e0,spcenter|$00
00019EE0 8303 83                    	dc.b d82, $03, d82
00019EE3                            	sPan		spLeft, $00
00019EE3 E080                     M 	dc.b	$e0,spleft|$00
00019EE5 8406                       	dc.b dA2, $06
00019EE7                            	sPan		spCenter, $00
00019EE7 E0C0                     M 	dc.b	$e0,spcenter|$00
00019EE9 840C 8306 8181 0386        	dc.b dA3, $0C, d82, $06, d81, d81, $03, d89
00019EF1 8206 8381                  	dc.b d8A, $06, d82, d81
00019EF5                            	sPan		spLeft, $00
00019EF5 E080                     M 	dc.b	$e0,spleft|$00
00019EF7 8303                       	dc.b d87, $03
00019EF9                            	sPan		spCenter, $00
00019EF9 E0C0                     M 	dc.b	$e0,spcenter|$00
00019EFB 81                         	dc.b d81
00019EFC                            	sPan		spLeft, $00
00019EFC E080                     M 	dc.b	$e0,spleft|$00
00019EFE 83                         	dc.b d87
00019EFF                            	sPan		spCenter, $00
00019EFF E0C0                     M 	dc.b	$e0,spcenter|$00
00019F01 8183 0681 03               	dc.b d81, d82, $06, d81, $03
00019F06                            	sPan		spLeft, $00
00019F06 E080                     M 	dc.b	$e0,spleft|$00
00019F08 83                         	dc.b d87
00019F09                            	sPan		spCenter, $00
00019F09 E0C0                     M 	dc.b	$e0,spcenter|$00
00019F0B 81                         	dc.b d81
00019F0C                            	sPan		spLeft, $00
00019F0C E080                     M 	dc.b	$e0,spleft|$00
00019F0E 8383 06                    	dc.b d87, d87, $06
00019F11                            	sPan		spCenter, $00
00019F11 E0C0                     M 	dc.b	$e0,spcenter|$00
00019F13 8303                       	dc.b d82, $03
00019F15                            	sPan		spLeft, $00
00019F15 E080                     M 	dc.b	$e0,spleft|$00
00019F17 83                         	dc.b d87
00019F18                            	sPan		spCenter, $00
00019F18 E0C0                     M 	dc.b	$e0,spcenter|$00
00019F1A 81                         	dc.b d81
00019F1B                            	sPan		spLeft, $00
00019F1B E080                     M 	dc.b	$e0,spleft|$00
00019F1D 8403                       	dc.b dA2, $03
00019F1F                            	sPan		spCenter, $00
00019F1F E0C0                     M 	dc.b	$e0,spcenter|$00
00019F21 840C 8306 8181 0C83        	dc.b dA3, $0C, d82, $06, d81, d81, $0C, d82
00019F29 0681                       	dc.b $06, d81
00019F2B                            	sPan		spLeft, $00
00019F2B E080                     M 	dc.b	$e0,spleft|$00
00019F2D 8303                       	dc.b d87, $03
00019F2F                            	sPan		spCenter, $00
00019F2F E0C0                     M 	dc.b	$e0,spcenter|$00
00019F31 8682                       	dc.b d89, d8A
00019F33                            	sPan		spLeft, $00
00019F33 E080                     M 	dc.b	$e0,spleft|$00
00019F35 83                         	dc.b d87
00019F36                            	sPan		spCenter, $00
00019F36 E0C0                     M 	dc.b	$e0,spcenter|$00
00019F38 8306 8103                  	dc.b d82, $06, d81, $03
00019F3C                            	sPan		spLeft, $00
00019F3C E080                     M 	dc.b	$e0,spleft|$00
00019F3E 83                         	dc.b d87
00019F3F                            	sPan		spCenter, $00
00019F3F E0C0                     M 	dc.b	$e0,spcenter|$00
00019F41 81                         	dc.b d81
00019F42                            	sPan		spLeft, $00
00019F42 E080                     M 	dc.b	$e0,spleft|$00
00019F44 8383 06                    	dc.b d87, d87, $06
00019F47                            	sPan		spCenter, $00
00019F47 E0C0                     M 	dc.b	$e0,spcenter|$00
00019F49 8303 8586 83               	dc.b d82, $03, d88, d89, d82
00019F4E                            	sPan		spRight, $00
00019F4E E040                     M 	dc.b	$e0,spright|$00
00019F50 840C                       	dc.b d8C, $0C
00019F52                            	sPan		spCenter, $00
00019F52 E0C0                     M 	dc.b	$e0,spcenter|$00
00019F54 8306 8181 0C83 8103        	dc.b d82, $06, d81, d81, $0C, d82, d81, $03
00019F5C                            	sPan		spLeft, $00
00019F5C E080                     M 	dc.b	$e0,spleft|$00
00019F5E 8306                       	dc.b d87, $06
00019F60                            	sPan		spCenter, $00
00019F60 E0C0                     M 	dc.b	$e0,spcenter|$00
00019F62 8103 8306 8103             	dc.b d81, $03, d82, $06, d81, $03
00019F68                            	sPan		spLeft, $00
00019F68 E080                     M 	dc.b	$e0,spleft|$00
00019F6A 8380 8383 06               	dc.b d87, nRst, d87, d87, $06
00019F6F                            	sPan		spCenter, $00
00019F6F E0C0                     M 	dc.b	$e0,spcenter|$00
00019F71 8303                       	dc.b d82, $03
00019F73                            	sPan		spLeft, $00
00019F73 E080                     M 	dc.b	$e0,spleft|$00
00019F75 83                         	dc.b d87
00019F76                            	sPan		spCenter, $00
00019F76 E0C0                     M 	dc.b	$e0,spcenter|$00
00019F78 8183 810C 8306 8181        	dc.b d81, d84, d81, $0C, d82, $06, d81, d81
00019F80 0C83 0681 0981 0381        	dc.b $0C, d82, $06, d81, $09, d81, $03, d81
00019F88 0683 03                    	dc.b $06, d82, $03
00019F8B                            	sPan		spLeft, $00
00019F8B E080                     M 	dc.b	$e0,spleft|$00
00019F8D 83                         	dc.b d87
00019F8E                            	sPan		spCenter, $00
00019F8E E0C0                     M 	dc.b	$e0,spcenter|$00
00019F90 81                         	dc.b d81
00019F91                            	sPan		spLeft, $00
00019F91 E080                     M 	dc.b	$e0,spleft|$00
00019F93 83                         	dc.b d87
00019F94                            	sPan		spCenter, $00
00019F94 E0C0                     M 	dc.b	$e0,spcenter|$00
00019F96 8180                       	dc.b d81, nRst
00019F98                            	sPan		spLeft, $00
00019F98 E080                     M 	dc.b	$e0,spleft|$00
00019F9A 8383                       	dc.b d87, d87
00019F9C                            	sPan		spCenter, $00
00019F9C E0C0                     M 	dc.b	$e0,spcenter|$00
00019F9E 83                         	dc.b d82
00019F9F                            	sPan		spLeft, $00
00019F9F E080                     M 	dc.b	$e0,spleft|$00
00019FA1 8383                       	dc.b d87, d87
00019FA3                            	sPan		spCenter, $00
00019FA3 E0C0                     M 	dc.b	$e0,spcenter|$00
00019FA5 83                         	dc.b d82
00019FA6                            	sPan		spLeft, $00
00019FA6 E080                     M 	dc.b	$e0,spleft|$00
00019FA8 840C                       	dc.b d8C, $0C
00019FAA                            	sPan		spCenter, $00
00019FAA E0C0                     M 	dc.b	$e0,spcenter|$00
00019FAC 8306 8181 0C83 0681        	dc.b d82, $06, d81, d81, $0C, d82, $06, d81
00019FB4                            	sPan		spLeft, $00
00019FB4 E080                     M 	dc.b	$e0,spleft|$00
00019FB6 8303                       	dc.b d87, $03
00019FB8                            	sPan		spCenter, $00
00019FB8 E0C0                     M 	dc.b	$e0,spcenter|$00
00019FBA 81                         	dc.b d81
00019FBB                            	sPan		spLeft, $00
00019FBB E080                     M 	dc.b	$e0,spleft|$00
00019FBD 83                         	dc.b d87
00019FBE                            	sPan		spCenter, $00
00019FBE E0C0                     M 	dc.b	$e0,spcenter|$00
00019FC0 8183 0681 03               	dc.b d81, d82, $06, d81, $03
00019FC5                            	sPan		spLeft, $00
00019FC5 E080                     M 	dc.b	$e0,spleft|$00
00019FC7 83                         	dc.b d87
00019FC8                            	sPan		spCenter, $00
00019FC8 E0C0                     M 	dc.b	$e0,spcenter|$00
00019FCA 8186 8206 8303             	dc.b d81, d89, d8A, $06, d82, $03
00019FD0                            	sPan		spLeft, $00
00019FD0 E080                     M 	dc.b	$e0,spleft|$00
00019FD2 83                         	dc.b d87
00019FD3                            	sPan		spCenter, $00
00019FD3 E0C0                     M 	dc.b	$e0,spcenter|$00
00019FD5 8183 810C 8306 8181        	dc.b d81, d82, d81, $0C, d82, $06, d81, d81
00019FDD 0C83 0681                  	dc.b $0C, d82, $06, d81
00019FE1                            	sPan		spLeft, $00
00019FE1 E080                     M 	dc.b	$e0,spleft|$00
00019FE3 8303                       	dc.b d87, $03
00019FE5                            	sPan		spCenter, $00
00019FE5 E0C0                     M 	dc.b	$e0,spcenter|$00
00019FE7 8181                       	dc.b d81, d81
00019FE9                            	sPan		spLeft, $00
00019FE9 E080                     M 	dc.b	$e0,spleft|$00
00019FEB 83                         	dc.b d87
00019FEC                            	sPan		spCenter, $00
00019FEC E0C0                     M 	dc.b	$e0,spcenter|$00
00019FEE 8306 8103                  	dc.b d82, $06, d81, $03
00019FF2                            	sPan		spLeft, $00
00019FF2 E080                     M 	dc.b	$e0,spleft|$00
00019FF4 83                         	dc.b d87
00019FF5                            	sPan		spCenter, $00
00019FF5 E0C0                     M 	dc.b	$e0,spcenter|$00
00019FF7 8185 8385                  	dc.b d81, d88, d82, d88
00019FFB                            	sPan		spLeft, $00
00019FFB E080                     M 	dc.b	$e0,spleft|$00
00019FFD 83                         	dc.b d87
00019FFE                            	sPan		spCenter, $00
00019FFE E0C0                     M 	dc.b	$e0,spcenter|$00
0001A000 8682 83                    	dc.b d89, d8A, d84
0001A003                            	sPan		spLeft, $00
0001A003 E080                     M 	dc.b	$e0,spleft|$00
0001A005 840C                       	dc.b d8C, $0C
0001A007                            	sPan		spCenter, $00
0001A007 E0C0                     M 	dc.b	$e0,spcenter|$00
0001A009 8306 8181 0C83 8103        	dc.b d82, $06, d81, d81, $0C, d82, d81, $03
0001A011                            	sPan		spLeft, $00
0001A011 E080                     M 	dc.b	$e0,spleft|$00
0001A013 8306                       	dc.b d87, $06
0001A015                            	sPan		spCenter, $00
0001A015 E0C0                     M 	dc.b	$e0,spcenter|$00
0001A017 8103 8306 8103             	dc.b d81, $03, d82, $06, d81, $03
0001A01D                            	sPan		spLeft, $00
0001A01D E080                     M 	dc.b	$e0,spleft|$00
0001A01F 83                         	dc.b d87
0001A020                            	sPan		spCenter, $00
0001A020 E0C0                     M 	dc.b	$e0,spcenter|$00
0001A022 8086 8206 8303 8381        	dc.b nRst, d89, d8A, $06, d82, $03, d82, d81
0001A02A 83                         	dc.b d82
0001A02B                            	sPan		spLeft, $00
0001A02B E080                     M 	dc.b	$e0,spleft|$00
0001A02D 840C                       	dc.b d8C, $0C
0001A02F                            	sPan		spCenter, $00
0001A02F E0C0                     M 	dc.b	$e0,spcenter|$00
0001A031 8306 8181 0C83 0681        	dc.b d82, $06, d81, d81, $0C, d82, $06, d81
0001A039 0981 0381 0683 03          	dc.b $09, d81, $03, d81, $06, d82, $03
0001A040                            	sPan		spLeft, $00
0001A040 E080                     M 	dc.b	$e0,spleft|$00
0001A042 83                         	dc.b d87
0001A043                            	sPan		spCenter, $00
0001A043 E0C0                     M 	dc.b	$e0,spcenter|$00
0001A045 81                         	dc.b d81
0001A046                            	sPan		spLeft, $00
0001A046 E080                     M 	dc.b	$e0,spleft|$00
0001A048 83                         	dc.b d87
0001A049                            	sPan		spCenter, $00
0001A049 E0C0                     M 	dc.b	$e0,spcenter|$00
0001A04B 8106                       	dc.b d81, $06
0001A04D                            	sPan		spLeft, $00
0001A04D E080                     M 	dc.b	$e0,spleft|$00
0001A04F 8303 83                    	dc.b d87, $03, d87
0001A052                            	sPan		spCenter, $00
0001A052 E0C0                     M 	dc.b	$e0,spcenter|$00
0001A054 8386 8283                  	dc.b d82, d89, d8A, d82
0001A058                            	sPan		spLeft, $00
0001A058 E080                     M 	dc.b	$e0,spleft|$00
0001A05A 840C                       	dc.b d8C, $0C
0001A05C                            	sPan		spCenter, $00
0001A05C E0C0                     M 	dc.b	$e0,spcenter|$00
0001A05E 8306 8181 0C83 0681        	dc.b d82, $06, d81, d81, $0C, d82, $06, d81
0001A066                            	sPan		spLeft, $00
0001A066 E080                     M 	dc.b	$e0,spleft|$00
0001A068 8303                       	dc.b d87, $03
0001A06A                            	sPan		spCenter, $00
0001A06A E0C0                     M 	dc.b	$e0,spcenter|$00
0001A06C 81                         	dc.b d81
0001A06D                            	sPan		spLeft, $00
0001A06D E080                     M 	dc.b	$e0,spleft|$00
0001A06F 83                         	dc.b d87
0001A070                            	sPan		spCenter, $00
0001A070 E0C0                     M 	dc.b	$e0,spcenter|$00
0001A072 8183 0681 03               	dc.b d81, d82, $06, d81, $03
0001A077                            	sPan		spLeft, $00
0001A077 E080                     M 	dc.b	$e0,spleft|$00
0001A079 83                         	dc.b d87
0001A07A                            	sPan		spCenter, $00
0001A07A E0C0                     M 	dc.b	$e0,spcenter|$00
0001A07C 81                         	dc.b d81
0001A07D                            	sPan		spLeft, $00
0001A07D E080                     M 	dc.b	$e0,spleft|$00
0001A07F 8383 06                    	dc.b d87, d87, $06
0001A082                            	sPan		spCenter, $00
0001A082 E0C0                     M 	dc.b	$e0,spcenter|$00
0001A084 8303                       	dc.b d82, $03
0001A086                            	sPan		spLeft, $00
0001A086 E080                     M 	dc.b	$e0,spleft|$00
0001A088 83                         	dc.b d87
0001A089                            	sPan		spCenter, $00
0001A089 E0C0                     M 	dc.b	$e0,spcenter|$00
0001A08B 8183                       	dc.b d81, d84
0001A08D                            	sPan		spLeft, $00
0001A08D E080                     M 	dc.b	$e0,spleft|$00
0001A08F 840C                       	dc.b d8C, $0C
0001A091                            	sPan		spCenter, $00
0001A091 E0C0                     M 	dc.b	$e0,spcenter|$00
0001A093 8306 8181 0C83 0681        	dc.b d82, $06, d81, d81, $0C, d82, $06, d81
0001A09B                            	sPan		spLeft, $00
0001A09B E080                     M 	dc.b	$e0,spleft|$00
0001A09D 8303                       	dc.b d87, $03
0001A09F                            	sPan		spCenter, $00
0001A09F E0C0                     M 	dc.b	$e0,spcenter|$00
0001A0A1 8181                       	dc.b d81, d81
0001A0A3                            	sPan		spLeft, $00
0001A0A3 E080                     M 	dc.b	$e0,spleft|$00
0001A0A5 83                         	dc.b d87
0001A0A6                            	sPan		spCenter, $00
0001A0A6 E0C0                     M 	dc.b	$e0,spcenter|$00
0001A0A8 8306 8103                  	dc.b d82, $06, d81, $03
0001A0AC                            	sPan		spLeft, $00
0001A0AC E080                     M 	dc.b	$e0,spleft|$00
0001A0AE 83                         	dc.b d87
0001A0AF                            	sPan		spCenter, $00
0001A0AF E0C0                     M 	dc.b	$e0,spcenter|$00
0001A0B1 81                         	dc.b d81
0001A0B2                            	sPan		spLeft, $00
0001A0B2 E080                     M 	dc.b	$e0,spleft|$00
0001A0B4 8383 06                    	dc.b d87, d87, $06
0001A0B7                            	sPan		spCenter, $00
0001A0B7 E0C0                     M 	dc.b	$e0,spcenter|$00
0001A0B9 8303 8682 83               	dc.b d82, $03, d89, d8A, d84
0001A0BE                            	sPan		spLeft, $00
0001A0BE E080                     M 	dc.b	$e0,spleft|$00
0001A0C0 840C                       	dc.b d8C, $0C
0001A0C2                            	sPan		spCenter, $00
0001A0C2 E0C0                     M 	dc.b	$e0,spcenter|$00
0001A0C4 8306 8181 0C83 8103        	dc.b d82, $06, d81, d81, $0C, d82, d81, $03
0001A0CC                            	sPan		spLeft, $00
0001A0CC E080                     M 	dc.b	$e0,spleft|$00
0001A0CE 8306                       	dc.b d87, $06
0001A0D0                            	sPan		spCenter, $00
0001A0D0 E0C0                     M 	dc.b	$e0,spcenter|$00
0001A0D2 8103 8306 8103             	dc.b d81, $03, d82, $06, d81, $03
0001A0D8                            	sPan		spLeft, $00
0001A0D8 E080                     M 	dc.b	$e0,spleft|$00
0001A0DA 8380 8383 06               	dc.b d87, nRst, d87, d87, $06
0001A0DF                            	sPan		spCenter, $00
0001A0DF E0C0                     M 	dc.b	$e0,spcenter|$00
0001A0E1 8303                       	dc.b d82, $03
0001A0E3                            	sPan		spLeft, $00
0001A0E3 E080                     M 	dc.b	$e0,spleft|$00
0001A0E5 83                         	dc.b d87
0001A0E6                            	sPan		spCenter, $00
0001A0E6 E0C0                     M 	dc.b	$e0,spcenter|$00
0001A0E8 8183                       	dc.b d81, d84
0001A0EA                            	sPan		spLeft, $00
0001A0EA E080                     M 	dc.b	$e0,spleft|$00
0001A0EC 840C                       	dc.b d8C, $0C
0001A0EE                            	sPan		spCenter, $00
0001A0EE E0C0                     M 	dc.b	$e0,spcenter|$00
0001A0F0 8306 8181 0C83 0681        	dc.b d82, $06, d81, d81, $0C, d82, $06, d81
0001A0F8 0985 0381 8585             	dc.b $09, d88, $03, d81, d88, d88
0001A0FE                            	sPan		spLeft, $00
0001A0FE E080                     M 	dc.b	$e0,spleft|$00
0001A100 83                         	dc.b d87
0001A101                            	sPan		spCenter, $00
0001A101 E0C0                     M 	dc.b	$e0,spcenter|$00
0001A103 8586 8386 8386 8386        	dc.b d88, d89, d82, d89, d82, d89, d82, d89
0001A10B 8283                       	dc.b d8A, d82
0001A10D                            	sJump		TowerPuppet_DAC2
0001A10D F6                       M 	dc.b	$f6
0001A10E FCD6                     M 	dc.w	towerpuppet_dac2-*-1
0001A110 =00000013                M a	=	a+1
0001A110                          M 	even
0001A110                          M b	equs	dmus13
0001A110                          M _mus_choosepath
0001A110                          M dmusa13	include	"driver/music/choosepath.asm"
0001A110                            ChoosePath_Header:
0001A110                            	sHeaderInit
0001A110 =0001A110                M spointzero	=	*
0001A110 =00000000                M spatnum	=	0
0001A110                            	sHeaderTempo	$02, $17
0001A110 0117                     M 	dc.b	$02-1,$17
0001A112                            	sHeaderCh	$05, $03
0001A112 04                       M 	dc.b	$05-1
0001A113 02                       M 	dc.b	$03-1
0001A114                            	sHeaderDAC	ChoosePath_DAC1
0001A114 0000                     M 	dc.w	choosepath_dac1-spointzero
0001A116 0000                     M 	dc.w	$00
0001A118                            	sHeaderDAC	ChoosePath_DAC2
0001A118 0000                     M 	dc.w	choosepath_dac2-spointzero
0001A11A 0000                     M 	dc.w	$00
0001A11C                            	sHeaderFM	ChoosePath_FM1, $02, $05
0001A11C 0000                     M 	dc.w	choosepath_fm1-spointzero
0001A11E 0205                     M 	dc.b	$02,$05
0001A120                            	sHeaderFM	ChoosePath_FM2, $02, $0D
0001A120 0000                     M 	dc.w	choosepath_fm2-spointzero
0001A122 020D                     M 	dc.b	$02,$0d
0001A124                            	sHeaderFM	ChoosePath_FM3, $02, $1A
0001A124 0000                     M 	dc.w	choosepath_fm3-spointzero
0001A126 021A                     M 	dc.b	$02,$1a
0001A128                            	sHeaderFM	ChoosePath_FM4, $02, $15
0001A128 0000                     M 	dc.w	choosepath_fm4-spointzero
0001A12A 0215                     M 	dc.b	$02,$15
0001A12C                            	sHeaderFM	ChoosePath_FM5, $02, $1A
0001A12C 0000                     M 	dc.w	choosepath_fm5-spointzero
0001A12E 021A                     M 	dc.b	$02,$1a
0001A130                            	sHeaderPSG	ChoosePath_PSG1, $DE, $04, $00, v00
0001A130 0000                     M 	dc.w	choosepath_psg1-spointzero
0001A132 DE04 0000                M 	dc.b	$de,$04,$00,v00
0001A136                            	sHeaderPSG	ChoosePath_PSG2, $DE, $05, $00, v00
0001A136 0000                     M 	dc.w	choosepath_psg2-spointzero
0001A138 DE05 0000                M 	dc.b	$de,$05,$00,v00
0001A13C                            	sHeaderPSG	ChoosePath_PSG3, $00, $00, $00, vRistar02
0001A13C 0000                     M 	dc.w	choosepath_psg3-spointzero
0001A13E 0000 0001                M 	dc.b	$00,$00,$00,vristar02
0001A142                            
0001A142                            	; Patch $00
0001A142                            	; $78
0001A142                            	; $71, $35, $30, $72,	$18, $D5, $1F, $1F
0001A142                            	; $0F, $1E, $0E, $07,	$0F, $09, $04, $0C
0001A142                            	; $55, $55, $15, $1C,	$33, $0F, $12, $06
0001A142                            	spAlgorithm	$00
0001A142 =00000001                M spatnum	=	spatnum+1
0001A142 =00000000                M spal	=	val
0001A142                            	spFeedback	$07
0001A142 =00000007                M spfe	=	val
0001A142                            	spDetune	$07, $03, $03, $07
0001A142 =00000007                M spde1	=	op1
0001A142 =00000003                M spde2	=	op2
0001A142 =00000003                M spde3	=	op3
0001A142 =00000007                M spde4	=	op4
0001A142                            	spMultiple	$01, $00, $05, $02
0001A142 =00000001                M spmu1	=	op1
0001A142 =00000000                M spmu2	=	op2
0001A142 =00000005                M spmu3	=	op3
0001A142 =00000002                M spmu4	=	op4
0001A142                            	spRateScale	$00, $00, $03, $00
0001A142 =00000000                M sprs1	=	op1
0001A142 =00000000                M sprs2	=	op2
0001A142 =00000003                M sprs3	=	op3
0001A142 =00000000                M sprs4	=	op4
0001A142                            	spAttackRt	$18, $1F, $15, $1F
0001A142 =00000018                M spar1	=	op1
0001A142 =0000001F                M spar2	=	op2
0001A142 =00000015                M spar3	=	op3
0001A142 =0000001F                M spar4	=	op4
0001A142                            	spAmpMod	$00, $00, $00, $00
0001A142 =00000000                M spam1	=	op1
0001A142 =00000000                M spam2	=	op2
0001A142 =00000000                M spam3	=	op3
0001A142 =00000000                M spam4	=	op4
0001A142                            	spSustainRt	$0F, $0E, $1E, $07
0001A142 =0000000F                M spsr1	=	op1
0001A142 =0000000E                M spsr2	=	op2
0001A142 =0000001E                M spsr3	=	op3
0001A142 =00000007                M spsr4	=	op4
0001A142                            	spSustainLv	$05, $01, $05, $01
0001A142 =00000005                M spsl1	=	op1
0001A142 =00000001                M spsl2	=	op2
0001A142 =00000005                M spsl3	=	op3
0001A142 =00000001                M spsl4	=	op4
0001A142                            	spDecayRt	$0F, $04, $09, $0C
0001A142 =0000000F                M spdr1	=	op1
0001A142 =00000004                M spdr2	=	op2
0001A142 =00000009                M spdr3	=	op3
0001A142 =0000000C                M spdr4	=	op4
0001A142                            	spReleaseRt	$05, $05, $05, $0C
0001A142 =00000005                M sprr1	=	op1
0001A142 =00000005                M sprr2	=	op2
0001A142 =00000005                M sprr3	=	op3
0001A142 =0000000C                M sprr4	=	op4
0001A142                            	spSSGEG		$00, $00, $00, $00
0001A142 =00000000                M spss1	=	op1
0001A142 =00000000                M spss2	=	op2
0001A142 =00000000                M spss3	=	op3
0001A142 =00000000                M spss4	=	op4
0001A142                            	spTotalLv	$33, $12, $0F, $06
0001A142 =00000033                M sptl1	=	op1
0001A142 =00000012                M sptl2	=	op2
0001A142 =0000000F                M sptl3	=	op3
0001A142 =00000006                M sptl4	=	op4
0001A142 38                       M 	dc.b	(spfe<<3)+spal
0001A143 =00000080                M sptlmask4	set	$80
0001A143 =00000000                M sptlmask2	set	((spal>=5)<<7)
0001A143 =00000000                M sptlmask3	set	((spal>=4)<<7)
0001A143 =00000000                M sptlmask1	set	((spal=7)<<7)
0001A143 7135 3072                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001A147 18D5 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001A14B 0F1E 0E07                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001A14F 0F09 040C                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001A153 5555 151C                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001A157 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001A15B 330F 1286                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001A15F 4E41 54                  M 	dc.b	'NAT'
0001A162                            
0001A162                            	; Patch $01
0001A162                            	; $6C
0001A162                            	; $71, $31, $33, $7F,	$1F, $1F, $1F, $1F
0001A162                            	; $09, $01, $01, $09,	$0C, $01, $01, $01
0001A162                            	; $F1, $01, $F1, $51,	$05, $03, $0F, $03
0001A162                            	spAlgorithm	$04
0001A162 =00000002                M spatnum	=	spatnum+1
0001A162 =00000004                M spal	=	val
0001A162                            	spFeedback	$05
0001A162 =00000005                M spfe	=	val
0001A162                            	spDetune	$07, $03, $03, $07
0001A162 =00000007                M spde1	=	op1
0001A162 =00000003                M spde2	=	op2
0001A162 =00000003                M spde3	=	op3
0001A162 =00000007                M spde4	=	op4
0001A162                            	spMultiple	$01, $03, $01, $0F
0001A162 =00000001                M spmu1	=	op1
0001A162 =00000003                M spmu2	=	op2
0001A162 =00000001                M spmu3	=	op3
0001A162 =0000000F                M spmu4	=	op4
0001A162                            	spRateScale	$00, $00, $00, $00
0001A162 =00000000                M sprs1	=	op1
0001A162 =00000000                M sprs2	=	op2
0001A162 =00000000                M sprs3	=	op3
0001A162 =00000000                M sprs4	=	op4
0001A162                            	spAttackRt	$1F, $1F, $1F, $1F
0001A162 =0000001F                M spar1	=	op1
0001A162 =0000001F                M spar2	=	op2
0001A162 =0000001F                M spar3	=	op3
0001A162 =0000001F                M spar4	=	op4
0001A162                            	spAmpMod	$00, $00, $00, $00
0001A162 =00000000                M spam1	=	op1
0001A162 =00000000                M spam2	=	op2
0001A162 =00000000                M spam3	=	op3
0001A162 =00000000                M spam4	=	op4
0001A162                            	spSustainRt	$09, $01, $01, $09
0001A162 =00000009                M spsr1	=	op1
0001A162 =00000001                M spsr2	=	op2
0001A162 =00000001                M spsr3	=	op3
0001A162 =00000009                M spsr4	=	op4
0001A162                            	spSustainLv	$0F, $0F, $00, $05
0001A162 =0000000F                M spsl1	=	op1
0001A162 =0000000F                M spsl2	=	op2
0001A162 =00000000                M spsl3	=	op3
0001A162 =00000005                M spsl4	=	op4
0001A162                            	spDecayRt	$0C, $01, $01, $01
0001A162 =0000000C                M spdr1	=	op1
0001A162 =00000001                M spdr2	=	op2
0001A162 =00000001                M spdr3	=	op3
0001A162 =00000001                M spdr4	=	op4
0001A162                            	spReleaseRt	$01, $01, $01, $01
0001A162 =00000001                M sprr1	=	op1
0001A162 =00000001                M sprr2	=	op2
0001A162 =00000001                M sprr3	=	op3
0001A162 =00000001                M sprr4	=	op4
0001A162                            	spSSGEG		$00, $00, $00, $00
0001A162 =00000000                M spss1	=	op1
0001A162 =00000000                M spss2	=	op2
0001A162 =00000000                M spss3	=	op3
0001A162 =00000000                M spss4	=	op4
0001A162                            	spTotalLv	$05, $0F, $03, $03
0001A162 =00000005                M sptl1	=	op1
0001A162 =0000000F                M sptl2	=	op2
0001A162 =00000003                M sptl3	=	op3
0001A162 =00000003                M sptl4	=	op4
0001A162 2C                       M 	dc.b	(spfe<<3)+spal
0001A163 =00000080                M sptlmask4	set	$80
0001A163 =00000000                M sptlmask2	set	((spal>=5)<<7)
0001A163 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
0001A163 =00000000                M sptlmask1	set	((spal=7)<<7)
0001A163 7131 337F                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001A167 1F1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001A16B 0901 0109                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001A16F 0C01 0101                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001A173 F101 F151                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001A177 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001A17B 0583 0F83                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001A17F 4E41 54                  M 	dc.b	'NAT'
0001A182                            
0001A182                            	; Patch $02
0001A182                            	; $75
0001A182                            	; $32, $72, $72, $72,	$1F, $1F, $1F, $1F
0001A182                            	; $07, $01, $01, $01,	$07, $07, $07, $07
0001A182                            	; $16, $16, $16, $16,	$10, $02, $02, $02
0001A182                            	spAlgorithm	$05
0001A182 =00000003                M spatnum	=	spatnum+1
0001A182 =00000005                M spal	=	val
0001A182                            	spFeedback	$06
0001A182 =00000006                M spfe	=	val
0001A182                            	spDetune	$03, $07, $07, $07
0001A182 =00000003                M spde1	=	op1
0001A182 =00000007                M spde2	=	op2
0001A182 =00000007                M spde3	=	op3
0001A182 =00000007                M spde4	=	op4
0001A182                            	spMultiple	$02, $02, $02, $02
0001A182 =00000002                M spmu1	=	op1
0001A182 =00000002                M spmu2	=	op2
0001A182 =00000002                M spmu3	=	op3
0001A182 =00000002                M spmu4	=	op4
0001A182                            	spRateScale	$00, $00, $00, $00
0001A182 =00000000                M sprs1	=	op1
0001A182 =00000000                M sprs2	=	op2
0001A182 =00000000                M sprs3	=	op3
0001A182 =00000000                M sprs4	=	op4
0001A182                            	spAttackRt	$1F, $1F, $1F, $1F
0001A182 =0000001F                M spar1	=	op1
0001A182 =0000001F                M spar2	=	op2
0001A182 =0000001F                M spar3	=	op3
0001A182 =0000001F                M spar4	=	op4
0001A182                            	spAmpMod	$00, $00, $00, $00
0001A182 =00000000                M spam1	=	op1
0001A182 =00000000                M spam2	=	op2
0001A182 =00000000                M spam3	=	op3
0001A182 =00000000                M spam4	=	op4
0001A182                            	spSustainRt	$07, $01, $01, $01
0001A182 =00000007                M spsr1	=	op1
0001A182 =00000001                M spsr2	=	op2
0001A182 =00000001                M spsr3	=	op3
0001A182 =00000001                M spsr4	=	op4
0001A182                            	spSustainLv	$01, $01, $01, $01
0001A182 =00000001                M spsl1	=	op1
0001A182 =00000001                M spsl2	=	op2
0001A182 =00000001                M spsl3	=	op3
0001A182 =00000001                M spsl4	=	op4
0001A182                            	spDecayRt	$07, $07, $07, $07
0001A182 =00000007                M spdr1	=	op1
0001A182 =00000007                M spdr2	=	op2
0001A182 =00000007                M spdr3	=	op3
0001A182 =00000007                M spdr4	=	op4
0001A182                            	spReleaseRt	$06, $06, $06, $06
0001A182 =00000006                M sprr1	=	op1
0001A182 =00000006                M sprr2	=	op2
0001A182 =00000006                M sprr3	=	op3
0001A182 =00000006                M sprr4	=	op4
0001A182                            	spSSGEG		$00, $00, $00, $00
0001A182 =00000000                M spss1	=	op1
0001A182 =00000000                M spss2	=	op2
0001A182 =00000000                M spss3	=	op3
0001A182 =00000000                M spss4	=	op4
0001A182                            	spTotalLv	$10, $02, $02, $02
0001A182 =00000010                M sptl1	=	op1
0001A182 =00000002                M sptl2	=	op2
0001A182 =00000002                M sptl3	=	op3
0001A182 =00000002                M sptl4	=	op4
0001A182 35                       M 	dc.b	(spfe<<3)+spal
0001A183 =00000080                M sptlmask4	set	$80
0001A183 =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
0001A183 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
0001A183 =00000000                M sptlmask1	set	((spal=7)<<7)
0001A183 3272 7272                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001A187 1F1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001A18B 0701 0101                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001A18F 0707 0707                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001A193 1616 1616                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001A197 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001A19B 1082 8282                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001A19F 4E41 54                  M 	dc.b	'NAT'
0001A1A2                            
0001A1A2                            	; Patch $03
0001A1A2                            	; $7D
0001A1A2                            	; $70, $51, $60, $70,	$7F, $1F, $1F, $71
0001A1A2                            	; $0F, $06, $06, $06,	$06, $06, $01, $01
0001A1A2                            	; $08, $08, $08, $08,	$0E, $00, $00, $00
0001A1A2                            	spAlgorithm	$05
0001A1A2 =00000004                M spatnum	=	spatnum+1
0001A1A2 =00000005                M spal	=	val
0001A1A2                            	spFeedback	$07
0001A1A2 =00000007                M spfe	=	val
0001A1A2                            	spDetune	$07, $06, $05, $07
0001A1A2 =00000007                M spde1	=	op1
0001A1A2 =00000006                M spde2	=	op2
0001A1A2 =00000005                M spde3	=	op3
0001A1A2 =00000007                M spde4	=	op4
0001A1A2                            	spMultiple	$00, $00, $01, $00
0001A1A2 =00000000                M spmu1	=	op1
0001A1A2 =00000000                M spmu2	=	op2
0001A1A2 =00000001                M spmu3	=	op3
0001A1A2 =00000000                M spmu4	=	op4
0001A1A2                            	spRateScale	$01, $00, $00, $01
0001A1A2 =00000001                M sprs1	=	op1
0001A1A2 =00000000                M sprs2	=	op2
0001A1A2 =00000000                M sprs3	=	op3
0001A1A2 =00000001                M sprs4	=	op4
0001A1A2                            	spAttackRt	$1F, $1F, $1F, $11
0001A1A2 =0000001F                M spar1	=	op1
0001A1A2 =0000001F                M spar2	=	op2
0001A1A2 =0000001F                M spar3	=	op3
0001A1A2 =00000011                M spar4	=	op4
0001A1A2                            	spAmpMod	$00, $00, $00, $00
0001A1A2 =00000000                M spam1	=	op1
0001A1A2 =00000000                M spam2	=	op2
0001A1A2 =00000000                M spam3	=	op3
0001A1A2 =00000000                M spam4	=	op4
0001A1A2                            	spSustainRt	$0F, $06, $06, $06
0001A1A2 =0000000F                M spsr1	=	op1
0001A1A2 =00000006                M spsr2	=	op2
0001A1A2 =00000006                M spsr3	=	op3
0001A1A2 =00000006                M spsr4	=	op4
0001A1A2                            	spSustainLv	$00, $00, $00, $00
0001A1A2 =00000000                M spsl1	=	op1
0001A1A2 =00000000                M spsl2	=	op2
0001A1A2 =00000000                M spsl3	=	op3
0001A1A2 =00000000                M spsl4	=	op4
0001A1A2                            	spDecayRt	$06, $01, $06, $01
0001A1A2 =00000006                M spdr1	=	op1
0001A1A2 =00000001                M spdr2	=	op2
0001A1A2 =00000006                M spdr3	=	op3
0001A1A2 =00000001                M spdr4	=	op4
0001A1A2                            	spReleaseRt	$08, $08, $08, $08
0001A1A2 =00000008                M sprr1	=	op1
0001A1A2 =00000008                M sprr2	=	op2
0001A1A2 =00000008                M sprr3	=	op3
0001A1A2 =00000008                M sprr4	=	op4
0001A1A2                            	spSSGEG		$00, $00, $00, $00
0001A1A2 =00000000                M spss1	=	op1
0001A1A2 =00000000                M spss2	=	op2
0001A1A2 =00000000                M spss3	=	op3
0001A1A2 =00000000                M spss4	=	op4
0001A1A2                            	spTotalLv	$0E, $00, $00, $00
0001A1A2 =0000000E                M sptl1	=	op1
0001A1A2 =00000000                M sptl2	=	op2
0001A1A2 =00000000                M sptl3	=	op3
0001A1A2 =00000000                M sptl4	=	op4
0001A1A2 3D                       M 	dc.b	(spfe<<3)+spal
0001A1A3 =00000080                M sptlmask4	set	$80
0001A1A3 =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
0001A1A3 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
0001A1A3 =00000000                M sptlmask1	set	((spal=7)<<7)
0001A1A3 7051 6070                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001A1A7 5F1F 1F51                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001A1AB 0F06 0606                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001A1AF 0606 0101                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001A1B3 0808 0808                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001A1B7 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001A1BB 0E80 8080                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001A1BF 4E41 54                  M 	dc.b	'NAT'
0001A1C2                            
0001A1C2                            	; Patch $04
0001A1C2                            	; $7C
0001A1C2                            	; $72, $3A, $30, $72,	$18, $D5, $1F, $1F
0001A1C2                            	; $0C, $0E, $0E, $07,	$0F, $09, $04, $0C
0001A1C2                            	; $58, $57, $17, $1C,	$10, $06, $10, $03
0001A1C2                            	spAlgorithm	$04
0001A1C2 =00000005                M spatnum	=	spatnum+1
0001A1C2 =00000004                M spal	=	val
0001A1C2                            	spFeedback	$07
0001A1C2 =00000007                M spfe	=	val
0001A1C2                            	spDetune	$07, $03, $03, $07
0001A1C2 =00000007                M spde1	=	op1
0001A1C2 =00000003                M spde2	=	op2
0001A1C2 =00000003                M spde3	=	op3
0001A1C2 =00000007                M spde4	=	op4
0001A1C2                            	spMultiple	$02, $00, $0A, $02
0001A1C2 =00000002                M spmu1	=	op1
0001A1C2 =00000000                M spmu2	=	op2
0001A1C2 =0000000A                M spmu3	=	op3
0001A1C2 =00000002                M spmu4	=	op4
0001A1C2                            	spRateScale	$00, $00, $03, $00
0001A1C2 =00000000                M sprs1	=	op1
0001A1C2 =00000000                M sprs2	=	op2
0001A1C2 =00000003                M sprs3	=	op3
0001A1C2 =00000000                M sprs4	=	op4
0001A1C2                            	spAttackRt	$18, $1F, $15, $1F
0001A1C2 =00000018                M spar1	=	op1
0001A1C2 =0000001F                M spar2	=	op2
0001A1C2 =00000015                M spar3	=	op3
0001A1C2 =0000001F                M spar4	=	op4
0001A1C2                            	spAmpMod	$00, $00, $00, $00
0001A1C2 =00000000                M spam1	=	op1
0001A1C2 =00000000                M spam2	=	op2
0001A1C2 =00000000                M spam3	=	op3
0001A1C2 =00000000                M spam4	=	op4
0001A1C2                            	spSustainRt	$0C, $0E, $0E, $07
0001A1C2 =0000000C                M spsr1	=	op1
0001A1C2 =0000000E                M spsr2	=	op2
0001A1C2 =0000000E                M spsr3	=	op3
0001A1C2 =00000007                M spsr4	=	op4
0001A1C2                            	spSustainLv	$05, $01, $05, $01
0001A1C2 =00000005                M spsl1	=	op1
0001A1C2 =00000001                M spsl2	=	op2
0001A1C2 =00000005                M spsl3	=	op3
0001A1C2 =00000001                M spsl4	=	op4
0001A1C2                            	spDecayRt	$0F, $04, $09, $0C
0001A1C2 =0000000F                M spdr1	=	op1
0001A1C2 =00000004                M spdr2	=	op2
0001A1C2 =00000009                M spdr3	=	op3
0001A1C2 =0000000C                M spdr4	=	op4
0001A1C2                            	spReleaseRt	$08, $07, $07, $0C
0001A1C2 =00000008                M sprr1	=	op1
0001A1C2 =00000007                M sprr2	=	op2
0001A1C2 =00000007                M sprr3	=	op3
0001A1C2 =0000000C                M sprr4	=	op4
0001A1C2                            	spSSGEG		$00, $00, $00, $00
0001A1C2 =00000000                M spss1	=	op1
0001A1C2 =00000000                M spss2	=	op2
0001A1C2 =00000000                M spss3	=	op3
0001A1C2 =00000000                M spss4	=	op4
0001A1C2                            	spTotalLv	$10, $10, $06, $03
0001A1C2 =00000010                M sptl1	=	op1
0001A1C2 =00000010                M sptl2	=	op2
0001A1C2 =00000006                M sptl3	=	op3
0001A1C2 =00000003                M sptl4	=	op4
0001A1C2 3C                       M 	dc.b	(spfe<<3)+spal
0001A1C3 =00000080                M sptlmask4	set	$80
0001A1C3 =00000000                M sptlmask2	set	((spal>=5)<<7)
0001A1C3 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
0001A1C3 =00000000                M sptlmask1	set	((spal=7)<<7)
0001A1C3 723A 3072                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001A1C7 18D5 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001A1CB 0C0E 0E07                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001A1CF 0F09 040C                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001A1D3 5857 171C                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001A1D7 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001A1DB 1086 1083                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001A1DF 4E41 54                  M 	dc.b	'NAT'
0001A1E2                            
0001A1E2                            	; Patch $05
0001A1E2                            	; $6C
0001A1E2                            	; $71, $35, $34, $7E,	$1F, $1F, $1F, $1F
0001A1E2                            	; $09, $01, $01, $09,	$0C, $01, $01, $01
0001A1E2                            	; $F1, $01, $F1, $51,	$05, $01, $0F, $01
0001A1E2                            	spAlgorithm	$04
0001A1E2 =00000006                M spatnum	=	spatnum+1
0001A1E2 =00000004                M spal	=	val
0001A1E2                            	spFeedback	$05
0001A1E2 =00000005                M spfe	=	val
0001A1E2                            	spDetune	$07, $03, $03, $07
0001A1E2 =00000007                M spde1	=	op1
0001A1E2 =00000003                M spde2	=	op2
0001A1E2 =00000003                M spde3	=	op3
0001A1E2 =00000007                M spde4	=	op4
0001A1E2                            	spMultiple	$01, $04, $05, $0E
0001A1E2 =00000001                M spmu1	=	op1
0001A1E2 =00000004                M spmu2	=	op2
0001A1E2 =00000005                M spmu3	=	op3
0001A1E2 =0000000E                M spmu4	=	op4
0001A1E2                            	spRateScale	$00, $00, $00, $00
0001A1E2 =00000000                M sprs1	=	op1
0001A1E2 =00000000                M sprs2	=	op2
0001A1E2 =00000000                M sprs3	=	op3
0001A1E2 =00000000                M sprs4	=	op4
0001A1E2                            	spAttackRt	$1F, $1F, $1F, $1F
0001A1E2 =0000001F                M spar1	=	op1
0001A1E2 =0000001F                M spar2	=	op2
0001A1E2 =0000001F                M spar3	=	op3
0001A1E2 =0000001F                M spar4	=	op4
0001A1E2                            	spAmpMod	$00, $00, $00, $00
0001A1E2 =00000000                M spam1	=	op1
0001A1E2 =00000000                M spam2	=	op2
0001A1E2 =00000000                M spam3	=	op3
0001A1E2 =00000000                M spam4	=	op4
0001A1E2                            	spSustainRt	$09, $01, $01, $09
0001A1E2 =00000009                M spsr1	=	op1
0001A1E2 =00000001                M spsr2	=	op2
0001A1E2 =00000001                M spsr3	=	op3
0001A1E2 =00000009                M spsr4	=	op4
0001A1E2                            	spSustainLv	$0F, $0F, $00, $05
0001A1E2 =0000000F                M spsl1	=	op1
0001A1E2 =0000000F                M spsl2	=	op2
0001A1E2 =00000000                M spsl3	=	op3
0001A1E2 =00000005                M spsl4	=	op4
0001A1E2                            	spDecayRt	$0C, $01, $01, $01
0001A1E2 =0000000C                M spdr1	=	op1
0001A1E2 =00000001                M spdr2	=	op2
0001A1E2 =00000001                M spdr3	=	op3
0001A1E2 =00000001                M spdr4	=	op4
0001A1E2                            	spReleaseRt	$01, $01, $01, $01
0001A1E2 =00000001                M sprr1	=	op1
0001A1E2 =00000001                M sprr2	=	op2
0001A1E2 =00000001                M sprr3	=	op3
0001A1E2 =00000001                M sprr4	=	op4
0001A1E2                            	spSSGEG		$00, $00, $00, $00
0001A1E2 =00000000                M spss1	=	op1
0001A1E2 =00000000                M spss2	=	op2
0001A1E2 =00000000                M spss3	=	op3
0001A1E2 =00000000                M spss4	=	op4
0001A1E2                            	spTotalLv	$05, $0F, $01, $01
0001A1E2 =00000005                M sptl1	=	op1
0001A1E2 =0000000F                M sptl2	=	op2
0001A1E2 =00000001                M sptl3	=	op3
0001A1E2 =00000001                M sptl4	=	op4
0001A1E2 2C                       M 	dc.b	(spfe<<3)+spal
0001A1E3 =00000080                M sptlmask4	set	$80
0001A1E3 =00000000                M sptlmask2	set	((spal>=5)<<7)
0001A1E3 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
0001A1E3 =00000000                M sptlmask1	set	((spal=7)<<7)
0001A1E3 7135 347E                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001A1E7 1F1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001A1EB 0901 0109                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001A1EF 0C01 0101                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001A1F3 F101 F151                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001A1F7 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001A1FB 0581 0F81                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001A1FF 4E41 54                  M 	dc.b	'NAT'
0001A202                            
0001A202                            	; Patch $06
0001A202                            	; $7D
0001A202                            	; $70, $31, $31, $70,	$77, $1F, $1F, $1F
0001A202                            	; $07, $00, $00, $00,	$07, $00, $00, $00
0001A202                            	; $17, $15, $15, $15,	$0E, $05, $05, $05
0001A202                            	spAlgorithm	$05
0001A202 =00000007                M spatnum	=	spatnum+1
0001A202 =00000005                M spal	=	val
0001A202                            	spFeedback	$07
0001A202 =00000007                M spfe	=	val
0001A202                            	spDetune	$07, $03, $03, $07
0001A202 =00000007                M spde1	=	op1
0001A202 =00000003                M spde2	=	op2
0001A202 =00000003                M spde3	=	op3
0001A202 =00000007                M spde4	=	op4
0001A202                            	spMultiple	$00, $01, $01, $00
0001A202 =00000000                M spmu1	=	op1
0001A202 =00000001                M spmu2	=	op2
0001A202 =00000001                M spmu3	=	op3
0001A202 =00000000                M spmu4	=	op4
0001A202                            	spRateScale	$01, $00, $00, $00
0001A202 =00000001                M sprs1	=	op1
0001A202 =00000000                M sprs2	=	op2
0001A202 =00000000                M sprs3	=	op3
0001A202 =00000000                M sprs4	=	op4
0001A202                            	spAttackRt	$17, $1F, $1F, $1F
0001A202 =00000017                M spar1	=	op1
0001A202 =0000001F                M spar2	=	op2
0001A202 =0000001F                M spar3	=	op3
0001A202 =0000001F                M spar4	=	op4
0001A202                            	spAmpMod	$00, $00, $00, $00
0001A202 =00000000                M spam1	=	op1
0001A202 =00000000                M spam2	=	op2
0001A202 =00000000                M spam3	=	op3
0001A202 =00000000                M spam4	=	op4
0001A202                            	spSustainRt	$07, $00, $00, $00
0001A202 =00000007                M spsr1	=	op1
0001A202 =00000000                M spsr2	=	op2
0001A202 =00000000                M spsr3	=	op3
0001A202 =00000000                M spsr4	=	op4
0001A202                            	spSustainLv	$01, $01, $01, $01
0001A202 =00000001                M spsl1	=	op1
0001A202 =00000001                M spsl2	=	op2
0001A202 =00000001                M spsl3	=	op3
0001A202 =00000001                M spsl4	=	op4
0001A202                            	spDecayRt	$07, $00, $00, $00
0001A202 =00000007                M spdr1	=	op1
0001A202 =00000000                M spdr2	=	op2
0001A202 =00000000                M spdr3	=	op3
0001A202 =00000000                M spdr4	=	op4
0001A202                            	spReleaseRt	$07, $05, $05, $05
0001A202 =00000007                M sprr1	=	op1
0001A202 =00000005                M sprr2	=	op2
0001A202 =00000005                M sprr3	=	op3
0001A202 =00000005                M sprr4	=	op4
0001A202                            	spSSGEG		$00, $00, $00, $00
0001A202 =00000000                M spss1	=	op1
0001A202 =00000000                M spss2	=	op2
0001A202 =00000000                M spss3	=	op3
0001A202 =00000000                M spss4	=	op4
0001A202                            	spTotalLv	$0E, $05, $05, $05
0001A202 =0000000E                M sptl1	=	op1
0001A202 =00000005                M sptl2	=	op2
0001A202 =00000005                M sptl3	=	op3
0001A202 =00000005                M sptl4	=	op4
0001A202 3D                       M 	dc.b	(spfe<<3)+spal
0001A203 =00000080                M sptlmask4	set	$80
0001A203 =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
0001A203 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
0001A203 =00000000                M sptlmask1	set	((spal=7)<<7)
0001A203 7031 3170                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001A207 571F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001A20B 0700 0000                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001A20F 0700 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001A213 1715 1515                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001A217 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001A21B 0E85 8585                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001A21F 4E41 54                  M 	dc.b	'NAT'
0001A222                            
0001A222                            	; Patch $07
0001A222                            	; $A5
0001A222                            	; $30, $73, $73, $73,	$1F, $1F, $1F, $1F
0001A222                            	; $0F, $05, $05, $05,	$07, $01, $01, $01
0001A222                            	; $17, $17, $17, $17,	$01, $06, $06, $06
0001A222                            	spAlgorithm	$05
0001A222 =00000008                M spatnum	=	spatnum+1
0001A222 =00000005                M spal	=	val
0001A222                            	spFeedback	$04
0001A222 =00000004                M spfe	=	val
0001A222                            	spDetune	$03, $07, $07, $07
0001A222 =00000003                M spde1	=	op1
0001A222 =00000007                M spde2	=	op2
0001A222 =00000007                M spde3	=	op3
0001A222 =00000007                M spde4	=	op4
0001A222                            	spMultiple	$00, $03, $03, $03
0001A222 =00000000                M spmu1	=	op1
0001A222 =00000003                M spmu2	=	op2
0001A222 =00000003                M spmu3	=	op3
0001A222 =00000003                M spmu4	=	op4
0001A222                            	spRateScale	$00, $00, $00, $00
0001A222 =00000000                M sprs1	=	op1
0001A222 =00000000                M sprs2	=	op2
0001A222 =00000000                M sprs3	=	op3
0001A222 =00000000                M sprs4	=	op4
0001A222                            	spAttackRt	$1F, $1F, $1F, $1F
0001A222 =0000001F                M spar1	=	op1
0001A222 =0000001F                M spar2	=	op2
0001A222 =0000001F                M spar3	=	op3
0001A222 =0000001F                M spar4	=	op4
0001A222                            	spAmpMod	$00, $00, $00, $00
0001A222 =00000000                M spam1	=	op1
0001A222 =00000000                M spam2	=	op2
0001A222 =00000000                M spam3	=	op3
0001A222 =00000000                M spam4	=	op4
0001A222                            	spSustainRt	$0F, $05, $05, $05
0001A222 =0000000F                M spsr1	=	op1
0001A222 =00000005                M spsr2	=	op2
0001A222 =00000005                M spsr3	=	op3
0001A222 =00000005                M spsr4	=	op4
0001A222                            	spSustainLv	$01, $01, $01, $01
0001A222 =00000001                M spsl1	=	op1
0001A222 =00000001                M spsl2	=	op2
0001A222 =00000001                M spsl3	=	op3
0001A222 =00000001                M spsl4	=	op4
0001A222                            	spDecayRt	$07, $01, $01, $01
0001A222 =00000007                M spdr1	=	op1
0001A222 =00000001                M spdr2	=	op2
0001A222 =00000001                M spdr3	=	op3
0001A222 =00000001                M spdr4	=	op4
0001A222                            	spReleaseRt	$07, $07, $07, $07
0001A222 =00000007                M sprr1	=	op1
0001A222 =00000007                M sprr2	=	op2
0001A222 =00000007                M sprr3	=	op3
0001A222 =00000007                M sprr4	=	op4
0001A222                            	spSSGEG		$00, $00, $00, $00
0001A222 =00000000                M spss1	=	op1
0001A222 =00000000                M spss2	=	op2
0001A222 =00000000                M spss3	=	op3
0001A222 =00000000                M spss4	=	op4
0001A222                            	spTotalLv	$01, $06, $06, $06
0001A222 =00000001                M sptl1	=	op1
0001A222 =00000006                M sptl2	=	op2
0001A222 =00000006                M sptl3	=	op3
0001A222 =00000006                M sptl4	=	op4
0001A222 25                       M 	dc.b	(spfe<<3)+spal
0001A223 =00000080                M sptlmask4	set	$80
0001A223 =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
0001A223 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
0001A223 =00000000                M sptlmask1	set	((spal=7)<<7)
0001A223 3073 7373                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001A227 1F1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001A22B 0F05 0505                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001A22F 0701 0101                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001A233 1717 1717                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001A237 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001A23B 0186 8686                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001A23F 4E41 54                  M 	dc.b	'NAT'
0001A242                            
0001A242                            	; Patch $08
0001A242                            	; $6C
0001A242                            	; $71, $52, $33, $7F,	$1F, $1F, $1F, $1F
0001A242                            	; $09, $01, $09, $01,	$0F, $01, $0F, $01
0001A242                            	; $01, $01, $01, $01,	$05, $03, $0C, $03
0001A242                            	spAlgorithm	$04
0001A242 =00000009                M spatnum	=	spatnum+1
0001A242 =00000004                M spal	=	val
0001A242                            	spFeedback	$05
0001A242 =00000005                M spfe	=	val
0001A242                            	spDetune	$07, $03, $05, $07
0001A242 =00000007                M spde1	=	op1
0001A242 =00000003                M spde2	=	op2
0001A242 =00000005                M spde3	=	op3
0001A242 =00000007                M spde4	=	op4
0001A242                            	spMultiple	$01, $03, $02, $0F
0001A242 =00000001                M spmu1	=	op1
0001A242 =00000003                M spmu2	=	op2
0001A242 =00000002                M spmu3	=	op3
0001A242 =0000000F                M spmu4	=	op4
0001A242                            	spRateScale	$00, $00, $00, $00
0001A242 =00000000                M sprs1	=	op1
0001A242 =00000000                M sprs2	=	op2
0001A242 =00000000                M sprs3	=	op3
0001A242 =00000000                M sprs4	=	op4
0001A242                            	spAttackRt	$1F, $1F, $1F, $1F
0001A242 =0000001F                M spar1	=	op1
0001A242 =0000001F                M spar2	=	op2
0001A242 =0000001F                M spar3	=	op3
0001A242 =0000001F                M spar4	=	op4
0001A242                            	spAmpMod	$00, $00, $00, $00
0001A242 =00000000                M spam1	=	op1
0001A242 =00000000                M spam2	=	op2
0001A242 =00000000                M spam3	=	op3
0001A242 =00000000                M spam4	=	op4
0001A242                            	spSustainRt	$09, $09, $01, $01
0001A242 =00000009                M spsr1	=	op1
0001A242 =00000009                M spsr2	=	op2
0001A242 =00000001                M spsr3	=	op3
0001A242 =00000001                M spsr4	=	op4
0001A242                            	spSustainLv	$00, $00, $00, $00
0001A242 =00000000                M spsl1	=	op1
0001A242 =00000000                M spsl2	=	op2
0001A242 =00000000                M spsl3	=	op3
0001A242 =00000000                M spsl4	=	op4
0001A242                            	spDecayRt	$0F, $0F, $01, $01
0001A242 =0000000F                M spdr1	=	op1
0001A242 =0000000F                M spdr2	=	op2
0001A242 =00000001                M spdr3	=	op3
0001A242 =00000001                M spdr4	=	op4
0001A242                            	spReleaseRt	$01, $01, $01, $01
0001A242 =00000001                M sprr1	=	op1
0001A242 =00000001                M sprr2	=	op2
0001A242 =00000001                M sprr3	=	op3
0001A242 =00000001                M sprr4	=	op4
0001A242                            	spSSGEG		$00, $00, $00, $00
0001A242 =00000000                M spss1	=	op1
0001A242 =00000000                M spss2	=	op2
0001A242 =00000000                M spss3	=	op3
0001A242 =00000000                M spss4	=	op4
0001A242                            	spTotalLv	$05, $0C, $03, $03
0001A242 =00000005                M sptl1	=	op1
0001A242 =0000000C                M sptl2	=	op2
0001A242 =00000003                M sptl3	=	op3
0001A242 =00000003                M sptl4	=	op4
0001A242 2C                       M 	dc.b	(spfe<<3)+spal
0001A243 =00000080                M sptlmask4	set	$80
0001A243 =00000000                M sptlmask2	set	((spal>=5)<<7)
0001A243 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
0001A243 =00000000                M sptlmask1	set	((spal=7)<<7)
0001A243 7152 337F                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001A247 1F1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001A24B 0901 0901                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001A24F 0F01 0F01                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001A253 0101 0101                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001A257 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001A25B 0583 0C83                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001A25F 4E41 54                  M 	dc.b	'NAT'
0001A262                            
0001A262                            	; Patch $09
0001A262                            	; $3C
0001A262                            	; $74, $38, $33, $76,	$19, $0F, $50, $12
0001A262                            	; $0B, $05, $01, $02,	$01, $00, $00, $00
0001A262                            	; $28, $29, $2A, $19,	$1B, $00, $00, $00
0001A262                            	spAlgorithm	$04
0001A262 =0000000A                M spatnum	=	spatnum+1
0001A262 =00000004                M spal	=	val
0001A262                            	spFeedback	$07
0001A262 =00000007                M spfe	=	val
0001A262                            	spDetune	$07, $03, $03, $07
0001A262 =00000007                M spde1	=	op1
0001A262 =00000003                M spde2	=	op2
0001A262 =00000003                M spde3	=	op3
0001A262 =00000007                M spde4	=	op4
0001A262                            	spMultiple	$04, $03, $08, $06
0001A262 =00000004                M spmu1	=	op1
0001A262 =00000003                M spmu2	=	op2
0001A262 =00000008                M spmu3	=	op3
0001A262 =00000006                M spmu4	=	op4
0001A262                            	spRateScale	$00, $01, $00, $00
0001A262 =00000000                M sprs1	=	op1
0001A262 =00000001                M sprs2	=	op2
0001A262 =00000000                M sprs3	=	op3
0001A262 =00000000                M sprs4	=	op4
0001A262                            	spAttackRt	$19, $10, $0F, $12
0001A262 =00000019                M spar1	=	op1
0001A262 =00000010                M spar2	=	op2
0001A262 =0000000F                M spar3	=	op3
0001A262 =00000012                M spar4	=	op4
0001A262                            	spAmpMod	$00, $00, $00, $00
0001A262 =00000000                M spam1	=	op1
0001A262 =00000000                M spam2	=	op2
0001A262 =00000000                M spam3	=	op3
0001A262 =00000000                M spam4	=	op4
0001A262                            	spSustainRt	$0B, $01, $05, $02
0001A262 =0000000B                M spsr1	=	op1
0001A262 =00000001                M spsr2	=	op2
0001A262 =00000005                M spsr3	=	op3
0001A262 =00000002                M spsr4	=	op4
0001A262                            	spSustainLv	$02, $02, $02, $01
0001A262 =00000002                M spsl1	=	op1
0001A262 =00000002                M spsl2	=	op2
0001A262 =00000002                M spsl3	=	op3
0001A262 =00000001                M spsl4	=	op4
0001A262                            	spDecayRt	$01, $00, $00, $00
0001A262 =00000001                M spdr1	=	op1
0001A262 =00000000                M spdr2	=	op2
0001A262 =00000000                M spdr3	=	op3
0001A262 =00000000                M spdr4	=	op4
0001A262                            	spReleaseRt	$08, $0A, $09, $09
0001A262 =00000008                M sprr1	=	op1
0001A262 =0000000A                M sprr2	=	op2
0001A262 =00000009                M sprr3	=	op3
0001A262 =00000009                M sprr4	=	op4
0001A262                            	spSSGEG		$00, $00, $00, $00
0001A262 =00000000                M spss1	=	op1
0001A262 =00000000                M spss2	=	op2
0001A262 =00000000                M spss3	=	op3
0001A262 =00000000                M spss4	=	op4
0001A262                            	spTotalLv	$1B, $00, $00, $00
0001A262 =0000001B                M sptl1	=	op1
0001A262 =00000000                M sptl2	=	op2
0001A262 =00000000                M sptl3	=	op3
0001A262 =00000000                M sptl4	=	op4
0001A262 3C                       M 	dc.b	(spfe<<3)+spal
0001A263 =00000080                M sptlmask4	set	$80
0001A263 =00000000                M sptlmask2	set	((spal>=5)<<7)
0001A263 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
0001A263 =00000000                M sptlmask1	set	((spal=7)<<7)
0001A263 7438 3376                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001A267 190F 5012                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001A26B 0B05 0102                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001A26F 0100 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001A273 2829 2A19                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001A277 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001A27B 1B80 0080                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001A27F 4E41 54                  M 	dc.b	'NAT'
0001A282                            
0001A282                            	; Patch $0A
0001A282                            	; $70
0001A282                            	; $70, $30, $30, $70,	$10, $10, $10, $10
0001A282                            	; $00, $00, $00, $00,	$00, $07, $00, $00
0001A282                            	; $00, $00, $00, $00,	$60, $60, $60, $60
0001A282                            	spAlgorithm	$00
0001A282 =0000000B                M spatnum	=	spatnum+1
0001A282 =00000000                M spal	=	val
0001A282                            	spFeedback	$06
0001A282 =00000006                M spfe	=	val
0001A282                            	spDetune	$07, $03, $03, $07
0001A282 =00000007                M spde1	=	op1
0001A282 =00000003                M spde2	=	op2
0001A282 =00000003                M spde3	=	op3
0001A282 =00000007                M spde4	=	op4
0001A282                            	spMultiple	$00, $00, $00, $00
0001A282 =00000000                M spmu1	=	op1
0001A282 =00000000                M spmu2	=	op2
0001A282 =00000000                M spmu3	=	op3
0001A282 =00000000                M spmu4	=	op4
0001A282                            	spRateScale	$00, $00, $00, $00
0001A282 =00000000                M sprs1	=	op1
0001A282 =00000000                M sprs2	=	op2
0001A282 =00000000                M sprs3	=	op3
0001A282 =00000000                M sprs4	=	op4
0001A282                            	spAttackRt	$10, $10, $10, $10
0001A282 =00000010                M spar1	=	op1
0001A282 =00000010                M spar2	=	op2
0001A282 =00000010                M spar3	=	op3
0001A282 =00000010                M spar4	=	op4
0001A282                            	spAmpMod	$00, $00, $00, $00
0001A282 =00000000                M spam1	=	op1
0001A282 =00000000                M spam2	=	op2
0001A282 =00000000                M spam3	=	op3
0001A282 =00000000                M spam4	=	op4
0001A282                            	spSustainRt	$00, $00, $00, $00
0001A282 =00000000                M spsr1	=	op1
0001A282 =00000000                M spsr2	=	op2
0001A282 =00000000                M spsr3	=	op3
0001A282 =00000000                M spsr4	=	op4
0001A282                            	spSustainLv	$00, $00, $00, $00
0001A282 =00000000                M spsl1	=	op1
0001A282 =00000000                M spsl2	=	op2
0001A282 =00000000                M spsl3	=	op3
0001A282 =00000000                M spsl4	=	op4
0001A282                            	spDecayRt	$00, $00, $07, $00
0001A282 =00000000                M spdr1	=	op1
0001A282 =00000000                M spdr2	=	op2
0001A282 =00000007                M spdr3	=	op3
0001A282 =00000000                M spdr4	=	op4
0001A282                            	spReleaseRt	$00, $00, $00, $00
0001A282 =00000000                M sprr1	=	op1
0001A282 =00000000                M sprr2	=	op2
0001A282 =00000000                M sprr3	=	op3
0001A282 =00000000                M sprr4	=	op4
0001A282                            	spSSGEG		$00, $00, $00, $00
0001A282 =00000000                M spss1	=	op1
0001A282 =00000000                M spss2	=	op2
0001A282 =00000000                M spss3	=	op3
0001A282 =00000000                M spss4	=	op4
0001A282                            	spTotalLv	$60, $60, $60, $60
0001A282 =00000060                M sptl1	=	op1
0001A282 =00000060                M sptl2	=	op2
0001A282 =00000060                M sptl3	=	op3
0001A282 =00000060                M sptl4	=	op4
0001A282 30                       M 	dc.b	(spfe<<3)+spal
0001A283 =00000080                M sptlmask4	set	$80
0001A283 =00000000                M sptlmask2	set	((spal>=5)<<7)
0001A283 =00000000                M sptlmask3	set	((spal>=4)<<7)
0001A283 =00000000                M sptlmask1	set	((spal=7)<<7)
0001A283 7030 3070                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001A287 1010 1010                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001A28B 0000 0000                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001A28F 0007 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001A293 0000 0000                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001A297 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001A29B 6060 60E0                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001A29F 4E41 54                  M 	dc.b	'NAT'
0001A2A2                            
0001A2A2                            ChoosePath_FM1:
0001A2A2                            	sVoice		$0A
0001A2A2 E80A                     M 	dc.b	$e8,$0a
0001A2A4 8006                       	dc.b nRst, $06
0001A2A6                            	ssMod68k	$01, $01, $E5, $FF
0001A2A6 F001 01E5 FF             M 	dc.b	$f0,$01,$01,$e5,$ff
0001A2AB                            	saVol		$03
0001A2AB ED03                     M 	dc.b	$ed,$03
0001A2AD                            	sVoice		$04
0001A2AD E804                     M 	dc.b	$e8,$04
0001A2AF A50C                       	dc.b nC3, $0C
0001A2B1                            	ssMod68k	$27, $01, $10, $03
0001A2B1 F027 0110 03             M 	dc.b	$f0,$27,$01,$10,$03
0001A2B6 A124 8004 A1A1 A324        	dc.b nAb2, $24, nRst, $04, nAb2, nAb2, nBb2, $24
0001A2BE 8004 A3A3                  	dc.b nRst, $04, nBb2, nBb2
0001A2C2                            
0001A2C2                            ChoosePath_Loop1:
0001A2C2 9980 999E A0A5             	dc.b nC2, nRst, nC2, nF2, nG2, nC3
0001A2C8                            	sLoop		$00, $03, ChoosePath_Loop1
0001A2C8 F700                     M 	dc.b	$f7,$00
0001A2CA FFF7                     M 	dc.w	choosepath_loop1-*-1
0001A2CC 03                       M 	dc.b	$03
0001A2CD 99A5 9EA0 A59E A124        	dc.b nC2, nC3, nF2, nG2, nC3, nF2, nAb2, $24
0001A2D5 8004 A1A1 A324 8004        	dc.b nRst, $04, nAb2, nAb2, nBb2, $24, nRst, $04
0001A2DD A3A3                       	dc.b nBb2, nBb2
0001A2DF                            	;sModEnv		$01
0001A2DF                            
0001A2DF                            ChoosePath_Jump1:
0001A2DF 9904 8099 809E A099        	dc.b nC2, $04, nRst, nC2, nRst, nF2, nG2, nC2
0001A2E7 8099 809E A099 8099        	dc.b nRst, nC2, nRst, nF2, nG2, nC2, nRst, nC2
0001A2EF 809E A0AA A9A5 9E9D        	dc.b nRst, nF2, nG2, nF3, nE3, nC3, nF2, nE2
0001A2F7 99                         	dc.b nC2
0001A2F8                            
0001A2F8                            ChoosePath_Loop2:
0001A2F8 9980 9980 9EA0             	dc.b nC2, nRst, nC2, nRst, nF2, nG2
0001A2FE                            	sLoop		$00, $06, ChoosePath_Loop2
0001A2FE F700                     M 	dc.b	$f7,$00
0001A300 FFF7                     M 	dc.w	choosepath_loop2-*-1
0001A302 06                       M 	dc.b	$06
0001A303 9980 9980 9EA0 A59E        	dc.b nC2, nRst, nC2, nRst, nF2, nG2, nC3, nF2
0001A30B A0A5 9D9E                  	dc.b nG2, nC3, nE2, nF2
0001A30F                            
0001A30F                            ChoosePath_Loop3:
0001A30F 9980 9980 9EA0             	dc.b nC2, nRst, nC2, nRst, nF2, nG2
0001A315                            	sLoop		$00, $03, ChoosePath_Loop3
0001A315 F700                     M 	dc.b	$f7,$00
0001A317 FFF7                     M 	dc.w	choosepath_loop3-*-1
0001A319 03                       M 	dc.b	$03
0001A31A 9908 A504 809E A0          	dc.b nC2, $08, nC3, $04, nRst, nF2, nG2
0001A321                            	sJump		ChoosePath_Jump1
0001A321 F6                       M 	dc.b	$f6
0001A322 FFBC                     M 	dc.w	choosepath_jump1-*-1
0001A324                            
0001A324                            ChoosePath_FM2:
0001A324                            	sVoice		$0A
0001A324 E80A                     M 	dc.b	$e8,$0a
0001A326 8006                       	dc.b nRst, $06
0001A328                            	sPan		spRight, $00
0001A328 E040                     M 	dc.b	$e0,spright|$00
0001A32A                            	ssMod68k	$01, $01, $E5, $FF
0001A32A F001 01E5 FF             M 	dc.b	$f0,$01,$01,$e5,$ff
0001A32F                            	ssDetune	$02
0001A32F E102                     M 	dc.b	$e1,$02
0001A331                            	sVoice		$08
0001A331 E808                     M 	dc.b	$e8,$08
0001A333 8003                       	dc.b nRst, $03
0001A335                            	saVol		$04
0001A335 ED04                     M 	dc.b	$ed,$04
0001A337 9909                       	dc.b nC2, $09
0001A339                            	saVol		$FC
0001A339 EDFC                     M 	dc.b	$ed,$fc
0001A33B                            	;sPanAni		$01, $02, $01, $03, $02
0001A33B                            	ssMod68k	$27, $01, $10, $03
0001A33B F027 0110 03             M 	dc.b	$f0,$27,$01,$10,$03
0001A340                            	ssDetune	$00
0001A340 E100                     M 	dc.b	$e1,$00
0001A342                            	sVoice		$08
0001A342 E808                     M 	dc.b	$e8,$08
0001A344                            	sCall		ChoosePath_Call1
0001A344 F8                       M 	dc.b	$f8
0001A345 0000                     M 	dc.w	choosepath_call1-*-1
0001A347                            	sVoice		$05
0001A347 E805                     M 	dc.b	$e8,$05
0001A349 B604 B8BD C2B8 C110        	dc.b nF4, $04, nG4, nC5, nF5, nG4, nE5, $10
0001A351 C104 BDB8 BFBB B6BD        	dc.b nE5, $04, nC5, nG4, nD5, nBb4, nF4, nC5
0001A359 10B5 04B6 B8BD C4          	dc.b $10, nE4, $04, nF4, nG4, nC5, nG5
0001A360                            	sVoice		$08
0001A360 E808                     M 	dc.b	$e8,$08
0001A362                            	sCall		ChoosePath_Call1
0001A362 F8                       M 	dc.b	$f8
0001A363 0000                     M 	dc.w	choosepath_call1-*-1
0001A365                            	;sPanAni		$03, $02, $01, $03, $02
0001A365                            	sVoice		$05
0001A365 E805                     M 	dc.b	$e8,$05
0001A367                            
0001A367                            ChoosePath_Jump2:
0001A367 C150 C208 C4C9 50C7        	dc.b nE5, $50, nF5, $08, nG5, nC6, $50, nBb5
0001A36F 08C6 0CBF 04C6 C448        	dc.b $08, nA5, $0C, nD5, $04, nA5, nG5, $48
0001A377 8004 C2C1 08BD 04C1        	dc.b nRst, $04, nF5, nE5, $08, nC5, $04, nE5
0001A37F BF1C BB04 BFC6 20C4        	dc.b nD5, $1C, nBb4, $04, nD5, nA5, $20, nG5
0001A387 08C2                       	dc.b $08, nF5
0001A389                            	sJump		ChoosePath_Jump2
0001A389 F6                       M 	dc.b	$f6
0001A38A FFDC                     M 	dc.w	choosepath_jump2-*-1
0001A38C                            
0001A38C                            ChoosePath_Call1:
0001A38C AA02 ACB1 B6B8 BDB6        	dc.b nF3, $02, nG3, nC4, nF4, nG4, nC5, nF4
0001A394 C4C9 CED0 D5D0 CEC9        	dc.b nG5, nC6, nF6, nG6, nC7, nG6, nF6, nC6
0001A39C C4C2 BDB8 B8B1 ACAA        	dc.b nG5, nF5, nC5, nG4, nG4, nC4, nG3, nF3
0001A3A4 A5                         	dc.b nC3
0001A3A5                            	sLoop		$00, $02, ChoosePath_Call1
0001A3A5 F700                     M 	dc.b	$f7,$00
0001A3A7 FFE4                     M 	dc.w	choosepath_call1-*-1
0001A3A9 02                       M 	dc.b	$02
0001A3AA                            	sRet
0001A3AA F9                       M 	dc.b	$f9
0001A3AB                            
0001A3AB                            ChoosePath_FM3:
0001A3AB                            	sVoice		$0A
0001A3AB E80A                     M 	dc.b	$e8,$0a
0001A3AD 8006                       	dc.b nRst, $06
0001A3AF                            	sPan		spCenter, $00
0001A3AF E0C0                     M 	dc.b	$e0,spcenter|$00
0001A3B1                            	ssMod68k	$01, $01, $E5, $FF
0001A3B1 F001 01E5 FF             M 	dc.b	$f0,$01,$01,$e5,$ff
0001A3B6                            	ssDetune	$02
0001A3B6 E102                     M 	dc.b	$e1,$02
0001A3B8                            	sVoice		$08
0001A3B8 E808                     M 	dc.b	$e8,$08
0001A3BA                            	saVol		$02
0001A3BA ED02                     M 	dc.b	$ed,$02
0001A3BC 990C                       	dc.b nC2, $0C
0001A3BE                            	saVol		$FE
0001A3BE EDFE                     M 	dc.b	$ed,$fe
0001A3C0                            	ssMod68k	$27, $01, $10, $03
0001A3C0 F027 0110 03             M 	dc.b	$f0,$27,$01,$10,$03
0001A3C5 8001                       	dc.b nRst, $01
0001A3C7                            	sVoice		$02
0001A3C7 E802                     M 	dc.b	$e8,$02
0001A3C9                            	;sPanAni		$01, $03, $02, $03, $03
0001A3C9                            	saTranspose	$E8
0001A3C9 E4E8                     M 	dc.b	$e4,$e8
0001A3CB                            
0001A3CB                            ChoosePath_Loop4:
0001A3CB D504 80D5 80D5 D5          	dc.b nC7, $04, nRst, nC7, nRst, nC7, nC7
0001A3D2                            	sLoop		$00, $04, ChoosePath_Loop4
0001A3D2 F700                     M 	dc.b	$f7,$00
0001A3D4 FFF6                     M 	dc.w	choosepath_loop4-*-1
0001A3D6 04                       M 	dc.b	$04
0001A3D7 C9C4 C9C7 18C7 04C2        	dc.b nC6, nG5, nC6, nBb5, $18, nBb5, $04, nF5
0001A3DF C7C6 C2C6 C40C 8004        	dc.b nBb5, nA5, nF5, nA5, nG5, $0C, nRst, $04
0001A3E7 C1C2 C4C9 D0               	dc.b nE5, nF5, nG5, nC6, nG6
0001A3EC                            
0001A3EC                            ChoosePath_Loop5:
0001A3EC D504 80D5 80D5 D5          	dc.b nC7, $04, nRst, nC7, nRst, nC7, nC7
0001A3F3                            	sLoop		$00, $04, ChoosePath_Loop5
0001A3F3 F700                     M 	dc.b	$f7,$00
0001A3F5 FFF6                     M 	dc.w	choosepath_loop5-*-1
0001A3F7 04                       M 	dc.b	$04
0001A3F8                            
0001A3F8                            ChoosePath_Jump3:
0001A3F8 C154 C104 B8C1 BFBB        	dc.b nE5, $54, nE5, $04, nG4, nE5, nD5, nBb4
0001A400 BFC6 4CC4 04C2 C2BF        	dc.b nD5, nA5, $4C, nG5, $04, nF5, nF5, nD5
0001A408 C2C1 48C1 04BD B8BB        	dc.b nF5, nE5, $48, nE5, $04, nC5, nG4, nBb4
0001A410 30BF 18C6 10C4 04C2        	dc.b $30, nD5, $18, nA5, $10, nG5, $04, nF5
0001A418                            	sJump		ChoosePath_Jump3
0001A418 F6                       M 	dc.b	$f6
0001A419 FFDE                     M 	dc.w	choosepath_jump3-*-1
0001A41B                            
0001A41B                            ChoosePath_FM4:
0001A41B                            	sVoice		$0A
0001A41B E80A                     M 	dc.b	$e8,$0a
0001A41D 8006 800C                  	dc.b nRst, $06, nRst, $0C
0001A421                            	ssMod68k	$27, $01, $10, $03
0001A421 F027 0110 03             M 	dc.b	$f0,$27,$01,$10,$03
0001A426 8002                       	dc.b nRst, $02
0001A428                            	ssDetune	$02
0001A428 E102                     M 	dc.b	$e1,$02
0001A42A                            	sVoice		$03
0001A42A E803                     M 	dc.b	$e8,$03
0001A42C                            	;sPanAni		$03, $03, $03, $03, $02
0001A42C                            
0001A42C                            ChoosePath_Loop6:
0001A42C D004 80D0 80D0 D0          	dc.b nG6, $04, nRst, nG6, nRst, nG6, nG6
0001A433                            	sLoop		$00, $04, ChoosePath_Loop6
0001A433 F700                     M 	dc.b	$f7,$00
0001A435 FFF6                     M 	dc.w	choosepath_loop6-*-1
0001A437 04                       M 	dc.b	$04
0001A438 C4BF C4C2 18C2 04BD        	dc.b nG5, nD5, nG5, nF5, $18, nF5, $04, nC5
0001A440 C2C2 BDC2 C10C 8004        	dc.b nF5, nF5, nC5, nF5, nE5, $0C, nRst, $04
0001A448 BDBF C1C4 CD               	dc.b nC5, nD5, nE5, nG5, nE6
0001A44D                            
0001A44D                            ChoosePath_Loop7:
0001A44D D004 80D0 80D0 D0          	dc.b nG6, $04, nRst, nG6, nRst, nG6, nG6
0001A454                            	sLoop		$00, $04, ChoosePath_Loop7
0001A454 F700                     M 	dc.b	$f7,$00
0001A456 FFF6                     M 	dc.w	choosepath_loop7-*-1
0001A458 04                       M 	dc.b	$04
0001A459                            	sVoice		$07
0001A459 E807                     M 	dc.b	$e8,$07
0001A45B                            
0001A45B                            ChoosePath_Jump4:
0001A45B B854 B804 B5B8 BBB6        	dc.b nG4, $54, nG4, $04, nE4, nG4, nBb4, nF4
0001A463 BBC2 48C2 04C1 BFBF        	dc.b nBb4, nF5, $48, nF5, $04, nE5, nD5, nD5
0001A46B BBBF B848 BD04 B8B5        	dc.b nBb4, nD5, nG4, $48, nC5, $04, nG4, nE4
0001A473 B630 BB18 C2               	dc.b nF4, $30, nBb4, $18, nF5
0001A478                            	sJump		ChoosePath_Jump4
0001A478 F6                       M 	dc.b	$f6
0001A479 FFE1                     M 	dc.w	choosepath_jump4-*-1
0001A47B                            
0001A47B                            ChoosePath_FM5:
0001A47B                            	sVoice		$0A
0001A47B E80A                     M 	dc.b	$e8,$0a
0001A47D 8006                       	dc.b nRst, $06
0001A47F                            	ssMod68k	$01, $01, $E5, $FF
0001A47F F001 01E5 FF             M 	dc.b	$f0,$01,$01,$e5,$ff
0001A484                            	sPan		spLeft, $00
0001A484 E080                     M 	dc.b	$e0,spleft|$00
0001A486                            	ssDetune	$01
0001A486 E101                     M 	dc.b	$e1,$01
0001A488                            	sVoice		$04
0001A488 E804                     M 	dc.b	$e8,$04
0001A48A 8003 A509                  	dc.b nRst, $03, nC3, $09
0001A48E                            	ssMod68k	$27, $01, $10, $03
0001A48E F027 0110 03             M 	dc.b	$f0,$27,$01,$10,$03
0001A493                            	sVoice		$02
0001A493 E802                     M 	dc.b	$e8,$02
0001A495                            	saTranspose	$E8
0001A495 E4E8                     M 	dc.b	$e4,$e8
0001A497                            	sPan		spCenter, $00
0001A497 E0C0                     M 	dc.b	$e0,spcenter|$00
0001A499                            
0001A499                            ChoosePath_Loop8:
0001A499 CB04 80CB 80CB CB          	dc.b nD6, $04, nRst, nD6, nRst, nD6, nD6
0001A4A0                            	sLoop		$00, $04, ChoosePath_Loop8
0001A4A0 F700                     M 	dc.b	$f7,$00
0001A4A2 FFF6                     M 	dc.w	choosepath_loop8-*-1
0001A4A4 04                       M 	dc.b	$04
0001A4A5 C4BF C4C2 18C2 04BD        	dc.b nG5, nD5, nG5, nF5, $18, nF5, $04, nC5
0001A4AD C2C2 BDC2 C10C 8004        	dc.b nF5, nF5, nC5, nF5, nE5, $0C, nRst, $04
0001A4B5 BDBF C1C4 CD               	dc.b nC5, nD5, nE5, nG5, nE6
0001A4BA                            
0001A4BA                            ChoosePath_Loop9:
0001A4BA CB04 80CB 80CB CB          	dc.b nD6, $04, nRst, nD6, nRst, nD6, nD6
0001A4C1                            	sLoop		$00, $04, ChoosePath_Loop9
0001A4C1 F700                     M 	dc.b	$f7,$00
0001A4C3 FFF6                     M 	dc.w	choosepath_loop9-*-1
0001A4C5 04                       M 	dc.b	$04
0001A4C6                            	;sModEnv		$01
0001A4C6                            	;sPanAni		$02, $03, $00, $03, $02
0001A4C6                            
0001A4C6                            ChoosePath_Jump5:
0001A4C6 D504 80D5 80D5 D5D5        	dc.b nC7, $04, nRst, nC7, nRst, nC7, nC7, nC7
0001A4CE 80D5 80D5 D5D5 80D5        	dc.b nRst, nC7, nRst, nC7, nC7, nC7, nRst, nC7
0001A4D6 80D5 D5D5 D5D5 D5D5        	dc.b nRst, nC7, nC7, nC7, nC7, nC7, nC7, nC7
0001A4DE D5                         	dc.b nC7
0001A4DF                            	sJump		ChoosePath_Jump5
0001A4DF F6                       M 	dc.b	$f6
0001A4E0 FFE5                     M 	dc.w	choosepath_jump5-*-1
0001A4E2                            
0001A4E2                            ChoosePath_DAC1:
0001A4E2                            	sPan		spNone		; Allow DAC2 to control panning
0001A4E2 E000                     M 	dc.b	$e0,spnone
0001A4E4                            	sStop
0001A4E4 F5                       M 	dc.b	$f5
0001A4E5                            
0001A4E5 =00000081                  d81 =	dKick
0001A4E5 =00000083                  d82 =	dSnare
0001A4E5 =00000084                  d83 =	dClap
0001A4E5 =00000086                  d89 =	dTom
0001A4E5 =00000087                  d8A =	dLowTom
0001A4E5 =00000088                  d8B =	dFloorTom
0001A4E5                            
0001A4E5                            ChoosePath_DAC2:
0001A4E5 8006                       	dc.b nRst, $06
0001A4E7                            	sPan		spCenter, $00
0001A4E7 E0C0                     M 	dc.b	$e0,spcenter|$00
0001A4E9                            	saDetune	$60
0001A4E9 E260                     M 	dc.b	$e2,$60
0001A4EB 8902 89                    	dc.b dOrchHit, $02, dOrchHit
0001A4EE                            	saDetune	-$60
0001A4EE E2A0                     M 	dc.b	$e2,-$60
0001A4F0                            	sPan		spRight, $00
0001A4F0 E040                     M 	dc.b	$e0,spright|$00
0001A4F2 86                         	dc.b d89
0001A4F3                            	sPan		spCenter, $00
0001A4F3 E0C0                     M 	dc.b	$e0,spcenter|$00
0001A4F5 87                         	dc.b d8A
0001A4F6                            	sPan		spLeft, $00
0001A4F6 E080                     M 	dc.b	$e0,spleft|$00
0001A4F8 88                         	dc.b d8B
0001A4F9                            	sPan		spCenter, $00
0001A4F9 E0C0                     M 	dc.b	$e0,spcenter|$00
0001A4FB 8381 0480 8381 8383        	dc.b d82, d81, $04, nRst, d82, d81, d82, d82
0001A503 8308 8304 8183 8381        	dc.b d82, $08, d82, $04, d81, d82, d82, d81
0001A50B 8083 8783 8383 8083        	dc.b nRst, d82, d8A, d82, d82, d82, nRst, d82
0001A513 8883 8381 8081 8380        	dc.b d8B, d82, d82, d81, nRst, d81, d82, nRst
0001A51B 8180 8180 8380 8180        	dc.b d81, nRst, d81, nRst, d82, nRst, d81, nRst
0001A523 8187 8380 8183 8188        	dc.b d81, d8A, d82, nRst, d81, d82, d81, d8B
0001A52B 8687 8881 8083 8183        	dc.b d89, d8A, d8B, d81, nRst, d82, d81, d82
0001A533 8383 8083 8183 8381        	dc.b d82, d82, nRst, d82, d81, d82, d82, d81
0001A53B 8084 8884 8484 8084        	dc.b nRst, d83, d8B, d83, d83, d83, nRst, d83
0001A543 8602 8487 8788 88          	dc.b d89, $02, d83, d8A, d8A, d8B, d8B
0001A54A                            
0001A54A                            ChoosePath_Jump8:
0001A54A 8104 8081 8381 8081        	dc.b d81, $04, nRst, d81, d82, d81, nRst, d81
0001A552 8081 8381 8081 8081        	dc.b nRst, d81, d82, d81, nRst, d81, nRst, d81
0001A55A 8381 8081 8383 8381        	dc.b d82, d81, nRst, d81, d82, d82, d82, d81
0001A562 8881 8081 8381 8081        	dc.b d8B, d81, nRst, d81, d82, d81, nRst, d81
0001A56A 8081 8381 8081 8081        	dc.b nRst, d81, d82, d81, nRst, d81, nRst, d81
0001A572 8381 8083 8383 8687        	dc.b d82, d81, nRst, d82, d82, d82, d89, d8A
0001A57A 8881 8081 8381 8081        	dc.b d8B, d81, nRst, d81, d82, d81, nRst, d81
0001A582 8081 8381 8081 8081        	dc.b nRst, d81, d82, d81, nRst, d81, nRst, d81
0001A58A 8381 8081 8081 8381        	dc.b d82, d81, nRst, d81, nRst, d81, d82, d81
0001A592 8081 8081 8381 8081        	dc.b nRst, d81, nRst, d81, d82, d81, nRst, d81
0001A59A 8081 8381 8083 8383        	dc.b nRst, d81, d82, d81, nRst, d82, d82, d82
0001A5A2 8388 8381 8387 8602        	dc.b d82, d8B, d82, d81, d82, d8A, d89, $02
0001A5AA 8687 8788 83               	dc.b d89, d8A, d8A, d8B, d82
0001A5AF                            	sJump		ChoosePath_Jump8
0001A5AF F6                       M 	dc.b	$f6
0001A5B0 FF99                     M 	dc.w	choosepath_jump8-*-1
0001A5B2                            
0001A5B2                            ChoosePath_PSG1:
0001A5B2 8006 800C                  	dc.b nRst, $06, nRst, $0C
0001A5B6                            	ssMod68k	$02, $01, $02, $03
0001A5B6 F002 0102 03             M 	dc.b	$f0,$02,$01,$02,$03
0001A5BB                            
0001A5BB                            ChoosePath_Jump7:
0001A5BB                            	sCall		ChoosePath_Call2
0001A5BB F8                       M 	dc.b	$f8
0001A5BC 0000                     M 	dc.w	choosepath_call2-*-1
0001A5BE B604 B8BD C2B8 C110        	dc.b nF4, $04, nG4, nC5, nF5, nG4, nE5, $10
0001A5C6 C104 BDB8 BFBB B6BD        	dc.b nE5, $04, nC5, nG4, nD5, nBb4, nF4, nC5
0001A5CE 10B5 04B6 B8BD C4          	dc.b $10, nE4, $04, nF4, nG4, nC5, nG5
0001A5D5                            	sCall		ChoosePath_Call2
0001A5D5 F8                       M 	dc.b	$f8
0001A5D6 0000                     M 	dc.w	choosepath_call2-*-1
0001A5D8                            
0001A5D8                            ChoosePath_Jump6:
0001A5D8 BD50 BF08 C1C6 50C4        	dc.b nC5, $50, nD5, $08, nE5, nA5, $50, nG5
0001A5E0 08C2 0CBB 04C2 C148        	dc.b $08, nF5, $0C, nBb4, $04, nF5, nE5, $48
0001A5E8 8004 BFBD 08B8 04BD        	dc.b nRst, $04, nD5, nC5, $08, nG4, $04, nC5
0001A5F0 BB1C B604 BBC2 20C1        	dc.b nBb4, $1C, nF4, $04, nBb4, nF5, $20, nE5
0001A5F8 08BF                       	dc.b $08, nD5
0001A5FA                            	sJump		ChoosePath_Jump6
0001A5FA F6                       M 	dc.b	$f6
0001A5FB FFDC                     M 	dc.w	choosepath_jump6-*-1
0001A5FD                            
0001A5FD                            ChoosePath_Call2:
0001A5FD                            ;	saTranspose	$F4
0001A5FD                            
0001A5FD                            ChoosePath_Loop10:
0001A5FD AE02 B0B1 B6B8 BDB6        	dc.b nA3, $02, nB3, nC4, nF4, nG4, nC5, nF4
0001A605 C4C9 CED0 D5D0 CEC9        	dc.b nG5, nC6, nF6, nG6, nC7, nG6, nF6, nC6
0001A60D C4C2 BDB8 B8B1 B0AE        	dc.b nG5, nF5, nC5, nG4, nG4, nC4, nB3, nA3
0001A615 AD                         	dc.b nAb3
0001A616                            	sLoop		$00, $02, ChoosePath_Loop10
0001A616 F700                     M 	dc.b	$f7,$00
0001A618 FFE4                     M 	dc.w	choosepath_loop10-*-1
0001A61A 02                       M 	dc.b	$02
0001A61B                            ;	saTranspose	$0C
0001A61B                            	sRet
0001A61B F9                       M 	dc.b	$f9
0001A61C                            
0001A61C                            ChoosePath_PSG2:
0001A61C 8006                       	dc.b nRst, $06
0001A61E                            	ssMod68k	$02, $01, $02, $03
0001A61E F002 0102 03             M 	dc.b	$f0,$02,$01,$02,$03
0001A623 8001                       	dc.b nRst, $01
0001A625                            	ssDetune	$02
0001A625 E102                     M 	dc.b	$e1,$02
0001A627 800C                       	dc.b nRst, $0C
0001A629                            	sJump		ChoosePath_Jump7
0001A629 F6                       M 	dc.b	$f6
0001A62A FF90                     M 	dc.w	choosepath_jump7-*-1
0001A62C                            
0001A62C                            ChoosePath_PSG3:
0001A62C                            	sNoisePSG	$E7
0001A62C F3E7                     M 	dc.b	$f3,$e7
0001A62E 8006 800C                  	dc.b nRst, $06, nRst, $0C
0001A632                            
0001A632                            ChoosePath_Loop11:
0001A632 C604 C6C6 C6C6 C6C6        	dc.b nA5, $04, nA5, nA5, nA5, nA5, nA5, nA5
0001A63A C6C6 C602 C6C6 C6C6        	dc.b nA5, nA5, nA5, $02, nA5, nA5, nA5, nA5
0001A642 C6                         	dc.b nA5
0001A643                            	sLoop		$00, $02, ChoosePath_Loop11
0001A643 F700                     M 	dc.b	$f7,$00
0001A645 FFEC                     M 	dc.w	choosepath_loop11-*-1
0001A647 02                       M 	dc.b	$02
0001A648                            
0001A648                            ChoosePath_Loop12:
0001A648 C604 C6C6                  	dc.b nA5, $04, nA5, nA5
0001A64C                            	sLoop		$00, $08, ChoosePath_Loop12
0001A64C F700                     M 	dc.b	$f7,$00
0001A64E FFF9                     M 	dc.w	choosepath_loop12-*-1
0001A650 08                       M 	dc.b	$08
0001A651                            
0001A651                            ChoosePath_Loop13:
0001A651 C604 C6C6 C6C6 C6C6        	dc.b nA5, $04, nA5, nA5, nA5, nA5, nA5, nA5
0001A659 C6C6 C602 C6C6 C6C6        	dc.b nA5, nA5, nA5, $02, nA5, nA5, nA5, nA5
0001A661 C6                         	dc.b nA5
0001A662                            	sLoop		$00, $02, ChoosePath_Loop13
0001A662 F700                     M 	dc.b	$f7,$00
0001A664 FFEC                     M 	dc.w	choosepath_loop13-*-1
0001A666 02                       M 	dc.b	$02
0001A667                            
0001A667                            ChoosePath_Loop14:
0001A667 C604 C6C6                  	dc.b nA5, $04, nA5, nA5
0001A66B                            	sLoop		$00, $06, ChoosePath_Loop14
0001A66B F700                     M 	dc.b	$f7,$00
0001A66D FFF9                     M 	dc.w	choosepath_loop14-*-1
0001A66F 06                       M 	dc.b	$06
0001A670 C602 C6C6 C6C6 C6C6        	dc.b nA5, $02, nA5, nA5, nA5, nA5, nA5, nA5
0001A678 04C6 C6                    	dc.b $04, nA5, nA5
0001A67B                            	sJump		ChoosePath_Loop14
0001A67B F6                       M 	dc.b	$f6
0001A67C FFEA                     M 	dc.w	choosepath_loop14-*-1
0001A67E =00000014                M a	=	a+1
0001A67E                          M 	even
0001A67E                          M b	equs	dmus14
0001A67E                          M _mus_shop
0001A67E                          M dmusa14	include	"driver/music/shop.asm"
0001A67E                            Shop_Header:
0001A67E                            	sHeaderInit						; Z80 offset is $8921
0001A67E =0001A67E                M spointzero	=	*
0001A67E =00000000                M spatnum	=	0
0001A67E                            	sHeaderTempo	$01, $80
0001A67E 0080                     M 	dc.b	$01-1,$80
0001A680                            	sHeaderCh	$05, $03
0001A680 04                       M 	dc.b	$05-1
0001A681 02                       M 	dc.b	$03-1
0001A682                            	sHeaderDAC	Shop_DAC1, $16
0001A682 0000                     M 	dc.w	shop_dac1-spointzero
0001A684 16                       M 	dc.b	$16
0001A685 00                       M 	dc.b	$00
0001A686                            	sHeaderDAC	Shop_DAC2, $16
0001A686 0000                     M 	dc.w	shop_dac2-spointzero
0001A688 16                       M 	dc.b	$16
0001A689 00                       M 	dc.b	$00
0001A68A                            	sHeaderFM	Shop_FM1, $0C, $0C
0001A68A 0000                     M 	dc.w	shop_fm1-spointzero
0001A68C 0C0C                     M 	dc.b	$0c,$0c
0001A68E                            	sHeaderFM	Shop_FM2, $00, $0B
0001A68E 0000                     M 	dc.w	shop_fm2-spointzero
0001A690 000B                     M 	dc.b	$00,$0b
0001A692                            	sHeaderFM	Shop_FM3, $0C, $10
0001A692 0000                     M 	dc.w	shop_fm3-spointzero
0001A694 0C10                     M 	dc.b	$0c,$10
0001A696                            	sHeaderFM	Shop_FM4, $0C, $0F
0001A696 0000                     M 	dc.w	shop_fm4-spointzero
0001A698 0C0F                     M 	dc.b	$0c,$0f
0001A69A                            	sHeaderFM	Shop_FM5, $0C, $0F
0001A69A 0000                     M 	dc.w	shop_fm5-spointzero
0001A69C 0C0F                     M 	dc.b	$0c,$0f
0001A69E                            	sHeaderPSG	Shop_PSG1, $F4, $03, $00, vPhan3_05
0001A69E 0000                     M 	dc.w	shop_psg1-spointzero
0001A6A0 F403 000B                M 	dc.b	$f4,$03,$00,vphan3_05
0001A6A4                            	sHeaderPSG	Shop_PSG2, $00, $06, $00, vPhan3_0A
0001A6A4 0000                     M 	dc.w	shop_psg2-spointzero
0001A6A6 0006 000C                M 	dc.b	$00,$06,$00,vphan3_0a
0001A6AA                            	sHeaderPSG	Shop_PSG2, $F4, $04, $00, vPhan3_05
0001A6AA 0000                     M 	dc.w	shop_psg2-spointzero
0001A6AC F404 000B                M 	dc.b	$f4,$04,$00,vphan3_05
0001A6B0                            
0001A6B0                            	; Patch $00
0001A6B0                            	; $24
0001A6B0                            	; $51, $51, $31, $21,	$1F, $1C, $1F, $1F
0001A6B0                            	; $0C, $0F, $06, $0D,	$08, $09, $07, $0C
0001A6B0                            	; $06, $36, $06, $36,	$12, $80, $15, $80
0001A6B0                            	spAlgorithm	$04
0001A6B0 =00000001                M spatnum	=	spatnum+1
0001A6B0 =00000004                M spal	=	val
0001A6B0                            	spFeedback	$04
0001A6B0 =00000004                M spfe	=	val
0001A6B0                            	spDetune	$05, $03, $05, $02
0001A6B0 =00000005                M spde1	=	op1
0001A6B0 =00000003                M spde2	=	op2
0001A6B0 =00000005                M spde3	=	op3
0001A6B0 =00000002                M spde4	=	op4
0001A6B0                            	spMultiple	$01, $01, $01, $01
0001A6B0 =00000001                M spmu1	=	op1
0001A6B0 =00000001                M spmu2	=	op2
0001A6B0 =00000001                M spmu3	=	op3
0001A6B0 =00000001                M spmu4	=	op4
0001A6B0                            	spRateScale	$00, $00, $00, $00
0001A6B0 =00000000                M sprs1	=	op1
0001A6B0 =00000000                M sprs2	=	op2
0001A6B0 =00000000                M sprs3	=	op3
0001A6B0 =00000000                M sprs4	=	op4
0001A6B0                            	spAttackRt	$1F, $1F, $1C, $1F
0001A6B0 =0000001F                M spar1	=	op1
0001A6B0 =0000001F                M spar2	=	op2
0001A6B0 =0000001C                M spar3	=	op3
0001A6B0 =0000001F                M spar4	=	op4
0001A6B0                            	spAmpMod	$00, $00, $00, $00
0001A6B0 =00000000                M spam1	=	op1
0001A6B0 =00000000                M spam2	=	op2
0001A6B0 =00000000                M spam3	=	op3
0001A6B0 =00000000                M spam4	=	op4
0001A6B0                            	spSustainRt	$0C, $06, $0F, $0D
0001A6B0 =0000000C                M spsr1	=	op1
0001A6B0 =00000006                M spsr2	=	op2
0001A6B0 =0000000F                M spsr3	=	op3
0001A6B0 =0000000D                M spsr4	=	op4
0001A6B0                            	spSustainLv	$00, $00, $03, $03
0001A6B0 =00000000                M spsl1	=	op1
0001A6B0 =00000000                M spsl2	=	op2
0001A6B0 =00000003                M spsl3	=	op3
0001A6B0 =00000003                M spsl4	=	op4
0001A6B0                            	spDecayRt	$08, $07, $09, $0C
0001A6B0 =00000008                M spdr1	=	op1
0001A6B0 =00000007                M spdr2	=	op2
0001A6B0 =00000009                M spdr3	=	op3
0001A6B0 =0000000C                M spdr4	=	op4
0001A6B0                            	spReleaseRt	$06, $06, $06, $06
0001A6B0 =00000006                M sprr1	=	op1
0001A6B0 =00000006                M sprr2	=	op2
0001A6B0 =00000006                M sprr3	=	op3
0001A6B0 =00000006                M sprr4	=	op4
0001A6B0                            	spSSGEG		$00, $00, $00, $00
0001A6B0 =00000000                M spss1	=	op1
0001A6B0 =00000000                M spss2	=	op2
0001A6B0 =00000000                M spss3	=	op3
0001A6B0 =00000000                M spss4	=	op4
0001A6B0                            	spTotalLv	$12, $15, $00, $00
0001A6B0 =00000012                M sptl1	=	op1
0001A6B0 =00000015                M sptl2	=	op2
0001A6B0 =00000000                M sptl3	=	op3
0001A6B0 =00000000                M sptl4	=	op4
0001A6B0 24                       M 	dc.b	(spfe<<3)+spal
0001A6B1 =00000080                M sptlmask4	set	$80
0001A6B1 =00000000                M sptlmask2	set	((spal>=5)<<7)
0001A6B1 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
0001A6B1 =00000000                M sptlmask1	set	((spal=7)<<7)
0001A6B1 5151 3121                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001A6B5 1F1C 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001A6B9 0C0F 060D                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001A6BD 0809 070C                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001A6C1 0636 0636                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001A6C5 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001A6C9 1280 1580                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001A6CD 4E41 54                  M 	dc.b	'NAT'
0001A6D0                            
0001A6D0                            	; Patch $01
0001A6D0                            	; $2C
0001A6D0                            	; $51, $51, $31, $21,	$1F, $1C, $1F, $1F
0001A6D0                            	; $0C, $0F, $06, $0D,	$08, $09, $07, $0C
0001A6D0                            	; $06, $36, $06, $36,	$12, $80, $15, $80
0001A6D0                            	spAlgorithm	$04
0001A6D0 =00000002                M spatnum	=	spatnum+1
0001A6D0 =00000004                M spal	=	val
0001A6D0                            	spFeedback	$05
0001A6D0 =00000005                M spfe	=	val
0001A6D0                            	spDetune	$05, $03, $05, $02
0001A6D0 =00000005                M spde1	=	op1
0001A6D0 =00000003                M spde2	=	op2
0001A6D0 =00000005                M spde3	=	op3
0001A6D0 =00000002                M spde4	=	op4
0001A6D0                            	spMultiple	$01, $01, $01, $01
0001A6D0 =00000001                M spmu1	=	op1
0001A6D0 =00000001                M spmu2	=	op2
0001A6D0 =00000001                M spmu3	=	op3
0001A6D0 =00000001                M spmu4	=	op4
0001A6D0                            	spRateScale	$00, $00, $00, $00
0001A6D0 =00000000                M sprs1	=	op1
0001A6D0 =00000000                M sprs2	=	op2
0001A6D0 =00000000                M sprs3	=	op3
0001A6D0 =00000000                M sprs4	=	op4
0001A6D0                            	spAttackRt	$1F, $1F, $1C, $1F
0001A6D0 =0000001F                M spar1	=	op1
0001A6D0 =0000001F                M spar2	=	op2
0001A6D0 =0000001C                M spar3	=	op3
0001A6D0 =0000001F                M spar4	=	op4
0001A6D0                            	spAmpMod	$00, $00, $00, $00
0001A6D0 =00000000                M spam1	=	op1
0001A6D0 =00000000                M spam2	=	op2
0001A6D0 =00000000                M spam3	=	op3
0001A6D0 =00000000                M spam4	=	op4
0001A6D0                            	spSustainRt	$0C, $06, $0F, $0D
0001A6D0 =0000000C                M spsr1	=	op1
0001A6D0 =00000006                M spsr2	=	op2
0001A6D0 =0000000F                M spsr3	=	op3
0001A6D0 =0000000D                M spsr4	=	op4
0001A6D0                            	spSustainLv	$00, $00, $03, $03
0001A6D0 =00000000                M spsl1	=	op1
0001A6D0 =00000000                M spsl2	=	op2
0001A6D0 =00000003                M spsl3	=	op3
0001A6D0 =00000003                M spsl4	=	op4
0001A6D0                            	spDecayRt	$08, $07, $09, $0C
0001A6D0 =00000008                M spdr1	=	op1
0001A6D0 =00000007                M spdr2	=	op2
0001A6D0 =00000009                M spdr3	=	op3
0001A6D0 =0000000C                M spdr4	=	op4
0001A6D0                            	spReleaseRt	$06, $06, $06, $06
0001A6D0 =00000006                M sprr1	=	op1
0001A6D0 =00000006                M sprr2	=	op2
0001A6D0 =00000006                M sprr3	=	op3
0001A6D0 =00000006                M sprr4	=	op4
0001A6D0                            	spSSGEG		$00, $00, $00, $00
0001A6D0 =00000000                M spss1	=	op1
0001A6D0 =00000000                M spss2	=	op2
0001A6D0 =00000000                M spss3	=	op3
0001A6D0 =00000000                M spss4	=	op4
0001A6D0                            	spTotalLv	$12, $15, $00, $00
0001A6D0 =00000012                M sptl1	=	op1
0001A6D0 =00000015                M sptl2	=	op2
0001A6D0 =00000000                M sptl3	=	op3
0001A6D0 =00000000                M sptl4	=	op4
0001A6D0 2C                       M 	dc.b	(spfe<<3)+spal
0001A6D1 =00000080                M sptlmask4	set	$80
0001A6D1 =00000000                M sptlmask2	set	((spal>=5)<<7)
0001A6D1 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
0001A6D1 =00000000                M sptlmask1	set	((spal=7)<<7)
0001A6D1 5151 3121                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001A6D5 1F1C 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001A6D9 0C0F 060D                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001A6DD 0809 070C                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001A6E1 0636 0636                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001A6E5 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001A6E9 1280 1580                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001A6ED 4E41 54                  M 	dc.b	'NAT'
0001A6F0                            
0001A6F0                            	; Patch $02
0001A6F0                            	; $0C
0001A6F0                            	; $03, $53, $01, $01,	$3F, $1F, $1F, $9F
0001A6F0                            	; $8A, $89, $8A, $91,	$06, $06, $06, $04
0001A6F0                            	; $1A, $1A, $19, $18,	$12, $92, $12, $80
0001A6F0                            	spAlgorithm	$04
0001A6F0 =00000003                M spatnum	=	spatnum+1
0001A6F0 =00000004                M spal	=	val
0001A6F0                            	spFeedback	$01
0001A6F0 =00000001                M spfe	=	val
0001A6F0                            	spDetune	$00, $00, $05, $00
0001A6F0 =00000000                M spde1	=	op1
0001A6F0 =00000000                M spde2	=	op2
0001A6F0 =00000005                M spde3	=	op3
0001A6F0 =00000000                M spde4	=	op4
0001A6F0                            	spMultiple	$03, $01, $03, $01
0001A6F0 =00000003                M spmu1	=	op1
0001A6F0 =00000001                M spmu2	=	op2
0001A6F0 =00000003                M spmu3	=	op3
0001A6F0 =00000001                M spmu4	=	op4
0001A6F0                            	spRateScale	$00, $00, $00, $02
0001A6F0 =00000000                M sprs1	=	op1
0001A6F0 =00000000                M sprs2	=	op2
0001A6F0 =00000000                M sprs3	=	op3
0001A6F0 =00000002                M sprs4	=	op4
0001A6F0                            	spAttackRt	$1F, $1F, $1F, $1F
0001A6F0 =0000001F                M spar1	=	op1
0001A6F0 =0000001F                M spar2	=	op2
0001A6F0 =0000001F                M spar3	=	op3
0001A6F0 =0000001F                M spar4	=	op4
0001A6F0                            	spAmpMod	$01, $01, $01, $01
0001A6F0 =00000001                M spam1	=	op1
0001A6F0 =00000001                M spam2	=	op2
0001A6F0 =00000001                M spam3	=	op3
0001A6F0 =00000001                M spam4	=	op4
0001A6F0                            	spSustainRt	$0A, $0A, $09, $11
0001A6F0 =0000000A                M spsr1	=	op1
0001A6F0 =0000000A                M spsr2	=	op2
0001A6F0 =00000009                M spsr3	=	op3
0001A6F0 =00000011                M spsr4	=	op4
0001A6F0                            	spSustainLv	$01, $01, $01, $01
0001A6F0 =00000001                M spsl1	=	op1
0001A6F0 =00000001                M spsl2	=	op2
0001A6F0 =00000001                M spsl3	=	op3
0001A6F0 =00000001                M spsl4	=	op4
0001A6F0                            	spDecayRt	$06, $06, $06, $04
0001A6F0 =00000006                M spdr1	=	op1
0001A6F0 =00000006                M spdr2	=	op2
0001A6F0 =00000006                M spdr3	=	op3
0001A6F0 =00000004                M spdr4	=	op4
0001A6F0                            	spReleaseRt	$0A, $09, $0A, $08
0001A6F0 =0000000A                M sprr1	=	op1
0001A6F0 =00000009                M sprr2	=	op2
0001A6F0 =0000000A                M sprr3	=	op3
0001A6F0 =00000008                M sprr4	=	op4
0001A6F0                            	spSSGEG		$00, $00, $00, $00
0001A6F0 =00000000                M spss1	=	op1
0001A6F0 =00000000                M spss2	=	op2
0001A6F0 =00000000                M spss3	=	op3
0001A6F0 =00000000                M spss4	=	op4
0001A6F0                            	spTotalLv	$12, $12, $12, $00
0001A6F0 =00000012                M sptl1	=	op1
0001A6F0 =00000012                M sptl2	=	op2
0001A6F0 =00000012                M sptl3	=	op3
0001A6F0 =00000000                M sptl4	=	op4
0001A6F0 0C                       M 	dc.b	(spfe<<3)+spal
0001A6F1 =00000080                M sptlmask4	set	$80
0001A6F1 =00000000                M sptlmask2	set	((spal>=5)<<7)
0001A6F1 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
0001A6F1 =00000000                M sptlmask1	set	((spal=7)<<7)
0001A6F1 0353 0101                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001A6F5 1F1F 1F9F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001A6F9 8A89 8A91                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001A6FD 0606 0604                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001A701 1A1A 1918                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001A705 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001A709 1292 1280                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001A70D 4E41 54                  M 	dc.b	'NAT'
0001A710                            
0001A710                            	; Patch $03
0001A710                            	; $01
0001A710                            	; $21, $21, $23, $22,	$1F, $1F, $1F, $1F
0001A710                            	; $03, $03, $1B, $08,	$03, $03, $04, $03
0001A710                            	; $35, $38, $36, $37,	$12, $00, $15, $80
0001A710                            	spAlgorithm	$01
0001A710 =00000004                M spatnum	=	spatnum+1
0001A710 =00000001                M spal	=	val
0001A710                            	spFeedback	$00
0001A710 =00000000                M spfe	=	val
0001A710                            	spDetune	$02, $02, $02, $02
0001A710 =00000002                M spde1	=	op1
0001A710 =00000002                M spde2	=	op2
0001A710 =00000002                M spde3	=	op3
0001A710 =00000002                M spde4	=	op4
0001A710                            	spMultiple	$01, $03, $01, $02
0001A710 =00000001                M spmu1	=	op1
0001A710 =00000003                M spmu2	=	op2
0001A710 =00000001                M spmu3	=	op3
0001A710 =00000002                M spmu4	=	op4
0001A710                            	spRateScale	$00, $00, $00, $00
0001A710 =00000000                M sprs1	=	op1
0001A710 =00000000                M sprs2	=	op2
0001A710 =00000000                M sprs3	=	op3
0001A710 =00000000                M sprs4	=	op4
0001A710                            	spAttackRt	$1F, $1F, $1F, $1F
0001A710 =0000001F                M spar1	=	op1
0001A710 =0000001F                M spar2	=	op2
0001A710 =0000001F                M spar3	=	op3
0001A710 =0000001F                M spar4	=	op4
0001A710                            	spAmpMod	$00, $00, $00, $00
0001A710 =00000000                M spam1	=	op1
0001A710 =00000000                M spam2	=	op2
0001A710 =00000000                M spam3	=	op3
0001A710 =00000000                M spam4	=	op4
0001A710                            	spSustainRt	$03, $1B, $03, $08
0001A710 =00000003                M spsr1	=	op1
0001A710 =0000001B                M spsr2	=	op2
0001A710 =00000003                M spsr3	=	op3
0001A710 =00000008                M spsr4	=	op4
0001A710                            	spSustainLv	$03, $03, $03, $03
0001A710 =00000003                M spsl1	=	op1
0001A710 =00000003                M spsl2	=	op2
0001A710 =00000003                M spsl3	=	op3
0001A710 =00000003                M spsl4	=	op4
0001A710                            	spDecayRt	$03, $04, $03, $03
0001A710 =00000003                M spdr1	=	op1
0001A710 =00000004                M spdr2	=	op2
0001A710 =00000003                M spdr3	=	op3
0001A710 =00000003                M spdr4	=	op4
0001A710                            	spReleaseRt	$05, $06, $08, $07
0001A710 =00000005                M sprr1	=	op1
0001A710 =00000006                M sprr2	=	op2
0001A710 =00000008                M sprr3	=	op3
0001A710 =00000007                M sprr4	=	op4
0001A710                            	spSSGEG		$00, $00, $00, $00
0001A710 =00000000                M spss1	=	op1
0001A710 =00000000                M spss2	=	op2
0001A710 =00000000                M spss3	=	op3
0001A710 =00000000                M spss4	=	op4
0001A710                            	spTotalLv	$12, $15, $00, $00
0001A710 =00000012                M sptl1	=	op1
0001A710 =00000015                M sptl2	=	op2
0001A710 =00000000                M sptl3	=	op3
0001A710 =00000000                M sptl4	=	op4
0001A710 01                       M 	dc.b	(spfe<<3)+spal
0001A711 =00000080                M sptlmask4	set	$80
0001A711 =00000000                M sptlmask2	set	((spal>=5)<<7)
0001A711 =00000000                M sptlmask3	set	((spal>=4)<<7)
0001A711 =00000000                M sptlmask1	set	((spal=7)<<7)
0001A711 2121 2322                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001A715 1F1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001A719 0303 1B08                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001A71D 0303 0403                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001A721 3538 3637                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001A725 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001A729 1200 1580                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001A72D 4E41 54                  M 	dc.b	'NAT'
0001A730                            
0001A730                            	; Patch $04
0001A730                            	; $04
0001A730                            	; $21, $21, $23, $22,	$1F, $1F, $1F, $1F
0001A730                            	; $03, $03, $1B, $08,	$03, $03, $04, $03
0001A730                            	; $35, $38, $36, $37,	$12, $80, $15, $80
0001A730                            	spAlgorithm	$04
0001A730 =00000005                M spatnum	=	spatnum+1
0001A730 =00000004                M spal	=	val
0001A730                            	spFeedback	$00
0001A730 =00000000                M spfe	=	val
0001A730                            	spDetune	$02, $02, $02, $02
0001A730 =00000002                M spde1	=	op1
0001A730 =00000002                M spde2	=	op2
0001A730 =00000002                M spde3	=	op3
0001A730 =00000002                M spde4	=	op4
0001A730                            	spMultiple	$01, $03, $01, $02
0001A730 =00000001                M spmu1	=	op1
0001A730 =00000003                M spmu2	=	op2
0001A730 =00000001                M spmu3	=	op3
0001A730 =00000002                M spmu4	=	op4
0001A730                            	spRateScale	$00, $00, $00, $00
0001A730 =00000000                M sprs1	=	op1
0001A730 =00000000                M sprs2	=	op2
0001A730 =00000000                M sprs3	=	op3
0001A730 =00000000                M sprs4	=	op4
0001A730                            	spAttackRt	$1F, $1F, $1F, $1F
0001A730 =0000001F                M spar1	=	op1
0001A730 =0000001F                M spar2	=	op2
0001A730 =0000001F                M spar3	=	op3
0001A730 =0000001F                M spar4	=	op4
0001A730                            	spAmpMod	$00, $00, $00, $00
0001A730 =00000000                M spam1	=	op1
0001A730 =00000000                M spam2	=	op2
0001A730 =00000000                M spam3	=	op3
0001A730 =00000000                M spam4	=	op4
0001A730                            	spSustainRt	$03, $1B, $03, $08
0001A730 =00000003                M spsr1	=	op1
0001A730 =0000001B                M spsr2	=	op2
0001A730 =00000003                M spsr3	=	op3
0001A730 =00000008                M spsr4	=	op4
0001A730                            	spSustainLv	$03, $03, $03, $03
0001A730 =00000003                M spsl1	=	op1
0001A730 =00000003                M spsl2	=	op2
0001A730 =00000003                M spsl3	=	op3
0001A730 =00000003                M spsl4	=	op4
0001A730                            	spDecayRt	$03, $04, $03, $03
0001A730 =00000003                M spdr1	=	op1
0001A730 =00000004                M spdr2	=	op2
0001A730 =00000003                M spdr3	=	op3
0001A730 =00000003                M spdr4	=	op4
0001A730                            	spReleaseRt	$05, $06, $08, $07
0001A730 =00000005                M sprr1	=	op1
0001A730 =00000006                M sprr2	=	op2
0001A730 =00000008                M sprr3	=	op3
0001A730 =00000007                M sprr4	=	op4
0001A730                            	spSSGEG		$00, $00, $00, $00
0001A730 =00000000                M spss1	=	op1
0001A730 =00000000                M spss2	=	op2
0001A730 =00000000                M spss3	=	op3
0001A730 =00000000                M spss4	=	op4
0001A730                            	spTotalLv	$12, $15, $00, $00
0001A730 =00000012                M sptl1	=	op1
0001A730 =00000015                M sptl2	=	op2
0001A730 =00000000                M sptl3	=	op3
0001A730 =00000000                M sptl4	=	op4
0001A730 04                       M 	dc.b	(spfe<<3)+spal
0001A731 =00000080                M sptlmask4	set	$80
0001A731 =00000000                M sptlmask2	set	((spal>=5)<<7)
0001A731 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
0001A731 =00000000                M sptlmask1	set	((spal=7)<<7)
0001A731 2121 2322                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001A735 1F1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001A739 0303 1B08                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001A73D 0303 0403                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001A741 3538 3637                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001A745 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001A749 1280 1580                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001A74D 4E41 54                  M 	dc.b	'NAT'
0001A750                            
0001A750                            Shop_FM1:
0001A750                            	sVoice		$02
0001A750 E802                     M 	dc.b	$e8,$02
0001A752                            
0001A752                            Shop_PSG1:
0001A752                            	sCall		Shop_Call1
0001A752 F8                       M 	dc.b	$f8
0001A753 0000                     M 	dc.w	shop_call1-*-1
0001A755 8008 A30C A504 A708        	dc.b nRst, $08, nBb2, $0C, nC3, $04, nD3, $08
0001A75D A50C A304 A218 8008        	dc.b nC3, $0C, nBb2, $04, nA2, $18, nRst, $08
0001A765 A204 A308 A234             	dc.b nA2, $04, nBb2, $08, nA2, $34
0001A76B                            	sCall		Shop_Call1
0001A76B F8                       M 	dc.b	$f8
0001A76C 0000                     M 	dc.w	shop_call1-*-1
0001A76E 8008 A304 A208 A304        	dc.b nRst, $08, nBb2, $04, nA2, $08, nBb2, $04
0001A776 A408 A304 A408 A604        	dc.b nB2, $08, nBb2, $04, nB2, $08, nCs3, $04
0001A77E A724 A606 A706 8030        	dc.b nD3, $24, nCs3, $06, nD3, $06, nRst, $30
0001A786                            	sCall		Shop_Call2
0001A786 F8                       M 	dc.b	$f8
0001A787 0000                     M 	dc.w	shop_call2-*-1
0001A789 8008 A20C A404 A608        	dc.b nRst, $08, nA2, $0C, nB2, $04, nCs3, $08
0001A791 A404 A608 A704 A924        	dc.b nB2, $04, nCs3, $08, nD3, $04, nE3, $24
0001A799 AB06 36                    	dc.b nFs3, $06, $36
0001A79C                            	sCall		Shop_Call2
0001A79C F8                       M 	dc.b	$f8
0001A79D 0000                     M 	dc.w	shop_call2-*-1
0001A79F 8008 A204 A108 A204        	dc.b nRst, $08, nA2, $04, nAb2, $08, nA2, $04
0001A7A7 A408 A304 A408 A604        	dc.b nB2, $08, nBb2, $04, nB2, $08, nCs3, $04
0001A7AF A724 A606 A780 06A2        	dc.b nD3, $24, nCs3, $06, nD3, nRst, $06, nA2
0001A7B7 12A4 0CA6                  	dc.b $12, nB2, $0C, nCs3
0001A7BB                            	sJump		Shop_PSG1
0001A7BB F6                       M 	dc.b	$f6
0001A7BC FF95                     M 	dc.w	shop_psg1-*-1
0001A7BE                            
0001A7BE                            Shop_Call1:
0001A7BE A208 A404 A608 A704        	dc.b nA2, $08, nB2, $04, nCs3, $08, nD3, $04
0001A7C6 A208 A404 A608 A710        	dc.b nA2, $08, nB2, $04, nCs3, $08, nD3, $10
0001A7CE A606 A70C A9AC 06AB        	dc.b nCs3, $06, nD3, $0C, nE3, nG3, $06, nFs3
0001A7D6 0CA9 0612 A806 A91E        	dc.b $0C, nE3, $06, $12, nEb3, $06, nE3, $1E
0001A7DE 8006 A712 A60C A306        	dc.b nRst, $06, nD3, $12, nCs3, $0C, nBb2, $06
0001A7E6 1E                         	dc.b $1E
0001A7E7                            	sRet
0001A7E7 F9                       M 	dc.b	$f9
0001A7E8                            
0001A7E8                            Shop_Call2:
0001A7E8 A408 A604 A708 A904        	dc.b nB2, $08, nCs3, $04, nD3, $08, nE3, $04
0001A7F0 A408 A604 A708 A904        	dc.b nB2, $08, nCs3, $04, nD3, $08, nE3, $04
0001A7F8 A708 A904 AB08 AC04        	dc.b nD3, $08, nE3, $04, nFs3, $08, nG3, $04
0001A800 A708 A904 AB08 AC04        	dc.b nD3, $08, nE3, $04, nFs3, $08, nG3, $04
0001A808 AB0C A906 12A8 06A9        	dc.b nFs3, $0C, nE3, $06, $12, nEb3, $06, nE3
0001A810 1E80 06A7 12A6 0CA2        	dc.b $1E, nRst, $06, nD3, $12, nCs3, $0C, nA2
0001A818 061E                       	dc.b $06, $1E
0001A81A                            	sRet
0001A81A F9                       M 	dc.b	$f9
0001A81B                            
0001A81B                            Shop_FM2:
0001A81B                            	sVoice		$00
0001A81B E800                     M 	dc.b	$e8,$00
0001A81D 9B18 969B 969B 959B        	dc.b nD2, $18, nA1, nD2, nA1, nD2, nAb1, nD2
0001A825 959B 979B 979B 969B        	dc.b nAb1, nD2, nBb1, nD2, nBb1, nD2, nA1, nD2
0001A82D 96                         	dc.b nA1
0001A82E                            	sLoop		$00, $02, Shop_FM2
0001A82E F700                     M 	dc.b	$f7,$00
0001A830 FFEA                     M 	dc.w	shop_fm2-*-1
0001A832 02                       M 	dc.b	$02
0001A833                            	sCall		Shop_Call3
0001A833 F8                       M 	dc.b	$f8
0001A834 0000                     M 	dc.w	shop_call3-*-1
0001A836 9B18 0C9A 0C               	dc.b nD2, $18, $0C, nCs2, $0C
0001A83B                            	sCall		Shop_Call3
0001A83B F8                       M 	dc.b	$f8
0001A83C 0000                     M 	dc.w	shop_call3-*-1
0001A83E 9B06 9612 980C 9A          	dc.b nD2, $06, nA1, $12, nB1, $0C, nCs2
0001A845                            	sJump		Shop_FM2
0001A845 F6                       M 	dc.b	$f6
0001A846 FFD4                     M 	dc.w	shop_fm2-*-1
0001A848                            
0001A848                            Shop_Call3:
0001A848 9818 9398 980C 9C9D        	dc.b nB1, $18, nFs1, nB1, nB1, $0C, nEb2, nE2
0001A850 1898 9D9D 0C9B 9A18        	dc.b $18, nB1, nE2, nE2, $0C, nD2, nCs2, $18
0001A858 969A 1898 0C9A 9B18        	dc.b nA1, nCs2, $18, nB1, $0C, nCs2, nD2, $18
0001A860 96                         	dc.b nA1
0001A861                            	sRet
0001A861 F9                       M 	dc.b	$f9
0001A862                            
0001A862                            Shop_FM3:
0001A862                            	sVoice		$01
0001A862 E801                     M 	dc.b	$e8,$01
0001A864                            
0001A864                            Shop_Loop1:
0001A864 800C A780 A7               	dc.b nRst, $0C, nD3, nRst, nD3
0001A869                            	sLoop		$00, $10, Shop_Loop1
0001A869 F700                     M 	dc.b	$f7,$00
0001A86B FFF8                     M 	dc.w	shop_loop1-*-1
0001A86D 10                       M 	dc.b	$10
0001A86E                            	sCall		Shop_Call4
0001A86E F8                       M 	dc.b	$f8
0001A86F 0000                     M 	dc.w	shop_call4-*-1
0001A871 800C A780 A7               	dc.b nRst, $0C, nD3, nRst, nD3
0001A876                            	sCall		Shop_Call4
0001A876 F8                       M 	dc.b	$f8
0001A877 0000                     M 	dc.w	shop_call4-*-1
0001A879 8006 A212 A40C A6          	dc.b nRst, $06, nA2, $12, nB2, $0C, nCs3
0001A880                            	sJump		Shop_Loop1
0001A880 F6                       M 	dc.b	$f6
0001A881 FFE2                     M 	dc.w	shop_loop1-*-1
0001A883                            
0001A883                            Shop_Call4:
0001A883 800C A780 A780 A780        	dc.b nRst, $0C, nD3, nRst, nD3, nRst, nD3, nRst
0001A88B A880 0CA9 80A9 80A9        	dc.b nEb3, nRst, $0C, nE3, nRst, nE3, nRst, nE3
0001A893 80A9 80A9 80A9 80A9        	dc.b nRst, nE3, nRst, nE3, nRst, nE3, nRst, nE3
0001A89B 80A9 80A7 80A7             	dc.b nRst, nE3, nRst, nD3, nRst, nD3
0001A8A1                            	sRet
0001A8A1 F9                       M 	dc.b	$f9
0001A8A2                            
0001A8A2                            Shop_FM4:
0001A8A2                            	sVoice		$01
0001A8A2 E801                     M 	dc.b	$e8,$01
0001A8A4 800C A280 A280 A280        	dc.b nRst, $0C, nA2, nRst, nA2, nRst, nA2, nRst
0001A8AC A280 A480 A480 A480        	dc.b nA2, nRst, nB2, nRst, nB2, nRst, nB2, nRst
0001A8B4 A480 A380 A380 A380        	dc.b nB2, nRst, nBb2, nRst, nBb2, nRst, nBb2, nRst
0001A8BC A380 A280 A280 A280        	dc.b nBb2, nRst, nA2, nRst, nA2, nRst, nA2, nRst
0001A8C4 A2                         	dc.b nA2
0001A8C5                            	sLoop		$00, $02, Shop_FM4
0001A8C5 F700                     M 	dc.b	$f7,$00
0001A8C7 FFDA                     M 	dc.w	shop_fm4-*-1
0001A8C9 02                       M 	dc.b	$02
0001A8CA                            	sCall		Shop_Call5
0001A8CA F8                       M 	dc.b	$f8
0001A8CB 0000                     M 	dc.w	shop_call5-*-1
0001A8CD 80A2 80A2                  	dc.b nRst, nA2, nRst, nA2
0001A8D1                            	sCall		Shop_Call5
0001A8D1 F8                       M 	dc.b	$f8
0001A8D2 0000                     M 	dc.w	shop_call5-*-1
0001A8D4 8006 A212 A10C A0          	dc.b nRst, $06, nA2, $12, nAb2, $0C, nG2
0001A8DB                            	sJump		Shop_FM4
0001A8DB F6                       M 	dc.b	$f6
0001A8DC FFC5                     M 	dc.w	shop_fm4-*-1
0001A8DE                            
0001A8DE                            Shop_Call5:
0001A8DE 800C A480 A480 A480        	dc.b nRst, $0C, nB2, nRst, nB2, nRst, nB2, nRst
0001A8E6 A480 A480 A480 A480        	dc.b nB2, nRst, nB2, nRst, nB2, nRst, nB2, nRst
0001A8EE A480 A680 A680 A680        	dc.b nB2, nRst, nCs3, nRst, nCs3, nRst, nCs3, nRst
0001A8F6 A680 A280 A2               	dc.b nCs3, nRst, nA2, nRst, nA2
0001A8FB                            	sRet
0001A8FB F9                       M 	dc.b	$f9
0001A8FC                            
0001A8FC                            Shop_FM5:
0001A8FC                            	sVoice		$01
0001A8FC E801                     M 	dc.b	$e8,$01
0001A8FE 800C 9F80 9F80 9F80        	dc.b nRst, $0C, nFs2, nRst, nFs2, nRst, nFs2, nRst
0001A906 9F80 A180 A180 A180        	dc.b nFs2, nRst, nAb2, nRst, nAb2, nRst, nAb2, nRst
0001A90E A180 A080 A080 A080        	dc.b nAb2, nRst, nG2, nRst, nG2, nRst, nG2, nRst
0001A916 A080 9F80 9F80 9F80        	dc.b nG2, nRst, nFs2, nRst, nFs2, nRst, nFs2, nRst
0001A91E 9F                         	dc.b nFs2
0001A91F                            	sLoop		$00, $02, Shop_FM5
0001A91F F700                     M 	dc.b	$f7,$00
0001A921 FFDA                     M 	dc.w	shop_fm5-*-1
0001A923 02                       M 	dc.b	$02
0001A924                            	sCall		Shop_Call6
0001A924 F8                       M 	dc.b	$f8
0001A925 0000                     M 	dc.w	shop_call6-*-1
0001A927 809F 809F                  	dc.b nRst, nFs2, nRst, nFs2
0001A92B                            	sCall		Shop_Call6
0001A92B F8                       M 	dc.b	$f8
0001A92C 0000                     M 	dc.w	shop_call6-*-1
0001A92E 8006 9F12 A10C A2          	dc.b nRst, $06, nFs2, $12, nAb2, $0C, nA2
0001A935                            	sJump		Shop_FM5
0001A935 F6                       M 	dc.b	$f6
0001A936 FFC5                     M 	dc.w	shop_fm5-*-1
0001A938                            
0001A938                            Shop_Call6:
0001A938 800C 9F80 9F80 9F80        	dc.b nRst, $0C, nFs2, nRst, nFs2, nRst, nFs2, nRst
0001A940 9F80 A080 A080 A080        	dc.b nFs2, nRst, nG2, nRst, nG2, nRst, nG2, nRst
0001A948 A080 A280 A280 A280        	dc.b nG2, nRst, nA2, nRst, nA2, nRst, nA2, nRst
0001A950 A280 9F80 9F               	dc.b nA2, nRst, nFs2, nRst, nFs2
0001A955                            	sRet
0001A955 F9                       M 	dc.b	$f9
0001A956                            
0001A956                            Shop_PSG2:
0001A956                            	sCall		Shop_Call7
0001A956 F8                       M 	dc.b	$f8
0001A957 0000                     M 	dc.w	shop_call7-*-1
0001A959 8008 A00C A204 A308        	dc.b nRst, $08, nG2, $0C, nA2, $04, nBb2, $08
0001A961 A20C A004 9F18 8008        	dc.b nA2, $0C, nG2, $04, nFs2, $18, nRst, $08
0001A969 9F04 A008 9F34             	dc.b nFs2, $04, nG2, $08, nFs2, $34
0001A96F                            	sCall		Shop_Call7
0001A96F F8                       M 	dc.b	$f8
0001A970 0000                     M 	dc.w	shop_call7-*-1
0001A972 8008 A00C 0408 0C04        	dc.b nRst, $08, nG2, $0C, $04, $08, $0C, $04
0001A97A 9F24 A006 9F06 8030        	dc.b nFs2, $24, nG2, $06, nFs2, $06, nRst, $30
0001A982                            	sCall		Shop_Call8
0001A982 F8                       M 	dc.b	$f8
0001A983 0000                     M 	dc.w	shop_call8-*-1
0001A985 A208 A404 A608 A704        	dc.b nA2, $08, nB2, $04, nCs3, $08, nD3, $04
0001A98D A208 A404 A608 A704        	dc.b nA2, $08, nB2, $04, nCs3, $08, nD3, $04
0001A995 A70C 0804 0C08 04A7        	dc.b nD3, $0C, $08, $04, $0C, $08, $04, nD3
0001A99D 08A9 04AB 08AC 04A7        	dc.b $08, nE3, $04, nFs3, $08, nG3, $04, nD3
0001A9A5 08A9 04AB 08AC 04          	dc.b $08, nE3, $04, nFs3, $08, nG3, $04
0001A9AC                            	sCall		Shop_Call8
0001A9AC F8                       M 	dc.b	$f8
0001A9AD 0000                     M 	dc.w	shop_call8-*-1
0001A9AF 8008 9F04 9E08 9F04        	dc.b nRst, $08, nFs2, $04, nF2, $08, nFs2, $04
0001A9B7 A108 9F04 A008 A204        	dc.b nAb2, $08, nFs2, $04, nG2, $08, nA2, $04
0001A9BF 9F24 9E06 9F80 06A2        	dc.b nFs2, $24, nF2, $06, nFs2, nRst, $06, nA2
0001A9C7 12A4 0CA6 0C               	dc.b $12, nB2, $0C, nCs3, $0C
0001A9CC                            	sJump		Shop_PSG2
0001A9CC F6                       M 	dc.b	$f6
0001A9CD FF88                     M 	dc.w	shop_psg2-*-1
0001A9CF                            
0001A9CF                            Shop_Call7:
0001A9CF 9F08 A004 A208 A204        	dc.b nFs2, $08, nG2, $04, nA2, $08, nA2, $04
0001A9D7 9F08 A004 A208 A210        	dc.b nFs2, $08, nG2, $04, nA2, $08, nA2, $10
0001A9DF A206 0C0C 06A4 0C06        	dc.b nA2, $06, $0C, $0C, $06, nB2, $0C, $06
0001A9E7 12A3 06A4 1E80 06A4        	dc.b $12, nBb2, $06, nB2, $1E, nRst, $06, nB2
0001A9EF 12A3 0CA0 061E             	dc.b $12, nBb2, $0C, nG2, $06, $1E
0001A9F5                            	sRet
0001A9F5 F9                       M 	dc.b	$f9
0001A9F6                            
0001A9F6                            Shop_Call8:
0001A9F6 A40C 0804 0C08 04A4        	dc.b nB2, $0C, $08, $04, $0C, $08, $04, nB2
0001A9FE 08A6 04A7 08A9 04A4        	dc.b $08, nCs3, $04, nD3, $08, nE3, $04, nB2
0001AA06 08A6 04A7 08A9 04A9        	dc.b $08, nCs3, $04, nD3, $08, nE3, $04, nE3
0001AA0E 0C08 040C 0804 A908        	dc.b $0C, $08, $04, $0C, $08, $04, nE3, $08
0001AA16 AB04 AC08 AE04 A908        	dc.b nFs3, $04, nG3, $08, nA3, $04, nE3, $08
0001AA1E AB04 AC08 AE04 A20C        	dc.b nFs3, $04, nG3, $08, nA3, $04, nA2, $0C
0001AA26 0804 0C08 04               	dc.b $08, $04, $0C, $08, $04
0001AA2B                            	sRet
0001AA2B F9                       M 	dc.b	$f9
0001AA2C                            
0001AA2C                            Shop_DAC1:
0001AA2C                            	sStop
0001AA2C F5                       M 	dc.b	$f5
0001AA2D                            
0001AA2D                            Shop_DAC2:
0001AA2D 830C 8308 8304             	dc.b dSnare, $0C, dSnare, $08, dSnare, $04
0001AA33                            	sJump		Shop_DAC2
0001AA33 F6                       M 	dc.b	$f6
0001AA34 FFF8                     M 	dc.w	shop_dac2-*-1
0001AA36 =00000015                M a	=	a+1
0001AA36                          M 	even
0001AA36                          M b	equs	dmus15
0001AA36                          M _mus_beach
0001AA36                          M dmusa15	include	"driver/music/beach.asm"
0001AA36                            Beach_Header:
0001AA36                            	sHeaderInit						; Z80 offset is $94E3
0001AA36 =0001AA36                M spointzero	=	*
0001AA36 =00000000                M spatnum	=	0
0001AA36                            	sHeaderTempo	$01, $40
0001AA36 0040                     M 	dc.b	$01-1,$40
0001AA38                            	sHeaderCh	$05, $03
0001AA38 04                       M 	dc.b	$05-1
0001AA39 02                       M 	dc.b	$03-1
0001AA3A                            	sHeaderDAC	Beach_DAC1, $1C
0001AA3A 0000                     M 	dc.w	beach_dac1-spointzero
0001AA3C 1C                       M 	dc.b	$1c
0001AA3D 00                       M 	dc.b	$00
0001AA3E                            	sHeaderDAC	Beach_DAC2, $1C, dSnare
0001AA3E 0000                     M 	dc.w	beach_dac2-spointzero
0001AA40 1C                       M 	dc.b	$1c
0001AA41 83                       M 	dc.b	dsnare
0001AA42                            	sHeaderFM	Beach_FM1, $F4, $06
0001AA42 0000                     M 	dc.w	beach_fm1-spointzero
0001AA44 F406                     M 	dc.b	$f4,$06
0001AA46                            	sHeaderFM	Beach_FM2, $00, $00
0001AA46 0000                     M 	dc.w	beach_fm2-spointzero
0001AA48 0000                     M 	dc.b	$00,$00
0001AA4A                            	sHeaderFM	Beach_FM3, $00, $00
0001AA4A 0000                     M 	dc.w	beach_fm3-spointzero
0001AA4C 0000                     M 	dc.b	$00,$00
0001AA4E                            	sHeaderFM	Beach_FM4, $00, $00
0001AA4E 0000                     M 	dc.w	beach_fm4-spointzero
0001AA50 0000                     M 	dc.b	$00,$00
0001AA52                            	sHeaderFM	Beach_FM5, $00, $05
0001AA52 0000                     M 	dc.w	beach_fm5-spointzero
0001AA54 0005                     M 	dc.b	$00,$05
0001AA56                            ;	sHeaderFM	Beach_FM6, $00, $18
0001AA56                            	sHeaderPSG	Beach_PSG1, $E8-$0C, $02, $00, v00
0001AA56 0000                     M 	dc.w	beach_psg1-spointzero
0001AA58 DC02 0000                M 	dc.b	$e8-$0c,$02,$00,v00
0001AA5C                            	sHeaderPSG	Beach_PSG2, $F4-$0C, $02, $00, v00
0001AA5C 0000                     M 	dc.w	beach_psg2-spointzero
0001AA5E E802 0000                M 	dc.b	$f4-$0c,$02,$00,v00
0001AA62                            	sHeaderPSG	Beach_PSG3, $F4-$0C, $02, $00, v00
0001AA62 0000                     M 	dc.w	beach_psg3-spointzero
0001AA64 E802 0000                M 	dc.b	$f4-$0c,$02,$00,v00
0001AA68                            
0001AA68                            	; Patch $00
0001AA68                            	; $3E
0001AA68                            	; $04, $04, $04, $04,	$1F, $14, $14, $14
0001AA68                            	; $0A, $06, $0B, $0B,	$0F, $00, $00, $00
0001AA68                            	; $5F, $FF, $1F, $1F,	$23, $8C, $8A, $80
0001AA68                            	spAlgorithm	$06
0001AA68 =00000001                M spatnum	=	spatnum+1
0001AA68 =00000006                M spal	=	val
0001AA68                            	spFeedback	$07
0001AA68 =00000007                M spfe	=	val
0001AA68                            	spDetune	$00, $00, $00, $00
0001AA68 =00000000                M spde1	=	op1
0001AA68 =00000000                M spde2	=	op2
0001AA68 =00000000                M spde3	=	op3
0001AA68 =00000000                M spde4	=	op4
0001AA68                            	spMultiple	$04, $04, $04, $04
0001AA68 =00000004                M spmu1	=	op1
0001AA68 =00000004                M spmu2	=	op2
0001AA68 =00000004                M spmu3	=	op3
0001AA68 =00000004                M spmu4	=	op4
0001AA68                            	spRateScale	$00, $00, $00, $00
0001AA68 =00000000                M sprs1	=	op1
0001AA68 =00000000                M sprs2	=	op2
0001AA68 =00000000                M sprs3	=	op3
0001AA68 =00000000                M sprs4	=	op4
0001AA68                            	spAttackRt	$1F, $14, $14, $14
0001AA68 =0000001F                M spar1	=	op1
0001AA68 =00000014                M spar2	=	op2
0001AA68 =00000014                M spar3	=	op3
0001AA68 =00000014                M spar4	=	op4
0001AA68                            	spAmpMod	$00, $00, $00, $00
0001AA68 =00000000                M spam1	=	op1
0001AA68 =00000000                M spam2	=	op2
0001AA68 =00000000                M spam3	=	op3
0001AA68 =00000000                M spam4	=	op4
0001AA68                            	spSustainRt	$0A, $0B, $06, $0B
0001AA68 =0000000A                M spsr1	=	op1
0001AA68 =0000000B                M spsr2	=	op2
0001AA68 =00000006                M spsr3	=	op3
0001AA68 =0000000B                M spsr4	=	op4
0001AA68                            	spSustainLv	$05, $01, $0F, $01
0001AA68 =00000005                M spsl1	=	op1
0001AA68 =00000001                M spsl2	=	op2
0001AA68 =0000000F                M spsl3	=	op3
0001AA68 =00000001                M spsl4	=	op4
0001AA68                            	spDecayRt	$0F, $00, $00, $00
0001AA68 =0000000F                M spdr1	=	op1
0001AA68 =00000000                M spdr2	=	op2
0001AA68 =00000000                M spdr3	=	op3
0001AA68 =00000000                M spdr4	=	op4
0001AA68                            	spReleaseRt	$0F, $0F, $0F, $0F
0001AA68 =0000000F                M sprr1	=	op1
0001AA68 =0000000F                M sprr2	=	op2
0001AA68 =0000000F                M sprr3	=	op3
0001AA68 =0000000F                M sprr4	=	op4
0001AA68                            	spSSGEG		$00, $00, $00, $00
0001AA68 =00000000                M spss1	=	op1
0001AA68 =00000000                M spss2	=	op2
0001AA68 =00000000                M spss3	=	op3
0001AA68 =00000000                M spss4	=	op4
0001AA68                            	spTotalLv	$23, $0A, $0C, $00
0001AA68 =00000023                M sptl1	=	op1
0001AA68 =0000000A                M sptl2	=	op2
0001AA68 =0000000C                M sptl3	=	op3
0001AA68 =00000000                M sptl4	=	op4
0001AA68 3E                       M 	dc.b	(spfe<<3)+spal
0001AA69 =00000080                M sptlmask4	set	$80
0001AA69 =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
0001AA69 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
0001AA69 =00000000                M sptlmask1	set	((spal=7)<<7)
0001AA69 0404 0404                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001AA6D 1F14 1414                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001AA71 0A06 0B0B                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001AA75 0F00 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001AA79 5FFF 1F1F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001AA7D 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001AA81 238C 8A80                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001AA85 4E41 54                  M 	dc.b	'NAT'
0001AA88                            
0001AA88                            	; Patch $01
0001AA88                            	; $3A
0001AA88                            	; $71, $0C, $33, $01,	$9C, $96, $5D, $8F
0001AA88                            	; $04, $09, $04, $07,	$00, $01, $03, $00
0001AA88                            	; $1F, $1F, $1F, $AF,	$25, $2F, $25, $80
0001AA88                            	spAlgorithm	$02
0001AA88 =00000002                M spatnum	=	spatnum+1
0001AA88 =00000002                M spal	=	val
0001AA88                            	spFeedback	$07
0001AA88 =00000007                M spfe	=	val
0001AA88                            	spDetune	$07, $03, $00, $00
0001AA88 =00000007                M spde1	=	op1
0001AA88 =00000003                M spde2	=	op2
0001AA88 =00000000                M spde3	=	op3
0001AA88 =00000000                M spde4	=	op4
0001AA88                            	spMultiple	$01, $03, $0C, $01
0001AA88 =00000001                M spmu1	=	op1
0001AA88 =00000003                M spmu2	=	op2
0001AA88 =0000000C                M spmu3	=	op3
0001AA88 =00000001                M spmu4	=	op4
0001AA88                            	spRateScale	$02, $01, $02, $02
0001AA88 =00000002                M sprs1	=	op1
0001AA88 =00000001                M sprs2	=	op2
0001AA88 =00000002                M sprs3	=	op3
0001AA88 =00000002                M sprs4	=	op4
0001AA88                            	spAttackRt	$1C, $1D, $16, $0F
0001AA88 =0000001C                M spar1	=	op1
0001AA88 =0000001D                M spar2	=	op2
0001AA88 =00000016                M spar3	=	op3
0001AA88 =0000000F                M spar4	=	op4
0001AA88                            	spAmpMod	$00, $00, $00, $00
0001AA88 =00000000                M spam1	=	op1
0001AA88 =00000000                M spam2	=	op2
0001AA88 =00000000                M spam3	=	op3
0001AA88 =00000000                M spam4	=	op4
0001AA88                            	spSustainRt	$04, $04, $09, $07
0001AA88 =00000004                M spsr1	=	op1
0001AA88 =00000004                M spsr2	=	op2
0001AA88 =00000009                M spsr3	=	op3
0001AA88 =00000007                M spsr4	=	op4
0001AA88                            	spSustainLv	$01, $01, $01, $0A
0001AA88 =00000001                M spsl1	=	op1
0001AA88 =00000001                M spsl2	=	op2
0001AA88 =00000001                M spsl3	=	op3
0001AA88 =0000000A                M spsl4	=	op4
0001AA88                            	spDecayRt	$00, $03, $01, $00
0001AA88 =00000000                M spdr1	=	op1
0001AA88 =00000003                M spdr2	=	op2
0001AA88 =00000001                M spdr3	=	op3
0001AA88 =00000000                M spdr4	=	op4
0001AA88                            	spReleaseRt	$0F, $0F, $0F, $0F
0001AA88 =0000000F                M sprr1	=	op1
0001AA88 =0000000F                M sprr2	=	op2
0001AA88 =0000000F                M sprr3	=	op3
0001AA88 =0000000F                M sprr4	=	op4
0001AA88                            	spSSGEG		$00, $00, $00, $00
0001AA88 =00000000                M spss1	=	op1
0001AA88 =00000000                M spss2	=	op2
0001AA88 =00000000                M spss3	=	op3
0001AA88 =00000000                M spss4	=	op4
0001AA88                            	spTotalLv	$25, $25, $2F, $00
0001AA88 =00000025                M sptl1	=	op1
0001AA88 =00000025                M sptl2	=	op2
0001AA88 =0000002F                M sptl3	=	op3
0001AA88 =00000000                M sptl4	=	op4
0001AA88 3A                       M 	dc.b	(spfe<<3)+spal
0001AA89 =00000080                M sptlmask4	set	$80
0001AA89 =00000000                M sptlmask2	set	((spal>=5)<<7)
0001AA89 =00000000                M sptlmask3	set	((spal>=4)<<7)
0001AA89 =00000000                M sptlmask1	set	((spal=7)<<7)
0001AA89 710C 3301                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001AA8D 9C96 5D8F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001AA91 0409 0407                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001AA95 0001 0300                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001AA99 1F1F 1FAF                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001AA9D 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001AAA1 252F 2580                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001AAA5 4E41 54                  M 	dc.b	'NAT'
0001AAA8                            
0001AAA8                            	; Patch $02
0001AAA8                            	; $3A
0001AAA8                            	; $31, $27, $41, $61,	$8E, $8E, $8D, $53
0001AAA8                            	; $0E, $0E, $0E, $03,	$00, $00, $00, $00
0001AAA8                            	; $1F, $FF, $1F, $0F,	$1B, $25, $25, $80
0001AAA8                            	spAlgorithm	$02
0001AAA8 =00000003                M spatnum	=	spatnum+1
0001AAA8 =00000002                M spal	=	val
0001AAA8                            	spFeedback	$07
0001AAA8 =00000007                M spfe	=	val
0001AAA8                            	spDetune	$03, $04, $02, $06
0001AAA8 =00000003                M spde1	=	op1
0001AAA8 =00000004                M spde2	=	op2
0001AAA8 =00000002                M spde3	=	op3
0001AAA8 =00000006                M spde4	=	op4
0001AAA8                            	spMultiple	$01, $01, $07, $01
0001AAA8 =00000001                M spmu1	=	op1
0001AAA8 =00000001                M spmu2	=	op2
0001AAA8 =00000007                M spmu3	=	op3
0001AAA8 =00000001                M spmu4	=	op4
0001AAA8                            	spRateScale	$02, $02, $02, $01
0001AAA8 =00000002                M sprs1	=	op1
0001AAA8 =00000002                M sprs2	=	op2
0001AAA8 =00000002                M sprs3	=	op3
0001AAA8 =00000001                M sprs4	=	op4
0001AAA8                            	spAttackRt	$0E, $0D, $0E, $13
0001AAA8 =0000000E                M spar1	=	op1
0001AAA8 =0000000D                M spar2	=	op2
0001AAA8 =0000000E                M spar3	=	op3
0001AAA8 =00000013                M spar4	=	op4
0001AAA8                            	spAmpMod	$00, $00, $00, $00
0001AAA8 =00000000                M spam1	=	op1
0001AAA8 =00000000                M spam2	=	op2
0001AAA8 =00000000                M spam3	=	op3
0001AAA8 =00000000                M spam4	=	op4
0001AAA8                            	spSustainRt	$0E, $0E, $0E, $03
0001AAA8 =0000000E                M spsr1	=	op1
0001AAA8 =0000000E                M spsr2	=	op2
0001AAA8 =0000000E                M spsr3	=	op3
0001AAA8 =00000003                M spsr4	=	op4
0001AAA8                            	spSustainLv	$01, $01, $0F, $00
0001AAA8 =00000001                M spsl1	=	op1
0001AAA8 =00000001                M spsl2	=	op2
0001AAA8 =0000000F                M spsl3	=	op3
0001AAA8 =00000000                M spsl4	=	op4
0001AAA8                            	spDecayRt	$00, $00, $00, $00
0001AAA8 =00000000                M spdr1	=	op1
0001AAA8 =00000000                M spdr2	=	op2
0001AAA8 =00000000                M spdr3	=	op3
0001AAA8 =00000000                M spdr4	=	op4
0001AAA8                            	spReleaseRt	$0F, $0F, $0F, $0F
0001AAA8 =0000000F                M sprr1	=	op1
0001AAA8 =0000000F                M sprr2	=	op2
0001AAA8 =0000000F                M sprr3	=	op3
0001AAA8 =0000000F                M sprr4	=	op4
0001AAA8                            	spSSGEG		$00, $00, $00, $00
0001AAA8 =00000000                M spss1	=	op1
0001AAA8 =00000000                M spss2	=	op2
0001AAA8 =00000000                M spss3	=	op3
0001AAA8 =00000000                M spss4	=	op4
0001AAA8                            	spTotalLv	$1B, $25, $25, $00
0001AAA8 =0000001B                M sptl1	=	op1
0001AAA8 =00000025                M sptl2	=	op2
0001AAA8 =00000025                M sptl3	=	op3
0001AAA8 =00000000                M sptl4	=	op4
0001AAA8 3A                       M 	dc.b	(spfe<<3)+spal
0001AAA9 =00000080                M sptlmask4	set	$80
0001AAA9 =00000000                M sptlmask2	set	((spal>=5)<<7)
0001AAA9 =00000000                M sptlmask3	set	((spal>=4)<<7)
0001AAA9 =00000000                M sptlmask1	set	((spal=7)<<7)
0001AAA9 3127 4161                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001AAAD 8E8E 8D53                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001AAB1 0E0E 0E03                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001AAB5 0000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001AAB9 1FFF 1F0F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001AABD 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001AAC1 1B25 2580                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001AAC5 4E41 54                  M 	dc.b	'NAT'
0001AAC8                            
0001AAC8                            	; Patch $03
0001AAC8                            	; $3A
0001AAC8                            	; $20, $23, $60, $01,	$1E, $1F, $1F, $1F
0001AAC8                            	; $0A, $0A, $0B, $0A,	$05, $07, $0A, $08
0001AAC8                            	; $AF, $8F, $9F, $7F,	$21, $25, $28, $80
0001AAC8                            	spAlgorithm	$02
0001AAC8 =00000004                M spatnum	=	spatnum+1
0001AAC8 =00000002                M spal	=	val
0001AAC8                            	spFeedback	$07
0001AAC8 =00000007                M spfe	=	val
0001AAC8                            	spDetune	$02, $06, $02, $00
0001AAC8 =00000002                M spde1	=	op1
0001AAC8 =00000006                M spde2	=	op2
0001AAC8 =00000002                M spde3	=	op3
0001AAC8 =00000000                M spde4	=	op4
0001AAC8                            	spMultiple	$00, $00, $03, $01
0001AAC8 =00000000                M spmu1	=	op1
0001AAC8 =00000000                M spmu2	=	op2
0001AAC8 =00000003                M spmu3	=	op3
0001AAC8 =00000001                M spmu4	=	op4
0001AAC8                            	spRateScale	$00, $00, $00, $00
0001AAC8 =00000000                M sprs1	=	op1
0001AAC8 =00000000                M sprs2	=	op2
0001AAC8 =00000000                M sprs3	=	op3
0001AAC8 =00000000                M sprs4	=	op4
0001AAC8                            	spAttackRt	$1E, $1F, $1F, $1F
0001AAC8 =0000001E                M spar1	=	op1
0001AAC8 =0000001F                M spar2	=	op2
0001AAC8 =0000001F                M spar3	=	op3
0001AAC8 =0000001F                M spar4	=	op4
0001AAC8                            	spAmpMod	$00, $00, $00, $00
0001AAC8 =00000000                M spam1	=	op1
0001AAC8 =00000000                M spam2	=	op2
0001AAC8 =00000000                M spam3	=	op3
0001AAC8 =00000000                M spam4	=	op4
0001AAC8                            	spSustainRt	$0A, $0B, $0A, $0A
0001AAC8 =0000000A                M spsr1	=	op1
0001AAC8 =0000000B                M spsr2	=	op2
0001AAC8 =0000000A                M spsr3	=	op3
0001AAC8 =0000000A                M spsr4	=	op4
0001AAC8                            	spSustainLv	$0A, $09, $08, $07
0001AAC8 =0000000A                M spsl1	=	op1
0001AAC8 =00000009                M spsl2	=	op2
0001AAC8 =00000008                M spsl3	=	op3
0001AAC8 =00000007                M spsl4	=	op4
0001AAC8                            	spDecayRt	$05, $0A, $07, $08
0001AAC8 =00000005                M spdr1	=	op1
0001AAC8 =0000000A                M spdr2	=	op2
0001AAC8 =00000007                M spdr3	=	op3
0001AAC8 =00000008                M spdr4	=	op4
0001AAC8                            	spReleaseRt	$0F, $0F, $0F, $0F
0001AAC8 =0000000F                M sprr1	=	op1
0001AAC8 =0000000F                M sprr2	=	op2
0001AAC8 =0000000F                M sprr3	=	op3
0001AAC8 =0000000F                M sprr4	=	op4
0001AAC8                            	spSSGEG		$00, $00, $00, $00
0001AAC8 =00000000                M spss1	=	op1
0001AAC8 =00000000                M spss2	=	op2
0001AAC8 =00000000                M spss3	=	op3
0001AAC8 =00000000                M spss4	=	op4
0001AAC8                            	spTotalLv	$21, $28, $25, $00
0001AAC8 =00000021                M sptl1	=	op1
0001AAC8 =00000028                M sptl2	=	op2
0001AAC8 =00000025                M sptl3	=	op3
0001AAC8 =00000000                M sptl4	=	op4
0001AAC8 3A                       M 	dc.b	(spfe<<3)+spal
0001AAC9 =00000080                M sptlmask4	set	$80
0001AAC9 =00000000                M sptlmask2	set	((spal>=5)<<7)
0001AAC9 =00000000                M sptlmask3	set	((spal>=4)<<7)
0001AAC9 =00000000                M sptlmask1	set	((spal=7)<<7)
0001AAC9 2023 6001                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001AACD 1E1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001AAD1 0A0A 0B0A                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001AAD5 0507 0A08                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001AAD9 AF8F 9F7F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001AADD 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001AAE1 2125 2880                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001AAE5 4E41 54                  M 	dc.b	'NAT'
0001AAE8                            
0001AAE8                            	; Patch $04
0001AAE8                            	; $3B
0001AAE8                            	; $00, $00, $00, $01,	$1F, $1F, $1F, $5F
0001AAE8                            	; $17, $17, $14, $0E,	$17, $17, $14, $0D
0001AAE8                            	; $FF, $FF, $FF, $FF,	$18, $22, $07, $80
0001AAE8                            	spAlgorithm	$03
0001AAE8 =00000005                M spatnum	=	spatnum+1
0001AAE8 =00000003                M spal	=	val
0001AAE8                            	spFeedback	$07
0001AAE8 =00000007                M spfe	=	val
0001AAE8                            	spDetune	$00, $00, $00, $00
0001AAE8 =00000000                M spde1	=	op1
0001AAE8 =00000000                M spde2	=	op2
0001AAE8 =00000000                M spde3	=	op3
0001AAE8 =00000000                M spde4	=	op4
0001AAE8                            	spMultiple	$00, $00, $00, $01
0001AAE8 =00000000                M spmu1	=	op1
0001AAE8 =00000000                M spmu2	=	op2
0001AAE8 =00000000                M spmu3	=	op3
0001AAE8 =00000001                M spmu4	=	op4
0001AAE8                            	spRateScale	$00, $00, $00, $01
0001AAE8 =00000000                M sprs1	=	op1
0001AAE8 =00000000                M sprs2	=	op2
0001AAE8 =00000000                M sprs3	=	op3
0001AAE8 =00000001                M sprs4	=	op4
0001AAE8                            	spAttackRt	$1F, $1F, $1F, $1F
0001AAE8 =0000001F                M spar1	=	op1
0001AAE8 =0000001F                M spar2	=	op2
0001AAE8 =0000001F                M spar3	=	op3
0001AAE8 =0000001F                M spar4	=	op4
0001AAE8                            	spAmpMod	$00, $00, $00, $00
0001AAE8 =00000000                M spam1	=	op1
0001AAE8 =00000000                M spam2	=	op2
0001AAE8 =00000000                M spam3	=	op3
0001AAE8 =00000000                M spam4	=	op4
0001AAE8                            	spSustainRt	$17, $14, $17, $0E
0001AAE8 =00000017                M spsr1	=	op1
0001AAE8 =00000014                M spsr2	=	op2
0001AAE8 =00000017                M spsr3	=	op3
0001AAE8 =0000000E                M spsr4	=	op4
0001AAE8                            	spSustainLv	$0F, $0F, $0F, $0F
0001AAE8 =0000000F                M spsl1	=	op1
0001AAE8 =0000000F                M spsl2	=	op2
0001AAE8 =0000000F                M spsl3	=	op3
0001AAE8 =0000000F                M spsl4	=	op4
0001AAE8                            	spDecayRt	$17, $14, $17, $0D
0001AAE8 =00000017                M spdr1	=	op1
0001AAE8 =00000014                M spdr2	=	op2
0001AAE8 =00000017                M spdr3	=	op3
0001AAE8 =0000000D                M spdr4	=	op4
0001AAE8                            	spReleaseRt	$0F, $0F, $0F, $0F
0001AAE8 =0000000F                M sprr1	=	op1
0001AAE8 =0000000F                M sprr2	=	op2
0001AAE8 =0000000F                M sprr3	=	op3
0001AAE8 =0000000F                M sprr4	=	op4
0001AAE8                            	spSSGEG		$00, $00, $00, $00
0001AAE8 =00000000                M spss1	=	op1
0001AAE8 =00000000                M spss2	=	op2
0001AAE8 =00000000                M spss3	=	op3
0001AAE8 =00000000                M spss4	=	op4
0001AAE8                            	spTotalLv	$18, $07, $22, $00
0001AAE8 =00000018                M sptl1	=	op1
0001AAE8 =00000007                M sptl2	=	op2
0001AAE8 =00000022                M sptl3	=	op3
0001AAE8 =00000000                M sptl4	=	op4
0001AAE8 3B                       M 	dc.b	(spfe<<3)+spal
0001AAE9 =00000080                M sptlmask4	set	$80
0001AAE9 =00000000                M sptlmask2	set	((spal>=5)<<7)
0001AAE9 =00000000                M sptlmask3	set	((spal>=4)<<7)
0001AAE9 =00000000                M sptlmask1	set	((spal=7)<<7)
0001AAE9 0000 0001                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001AAED 1F1F 1F5F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001AAF1 1717 140E                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001AAF5 1717 140D                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001AAF9 FFFF FFFF                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001AAFD 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001AB01 1822 0780                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001AB05 4E41 54                  M 	dc.b	'NAT'
0001AB08                            
0001AB08                            	; Patch $05
0001AB08                            	; $2A
0001AB08                            	; $21, $39, $31, $53,	$9E, $DF, $9F, $9F
0001AB08                            	; $17, $1B, $02, $0D,	$00, $08, $03, $0B
0001AB08                            	; $3F, $3F, $0F, $6F,	$0E, $24, $0D, $80
0001AB08                            	spAlgorithm	$02
0001AB08 =00000006                M spatnum	=	spatnum+1
0001AB08 =00000002                M spal	=	val
0001AB08                            	spFeedback	$05
0001AB08 =00000005                M spfe	=	val
0001AB08                            	spDetune	$02, $03, $03, $05
0001AB08 =00000002                M spde1	=	op1
0001AB08 =00000003                M spde2	=	op2
0001AB08 =00000003                M spde3	=	op3
0001AB08 =00000005                M spde4	=	op4
0001AB08                            	spMultiple	$01, $01, $09, $03
0001AB08 =00000001                M spmu1	=	op1
0001AB08 =00000001                M spmu2	=	op2
0001AB08 =00000009                M spmu3	=	op3
0001AB08 =00000003                M spmu4	=	op4
0001AB08                            	spRateScale	$02, $02, $03, $02
0001AB08 =00000002                M sprs1	=	op1
0001AB08 =00000002                M sprs2	=	op2
0001AB08 =00000003                M sprs3	=	op3
0001AB08 =00000002                M sprs4	=	op4
0001AB08                            	spAttackRt	$1E, $1F, $1F, $1F
0001AB08 =0000001E                M spar1	=	op1
0001AB08 =0000001F                M spar2	=	op2
0001AB08 =0000001F                M spar3	=	op3
0001AB08 =0000001F                M spar4	=	op4
0001AB08                            	spAmpMod	$00, $00, $00, $00
0001AB08 =00000000                M spam1	=	op1
0001AB08 =00000000                M spam2	=	op2
0001AB08 =00000000                M spam3	=	op3
0001AB08 =00000000                M spam4	=	op4
0001AB08                            	spSustainRt	$17, $02, $1B, $0D
0001AB08 =00000017                M spsr1	=	op1
0001AB08 =00000002                M spsr2	=	op2
0001AB08 =0000001B                M spsr3	=	op3
0001AB08 =0000000D                M spsr4	=	op4
0001AB08                            	spSustainLv	$03, $00, $03, $06
0001AB08 =00000003                M spsl1	=	op1
0001AB08 =00000000                M spsl2	=	op2
0001AB08 =00000003                M spsl3	=	op3
0001AB08 =00000006                M spsl4	=	op4
0001AB08                            	spDecayRt	$00, $03, $08, $0B
0001AB08 =00000000                M spdr1	=	op1
0001AB08 =00000003                M spdr2	=	op2
0001AB08 =00000008                M spdr3	=	op3
0001AB08 =0000000B                M spdr4	=	op4
0001AB08                            	spReleaseRt	$0F, $0F, $0F, $0F
0001AB08 =0000000F                M sprr1	=	op1
0001AB08 =0000000F                M sprr2	=	op2
0001AB08 =0000000F                M sprr3	=	op3
0001AB08 =0000000F                M sprr4	=	op4
0001AB08                            	spSSGEG		$00, $00, $00, $00
0001AB08 =00000000                M spss1	=	op1
0001AB08 =00000000                M spss2	=	op2
0001AB08 =00000000                M spss3	=	op3
0001AB08 =00000000                M spss4	=	op4
0001AB08                            	spTotalLv	$0E, $0D, $24, $00
0001AB08 =0000000E                M sptl1	=	op1
0001AB08 =0000000D                M sptl2	=	op2
0001AB08 =00000024                M sptl3	=	op3
0001AB08 =00000000                M sptl4	=	op4
0001AB08 2A                       M 	dc.b	(spfe<<3)+spal
0001AB09 =00000080                M sptlmask4	set	$80
0001AB09 =00000000                M sptlmask2	set	((spal>=5)<<7)
0001AB09 =00000000                M sptlmask3	set	((spal>=4)<<7)
0001AB09 =00000000                M sptlmask1	set	((spal=7)<<7)
0001AB09 2139 3153                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001AB0D 9EDF 9F9F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001AB11 171B 020D                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001AB15 0008 030B                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001AB19 3F3F 0F6F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001AB1D 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001AB21 0E24 0D80                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001AB25 4E41 54                  M 	dc.b	'NAT'
0001AB28                            
0001AB28                            	; Patch $06
0001AB28                            	; $3A
0001AB28                            	; $00, $05, $00, $01,	$1F, $1F, $1E, $15
0001AB28                            	; $04, $05, $04, $03,	$00, $00, $00, $00
0001AB28                            	; $0F, $0F, $1F, $0F,	$1B, $47, $1F, $80
0001AB28                            	spAlgorithm	$02
0001AB28 =00000007                M spatnum	=	spatnum+1
0001AB28 =00000002                M spal	=	val
0001AB28                            	spFeedback	$07
0001AB28 =00000007                M spfe	=	val
0001AB28                            	spDetune	$00, $00, $00, $00
0001AB28 =00000000                M spde1	=	op1
0001AB28 =00000000                M spde2	=	op2
0001AB28 =00000000                M spde3	=	op3
0001AB28 =00000000                M spde4	=	op4
0001AB28                            	spMultiple	$00, $00, $05, $01
0001AB28 =00000000                M spmu1	=	op1
0001AB28 =00000000                M spmu2	=	op2
0001AB28 =00000005                M spmu3	=	op3
0001AB28 =00000001                M spmu4	=	op4
0001AB28                            	spRateScale	$00, $00, $00, $00
0001AB28 =00000000                M sprs1	=	op1
0001AB28 =00000000                M sprs2	=	op2
0001AB28 =00000000                M sprs3	=	op3
0001AB28 =00000000                M sprs4	=	op4
0001AB28                            	spAttackRt	$1F, $1E, $1F, $15
0001AB28 =0000001F                M spar1	=	op1
0001AB28 =0000001E                M spar2	=	op2
0001AB28 =0000001F                M spar3	=	op3
0001AB28 =00000015                M spar4	=	op4
0001AB28                            	spAmpMod	$00, $00, $00, $00
0001AB28 =00000000                M spam1	=	op1
0001AB28 =00000000                M spam2	=	op2
0001AB28 =00000000                M spam3	=	op3
0001AB28 =00000000                M spam4	=	op4
0001AB28                            	spSustainRt	$04, $04, $05, $03
0001AB28 =00000004                M spsr1	=	op1
0001AB28 =00000004                M spsr2	=	op2
0001AB28 =00000005                M spsr3	=	op3
0001AB28 =00000003                M spsr4	=	op4
0001AB28                            	spSustainLv	$00, $01, $00, $00
0001AB28 =00000000                M spsl1	=	op1
0001AB28 =00000001                M spsl2	=	op2
0001AB28 =00000000                M spsl3	=	op3
0001AB28 =00000000                M spsl4	=	op4
0001AB28                            	spDecayRt	$00, $00, $00, $00
0001AB28 =00000000                M spdr1	=	op1
0001AB28 =00000000                M spdr2	=	op2
0001AB28 =00000000                M spdr3	=	op3
0001AB28 =00000000                M spdr4	=	op4
0001AB28                            	spReleaseRt	$0F, $0F, $0F, $0F
0001AB28 =0000000F                M sprr1	=	op1
0001AB28 =0000000F                M sprr2	=	op2
0001AB28 =0000000F                M sprr3	=	op3
0001AB28 =0000000F                M sprr4	=	op4
0001AB28                            	spSSGEG		$00, $00, $00, $00
0001AB28 =00000000                M spss1	=	op1
0001AB28 =00000000                M spss2	=	op2
0001AB28 =00000000                M spss3	=	op3
0001AB28 =00000000                M spss4	=	op4
0001AB28                            	spTotalLv	$1B, $1F, $47, $00
0001AB28 =0000001B                M sptl1	=	op1
0001AB28 =0000001F                M sptl2	=	op2
0001AB28 =00000047                M sptl3	=	op3
0001AB28 =00000000                M sptl4	=	op4
0001AB28 3A                       M 	dc.b	(spfe<<3)+spal
0001AB29 =00000080                M sptlmask4	set	$80
0001AB29 =00000000                M sptlmask2	set	((spal>=5)<<7)
0001AB29 =00000000                M sptlmask3	set	((spal>=4)<<7)
0001AB29 =00000000                M sptlmask1	set	((spal=7)<<7)
0001AB29 0005 0001                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001AB2D 1F1F 1E15                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001AB31 0405 0403                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001AB35 0000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001AB39 0F0F 1F0F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001AB3D 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001AB41 1B47 1F80                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001AB45 4E41 54                  M 	dc.b	'NAT'
0001AB48                            
0001AB48                            	; Patch $07
0001AB48                            	; $3D
0001AB48                            	; $01, $02, $02, $02,	$10, $50, $50, $50
0001AB48                            	; $07, $08, $08, $08,	$01, $00, $00, $00
0001AB48                            	; $2F, $1F, $1F, $1F,	$1C, $82, $82, $82
0001AB48                            	spAlgorithm	$05
0001AB48 =00000008                M spatnum	=	spatnum+1
0001AB48 =00000005                M spal	=	val
0001AB48                            	spFeedback	$07
0001AB48 =00000007                M spfe	=	val
0001AB48                            	spDetune	$00, $00, $00, $00
0001AB48 =00000000                M spde1	=	op1
0001AB48 =00000000                M spde2	=	op2
0001AB48 =00000000                M spde3	=	op3
0001AB48 =00000000                M spde4	=	op4
0001AB48                            	spMultiple	$01, $02, $02, $02
0001AB48 =00000001                M spmu1	=	op1
0001AB48 =00000002                M spmu2	=	op2
0001AB48 =00000002                M spmu3	=	op3
0001AB48 =00000002                M spmu4	=	op4
0001AB48                            	spRateScale	$00, $01, $01, $01
0001AB48 =00000000                M sprs1	=	op1
0001AB48 =00000001                M sprs2	=	op2
0001AB48 =00000001                M sprs3	=	op3
0001AB48 =00000001                M sprs4	=	op4
0001AB48                            	spAttackRt	$10, $10, $10, $10
0001AB48 =00000010                M spar1	=	op1
0001AB48 =00000010                M spar2	=	op2
0001AB48 =00000010                M spar3	=	op3
0001AB48 =00000010                M spar4	=	op4
0001AB48                            	spAmpMod	$00, $00, $00, $00
0001AB48 =00000000                M spam1	=	op1
0001AB48 =00000000                M spam2	=	op2
0001AB48 =00000000                M spam3	=	op3
0001AB48 =00000000                M spam4	=	op4
0001AB48                            	spSustainRt	$07, $08, $08, $08
0001AB48 =00000007                M spsr1	=	op1
0001AB48 =00000008                M spsr2	=	op2
0001AB48 =00000008                M spsr3	=	op3
0001AB48 =00000008                M spsr4	=	op4
0001AB48                            	spSustainLv	$02, $01, $01, $01
0001AB48 =00000002                M spsl1	=	op1
0001AB48 =00000001                M spsl2	=	op2
0001AB48 =00000001                M spsl3	=	op3
0001AB48 =00000001                M spsl4	=	op4
0001AB48                            	spDecayRt	$01, $00, $00, $00
0001AB48 =00000001                M spdr1	=	op1
0001AB48 =00000000                M spdr2	=	op2
0001AB48 =00000000                M spdr3	=	op3
0001AB48 =00000000                M spdr4	=	op4
0001AB48                            	spReleaseRt	$0F, $0F, $0F, $0F
0001AB48 =0000000F                M sprr1	=	op1
0001AB48 =0000000F                M sprr2	=	op2
0001AB48 =0000000F                M sprr3	=	op3
0001AB48 =0000000F                M sprr4	=	op4
0001AB48                            	spSSGEG		$00, $00, $00, $00
0001AB48 =00000000                M spss1	=	op1
0001AB48 =00000000                M spss2	=	op2
0001AB48 =00000000                M spss3	=	op3
0001AB48 =00000000                M spss4	=	op4
0001AB48                            	spTotalLv	$1C, $02, $02, $02
0001AB48 =0000001C                M sptl1	=	op1
0001AB48 =00000002                M sptl2	=	op2
0001AB48 =00000002                M sptl3	=	op3
0001AB48 =00000002                M sptl4	=	op4
0001AB48 3D                       M 	dc.b	(spfe<<3)+spal
0001AB49 =00000080                M sptlmask4	set	$80
0001AB49 =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
0001AB49 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
0001AB49 =00000000                M sptlmask1	set	((spal=7)<<7)
0001AB49 0102 0202                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001AB4D 1050 5050                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001AB51 0708 0808                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001AB55 0100 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001AB59 2F1F 1F1F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001AB5D 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001AB61 1C82 8282                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001AB65 4E41 54                  M 	dc.b	'NAT'
0001AB68                            
0001AB68                            	; Patch $08
0001AB68                            	; $3A
0001AB68                            	; $31, $27, $41, $61,	$8E, $8E, $8D, $53
0001AB68                            	; $0E, $0E, $0E, $03,	$00, $00, $00, $00
0001AB68                            	; $1F, $FF, $1F, $0F,	$1B, $25, $25, $80
0001AB68                            	spAlgorithm	$02
0001AB68 =00000009                M spatnum	=	spatnum+1
0001AB68 =00000002                M spal	=	val
0001AB68                            	spFeedback	$07
0001AB68 =00000007                M spfe	=	val
0001AB68                            	spDetune	$03, $04, $02, $06
0001AB68 =00000003                M spde1	=	op1
0001AB68 =00000004                M spde2	=	op2
0001AB68 =00000002                M spde3	=	op3
0001AB68 =00000006                M spde4	=	op4
0001AB68                            	spMultiple	$01, $01, $07, $01
0001AB68 =00000001                M spmu1	=	op1
0001AB68 =00000001                M spmu2	=	op2
0001AB68 =00000007                M spmu3	=	op3
0001AB68 =00000001                M spmu4	=	op4
0001AB68                            	spRateScale	$02, $02, $02, $01
0001AB68 =00000002                M sprs1	=	op1
0001AB68 =00000002                M sprs2	=	op2
0001AB68 =00000002                M sprs3	=	op3
0001AB68 =00000001                M sprs4	=	op4
0001AB68                            	spAttackRt	$0E, $0D, $0E, $13
0001AB68 =0000000E                M spar1	=	op1
0001AB68 =0000000D                M spar2	=	op2
0001AB68 =0000000E                M spar3	=	op3
0001AB68 =00000013                M spar4	=	op4
0001AB68                            	spAmpMod	$00, $00, $00, $00
0001AB68 =00000000                M spam1	=	op1
0001AB68 =00000000                M spam2	=	op2
0001AB68 =00000000                M spam3	=	op3
0001AB68 =00000000                M spam4	=	op4
0001AB68                            	spSustainRt	$0E, $0E, $0E, $03
0001AB68 =0000000E                M spsr1	=	op1
0001AB68 =0000000E                M spsr2	=	op2
0001AB68 =0000000E                M spsr3	=	op3
0001AB68 =00000003                M spsr4	=	op4
0001AB68                            	spSustainLv	$01, $01, $0F, $00
0001AB68 =00000001                M spsl1	=	op1
0001AB68 =00000001                M spsl2	=	op2
0001AB68 =0000000F                M spsl3	=	op3
0001AB68 =00000000                M spsl4	=	op4
0001AB68                            	spDecayRt	$00, $00, $00, $00
0001AB68 =00000000                M spdr1	=	op1
0001AB68 =00000000                M spdr2	=	op2
0001AB68 =00000000                M spdr3	=	op3
0001AB68 =00000000                M spdr4	=	op4
0001AB68                            	spReleaseRt	$0F, $0F, $0F, $0F
0001AB68 =0000000F                M sprr1	=	op1
0001AB68 =0000000F                M sprr2	=	op2
0001AB68 =0000000F                M sprr3	=	op3
0001AB68 =0000000F                M sprr4	=	op4
0001AB68                            	spSSGEG		$00, $00, $00, $00
0001AB68 =00000000                M spss1	=	op1
0001AB68 =00000000                M spss2	=	op2
0001AB68 =00000000                M spss3	=	op3
0001AB68 =00000000                M spss4	=	op4
0001AB68                            	spTotalLv	$1B, $25, $25, $00
0001AB68 =0000001B                M sptl1	=	op1
0001AB68 =00000025                M sptl2	=	op2
0001AB68 =00000025                M sptl3	=	op3
0001AB68 =00000000                M sptl4	=	op4
0001AB68 3A                       M 	dc.b	(spfe<<3)+spal
0001AB69 =00000080                M sptlmask4	set	$80
0001AB69 =00000000                M sptlmask2	set	((spal>=5)<<7)
0001AB69 =00000000                M sptlmask3	set	((spal>=4)<<7)
0001AB69 =00000000                M sptlmask1	set	((spal=7)<<7)
0001AB69 3127 4161                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001AB6D 8E8E 8D53                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001AB71 0E0E 0E03                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001AB75 0000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001AB79 1FFF 1F0F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001AB7D 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001AB81 1B25 2580                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001AB85 4E41 54                  M 	dc.b	'NAT'
0001AB88                            
0001AB88                            	; Patch $09
0001AB88                            	; $3A
0001AB88                            	; $51, $01, $11, $01,	$0F, $10, $0F, $10
0001AB88                            	; $08, $0A, $00, $06,	$01, $01, $01, $01
0001AB88                            	; $1F, $1F, $1F, $1F,	$20, $2A, $2D, $80
0001AB88                            	spAlgorithm	$02
0001AB88 =0000000A                M spatnum	=	spatnum+1
0001AB88 =00000002                M spal	=	val
0001AB88                            	spFeedback	$07
0001AB88 =00000007                M spfe	=	val
0001AB88                            	spDetune	$05, $01, $00, $00
0001AB88 =00000005                M spde1	=	op1
0001AB88 =00000001                M spde2	=	op2
0001AB88 =00000000                M spde3	=	op3
0001AB88 =00000000                M spde4	=	op4
0001AB88                            	spMultiple	$01, $01, $01, $01
0001AB88 =00000001                M spmu1	=	op1
0001AB88 =00000001                M spmu2	=	op2
0001AB88 =00000001                M spmu3	=	op3
0001AB88 =00000001                M spmu4	=	op4
0001AB88                            	spRateScale	$00, $00, $00, $00
0001AB88 =00000000                M sprs1	=	op1
0001AB88 =00000000                M sprs2	=	op2
0001AB88 =00000000                M sprs3	=	op3
0001AB88 =00000000                M sprs4	=	op4
0001AB88                            	spAttackRt	$0F, $0F, $10, $10
0001AB88 =0000000F                M spar1	=	op1
0001AB88 =0000000F                M spar2	=	op2
0001AB88 =00000010                M spar3	=	op3
0001AB88 =00000010                M spar4	=	op4
0001AB88                            	spAmpMod	$00, $00, $00, $00
0001AB88 =00000000                M spam1	=	op1
0001AB88 =00000000                M spam2	=	op2
0001AB88 =00000000                M spam3	=	op3
0001AB88 =00000000                M spam4	=	op4
0001AB88                            	spSustainRt	$08, $00, $0A, $06
0001AB88 =00000008                M spsr1	=	op1
0001AB88 =00000000                M spsr2	=	op2
0001AB88 =0000000A                M spsr3	=	op3
0001AB88 =00000006                M spsr4	=	op4
0001AB88                            	spSustainLv	$01, $01, $01, $01
0001AB88 =00000001                M spsl1	=	op1
0001AB88 =00000001                M spsl2	=	op2
0001AB88 =00000001                M spsl3	=	op3
0001AB88 =00000001                M spsl4	=	op4
0001AB88                            	spDecayRt	$01, $01, $01, $01
0001AB88 =00000001                M spdr1	=	op1
0001AB88 =00000001                M spdr2	=	op2
0001AB88 =00000001                M spdr3	=	op3
0001AB88 =00000001                M spdr4	=	op4
0001AB88                            	spReleaseRt	$0F, $0F, $0F, $0F
0001AB88 =0000000F                M sprr1	=	op1
0001AB88 =0000000F                M sprr2	=	op2
0001AB88 =0000000F                M sprr3	=	op3
0001AB88 =0000000F                M sprr4	=	op4
0001AB88                            	spSSGEG		$00, $00, $00, $00
0001AB88 =00000000                M spss1	=	op1
0001AB88 =00000000                M spss2	=	op2
0001AB88 =00000000                M spss3	=	op3
0001AB88 =00000000                M spss4	=	op4
0001AB88                            	spTotalLv	$20, $2D, $2A, $00
0001AB88 =00000020                M sptl1	=	op1
0001AB88 =0000002D                M sptl2	=	op2
0001AB88 =0000002A                M sptl3	=	op3
0001AB88 =00000000                M sptl4	=	op4
0001AB88 3A                       M 	dc.b	(spfe<<3)+spal
0001AB89 =00000080                M sptlmask4	set	$80
0001AB89 =00000000                M sptlmask2	set	((spal>=5)<<7)
0001AB89 =00000000                M sptlmask3	set	((spal>=4)<<7)
0001AB89 =00000000                M sptlmask1	set	((spal=7)<<7)
0001AB89 5101 1101                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001AB8D 0F10 0F10                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001AB91 080A 0006                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001AB95 0101 0101                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001AB99 1F1F 1F1F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001AB9D 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001ABA1 202A 2D80                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001ABA5 4E41 54                  M 	dc.b	'NAT'
0001ABA8                            
0001ABA8                            	; Patch $0A
0001ABA8                            	; $3C
0001ABA8                            	; $02, $01, $03, $01,	$1F, $1F, $1F, $1F
0001ABA8                            	; $0A, $0A, $0A, $0A,	$02, $02, $02, $02
0001ABA8                            	; $FF, $3F, $FF, $3F,	$22, $88, $1D, $88
0001ABA8                            	spAlgorithm	$04
0001ABA8 =0000000B                M spatnum	=	spatnum+1
0001ABA8 =00000004                M spal	=	val
0001ABA8                            	spFeedback	$07
0001ABA8 =00000007                M spfe	=	val
0001ABA8                            	spDetune	$00, $00, $00, $00
0001ABA8 =00000000                M spde1	=	op1
0001ABA8 =00000000                M spde2	=	op2
0001ABA8 =00000000                M spde3	=	op3
0001ABA8 =00000000                M spde4	=	op4
0001ABA8                            	spMultiple	$02, $03, $01, $01
0001ABA8 =00000002                M spmu1	=	op1
0001ABA8 =00000003                M spmu2	=	op2
0001ABA8 =00000001                M spmu3	=	op3
0001ABA8 =00000001                M spmu4	=	op4
0001ABA8                            	spRateScale	$00, $00, $00, $00
0001ABA8 =00000000                M sprs1	=	op1
0001ABA8 =00000000                M sprs2	=	op2
0001ABA8 =00000000                M sprs3	=	op3
0001ABA8 =00000000                M sprs4	=	op4
0001ABA8                            	spAttackRt	$1F, $1F, $1F, $1F
0001ABA8 =0000001F                M spar1	=	op1
0001ABA8 =0000001F                M spar2	=	op2
0001ABA8 =0000001F                M spar3	=	op3
0001ABA8 =0000001F                M spar4	=	op4
0001ABA8                            	spAmpMod	$00, $00, $00, $00
0001ABA8 =00000000                M spam1	=	op1
0001ABA8 =00000000                M spam2	=	op2
0001ABA8 =00000000                M spam3	=	op3
0001ABA8 =00000000                M spam4	=	op4
0001ABA8                            	spSustainRt	$0A, $0A, $0A, $0A
0001ABA8 =0000000A                M spsr1	=	op1
0001ABA8 =0000000A                M spsr2	=	op2
0001ABA8 =0000000A                M spsr3	=	op3
0001ABA8 =0000000A                M spsr4	=	op4
0001ABA8                            	spSustainLv	$0F, $0F, $03, $03
0001ABA8 =0000000F                M spsl1	=	op1
0001ABA8 =0000000F                M spsl2	=	op2
0001ABA8 =00000003                M spsl3	=	op3
0001ABA8 =00000003                M spsl4	=	op4
0001ABA8                            	spDecayRt	$02, $02, $02, $02
0001ABA8 =00000002                M spdr1	=	op1
0001ABA8 =00000002                M spdr2	=	op2
0001ABA8 =00000002                M spdr3	=	op3
0001ABA8 =00000002                M spdr4	=	op4
0001ABA8                            	spReleaseRt	$0F, $0F, $0F, $0F
0001ABA8 =0000000F                M sprr1	=	op1
0001ABA8 =0000000F                M sprr2	=	op2
0001ABA8 =0000000F                M sprr3	=	op3
0001ABA8 =0000000F                M sprr4	=	op4
0001ABA8                            	spSSGEG		$00, $00, $00, $00
0001ABA8 =00000000                M spss1	=	op1
0001ABA8 =00000000                M spss2	=	op2
0001ABA8 =00000000                M spss3	=	op3
0001ABA8 =00000000                M spss4	=	op4
0001ABA8                            	spTotalLv	$22, $1D, $08, $08
0001ABA8 =00000022                M sptl1	=	op1
0001ABA8 =0000001D                M sptl2	=	op2
0001ABA8 =00000008                M sptl3	=	op3
0001ABA8 =00000008                M sptl4	=	op4
0001ABA8 3C                       M 	dc.b	(spfe<<3)+spal
0001ABA9 =00000080                M sptlmask4	set	$80
0001ABA9 =00000000                M sptlmask2	set	((spal>=5)<<7)
0001ABA9 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
0001ABA9 =00000000                M sptlmask1	set	((spal=7)<<7)
0001ABA9 0201 0301                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001ABAD 1F1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001ABB1 0A0A 0A0A                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001ABB5 0202 0202                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001ABB9 FF3F FF3F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001ABBD 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001ABC1 2288 1D88                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001ABC5 4E41 54                  M 	dc.b	'NAT'
0001ABC8                            
0001ABC8                            	; Patch $0B
0001ABC8                            	; $32
0001ABC8                            	; $71, $37, $33, $01,	$99, $55, $19, $56
0001ABC8                            	; $02, $0A, $04, $0F,	$04, $06, $05, $04
0001ABC8                            	; $1F, $2F, $FF, $1F,	$26, $24, $20, $88
0001ABC8                            	spAlgorithm	$02
0001ABC8 =0000000C                M spatnum	=	spatnum+1
0001ABC8 =00000002                M spal	=	val
0001ABC8                            	spFeedback	$06
0001ABC8 =00000006                M spfe	=	val
0001ABC8                            	spDetune	$07, $03, $03, $00
0001ABC8 =00000007                M spde1	=	op1
0001ABC8 =00000003                M spde2	=	op2
0001ABC8 =00000003                M spde3	=	op3
0001ABC8 =00000000                M spde4	=	op4
0001ABC8                            	spMultiple	$01, $03, $07, $01
0001ABC8 =00000001                M spmu1	=	op1
0001ABC8 =00000003                M spmu2	=	op2
0001ABC8 =00000007                M spmu3	=	op3
0001ABC8 =00000001                M spmu4	=	op4
0001ABC8                            	spRateScale	$02, $00, $01, $01
0001ABC8 =00000002                M sprs1	=	op1
0001ABC8 =00000000                M sprs2	=	op2
0001ABC8 =00000001                M sprs3	=	op3
0001ABC8 =00000001                M sprs4	=	op4
0001ABC8                            	spAttackRt	$19, $19, $15, $16
0001ABC8 =00000019                M spar1	=	op1
0001ABC8 =00000019                M spar2	=	op2
0001ABC8 =00000015                M spar3	=	op3
0001ABC8 =00000016                M spar4	=	op4
0001ABC8                            	spAmpMod	$00, $00, $00, $00
0001ABC8 =00000000                M spam1	=	op1
0001ABC8 =00000000                M spam2	=	op2
0001ABC8 =00000000                M spam3	=	op3
0001ABC8 =00000000                M spam4	=	op4
0001ABC8                            	spSustainRt	$02, $04, $0A, $0F
0001ABC8 =00000002                M spsr1	=	op1
0001ABC8 =00000004                M spsr2	=	op2
0001ABC8 =0000000A                M spsr3	=	op3
0001ABC8 =0000000F                M spsr4	=	op4
0001ABC8                            	spSustainLv	$01, $0F, $02, $01
0001ABC8 =00000001                M spsl1	=	op1
0001ABC8 =0000000F                M spsl2	=	op2
0001ABC8 =00000002                M spsl3	=	op3
0001ABC8 =00000001                M spsl4	=	op4
0001ABC8                            	spDecayRt	$04, $05, $06, $04
0001ABC8 =00000004                M spdr1	=	op1
0001ABC8 =00000005                M spdr2	=	op2
0001ABC8 =00000006                M spdr3	=	op3
0001ABC8 =00000004                M spdr4	=	op4
0001ABC8                            	spReleaseRt	$0F, $0F, $0F, $0F
0001ABC8 =0000000F                M sprr1	=	op1
0001ABC8 =0000000F                M sprr2	=	op2
0001ABC8 =0000000F                M sprr3	=	op3
0001ABC8 =0000000F                M sprr4	=	op4
0001ABC8                            	spSSGEG		$00, $00, $00, $00
0001ABC8 =00000000                M spss1	=	op1
0001ABC8 =00000000                M spss2	=	op2
0001ABC8 =00000000                M spss3	=	op3
0001ABC8 =00000000                M spss4	=	op4
0001ABC8                            	spTotalLv	$26, $20, $24, $08
0001ABC8 =00000026                M sptl1	=	op1
0001ABC8 =00000020                M sptl2	=	op2
0001ABC8 =00000024                M sptl3	=	op3
0001ABC8 =00000008                M sptl4	=	op4
0001ABC8 32                       M 	dc.b	(spfe<<3)+spal
0001ABC9 =00000080                M sptlmask4	set	$80
0001ABC9 =00000000                M sptlmask2	set	((spal>=5)<<7)
0001ABC9 =00000000                M sptlmask3	set	((spal>=4)<<7)
0001ABC9 =00000000                M sptlmask1	set	((spal=7)<<7)
0001ABC9 7137 3301                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001ABCD 9955 1956                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001ABD1 020A 040F                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001ABD5 0406 0504                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001ABD9 1F2F FF1F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001ABDD 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001ABE1 2624 2088                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001ABE5 4E41 54                  M 	dc.b	'NAT'
0001ABE8                            
0001ABE8                            	; Patch $0C
0001ABE8                            	; $3A
0001ABE8                            	; $01, $01, $01, $01,	$0B, $0C, $0C, $0E
0001ABE8                            	; $07, $07, $08, $07,	$04, $04, $04, $05
0001ABE8                            	; $2F, $2F, $2F, $2F,	$25, $27, $26, $80
0001ABE8                            	spAlgorithm	$02
0001ABE8 =0000000D                M spatnum	=	spatnum+1
0001ABE8 =00000002                M spal	=	val
0001ABE8                            	spFeedback	$07
0001ABE8 =00000007                M spfe	=	val
0001ABE8                            	spDetune	$00, $00, $00, $00
0001ABE8 =00000000                M spde1	=	op1
0001ABE8 =00000000                M spde2	=	op2
0001ABE8 =00000000                M spde3	=	op3
0001ABE8 =00000000                M spde4	=	op4
0001ABE8                            	spMultiple	$01, $01, $01, $01
0001ABE8 =00000001                M spmu1	=	op1
0001ABE8 =00000001                M spmu2	=	op2
0001ABE8 =00000001                M spmu3	=	op3
0001ABE8 =00000001                M spmu4	=	op4
0001ABE8                            	spRateScale	$00, $00, $00, $00
0001ABE8 =00000000                M sprs1	=	op1
0001ABE8 =00000000                M sprs2	=	op2
0001ABE8 =00000000                M sprs3	=	op3
0001ABE8 =00000000                M sprs4	=	op4
0001ABE8                            	spAttackRt	$0B, $0C, $0C, $0E
0001ABE8 =0000000B                M spar1	=	op1
0001ABE8 =0000000C                M spar2	=	op2
0001ABE8 =0000000C                M spar3	=	op3
0001ABE8 =0000000E                M spar4	=	op4
0001ABE8                            	spAmpMod	$00, $00, $00, $00
0001ABE8 =00000000                M spam1	=	op1
0001ABE8 =00000000                M spam2	=	op2
0001ABE8 =00000000                M spam3	=	op3
0001ABE8 =00000000                M spam4	=	op4
0001ABE8                            	spSustainRt	$07, $08, $07, $07
0001ABE8 =00000007                M spsr1	=	op1
0001ABE8 =00000008                M spsr2	=	op2
0001ABE8 =00000007                M spsr3	=	op3
0001ABE8 =00000007                M spsr4	=	op4
0001ABE8                            	spSustainLv	$02, $02, $02, $02
0001ABE8 =00000002                M spsl1	=	op1
0001ABE8 =00000002                M spsl2	=	op2
0001ABE8 =00000002                M spsl3	=	op3
0001ABE8 =00000002                M spsl4	=	op4
0001ABE8                            	spDecayRt	$04, $04, $04, $05
0001ABE8 =00000004                M spdr1	=	op1
0001ABE8 =00000004                M spdr2	=	op2
0001ABE8 =00000004                M spdr3	=	op3
0001ABE8 =00000005                M spdr4	=	op4
0001ABE8                            	spReleaseRt	$0F, $0F, $0F, $0F
0001ABE8 =0000000F                M sprr1	=	op1
0001ABE8 =0000000F                M sprr2	=	op2
0001ABE8 =0000000F                M sprr3	=	op3
0001ABE8 =0000000F                M sprr4	=	op4
0001ABE8                            	spSSGEG		$00, $00, $00, $00
0001ABE8 =00000000                M spss1	=	op1
0001ABE8 =00000000                M spss2	=	op2
0001ABE8 =00000000                M spss3	=	op3
0001ABE8 =00000000                M spss4	=	op4
0001ABE8                            	spTotalLv	$25, $26, $27, $00
0001ABE8 =00000025                M sptl1	=	op1
0001ABE8 =00000026                M sptl2	=	op2
0001ABE8 =00000027                M sptl3	=	op3
0001ABE8 =00000000                M sptl4	=	op4
0001ABE8 3A                       M 	dc.b	(spfe<<3)+spal
0001ABE9 =00000080                M sptlmask4	set	$80
0001ABE9 =00000000                M sptlmask2	set	((spal>=5)<<7)
0001ABE9 =00000000                M sptlmask3	set	((spal>=4)<<7)
0001ABE9 =00000000                M sptlmask1	set	((spal=7)<<7)
0001ABE9 0101 0101                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001ABED 0B0C 0C0E                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001ABF1 0707 0807                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001ABF5 0404 0405                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001ABF9 2F2F 2F2F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001ABFD 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001AC01 2527 2680                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001AC05 4E41 54                  M 	dc.b	'NAT'
0001AC08                            
0001AC08                            	; Patch $0D
0001AC08                            	; $3C
0001AC08                            	; $01, $02, $0F, $04,	$8D, $52, $9F, $1F
0001AC08                            	; $09, $00, $00, $0D,	$00, $00, $00, $00
0001AC08                            	; $2F, $0F, $0F, $FF,	$15, $80, $1D, $87
0001AC08                            	spAlgorithm	$04
0001AC08 =0000000E                M spatnum	=	spatnum+1
0001AC08 =00000004                M spal	=	val
0001AC08                            	spFeedback	$07
0001AC08 =00000007                M spfe	=	val
0001AC08                            	spDetune	$00, $00, $00, $00
0001AC08 =00000000                M spde1	=	op1
0001AC08 =00000000                M spde2	=	op2
0001AC08 =00000000                M spde3	=	op3
0001AC08 =00000000                M spde4	=	op4
0001AC08                            	spMultiple	$01, $0F, $02, $04
0001AC08 =00000001                M spmu1	=	op1
0001AC08 =0000000F                M spmu2	=	op2
0001AC08 =00000002                M spmu3	=	op3
0001AC08 =00000004                M spmu4	=	op4
0001AC08                            	spRateScale	$02, $02, $01, $00
0001AC08 =00000002                M sprs1	=	op1
0001AC08 =00000002                M sprs2	=	op2
0001AC08 =00000001                M sprs3	=	op3
0001AC08 =00000000                M sprs4	=	op4
0001AC08                            	spAttackRt	$0D, $1F, $12, $1F
0001AC08 =0000000D                M spar1	=	op1
0001AC08 =0000001F                M spar2	=	op2
0001AC08 =00000012                M spar3	=	op3
0001AC08 =0000001F                M spar4	=	op4
0001AC08                            	spAmpMod	$00, $00, $00, $00
0001AC08 =00000000                M spam1	=	op1
0001AC08 =00000000                M spam2	=	op2
0001AC08 =00000000                M spam3	=	op3
0001AC08 =00000000                M spam4	=	op4
0001AC08                            	spSustainRt	$09, $00, $00, $0D
0001AC08 =00000009                M spsr1	=	op1
0001AC08 =00000000                M spsr2	=	op2
0001AC08 =00000000                M spsr3	=	op3
0001AC08 =0000000D                M spsr4	=	op4
0001AC08                            	spSustainLv	$02, $00, $00, $0F
0001AC08 =00000002                M spsl1	=	op1
0001AC08 =00000000                M spsl2	=	op2
0001AC08 =00000000                M spsl3	=	op3
0001AC08 =0000000F                M spsl4	=	op4
0001AC08                            	spDecayRt	$00, $00, $00, $00
0001AC08 =00000000                M spdr1	=	op1
0001AC08 =00000000                M spdr2	=	op2
0001AC08 =00000000                M spdr3	=	op3
0001AC08 =00000000                M spdr4	=	op4
0001AC08                            	spReleaseRt	$0F, $0F, $0F, $0F
0001AC08 =0000000F                M sprr1	=	op1
0001AC08 =0000000F                M sprr2	=	op2
0001AC08 =0000000F                M sprr3	=	op3
0001AC08 =0000000F                M sprr4	=	op4
0001AC08                            	spSSGEG		$00, $00, $00, $00
0001AC08 =00000000                M spss1	=	op1
0001AC08 =00000000                M spss2	=	op2
0001AC08 =00000000                M spss3	=	op3
0001AC08 =00000000                M spss4	=	op4
0001AC08                            	spTotalLv	$15, $1D, $00, $07
0001AC08 =00000015                M sptl1	=	op1
0001AC08 =0000001D                M sptl2	=	op2
0001AC08 =00000000                M sptl3	=	op3
0001AC08 =00000007                M sptl4	=	op4
0001AC08 3C                       M 	dc.b	(spfe<<3)+spal
0001AC09 =00000080                M sptlmask4	set	$80
0001AC09 =00000000                M sptlmask2	set	((spal>=5)<<7)
0001AC09 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
0001AC09 =00000000                M sptlmask1	set	((spal=7)<<7)
0001AC09 0102 0F04                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001AC0D 8D52 9F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001AC11 0900 000D                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001AC15 0000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001AC19 2F0F 0FFF                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001AC1D 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001AC21 1580 1D87                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001AC25 4E41 54                  M 	dc.b	'NAT'
0001AC28                            
0001AC28                            	; Patch $0E
0001AC28                            	; $3A
0001AC28                            	; $01, $03, $01, $01,	$18, $10, $15, $14
0001AC28                            	; $0A, $0D, $08, $07,	$00, $00, $00, $00
0001AC28                            	; $0F, $FF, $0F, $1F,	$25, $22, $19, $80
0001AC28                            	spAlgorithm	$02
0001AC28 =0000000F                M spatnum	=	spatnum+1
0001AC28 =00000002                M spal	=	val
0001AC28                            	spFeedback	$07
0001AC28 =00000007                M spfe	=	val
0001AC28                            	spDetune	$00, $00, $00, $00
0001AC28 =00000000                M spde1	=	op1
0001AC28 =00000000                M spde2	=	op2
0001AC28 =00000000                M spde3	=	op3
0001AC28 =00000000                M spde4	=	op4
0001AC28                            	spMultiple	$01, $01, $03, $01
0001AC28 =00000001                M spmu1	=	op1
0001AC28 =00000001                M spmu2	=	op2
0001AC28 =00000003                M spmu3	=	op3
0001AC28 =00000001                M spmu4	=	op4
0001AC28                            	spRateScale	$00, $00, $00, $00
0001AC28 =00000000                M sprs1	=	op1
0001AC28 =00000000                M sprs2	=	op2
0001AC28 =00000000                M sprs3	=	op3
0001AC28 =00000000                M sprs4	=	op4
0001AC28                            	spAttackRt	$18, $15, $10, $14
0001AC28 =00000018                M spar1	=	op1
0001AC28 =00000015                M spar2	=	op2
0001AC28 =00000010                M spar3	=	op3
0001AC28 =00000014                M spar4	=	op4
0001AC28                            	spAmpMod	$00, $00, $00, $00
0001AC28 =00000000                M spam1	=	op1
0001AC28 =00000000                M spam2	=	op2
0001AC28 =00000000                M spam3	=	op3
0001AC28 =00000000                M spam4	=	op4
0001AC28                            	spSustainRt	$0A, $08, $0D, $07
0001AC28 =0000000A                M spsr1	=	op1
0001AC28 =00000008                M spsr2	=	op2
0001AC28 =0000000D                M spsr3	=	op3
0001AC28 =00000007                M spsr4	=	op4
0001AC28                            	spSustainLv	$00, $00, $0F, $01
0001AC28 =00000000                M spsl1	=	op1
0001AC28 =00000000                M spsl2	=	op2
0001AC28 =0000000F                M spsl3	=	op3
0001AC28 =00000001                M spsl4	=	op4
0001AC28                            	spDecayRt	$00, $00, $00, $00
0001AC28 =00000000                M spdr1	=	op1
0001AC28 =00000000                M spdr2	=	op2
0001AC28 =00000000                M spdr3	=	op3
0001AC28 =00000000                M spdr4	=	op4
0001AC28                            	spReleaseRt	$0F, $0F, $0F, $0F
0001AC28 =0000000F                M sprr1	=	op1
0001AC28 =0000000F                M sprr2	=	op2
0001AC28 =0000000F                M sprr3	=	op3
0001AC28 =0000000F                M sprr4	=	op4
0001AC28                            	spSSGEG		$00, $00, $00, $00
0001AC28 =00000000                M spss1	=	op1
0001AC28 =00000000                M spss2	=	op2
0001AC28 =00000000                M spss3	=	op3
0001AC28 =00000000                M spss4	=	op4
0001AC28                            	spTotalLv	$25, $19, $22, $00
0001AC28 =00000025                M sptl1	=	op1
0001AC28 =00000019                M sptl2	=	op2
0001AC28 =00000022                M sptl3	=	op3
0001AC28 =00000000                M sptl4	=	op4
0001AC28 3A                       M 	dc.b	(spfe<<3)+spal
0001AC29 =00000080                M sptlmask4	set	$80
0001AC29 =00000000                M sptlmask2	set	((spal>=5)<<7)
0001AC29 =00000000                M sptlmask3	set	((spal>=4)<<7)
0001AC29 =00000000                M sptlmask1	set	((spal=7)<<7)
0001AC29 0103 0101                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001AC2D 1810 1514                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001AC31 0A0D 0807                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001AC35 0000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001AC39 0FFF 0F1F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001AC3D 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001AC41 2522 1980                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001AC45 4E41 54                  M 	dc.b	'NAT'
0001AC48                            
0001AC48                            	; Patch $0F
0001AC48                            	; $3A
0001AC48                            	; $71, $08, $01, $02,	$10, $10, $12, $10
0001AC48                            	; $0F, $0C, $00, $00,	$00, $00, $00, $00
0001AC48                            	; $1F, $1F, $0F, $0F,	$18, $3B, $33, $80
0001AC48                            	spAlgorithm	$02
0001AC48 =00000010                M spatnum	=	spatnum+1
0001AC48 =00000002                M spal	=	val
0001AC48                            	spFeedback	$07
0001AC48 =00000007                M spfe	=	val
0001AC48                            	spDetune	$07, $00, $00, $00
0001AC48 =00000007                M spde1	=	op1
0001AC48 =00000000                M spde2	=	op2
0001AC48 =00000000                M spde3	=	op3
0001AC48 =00000000                M spde4	=	op4
0001AC48                            	spMultiple	$01, $01, $08, $02
0001AC48 =00000001                M spmu1	=	op1
0001AC48 =00000001                M spmu2	=	op2
0001AC48 =00000008                M spmu3	=	op3
0001AC48 =00000002                M spmu4	=	op4
0001AC48                            	spRateScale	$00, $00, $00, $00
0001AC48 =00000000                M sprs1	=	op1
0001AC48 =00000000                M sprs2	=	op2
0001AC48 =00000000                M sprs3	=	op3
0001AC48 =00000000                M sprs4	=	op4
0001AC48                            	spAttackRt	$10, $12, $10, $10
0001AC48 =00000010                M spar1	=	op1
0001AC48 =00000012                M spar2	=	op2
0001AC48 =00000010                M spar3	=	op3
0001AC48 =00000010                M spar4	=	op4
0001AC48                            	spAmpMod	$00, $00, $00, $00
0001AC48 =00000000                M spam1	=	op1
0001AC48 =00000000                M spam2	=	op2
0001AC48 =00000000                M spam3	=	op3
0001AC48 =00000000                M spam4	=	op4
0001AC48                            	spSustainRt	$0F, $00, $0C, $00
0001AC48 =0000000F                M spsr1	=	op1
0001AC48 =00000000                M spsr2	=	op2
0001AC48 =0000000C                M spsr3	=	op3
0001AC48 =00000000                M spsr4	=	op4
0001AC48                            	spSustainLv	$01, $00, $01, $00
0001AC48 =00000001                M spsl1	=	op1
0001AC48 =00000000                M spsl2	=	op2
0001AC48 =00000001                M spsl3	=	op3
0001AC48 =00000000                M spsl4	=	op4
0001AC48                            	spDecayRt	$00, $00, $00, $00
0001AC48 =00000000                M spdr1	=	op1
0001AC48 =00000000                M spdr2	=	op2
0001AC48 =00000000                M spdr3	=	op3
0001AC48 =00000000                M spdr4	=	op4
0001AC48                            	spReleaseRt	$0F, $0F, $0F, $0F
0001AC48 =0000000F                M sprr1	=	op1
0001AC48 =0000000F                M sprr2	=	op2
0001AC48 =0000000F                M sprr3	=	op3
0001AC48 =0000000F                M sprr4	=	op4
0001AC48                            	spSSGEG		$00, $00, $00, $00
0001AC48 =00000000                M spss1	=	op1
0001AC48 =00000000                M spss2	=	op2
0001AC48 =00000000                M spss3	=	op3
0001AC48 =00000000                M spss4	=	op4
0001AC48                            	spTotalLv	$18, $33, $3B, $00
0001AC48 =00000018                M sptl1	=	op1
0001AC48 =00000033                M sptl2	=	op2
0001AC48 =0000003B                M sptl3	=	op3
0001AC48 =00000000                M sptl4	=	op4
0001AC48 3A                       M 	dc.b	(spfe<<3)+spal
0001AC49 =00000080                M sptlmask4	set	$80
0001AC49 =00000000                M sptlmask2	set	((spal>=5)<<7)
0001AC49 =00000000                M sptlmask3	set	((spal>=4)<<7)
0001AC49 =00000000                M sptlmask1	set	((spal=7)<<7)
0001AC49 7108 0102                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001AC4D 1010 1210                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001AC51 0F0C 0000                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001AC55 0000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001AC59 1F1F 0F0F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001AC5D 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001AC61 183B 3380                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001AC65 4E41 54                  M 	dc.b	'NAT'
0001AC68                            
0001AC68                            	; Patch $10	; apparently they either fucked up and used wrong values for the total levels, or they were dicks
0001AC68                            	; $F2
0001AC68                            	; $E0, $C0, $EF, $00,	$E8, $08, $D5, $C4
0001AC68                            	; $0C, $06, $C1, $C4,	$0C, $06, $C1, $C4
0001AC68                            	; $C2, $0C, $1E, $0C,	$06, $BF, $C2, $0C
0001AC68                            	spAlgorithm	$02
0001AC68 =00000011                M spatnum	=	spatnum+1
0001AC68 =00000002                M spal	=	val
0001AC68                            	spFeedback	$06
0001AC68 =00000006                M spfe	=	val
0001AC68                            	spDetune	$0E, $0E, $0C, $00
0001AC68 =0000000E                M spde1	=	op1
0001AC68 =0000000E                M spde2	=	op2
0001AC68 =0000000C                M spde3	=	op3
0001AC68 =00000000                M spde4	=	op4
0001AC68                            	spMultiple	$00, $0F, $00, $00
0001AC68 =00000000                M spmu1	=	op1
0001AC68 =0000000F                M spmu2	=	op2
0001AC68 =00000000                M spmu3	=	op3
0001AC68 =00000000                M spmu4	=	op4
0001AC68                            	spRateScale	$03, $03, $00, $03
0001AC68 =00000003                M sprs1	=	op1
0001AC68 =00000003                M sprs2	=	op2
0001AC68 =00000000                M sprs3	=	op3
0001AC68 =00000003                M sprs4	=	op4
0001AC68                            	spAttackRt	$08, $15, $08, $04
0001AC68 =00000008                M spar1	=	op1
0001AC68 =00000015                M spar2	=	op2
0001AC68 =00000008                M spar3	=	op3
0001AC68 =00000004                M spar4	=	op4
0001AC68                            	spAmpMod	$00, $01, $00, $01
0001AC68 =00000000                M spam1	=	op1
0001AC68 =00000001                M spam2	=	op2
0001AC68 =00000000                M spam3	=	op3
0001AC68 =00000001                M spam4	=	op4
0001AC68                            	spSustainRt	$0C, $01, $06, $04
0001AC68 =0000000C                M spsr1	=	op1
0001AC68 =00000001                M spsr2	=	op2
0001AC68 =00000006                M spsr3	=	op3
0001AC68 =00000004                M spsr4	=	op4
0001AC68                            	spSustainLv	$0C, $01, $00, $00
0001AC68 =0000000C                M spsl1	=	op1
0001AC68 =00000001                M spsl2	=	op2
0001AC68 =00000000                M spsl3	=	op3
0001AC68 =00000000                M spsl4	=	op4
0001AC68                            	spDecayRt	$0C, $C1, $06, $C4
0001AC68 =0000000C                M spdr1	=	op1
0001AC68 =000000C1                M spdr2	=	op2
0001AC68 =00000006                M spdr3	=	op3
0001AC68 =000000C4                M spdr4	=	op4
0001AC68                            	spReleaseRt	$02, $0E, $0C, $0C
0001AC68 =00000002                M sprr1	=	op1
0001AC68 =0000000E                M sprr2	=	op2
0001AC68 =0000000C                M sprr3	=	op3
0001AC68 =0000000C                M sprr4	=	op4
0001AC68                            	spSSGEG		$00, $00, $00, $00
0001AC68 =00000000                M spss1	=	op1
0001AC68 =00000000                M spss2	=	op2
0001AC68 =00000000                M spss3	=	op3
0001AC68 =00000000                M spss4	=	op4
0001AC68                            	spTotalLv2	$06, $BF, $C2, $0C
0001AC68 =00000006                M sptl1	=	op1
0001AC68 =000000BF                M sptl2	=	op2
0001AC68 =000000C2                M sptl3	=	op3
0001AC68 =0000000C                M sptl4	=	op4
0001AC68 32                       M 	dc.b	(spfe<<3)+spal
0001AC69 E0C0 EF00                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001AC6D C808 D5C4                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001AC71 0C06 8184                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001AC75 0C06 C1C4                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001AC79 C20C 1E0C                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001AC7D 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001AC81 06C2 BF0C                M 	dc.b	sptl1,sptl3,sptl2,sptl4
0001AC85 4E41 54                  M 	dc.b	'NAT'
0001AC88                            
0001AC88                            	; Patch $11	; apparently they either fucked up and used wrong values for the total levels, or they were dicks
0001AC88                            	; $06
0001AC88                            	; $BF, $C2, $C1, $0C,	$1E, $C4, $0C, $06
0001AC88                            	; $C1, $C4, $0C, $06,	$C1, $C4, $C2, $0C
0001AC88                            	; $1E, $0C, $06, $BF,	$C2, $0C, $06, $BF
0001AC88                            	spAlgorithm	$06
0001AC88 =00000012                M spatnum	=	spatnum+1
0001AC88 =00000006                M spal	=	val
0001AC88                            	spFeedback	$00
0001AC88 =00000000                M spfe	=	val
0001AC88                            	spDetune	$0B, $0C, $0C, $00
0001AC88 =0000000B                M spde1	=	op1
0001AC88 =0000000C                M spde2	=	op2
0001AC88 =0000000C                M spde3	=	op3
0001AC88 =00000000                M spde4	=	op4
0001AC88                            	spMultiple	$0F, $01, $02, $0C
0001AC88 =0000000F                M spmu1	=	op1
0001AC88 =00000001                M spmu2	=	op2
0001AC88 =00000002                M spmu3	=	op3
0001AC88 =0000000C                M spmu4	=	op4
0001AC88                            	spRateScale	$00, $00, $03, $00
0001AC88 =00000000                M sprs1	=	op1
0001AC88 =00000000                M sprs2	=	op2
0001AC88 =00000003                M sprs3	=	op3
0001AC88 =00000000                M sprs4	=	op4
0001AC88                            	spAttackRt	$1E, $0C, $04, $06
0001AC88 =0000001E                M spar1	=	op1
0001AC88 =0000000C                M spar2	=	op2
0001AC88 =00000004                M spar3	=	op3
0001AC88 =00000006                M spar4	=	op4
0001AC88                            	spAmpMod	$01, $00, $01, $00
0001AC88 =00000001                M spam1	=	op1
0001AC88 =00000000                M spam2	=	op2
0001AC88 =00000001                M spam3	=	op3
0001AC88 =00000000                M spam4	=	op4
0001AC88                            	spSustainRt	$01, $0C, $04, $06
0001AC88 =00000001                M spsr1	=	op1
0001AC88 =0000000C                M spsr2	=	op2
0001AC88 =00000004                M spsr3	=	op3
0001AC88 =00000006                M spsr4	=	op4
0001AC88                            	spSustainLv	$01, $00, $00, $0B
0001AC88 =00000001                M spsl1	=	op1
0001AC88 =00000000                M spsl2	=	op2
0001AC88 =00000000                M spsl3	=	op3
0001AC88 =0000000B                M spsl4	=	op4
0001AC88                            	spDecayRt	$C1, $C2, $C4, $0C
0001AC88 =000000C1                M spdr1	=	op1
0001AC88 =000000C2                M spdr2	=	op2
0001AC88 =000000C4                M spdr3	=	op3
0001AC88 =0000000C                M spdr4	=	op4
0001AC88                            	spReleaseRt	$0E, $06, $0C, $0F
0001AC88 =0000000E                M sprr1	=	op1
0001AC88 =00000006                M sprr2	=	op2
0001AC88 =0000000C                M sprr3	=	op3
0001AC88 =0000000F                M sprr4	=	op4
0001AC88                            	spSSGEG		$00, $00, $00, $00
0001AC88 =00000000                M spss1	=	op1
0001AC88 =00000000                M spss2	=	op2
0001AC88 =00000000                M spss3	=	op3
0001AC88 =00000000                M spss4	=	op4
0001AC88                            	spTotalLv2	$C2, $0C, $06, $BF
0001AC88 =000000C2                M sptl1	=	op1
0001AC88 =0000000C                M sptl2	=	op2
0001AC88 =00000006                M sptl3	=	op3
0001AC88 =000000BF                M sptl4	=	op4
0001AC88 06                       M 	dc.b	(spfe<<3)+spal
0001AC89 BFC2 C10C                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001AC8D 1EC4 0C06                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001AC91 8184 0C06                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001AC95 C1C4 C20C                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001AC99 1E0C 06BF                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001AC9D 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001ACA1 C206 0CBF                M 	dc.b	sptl1,sptl3,sptl2,sptl4
0001ACA5 4E41 54                  M 	dc.b	'NAT'
0001ACA8                            
0001ACA8                            Beach_PSG2:
0001ACA8 8001                       	dc.b nRst, $01
0001ACAA                            
0001ACAA                            Beach_PSG1:
0001ACAA                            	sVoice		vWOI_0D
0001ACAA E815                     M 	dc.b	$e8,vwoi_0d
0001ACAC                            ;	ssVolBase	$00
0001ACAC 8001                       	dc.b nRst, $01
0001ACAE                            
0001ACAE                            	ssDetune	$FF
0001ACAE E1FF                     M 	dc.b	$e1,$ff
0001ACB0                            ;	ssVolQuick	$05
0001ACB0                            	ssVol		$05+$00
0001ACB0 EE05                     M 	dc.b	$ee,$05+$00
0001ACB2                            	sCall		Beach_FM1_00
0001ACB2 F8                       M 	dc.b	$f8
0001ACB3 0000                     M 	dc.w	beach_fm1_00-*-1
0001ACB5                            
0001ACB5                            .loop;	ssVolQuick	$03
0001ACB5                            	ssVol		$03+$00
0001ACB5 EE03                     M 	dc.b	$ee,$03+$00
0001ACB7                            	sCall		Beach_FM1_01
0001ACB7 F8                       M 	dc.b	$f8
0001ACB8 0000                     M 	dc.w	beach_fm1_01-*-1
0001ACBA                            ;	ssVolQuick	$03
0001ACBA                            	sCall		Beach_FM1_02
0001ACBA F8                       M 	dc.b	$f8
0001ACBB 0000                     M 	dc.w	beach_fm1_02-*-1
0001ACBD                            
0001ACBD                            ;	ssVolQuick	$04
0001ACBD                            	ssVol		$04+$00
0001ACBD EE04                     M 	dc.b	$ee,$04+$00
0001ACBF                            	sCall		Beach_FM1_03
0001ACBF F8                       M 	dc.b	$f8
0001ACC0 0000                     M 	dc.w	beach_fm1_03-*-1
0001ACC2                            ;	ssVolQuick	$04
0001ACC2                            	sCall		Beach_FM1_04
0001ACC2 F8                       M 	dc.b	$f8
0001ACC3 0000                     M 	dc.w	beach_fm1_04-*-1
0001ACC5                            	sCall		Beach_FM1_05
0001ACC5 F8                       M 	dc.b	$f8
0001ACC6 0000                     M 	dc.w	beach_fm1_05-*-1
0001ACC8                            
0001ACC8                            ;	ssVolQuick	$03
0001ACC8                            	ssVol		$03+$00
0001ACC8 EE03                     M 	dc.b	$ee,$03+$00
0001ACCA                            	sCall		Beach_FM1_06
0001ACCA F8                       M 	dc.b	$f8
0001ACCB 0000                     M 	dc.w	beach_fm1_06-*-1
0001ACCD                            
0001ACCD                            ;	ssVolQuick	$04
0001ACCD                            	ssVol		$04+$00
0001ACCD EE04                     M 	dc.b	$ee,$04+$00
0001ACCF                            	sCall		Beach_FM1_07
0001ACCF F8                       M 	dc.b	$f8
0001ACD0 0000                     M 	dc.w	beach_fm1_07-*-1
0001ACD2                            	sJump		.loop
0001ACD2 F6                       M 	dc.b	$f6
0001ACD3 FFE1                     M 	dc.w	.loop-*-1
0001ACD5                            
0001ACD5                            Beach_FM1:
0001ACD5                            	sPan		spCenter, $00
0001ACD5 E0C0                     M 	dc.b	$e0,spcenter|$00
0001ACD7                            	sVoice		$00
0001ACD7 E800                     M 	dc.b	$e8,$00
0001ACD9                            ;	ssVolQuick	$05
0001ACD9                            	ssVol		$05+$0F+$10
0001ACD9 EE24                     M 	dc.b	$ee,$05+$0f+$10
0001ACDB                            	sCall		Beach_FM1_00
0001ACDB F8                       M 	dc.b	$f8
0001ACDC 0000                     M 	dc.w	beach_fm1_00-*-1
0001ACDE                            
0001ACDE                            .loop	sVoice		$05
0001ACDE E805                     M 	dc.b	$e8,$05
0001ACE0                            ;	ssVolQuick	$03
0001ACE0                            	ssVol		$03+$09+$10
0001ACE0 EE1C                     M 	dc.b	$ee,$03+$09+$10
0001ACE2                            	sCall		Beach_FM1_01
0001ACE2 F8                       M 	dc.b	$f8
0001ACE3 0000                     M 	dc.w	beach_fm1_01-*-1
0001ACE5                            
0001ACE5                            	sVoice		$09
0001ACE5 E809                     M 	dc.b	$e8,$09
0001ACE7                            	sPan		spRight, $00
0001ACE7 E040                     M 	dc.b	$e0,spright|$00
0001ACE9                            ;	ssVolQuick	$03
0001ACE9                            	sCall		Beach_FM1_02
0001ACE9 F8                       M 	dc.b	$f8
0001ACEA 0000                     M 	dc.w	beach_fm1_02-*-1
0001ACEC                            
0001ACEC                            	sVoice		$06
0001ACEC E806                     M 	dc.b	$e8,$06
0001ACEE                            	sPan		spLeft, $00
0001ACEE E080                     M 	dc.b	$e0,spleft|$00
0001ACF0                            ;	ssVolQuick	$04
0001ACF0                            	ssVol		$04+$09+$10
0001ACF0 EE1D                     M 	dc.b	$ee,$04+$09+$10
0001ACF2                            	sCall		Beach_FM1_03
0001ACF2 F8                       M 	dc.b	$f8
0001ACF3 0000                     M 	dc.w	beach_fm1_03-*-1
0001ACF5                            
0001ACF5                            	sPan		spRight, $00
0001ACF5 E040                     M 	dc.b	$e0,spright|$00
0001ACF7                            	sVoice		$0A
0001ACF7 E80A                     M 	dc.b	$e8,$0a
0001ACF9                            ;	ssVolQuick	$04
0001ACF9                            	sCall		Beach_FM1_04
0001ACF9 F8                       M 	dc.b	$f8
0001ACFA 0000                     M 	dc.w	beach_fm1_04-*-1
0001ACFC                            
0001ACFC                            	sPan		spLeft, $00
0001ACFC E080                     M 	dc.b	$e0,spleft|$00
0001ACFE                            	sVoice		$09
0001ACFE E809                     M 	dc.b	$e8,$09
0001AD00                            	sCall		Beach_FM1_05
0001AD00 F8                       M 	dc.b	$f8
0001AD01 0000                     M 	dc.w	beach_fm1_05-*-1
0001AD03                            
0001AD03                            	sVoice		$0B
0001AD03 E80B                     M 	dc.b	$e8,$0b
0001AD05                            	sPan		spCenter, $00
0001AD05 E0C0                     M 	dc.b	$e0,spcenter|$00
0001AD07                            ;	ssVolQuick	$03
0001AD07                            	ssVol		$03+$09+$10
0001AD07 EE1C                     M 	dc.b	$ee,$03+$09+$10
0001AD09                            	sCall		Beach_FM1_06
0001AD09 F8                       M 	dc.b	$f8
0001AD0A 0000                     M 	dc.w	beach_fm1_06-*-1
0001AD0C                            
0001AD0C                            	sVoice		$05
0001AD0C E805                     M 	dc.b	$e8,$05
0001AD0E                            	sPan		spRight, $00
0001AD0E E040                     M 	dc.b	$e0,spright|$00
0001AD10                            ;	ssVolQuick	$04
0001AD10                            	ssVol		$04+$09+$10
0001AD10 EE1D                     M 	dc.b	$ee,$04+$09+$10
0001AD12                            	sCall		Beach_FM1_07
0001AD12 F8                       M 	dc.b	$f8
0001AD13 0000                     M 	dc.w	beach_fm1_07-*-1
0001AD15                            	sJump		.loop
0001AD15 F6                       M 	dc.b	$f6
0001AD16 FFC7                     M 	dc.w	.loop-*-1
0001AD18                            
0001AD18                            Beach_FM1_00:
0001AD18                            	sNoteTimeOut	$08
0001AD18 FD08                     M 	dc.b	$fd,$08
0001AD1A C40C 06C1 C40C 06C1        	dc.b nG5, $0C, $06, nE5, nG5, $0C, $06, nE5
0001AD22 C4C2 0C1E 0C06 BFC2        	dc.b nG5, nF5, $0C, $1E, $0C, $06, nD5, nF5
0001AD2A 0C06 BFC2 C10C 1EC4        	dc.b $0C, $06, nD5, nF5, nE5, $0C, $1E, nG5
0001AD32 0C06 C1C4 0C06 C1C4        	dc.b $0C, $06, nE5, nG5, $0C, $06, nE5, nG5
0001AD3A C20C 1E0C 06BF C20C        	dc.b nF5, $0C, $1E, $0C, $06, nD5, nF5, $0C
0001AD42 06BF BFBD 0C06 8006        	dc.b $06, nD5, nD5, nC5, $0C, $06, nRst, $06
0001AD4A                            
0001AD4A                            ;	ssVolQuick	$05
0001AD4A ACAE B0                    	dc.b nG3, nA3, nB3
0001AD4D                            	sRet
0001AD4D F9                       M 	dc.b	$f9
0001AD4E                            
0001AD4E                            Beach_FM1_01:
0001AD4E                            	saTranspose	$0C
0001AD4E E40C                     M 	dc.b	$e4,$0c
0001AD50                            	sNoteTimeOut	$08
0001AD50 FD08                     M 	dc.b	$fd,$08
0001AD52 B50C 060C 06B5 B5B6        	dc.b nE4, $0C, $06, $0C, $06, nE4, nE4, nF4
0001AD5A 0CB3 18AC 0CB3 B306        	dc.b $0C, nD4, $18, nG3, $0C, nD4, nD4, $06
0001AD62 0C06 B3B3 B50C B118        	dc.b $0C, $06, nD4, nD4, nE4, $0C, nC4, $18
0001AD6A AC0C B5B5 060C 06B5        	dc.b nG3, $0C, nE4, nE4, $06, $0C, $06, nE4
0001AD72 B5B8 B6B5 B6B3 0CAC        	dc.b nE4, nG4, nF4, nE4, nF4, nD4, $0C, nG3
0001AD7A ACAC 060C 06AE B0B1        	dc.b nG3, nG3, $06, $0C, $06, nA3, nB3, nC4
0001AD82 24B8 0C                    	dc.b $24, nG4, $0C
0001AD85                            	saTranspose	$F4
0001AD85 E4F4                     M 	dc.b	$e4,$f4
0001AD87                            	sRet
0001AD87 F9                       M 	dc.b	$f9
0001AD88                            
0001AD88                            Beach_FM1_02:
0001AD88                            	sNoteTimeOut	$08
0001AD88 FD08                     M 	dc.b	$fd,$08
0001AD8A 06BA 0CB8 06BD 0CBD        	dc.b $06, nA4, $0C, nG4, $06, nC5, $0C, nC5
0001AD92 BA06 BC0C BA06 B30C        	dc.b nA4, $06, nB4, $0C, nA4, $06, nD4, $0C
0001AD9A BA                         	dc.b nA4
0001AD9B                            	sRet
0001AD9B F9                       M 	dc.b	$f9
0001AD9C                            
0001AD9C                            Beach_FM1_03:
0001AD9C B006 B10C B006 B80C        	dc.b nB3, $06, nC4, $0C, nB3, $06, nG4, $0C
0001ADA4 B8B5 06B6 0CB5 06B1        	dc.b nG4, nE4, $06, nF4, $0C, nE4, $06, nC4
0001ADAC 0CAC                       	dc.b $0C, nG3
0001ADAE                            	sRet
0001ADAE F9                       M 	dc.b	$f9
0001ADAF                            
0001ADAF                            Beach_FM1_04:
0001ADAF B806 BA0C B806 BD0C        	dc.b nG4, $06, nA4, $0C, nG4, $06, nC5, $0C
0001ADB7 BDBA 06BC 0CBA 06BF        	dc.b nC5, nA4, $06, nB4, $0C, nA4, $06, nD5
0001ADBF 0CBA                       	dc.b $0C, nA4
0001ADC1                            	sRet
0001ADC1 F9                       M 	dc.b	$f9
0001ADC2                            
0001ADC2                            Beach_FM1_05:
0001ADC2 B806 BA0C B806 80AC        	dc.b nG4, $06, nA4, $0C, nG4, $06, nRst, nG3
0001ADCA AEB0 B124 B80C             	dc.b nA3, nB3, nC4, $24, nG4, $0C
0001ADD0                            	sRet
0001ADD0 F9                       M 	dc.b	$f9
0001ADD1                            
0001ADD1                            Beach_FM1_06:
0001ADD1 06BD 0CC1 06C4 0CC2        	dc.b $06, nC5, $0C, nE5, $06, nG5, $0C, nF5
0001ADD9 06C1 C4C2 C1C2 1E80        	dc.b $06, nE5, nG5, nF5, nE5, nF5, $1E, nRst
0001ADE1 06C4 C4C4 80C4 C6C8        	dc.b $06, nG5, nG5, nG5, nRst, nG5, nA5, nB5
0001ADE9 CBC9 C8C9 80C9 C4C1        	dc.b nD6, nC6, nB5, nC6, nRst, nC6, nG5, nE5
0001ADF1 C4C1 C4C9 C4C1 C4C9        	dc.b nG5, nE5, nG5, nC6, nG5, nE5, nG5, nC6
0001ADF9 C6C2 C6CB C6C2 C6CB        	dc.b nA5, nF5, nA5, nD6, nA5, nF5, nA5, nD6
0001AE01 CBCB C9C8 C6C4 C6C8        	dc.b nD6, nD6, nC6, nB5, nA5, nG5, nA5, nB5
0001AE09 C9C9 C4C1 C4C2 C1BF        	dc.b nC6, nC6, nG5, nE5, nG5, nF5, nE5, nD5
0001AE11                            	sRet
0001AE11 F9                       M 	dc.b	$f9
0001AE12                            
0001AE12                            Beach_FM1_07:
0001AE12                            	saTranspose	$0C
0001AE12 E40C                     M 	dc.b	$e4,$0c
0001AE14                            	sNoteTimeOut	$06
0001AE14 FD06                     M 	dc.b	$fd,$06
0001AE16 B5B8 BDC1 B5B8 BDC1        	dc.b nE4, nG4, nC5, nE5, nE4, nG4, nC5, nE5
0001AE1E B6BA BFC2 B6BA BFC2        	dc.b nF4, nA4, nD5, nF5, nF4, nA4, nD5, nF5
0001AE26 B3B6 B8BC B3B6 B8BC        	dc.b nD4, nF4, nG4, nB4, nD4, nF4, nG4, nB4
0001AE2E B5B8 BDB8 B5B1 ACA9        	dc.b nE4, nG4, nC5, nG4, nE4, nC4, nG3, nE3
0001AE36 B5B8 BDC1 B5B8 BDC1        	dc.b nE4, nG4, nC5, nE5, nE4, nG4, nC5, nE5
0001AE3E B6BA BFC2 B6BA BFC2        	dc.b nF4, nA4, nD5, nF5, nF4, nA4, nD5, nF5
0001AE46 ACB3 B6B8 ACB3 B6B8        	dc.b nG3, nD4, nF4, nG4, nG3, nD4, nF4, nG4
0001AE4E B1BD B8B5 B1BD B8B5        	dc.b nC4, nC5, nG4, nE4, nC4, nC5, nG4, nE4
0001AE56                            	saTranspose	$F4
0001AE56 E4F4                     M 	dc.b	$e4,$f4
0001AE58                            	sRet
0001AE58 F9                       M 	dc.b	$f9
0001AE59                            
0001AE59                            Beach_FM2:
0001AE59                            	sPan		spCenter, $00
0001AE59 E0C0                     M 	dc.b	$e0,spcenter|$00
0001AE5B                            	sVoice		$03
0001AE5B E803                     M 	dc.b	$e8,$03
0001AE5D                            ;	ssVolQuick	$05
0001AE5D                            	ssVol		$05+$0F+$10
0001AE5D EE24                     M 	dc.b	$ee,$05+$0f+$10
0001AE5F B512 B8BD 0CBA 12B6        	dc.b nE4, $12, nG4, nC5, $0C, nA4, $12, nF4
0001AE67 B30C B012 B3B8 0CBD        	dc.b nD4, $0C, nB3, $12, nD4, nG4, $0C, nC5
0001AE6F 12B1 AC0C B512 B8BD        	dc.b $12, nC4, nG3, $0C, nE4, $12, nG4, nC5
0001AE77 0CBA 12B6 B30C B012        	dc.b $0C, nA4, $12, nF4, nD4, $0C, nB3, $12
0001AE7F B3B8 0C12 B1AC 0C          	dc.b nD4, nG4, $0C, $12, nC4, nG3, $0C
0001AE86                            
0001AE86                            Beach_Jump2:
0001AE86                            	sVoice		$07
0001AE86 E807                     M 	dc.b	$e8,$07
0001AE88                            ;	ssVolQuick	$05
0001AE88                            	ssVol		$05+$0F+$10
0001AE88 EE24                     M 	dc.b	$ee,$05+$0f+$10
0001AE8A                            	sNoteTimeOut	$08
0001AE8A FD08                     M 	dc.b	$fd,$08
0001AE8C                            	sCall		Beach_FM2_00
0001AE8C F8                       M 	dc.b	$f8
0001AE8D 0000                     M 	dc.w	beach_fm2_00-*-1
0001AE8F                            ;	sNoteTimeOut	$00
0001AE8F                            	sVoice		$03
0001AE8F E803                     M 	dc.b	$e8,$03
0001AE91                            ;	ssVolQuick	$05
0001AE91                            	sNoteTimeOut	$08
0001AE91 FD08                     M 	dc.b	$fd,$08
0001AE93                            	sCall		Beach_FM2_00
0001AE93 F8                       M 	dc.b	$f8
0001AE94 0000                     M 	dc.w	beach_fm2_00-*-1
0001AE96                            ;	sNoteTimeOut	$00
0001AE96                            	sVoice		$0D
0001AE96 E80D                     M 	dc.b	$e8,$0d
0001AE98                            ;	ssVolQuick	$05
0001AE98                            	sNoteTimeOut	$08
0001AE98 FD08                     M 	dc.b	$fd,$08
0001AE9A                            	sCall		Beach_FM2_01
0001AE9A F8                       M 	dc.b	$f8
0001AE9B 0000                     M 	dc.w	beach_fm2_01-*-1
0001AE9D                            ;	sNoteTimeOut	$00
0001AE9D                            	sVoice		$10
0001AE9D E810                     M 	dc.b	$e8,$10
0001AE9F                            ;	ssVolQuick	$05
0001AE9F                            	sNoteTimeOut	$07
0001AE9F FD07                     M 	dc.b	$fd,$07
0001AEA1                            	sCall		Beach_FM2_01
0001AEA1 F8                       M 	dc.b	$f8
0001AEA2 0000                     M 	dc.w	beach_fm2_01-*-1
0001AEA4                            ;	sNoteTimeOut	$00
0001AEA4                            	sJump		Beach_Jump2
0001AEA4 F6                       M 	dc.b	$f6
0001AEA5 FFE0                     M 	dc.w	beach_jump2-*-1
0001AEA7                            
0001AEA7                            Beach_FM2_00:
0001AEA7 B512 B8BD 0CBA 12B6        	dc.b nE4, $12, nG4, nC5, $0C, nA4, $12, nF4
0001AEAF B30C B012 B3B8 0C12        	dc.b nD4, $0C, nB3, $12, nD4, nG4, $0C, $12
0001AEB7 B1AC 0CB5 12B8 BD0C        	dc.b nC4, nG3, $0C, nE4, $12, nG4, nC5, $0C
0001AEBF BA12 B6B3 0CB0 12B3        	dc.b nA4, $12, nF4, nD4, $0C, nB3, $12, nD4
0001AEC7 B80C BD12 B1AC 0C          	dc.b nG4, $0C, nC5, $12, nC4, nG3, $0C
0001AECE                            	sRet
0001AECE F9                       M 	dc.b	$f9
0001AECF                            
0001AECF                            Beach_FM2_01:
0001AECF C112 C4C1 0CC2 12C6        	dc.b nE5, $12, nG5, nE5, $0C, nF5, $12, nA5
0001AED7 C20C BF12 C2BF 0CBD        	dc.b nF5, $0C, nD5, $12, nF5, nD5, $0C, nC5
0001AEDF 06BC BAB8 E7B8 18C1        	dc.b $06, nB4, nA4, nG4, sHold, nG4, $18, nE5
0001AEE7 12C4 C10C C212 C6C2        	dc.b $12, nG5, nE5, $0C, nF5, $12, nA5, nF5
0001AEEF 0CC4 12C2 C10C BF06        	dc.b $0C, nG5, $12, nF5, nE5, $0C, nD5, $06
0001AEF7 BDBC BDE7 BD18             	dc.b nC5, nB4, nC5, sHold, nC5, $18
0001AEFD                            	sRet
0001AEFD F9                       M 	dc.b	$f9
0001AEFE                            
0001AEFE                            Beach_FM3:
0001AEFE                            	sPan		spCenter, $00
0001AEFE E0C0                     M 	dc.b	$e0,spcenter|$00
0001AF00                            	sVoice		$02
0001AF00 E802                     M 	dc.b	$e8,$02
0001AF02                            	sNoteTimeOut	$08
0001AF02 FD08                     M 	dc.b	$fd,$08
0001AF04                            ;	ssVolQuick	$06
0001AF04                            	ssVol		$06+$12+$10
0001AF04 EE28                     M 	dc.b	$ee,$06+$12+$10
0001AF06                            	sCall		Beach_FM3_00
0001AF06 F8                       M 	dc.b	$f8
0001AF07 0000                     M 	dc.w	beach_fm3_00-*-1
0001AF09                            ;	sNoteTimeOut	$00
0001AF09                            
0001AF09                            Beach_Jump3:
0001AF09                            	sVoice		$06
0001AF09 E806                     M 	dc.b	$e8,$06
0001AF0B                            ;	ssVolQuick	$05
0001AF0B                            	ssVol		$05+$0F+$10
0001AF0B EE24                     M 	dc.b	$ee,$05+$0f+$10
0001AF0D                            	sNoteTimeOut	$08
0001AF0D FD08                     M 	dc.b	$fd,$08
0001AF0F                            	sCall		Beach_FM3_00
0001AF0F F8                       M 	dc.b	$f8
0001AF10 0000                     M 	dc.w	beach_fm3_00-*-1
0001AF12                            ;	sNoteTimeOut	$00
0001AF12                            	sVoice		$08
0001AF12 E808                     M 	dc.b	$e8,$08
0001AF14                            ;	ssVolQuick	$05
0001AF14                            	sNoteTimeOut	$08
0001AF14 FD08                     M 	dc.b	$fd,$08
0001AF16 B10C B106 B512 B80C        	dc.b nC4, $0C, nC4, $06, nE4, $12, nG4, $0C
0001AF1E B6B6 06B3 12B6 0CAC        	dc.b nF4, nF4, $06, nD4, $12, nF4, $0C, nG3
0001AF26 AC06 B012 B60C B5B5        	dc.b nG3, $06, nB3, $12, nF4, $0C, nE4, nE4
0001AF2E 06B1 12B8 0CB1 B106        	dc.b $06, nC4, $12, nG4, $0C, nC4, nC4, $06
0001AF36 B512 B80C B6B6 06B3        	dc.b nE4, $12, nG4, $0C, nF4, nF4, $06, nD4
0001AF3E 12B6 0CB8 06AC 0C12        	dc.b $12, nF4, $0C, nG4, $06, nG3, $0C, $12
0001AF46 AE06 B0B1 B80C C106        	dc.b nA3, $06, nB3, nC4, nG4, $0C, nE5, $06
0001AF4E C2C1 BF0C                  	dc.b nF5, nE5, nD5, $0C
0001AF52                            ;	sNoteTimeOut	$00
0001AF52                            	sVoice		$0E
0001AF52 E80E                     M 	dc.b	$e8,$0e
0001AF54                            ;	ssVolQuick	$05
0001AF54                            	saTranspose	$E8
0001AF54 E4E8                     M 	dc.b	$e4,$e8
0001AF56                            	sNoteTimeOut	$08
0001AF56 FD08                     M 	dc.b	$fd,$08
0001AF58 B112 B1B1 0CB3 12B3        	dc.b nC4, $12, nC4, nC4, $0C, nD4, $12, nD4
0001AF60 B30C AC12 ACAC 0CB8        	dc.b nD4, $0C, nG3, $12, nG3, nG3, $0C, nG4
0001AF68 12AC 0C06 AEB0 B112        	dc.b $12, nG3, $0C, $06, nA3, nB3, nC4, $12
0001AF70 B1B1 0CB3 12B3 B30C        	dc.b nC4, nC4, $0C, nD4, $12, nD4, nD4, $0C
0001AF78 AC12 B8AC 0CB1 30          	dc.b nG3, $12, nG4, nG3, $0C, nC4, $30
0001AF7F                            ;	sNoteTimeOut	$00
0001AF7F                            	saTranspose	$18-$0C
0001AF7F E40C                     M 	dc.b	$e4,$18-$0c
0001AF81                            	sVoice		$0E
0001AF81 E80E                     M 	dc.b	$e8,$0e
0001AF83                            ;	ssVolQuick	$05
0001AF83                            ;	saTranspose	$F4
0001AF83                            	sNoteTimeOut	$08
0001AF83 FD08                     M 	dc.b	$fd,$08
0001AF85 12B1 B10C B312 B3B3        	dc.b $12, nC4, nC4, $0C, nD4, $12, nD4, nD4
0001AF8D 0CAC 12AC AC0C B812        	dc.b $0C, nG3, $12, nG3, nG3, $0C, nG4, $12
0001AF95 AC0C 06AE B0B1 12B1        	dc.b nG3, $0C, $06, nA3, nB3, nC4, $12, nC4
0001AF9D B10C B312 B3B3 0CAC        	dc.b nC4, $0C, nD4, $12, nD4, nD4, $0C, nG3
0001AFA5 12B8 AC0C B106 802A        	dc.b $12, nG4, nG3, $0C, nC4, $06, nRst, $2A
0001AFAD                            ;	sNoteTimeOut	$00
0001AFAD                            	saTranspose	$0C
0001AFAD E40C                     M 	dc.b	$e4,$0c
0001AFAF                            	sJump		Beach_Jump3
0001AFAF F6                       M 	dc.b	$f6
0001AFB0 FF58                     M 	dc.w	beach_jump3-*-1
0001AFB2                            
0001AFB2                            Beach_FM3_00:
0001AFB2 B10C 06B5 12B8 0CB6        	dc.b nC4, $0C, $06, nE4, $12, nG4, $0C, nF4
0001AFBA B606 B312 B00C ACAC        	dc.b nF4, $06, nD4, $12, nB3, $0C, nG3, nG3
0001AFC2 06B0 12B6 0CB5 B506        	dc.b $06, nB3, $12, nF4, $0C, nE4, nE4, $06
0001AFCA B112 AC0C B1B1 06B5        	dc.b nC4, $12, nG3, $0C, nC4, nC4, $06, nE4
0001AFD2 12B8 0CB6 B606 B312        	dc.b $12, nG4, $0C, nF4, nF4, $06, nD4, $12
0001AFDA B00C ACAC 06B0 12B6        	dc.b nB3, $0C, nG3, nG3, $06, nB3, $12, nF4
0001AFE2 0CB5 B506 B112 AC0C        	dc.b $0C, nE4, nE4, $06, nC4, $12, nG3, $0C
0001AFEA                            	sRet
0001AFEA F9                       M 	dc.b	$f9
0001AFEB                            
0001AFEB                            Beach_PSG3:
0001AFEB                            	sVoice		vWOI_0C
0001AFEB E814                     M 	dc.b	$e8,vwoi_0c
0001AFED                            ;	ssVolBase	$00
0001AFED 8002                       	dc.b nRst, $02
0001AFEF                            	sCall		Beach_FM4_00
0001AFEF F8                       M 	dc.b	$f8
0001AFF0 0000                     M 	dc.w	beach_fm4_00-*-1
0001AFF2                            .loop	sCall		Beach_FM4_00
0001AFF2 F8                       M 	dc.b	$f8
0001AFF3 0000                     M 	dc.w	beach_fm4_00-*-1
0001AFF5                            
0001AFF5                            ;	ssVolQuick	$0A
0001AFF5                            	ssVol		$0A+$00
0001AFF5 EE0A                     M 	dc.b	$ee,$0a+$00
0001AFF7                            	sCall		Beach_FM4_01
0001AFF7 F8                       M 	dc.b	$f8
0001AFF8 0000                     M 	dc.w	beach_fm4_01-*-1
0001AFFA                            
0001AFFA                            ;	ssVolQuick	$04
0001AFFA                            	sCall		Beach_FM4_02
0001AFFA F8                       M 	dc.b	$f8
0001AFFB 0000                     M 	dc.w	beach_fm4_02-*-1
0001AFFD                            	sJump		.loop
0001AFFD F6                       M 	dc.b	$f6
0001AFFE FFF3                     M 	dc.w	.loop-*-1
0001B000                            
0001B000                            Beach_FM4:
0001B000                            	sCall		Beach_FM4_00
0001B000 F8                       M 	dc.b	$f8
0001B001 0000                     M 	dc.w	beach_fm4_00-*-1
0001B003                            .loop	sCall		Beach_FM4_00
0001B003 F8                       M 	dc.b	$f8
0001B004 0000                     M 	dc.w	beach_fm4_00-*-1
0001B006                            
0001B006                            	sPan		spLeft, $00
0001B006 E080                     M 	dc.b	$e0,spleft|$00
0001B008                            	sVoice		$11
0001B008 E811                     M 	dc.b	$e8,$11
0001B00A                            ;	ssVolQuick	$0A
0001B00A                            	ssVol		$0A+$1E+$10
0001B00A EE38                     M 	dc.b	$ee,$0a+$1e+$10
0001B00C                            	sCall		Beach_FM4_01
0001B00C F8                       M 	dc.b	$f8
0001B00D 0000                     M 	dc.w	beach_fm4_01-*-1
0001B00F                            
0001B00F                            	sPan		spCenter, $00
0001B00F E0C0                     M 	dc.b	$e0,spcenter|$00
0001B011                            	sVoice		$0F
0001B011 E80F                     M 	dc.b	$e8,$0f
0001B013                            ;	ssVolQuick	$04
0001B013                            	ssVol		$04+$0C+$10
0001B013 EE20                     M 	dc.b	$ee,$04+$0c+$10
0001B015                            	sCall		Beach_FM4_02
0001B015 F8                       M 	dc.b	$f8
0001B016 0000                     M 	dc.w	beach_fm4_02-*-1
0001B018                            	sJump		.loop
0001B018 F6                       M 	dc.b	$f6
0001B019 FFE9                     M 	dc.w	.loop-*-1
0001B01B                            
0001B01B                            Beach_FM4_00:
0001B01B 8060 8080 80               	dc.b nRst, $60, nRst, nRst, nRst
0001B020                            	sRet
0001B020 F9                       M 	dc.b	$f9
0001B021                            
0001B021                            Beach_FM4_01:
0001B021                            ;	ssVolBase	$06
0001B021                            	ssMod68k	$10, $01, $02, $08
0001B021 F010 0102 08             M 	dc.b	$f0,$10,$01,$02,$08
0001B026 C130 C2C2 C4C1 C2C4        	dc.b nE5, $30, nF5, nF5, nG5, nE5, nF5, nG5
0001B02E 18C2 C10C BFBD 18          	dc.b $18, nF5, nE5, $0C, nD5, nC5, $18
0001B035                            	sRet
0001B035 F9                       M 	dc.b	$f9
0001B036                            
0001B036                            Beach_FM4_02:
0001B036                            ;	ssVolBase	$00
0001B036                            	saTranspose	$F4
0001B036 E4F4                     M 	dc.b	$e4,$f4
0001B038                            	ssMod68k	$20, $01, $02, $04
0001B038 F020 0102 04             M 	dc.b	$f0,$20,$01,$02,$04
0001B03D                            
0001B03D                            .loop	sNoteTimeOut	$08
0001B03D FD08                     M 	dc.b	$fd,$08
0001B03F C112 C4C1 0CC2 12C6        	dc.b nE5, $12, nG5, nE5, $0C, nF5, $12, nA5
0001B047 C20C BF12 C2BF 0CBD        	dc.b nF5, $0C, nD5, $12, nF5, nD5, $0C, nC5
0001B04F 06BC BA                    	dc.b $06, nB4, nA4
0001B052                            	sNoteTimeOut	$00
0001B052 FD00                     M 	dc.b	$fd,$00
0001B054 B8E7 B80B 800D             	dc.b nG4, sHold, nG4, $0B, nRst, $0D
0001B05A                            	sNoteTimeOut	$08
0001B05A FD08                     M 	dc.b	$fd,$08
0001B05C C112 C4C1 0CC2 12C6        	dc.b nE5, $12, nG5, nE5, $0C, nF5, $12, nA5
0001B064 C20C C412 C2C1 0CBF        	dc.b nF5, $0C, nG5, $12, nF5, nE5, $0C, nD5
0001B06C 06BD BC                    	dc.b $06, nC5, nB4
0001B06F                            	sNoteTimeOut	$00
0001B06F FD00                     M 	dc.b	$fd,$00
0001B071 BDE7 BD0B 800D             	dc.b nC5, sHold, nC5, $0B, nRst, $0D
0001B077                            	sLoop		$00, $02, .loop
0001B077 F700                     M 	dc.b	$f7,$00
0001B079 FFC3                     M 	dc.w	.loop-*-1
0001B07B 02                       M 	dc.b	$02
0001B07C                            	saTranspose	$0C
0001B07C E40C                     M 	dc.b	$e4,$0c
0001B07E                            	sRet
0001B07E F9                       M 	dc.b	$f9
0001B07F                            
0001B07F                            Beach_FM5:
0001B07F                            	sPan		spCenter, $00
0001B07F E0C0                     M 	dc.b	$e0,spcenter|$00
0001B081                            	sVoice		$01
0001B081 E801                     M 	dc.b	$e8,$01
0001B083                            	sNoteTimeOut	$08
0001B083 FD08                     M 	dc.b	$fd,$08
0001B085                            ;	ssVolQuick	$04
0001B085                            	ssVol		$04+$0C+$10
0001B085 EE20                     M 	dc.b	$ee,$04+$0c+$10
0001B087                            
0001B087 990C A006 940C 06A0        .loop	dc.b nC2, $0C, nG2, $06, nG1, $0C, $06, nG2
0001B08F 0C9B A006 940C 06A0        	dc.b $0C, nD2, nG2, $06, nG1, $0C, $06, nG2
0001B097 0C9B A006 940C 06A0        	dc.b $0C, nD2, nG2, $06, nG1, $0C, $06, nG2
0001B09F 0C99 A006 940C 06A0        	dc.b $0C, nC2, nG2, $06, nG1, $0C, $06, nG2
0001B0A7 0C99 A006 940C 06A0        	dc.b $0C, nC2, nG2, $06, nG1, $0C, $06, nG2
0001B0AF 0C9B A006 940C 06A0        	dc.b $0C, nD2, nG2, $06, nG1, $0C, $06, nG2
0001B0B7 0C9B A006 940C 06A0        	dc.b $0C, nD2, nG2, $06, nG1, $0C, $06, nG2
0001B0BF 0C99 A006 940C 06A0        	dc.b $0C, nC2, nG2, $06, nG1, $0C, $06, nG2
0001B0C7 0C                         	dc.b $0C
0001B0C8                            ;	sNoteTimeOut	$00
0001B0C8                            	sJump		.loop
0001B0C8 F6                       M 	dc.b	$f6
0001B0C9 FFBD                     M 	dc.w	.loop-*-1
0001B0CB                            
0001B0CB                            ;Beach_FM6:
0001B0CB                            ;	sPan		spCenter, $00
0001B0CB                            ;	sVoice		$04
0001B0CB                            
0001B0CB                            Beach_DAC2:
0001B0CB 800C B806 0680 0CB8        	dc.b nRst, $0C, nG4, $06, $06, nRst, $0C, nG4
0001B0D3 0CB3 06B8 B8B8 800C        	dc.b $0C, nD4, $06, nG4, nG4, nG4, nRst, $0C
0001B0DB B8                         	dc.b nG4
0001B0DC                            	sJump		Beach_DAC2
0001B0DC F6                       M 	dc.b	$f6
0001B0DD FFED                     M 	dc.w	beach_dac2-*-1
0001B0DF                            
0001B0DF                            Beach_DAC1:
0001B0DF                            	sStop
0001B0DF F5                       M 	dc.b	$f5
0001B0E0 =00000016                M a	=	a+1
0001B0E0                          M 	even
0001B0E0                          M b	equs	dmus16
0001B0E0                          M _mus_smoothcriminal
0001B0E0                          M dmusa16	include	"driver/music/smoothcriminal.asm"
0001B0E0                            SmoothCriminal_Header:
0001B0E0                            	sHeaderInit
0001B0E0 =0001B0E0                M spointzero	=	*
0001B0E0 =00000000                M spatnum	=	0
0001B0E0                            	sHeaderTempo	$02, $33
0001B0E0 0133                     M 	dc.b	$02-1,$33
0001B0E2                            	sHeaderCh	$05, $03
0001B0E2 04                       M 	dc.b	$05-1
0001B0E3 02                       M 	dc.b	$03-1
0001B0E4                            	sHeaderDAC	SmoothCriminal_DAC1, $08
0001B0E4 0000                     M 	dc.w	smoothcriminal_dac1-spointzero
0001B0E6 08                       M 	dc.b	$08
0001B0E7 00                       M 	dc.b	$00
0001B0E8                            	sHeaderDAC	SmoothCriminal_DAC2, $08
0001B0E8 0000                     M 	dc.w	smoothcriminal_dac2-spointzero
0001B0EA 08                       M 	dc.b	$08
0001B0EB 00                       M 	dc.b	$00
0001B0EC                            	sHeaderFM	SmoothCriminal_FM1, $0C, $16
0001B0EC 0000                     M 	dc.w	smoothcriminal_fm1-spointzero
0001B0EE 0C16                     M 	dc.b	$0c,$16
0001B0F0                            	sHeaderFM	SmoothCriminal_FM2, $00, $04
0001B0F0 0000                     M 	dc.w	smoothcriminal_fm2-spointzero
0001B0F2 0004                     M 	dc.b	$00,$04
0001B0F4                            	sHeaderFM	SmoothCriminal_FM3, $00, $16
0001B0F4 0000                     M 	dc.w	smoothcriminal_fm3-spointzero
0001B0F6 0016                     M 	dc.b	$00,$16
0001B0F8                            	sHeaderFM	SmoothCriminal_FM4, $00, $16
0001B0F8 0000                     M 	dc.w	smoothcriminal_fm4-spointzero
0001B0FA 0016                     M 	dc.b	$00,$16
0001B0FC                            	sHeaderFM	SmoothCriminal_FM5, $00, $16
0001B0FC 0000                     M 	dc.w	smoothcriminal_fm5-spointzero
0001B0FE 0016                     M 	dc.b	$00,$16
0001B100                            	sHeaderPSG	SmoothCriminal_PSG1, $DC, $07, $00, v00
0001B100 0000                     M 	dc.w	smoothcriminal_psg1-spointzero
0001B102 DC07 0000                M 	dc.b	$dc,$07,$00,v00
0001B106                            	sHeaderPSG	SmoothCriminal_PSG2, $DC, $07, $00, v00
0001B106 0000                     M 	dc.w	smoothcriminal_psg2-spointzero
0001B108 DC07 0000                M 	dc.b	$dc,$07,$00,v00
0001B10C                            	sHeaderPSG	SmoothCriminal_PSG3, $00, $03, $00, vMoonWalker04
0001B10C 0000                     M 	dc.w	smoothcriminal_psg3-spointzero
0001B10E 0003 0019                M 	dc.b	$00,$03,$00,vmoonwalker04
0001B112                            
0001B112                            	; Patch $00
0001B112                            	; $3D
0001B112                            	; $01, $01, $01, $01,	$8E, $52, $14, $4C
0001B112                            	; $08, $08, $0E, $03,	$00, $00, $00, $00
0001B112                            	; $1F, $1F, $1F, $1F,	$1B, $80, $80, $9B
0001B112                            	spAlgorithm	$05
0001B112 =00000001                M spatnum	=	spatnum+1
0001B112 =00000005                M spal	=	val
0001B112                            	spFeedback	$07
0001B112 =00000007                M spfe	=	val
0001B112                            	spDetune	$00, $00, $00, $00
0001B112 =00000000                M spde1	=	op1
0001B112 =00000000                M spde2	=	op2
0001B112 =00000000                M spde3	=	op3
0001B112 =00000000                M spde4	=	op4
0001B112                            	spMultiple	$01, $01, $01, $01
0001B112 =00000001                M spmu1	=	op1
0001B112 =00000001                M spmu2	=	op2
0001B112 =00000001                M spmu3	=	op3
0001B112 =00000001                M spmu4	=	op4
0001B112                            	spRateScale	$02, $00, $01, $01
0001B112 =00000002                M sprs1	=	op1
0001B112 =00000000                M sprs2	=	op2
0001B112 =00000001                M sprs3	=	op3
0001B112 =00000001                M sprs4	=	op4
0001B112                            	spAttackRt	$0E, $14, $12, $0C
0001B112 =0000000E                M spar1	=	op1
0001B112 =00000014                M spar2	=	op2
0001B112 =00000012                M spar3	=	op3
0001B112 =0000000C                M spar4	=	op4
0001B112                            	spAmpMod	$00, $00, $00, $00
0001B112 =00000000                M spam1	=	op1
0001B112 =00000000                M spam2	=	op2
0001B112 =00000000                M spam3	=	op3
0001B112 =00000000                M spam4	=	op4
0001B112                            	spSustainRt	$08, $0E, $08, $03
0001B112 =00000008                M spsr1	=	op1
0001B112 =0000000E                M spsr2	=	op2
0001B112 =00000008                M spsr3	=	op3
0001B112 =00000003                M spsr4	=	op4
0001B112                            	spSustainLv	$01, $01, $01, $01
0001B112 =00000001                M spsl1	=	op1
0001B112 =00000001                M spsl2	=	op2
0001B112 =00000001                M spsl3	=	op3
0001B112 =00000001                M spsl4	=	op4
0001B112                            	spDecayRt	$00, $00, $00, $00
0001B112 =00000000                M spdr1	=	op1
0001B112 =00000000                M spdr2	=	op2
0001B112 =00000000                M spdr3	=	op3
0001B112 =00000000                M spdr4	=	op4
0001B112                            	spReleaseRt	$0F, $0F, $0F, $0F
0001B112 =0000000F                M sprr1	=	op1
0001B112 =0000000F                M sprr2	=	op2
0001B112 =0000000F                M sprr3	=	op3
0001B112 =0000000F                M sprr4	=	op4
0001B112                            	spTotalLv	$1B, $00, $00, $1B
0001B112 =0000001B                M sptl1	=	op1
0001B112 =00000000                M sptl2	=	op2
0001B112 =00000000                M sptl3	=	op3
0001B112 =0000001B                M sptl4	=	op4
0001B112 3D                       M 	dc.b	(spfe<<3)+spal
0001B113 =00000080                M sptlmask4	set	$80
0001B113 =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
0001B113 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
0001B113 =00000000                M sptlmask1	set	((spal=7)<<7)
0001B113 0101 0101                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001B117 8E52 144C                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001B11B 0808 0E03                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001B11F 0000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001B123 1F1F 1F1F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001B127 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001B12B 1B80 809B                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001B12F 4E41 54                  M 	dc.b	'NAT'
0001B132                            
0001B132                            	; Patch $01
0001B132                            	; $02
0001B132                            	; $00, $00, $00, $00,	$5C, $54, $1C, $D0
0001B132                            	; $0C, $08, $0A, $05,	$00, $00, $00, $00
0001B132                            	; $FF, $FF, $FF, $FF,	$24, $1B, $22, $80
0001B132                            	spAlgorithm	$02
0001B132 =00000002                M spatnum	=	spatnum+1
0001B132 =00000002                M spal	=	val
0001B132                            	spFeedback	$00
0001B132 =00000000                M spfe	=	val
0001B132                            	spDetune	$00, $00, $00, $00
0001B132 =00000000                M spde1	=	op1
0001B132 =00000000                M spde2	=	op2
0001B132 =00000000                M spde3	=	op3
0001B132 =00000000                M spde4	=	op4
0001B132                            	spMultiple	$00, $00, $00, $00
0001B132 =00000000                M spmu1	=	op1
0001B132 =00000000                M spmu2	=	op2
0001B132 =00000000                M spmu3	=	op3
0001B132 =00000000                M spmu4	=	op4
0001B132                            	spRateScale	$01, $00, $01, $03
0001B132 =00000001                M sprs1	=	op1
0001B132 =00000000                M sprs2	=	op2
0001B132 =00000001                M sprs3	=	op3
0001B132 =00000003                M sprs4	=	op4
0001B132                            	spAttackRt	$1C, $1C, $14, $10
0001B132 =0000001C                M spar1	=	op1
0001B132 =0000001C                M spar2	=	op2
0001B132 =00000014                M spar3	=	op3
0001B132 =00000010                M spar4	=	op4
0001B132                            	spAmpMod	$00, $00, $00, $00
0001B132 =00000000                M spam1	=	op1
0001B132 =00000000                M spam2	=	op2
0001B132 =00000000                M spam3	=	op3
0001B132 =00000000                M spam4	=	op4
0001B132                            	spSustainRt	$0C, $0A, $08, $05
0001B132 =0000000C                M spsr1	=	op1
0001B132 =0000000A                M spsr2	=	op2
0001B132 =00000008                M spsr3	=	op3
0001B132 =00000005                M spsr4	=	op4
0001B132                            	spSustainLv	$0F, $0F, $0F, $0F
0001B132 =0000000F                M spsl1	=	op1
0001B132 =0000000F                M spsl2	=	op2
0001B132 =0000000F                M spsl3	=	op3
0001B132 =0000000F                M spsl4	=	op4
0001B132                            	spDecayRt	$00, $00, $00, $00
0001B132 =00000000                M spdr1	=	op1
0001B132 =00000000                M spdr2	=	op2
0001B132 =00000000                M spdr3	=	op3
0001B132 =00000000                M spdr4	=	op4
0001B132                            	spReleaseRt	$0F, $0F, $0F, $0F
0001B132 =0000000F                M sprr1	=	op1
0001B132 =0000000F                M sprr2	=	op2
0001B132 =0000000F                M sprr3	=	op3
0001B132 =0000000F                M sprr4	=	op4
0001B132                            	spTotalLv	$24, $22, $1B, $00
0001B132 =00000024                M sptl1	=	op1
0001B132 =00000022                M sptl2	=	op2
0001B132 =0000001B                M sptl3	=	op3
0001B132 =00000000                M sptl4	=	op4
0001B132 02                       M 	dc.b	(spfe<<3)+spal
0001B133 =00000080                M sptlmask4	set	$80
0001B133 =00000000                M sptlmask2	set	((spal>=5)<<7)
0001B133 =00000000                M sptlmask3	set	((spal>=4)<<7)
0001B133 =00000000                M sptlmask1	set	((spal=7)<<7)
0001B133 0000 0000                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001B137 5C54 1CD0                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001B13B 0C08 0A05                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001B13F 0000 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001B143 FFFF FFFF                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001B147 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001B14B 241B 2280                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001B14F 4E41 54                  M 	dc.b	'NAT'
0001B152                            
0001B152                            	; Patch $02
0001B152                            	; $39
0001B152                            	; $01, $51, $00, $00,	$1F, $5F, $5F, $5F
0001B152                            	; $10, $11, $09, $09,	$07, $00, $00, $00
0001B152                            	; $CF, $FF, $FF, $FF,	$1C, $22, $1F, $80
0001B152                            	spAlgorithm	$01
0001B152 =00000003                M spatnum	=	spatnum+1
0001B152 =00000001                M spal	=	val
0001B152                            	spFeedback	$07
0001B152 =00000007                M spfe	=	val
0001B152                            	spDetune	$00, $00, $05, $00
0001B152 =00000000                M spde1	=	op1
0001B152 =00000000                M spde2	=	op2
0001B152 =00000005                M spde3	=	op3
0001B152 =00000000                M spde4	=	op4
0001B152                            	spMultiple	$01, $00, $01, $00
0001B152 =00000001                M spmu1	=	op1
0001B152 =00000000                M spmu2	=	op2
0001B152 =00000001                M spmu3	=	op3
0001B152 =00000000                M spmu4	=	op4
0001B152                            	spRateScale	$00, $01, $01, $01
0001B152 =00000000                M sprs1	=	op1
0001B152 =00000001                M sprs2	=	op2
0001B152 =00000001                M sprs3	=	op3
0001B152 =00000001                M sprs4	=	op4
0001B152                            	spAttackRt	$1F, $1F, $1F, $1F
0001B152 =0000001F                M spar1	=	op1
0001B152 =0000001F                M spar2	=	op2
0001B152 =0000001F                M spar3	=	op3
0001B152 =0000001F                M spar4	=	op4
0001B152                            	spAmpMod	$00, $00, $00, $00
0001B152 =00000000                M spam1	=	op1
0001B152 =00000000                M spam2	=	op2
0001B152 =00000000                M spam3	=	op3
0001B152 =00000000                M spam4	=	op4
0001B152                            	spSustainRt	$10, $09, $11, $09
0001B152 =00000010                M spsr1	=	op1
0001B152 =00000009                M spsr2	=	op2
0001B152 =00000011                M spsr3	=	op3
0001B152 =00000009                M spsr4	=	op4
0001B152                            	spSustainLv	$0C, $0F, $0F, $0F
0001B152 =0000000C                M spsl1	=	op1
0001B152 =0000000F                M spsl2	=	op2
0001B152 =0000000F                M spsl3	=	op3
0001B152 =0000000F                M spsl4	=	op4
0001B152                            	spDecayRt	$07, $00, $00, $00
0001B152 =00000007                M spdr1	=	op1
0001B152 =00000000                M spdr2	=	op2
0001B152 =00000000                M spdr3	=	op3
0001B152 =00000000                M spdr4	=	op4
0001B152                            	spReleaseRt	$0F, $0F, $0F, $0F
0001B152 =0000000F                M sprr1	=	op1
0001B152 =0000000F                M sprr2	=	op2
0001B152 =0000000F                M sprr3	=	op3
0001B152 =0000000F                M sprr4	=	op4
0001B152                            	spTotalLv	$1C, $1F, $22, $00
0001B152 =0000001C                M sptl1	=	op1
0001B152 =0000001F                M sptl2	=	op2
0001B152 =00000022                M sptl3	=	op3
0001B152 =00000000                M sptl4	=	op4
0001B152 39                       M 	dc.b	(spfe<<3)+spal
0001B153 =00000080                M sptlmask4	set	$80
0001B153 =00000000                M sptlmask2	set	((spal>=5)<<7)
0001B153 =00000000                M sptlmask3	set	((spal>=4)<<7)
0001B153 =00000000                M sptlmask1	set	((spal=7)<<7)
0001B153 0151 0000                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001B157 1F5F 5F5F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001B15B 1011 0909                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001B15F 0700 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001B163 CFFF FFFF                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001B167 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001B16B 1C22 1F80                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001B16F 4E41 54                  M 	dc.b	'NAT'
0001B172                            
0001B172                            	; Patch $03
0001B172                            	; $2C
0001B172                            	; $61, $03, $01, $33,	$5F, $94, $5F, $94
0001B172                            	; $05, $05, $05, $07,	$02, $02, $02, $02
0001B172                            	; $1F, $6F, $1F, $AF,	$1E, $80, $1E, $80
0001B172                            	spAlgorithm	$04
0001B172 =00000004                M spatnum	=	spatnum+1
0001B172 =00000004                M spal	=	val
0001B172                            	spFeedback	$05
0001B172 =00000005                M spfe	=	val
0001B172                            	spDetune	$06, $00, $00, $03
0001B172 =00000006                M spde1	=	op1
0001B172 =00000000                M spde2	=	op2
0001B172 =00000000                M spde3	=	op3
0001B172 =00000003                M spde4	=	op4
0001B172                            	spMultiple	$01, $01, $03, $03
0001B172 =00000001                M spmu1	=	op1
0001B172 =00000001                M spmu2	=	op2
0001B172 =00000003                M spmu3	=	op3
0001B172 =00000003                M spmu4	=	op4
0001B172                            	spRateScale	$01, $01, $02, $02
0001B172 =00000001                M sprs1	=	op1
0001B172 =00000001                M sprs2	=	op2
0001B172 =00000002                M sprs3	=	op3
0001B172 =00000002                M sprs4	=	op4
0001B172                            	spAttackRt	$1F, $1F, $14, $14
0001B172 =0000001F                M spar1	=	op1
0001B172 =0000001F                M spar2	=	op2
0001B172 =00000014                M spar3	=	op3
0001B172 =00000014                M spar4	=	op4
0001B172                            	spAmpMod	$00, $00, $00, $00
0001B172 =00000000                M spam1	=	op1
0001B172 =00000000                M spam2	=	op2
0001B172 =00000000                M spam3	=	op3
0001B172 =00000000                M spam4	=	op4
0001B172                            	spSustainRt	$05, $05, $05, $07
0001B172 =00000005                M spsr1	=	op1
0001B172 =00000005                M spsr2	=	op2
0001B172 =00000005                M spsr3	=	op3
0001B172 =00000007                M spsr4	=	op4
0001B172                            	spSustainLv	$01, $01, $06, $0A
0001B172 =00000001                M spsl1	=	op1
0001B172 =00000001                M spsl2	=	op2
0001B172 =00000006                M spsl3	=	op3
0001B172 =0000000A                M spsl4	=	op4
0001B172                            	spDecayRt	$02, $02, $02, $02
0001B172 =00000002                M spdr1	=	op1
0001B172 =00000002                M spdr2	=	op2
0001B172 =00000002                M spdr3	=	op3
0001B172 =00000002                M spdr4	=	op4
0001B172                            	spReleaseRt	$0F, $0F, $0F, $0F
0001B172 =0000000F                M sprr1	=	op1
0001B172 =0000000F                M sprr2	=	op2
0001B172 =0000000F                M sprr3	=	op3
0001B172 =0000000F                M sprr4	=	op4
0001B172                            	spTotalLv	$1E, $1E, $00, $00
0001B172 =0000001E                M sptl1	=	op1
0001B172 =0000001E                M sptl2	=	op2
0001B172 =00000000                M sptl3	=	op3
0001B172 =00000000                M sptl4	=	op4
0001B172 2C                       M 	dc.b	(spfe<<3)+spal
0001B173 =00000080                M sptlmask4	set	$80
0001B173 =00000000                M sptlmask2	set	((spal>=5)<<7)
0001B173 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
0001B173 =00000000                M sptlmask1	set	((spal=7)<<7)
0001B173 6103 0133                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001B177 5F94 5F94                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001B17B 0505 0507                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001B17F 0202 0202                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001B183 1F6F 1FAF                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001B187 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001B18B 1E80 1E80                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001B18F 4E41 54                  M 	dc.b	'NAT'
0001B192                            
0001B192                            	; Patch $04
0001B192                            	; $3D
0001B192                            	; $01, $02, $02, $02,	$1F, $08, $8A, $0A
0001B192                            	; $08, $08, $08, $08,	$00, $01, $00, $00
0001B192                            	; $0F, $1F, $1F, $1F,	$1F, $88, $88, $87
0001B192                            	spAlgorithm	$05
0001B192 =00000005                M spatnum	=	spatnum+1
0001B192 =00000005                M spal	=	val
0001B192                            	spFeedback	$07
0001B192 =00000007                M spfe	=	val
0001B192                            	spDetune	$00, $00, $00, $00
0001B192 =00000000                M spde1	=	op1
0001B192 =00000000                M spde2	=	op2
0001B192 =00000000                M spde3	=	op3
0001B192 =00000000                M spde4	=	op4
0001B192                            	spMultiple	$01, $02, $02, $02
0001B192 =00000001                M spmu1	=	op1
0001B192 =00000002                M spmu2	=	op2
0001B192 =00000002                M spmu3	=	op3
0001B192 =00000002                M spmu4	=	op4
0001B192                            	spRateScale	$00, $02, $00, $00
0001B192 =00000000                M sprs1	=	op1
0001B192 =00000002                M sprs2	=	op2
0001B192 =00000000                M sprs3	=	op3
0001B192 =00000000                M sprs4	=	op4
0001B192                            	spAttackRt	$1F, $0A, $08, $0A
0001B192 =0000001F                M spar1	=	op1
0001B192 =0000000A                M spar2	=	op2
0001B192 =00000008                M spar3	=	op3
0001B192 =0000000A                M spar4	=	op4
0001B192                            	spAmpMod	$00, $00, $00, $00
0001B192 =00000000                M spam1	=	op1
0001B192 =00000000                M spam2	=	op2
0001B192 =00000000                M spam3	=	op3
0001B192 =00000000                M spam4	=	op4
0001B192                            	spSustainRt	$08, $08, $08, $08
0001B192 =00000008                M spsr1	=	op1
0001B192 =00000008                M spsr2	=	op2
0001B192 =00000008                M spsr3	=	op3
0001B192 =00000008                M spsr4	=	op4
0001B192                            	spSustainLv	$00, $01, $01, $01
0001B192 =00000000                M spsl1	=	op1
0001B192 =00000001                M spsl2	=	op2
0001B192 =00000001                M spsl3	=	op3
0001B192 =00000001                M spsl4	=	op4
0001B192                            	spDecayRt	$00, $00, $01, $00
0001B192 =00000000                M spdr1	=	op1
0001B192 =00000000                M spdr2	=	op2
0001B192 =00000001                M spdr3	=	op3
0001B192 =00000000                M spdr4	=	op4
0001B192                            	spReleaseRt	$0F, $0F, $0F, $0F
0001B192 =0000000F                M sprr1	=	op1
0001B192 =0000000F                M sprr2	=	op2
0001B192 =0000000F                M sprr3	=	op3
0001B192 =0000000F                M sprr4	=	op4
0001B192                            	spTotalLv	$1F, $08, $08, $07
0001B192 =0000001F                M sptl1	=	op1
0001B192 =00000008                M sptl2	=	op2
0001B192 =00000008                M sptl3	=	op3
0001B192 =00000007                M sptl4	=	op4
0001B192 3D                       M 	dc.b	(spfe<<3)+spal
0001B193 =00000080                M sptlmask4	set	$80
0001B193 =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
0001B193 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
0001B193 =00000000                M sptlmask1	set	((spal=7)<<7)
0001B193 0102 0202                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001B197 1F08 8A0A                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001B19B 0808 0808                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001B19F 0001 0000                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001B1A3 0F1F 1F1F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001B1A7 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001B1AB 1F88 8887                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001B1AF 4E41 54                  M 	dc.b	'NAT'
0001B1B2                            
0001B1B2                            	; Patch $05
0001B1B2                            	; $3B
0001B1B2                            	; $03, $01, $30, $01,	$1C, $DC, $DC, $5E
0001B1B2                            	; $14, $13, $0F, $0C,	$0C, $05, $0A, $07
0001B1B2                            	; $AF, $AF, $5F, $6F,	$16, $11, $11, $80
0001B1B2                            	spAlgorithm	$03
0001B1B2 =00000006                M spatnum	=	spatnum+1
0001B1B2 =00000003                M spal	=	val
0001B1B2                            	spFeedback	$07
0001B1B2 =00000007                M spfe	=	val
0001B1B2                            	spDetune	$00, $03, $00, $00
0001B1B2 =00000000                M spde1	=	op1
0001B1B2 =00000003                M spde2	=	op2
0001B1B2 =00000000                M spde3	=	op3
0001B1B2 =00000000                M spde4	=	op4
0001B1B2                            	spMultiple	$03, $00, $01, $01
0001B1B2 =00000003                M spmu1	=	op1
0001B1B2 =00000000                M spmu2	=	op2
0001B1B2 =00000001                M spmu3	=	op3
0001B1B2 =00000001                M spmu4	=	op4
0001B1B2                            	spRateScale	$00, $03, $03, $01
0001B1B2 =00000000                M sprs1	=	op1
0001B1B2 =00000003                M sprs2	=	op2
0001B1B2 =00000003                M sprs3	=	op3
0001B1B2 =00000001                M sprs4	=	op4
0001B1B2                            	spAttackRt	$1C, $1C, $1C, $1E
0001B1B2 =0000001C                M spar1	=	op1
0001B1B2 =0000001C                M spar2	=	op2
0001B1B2 =0000001C                M spar3	=	op3
0001B1B2 =0000001E                M spar4	=	op4
0001B1B2                            	spAmpMod	$00, $00, $00, $00
0001B1B2 =00000000                M spam1	=	op1
0001B1B2 =00000000                M spam2	=	op2
0001B1B2 =00000000                M spam3	=	op3
0001B1B2 =00000000                M spam4	=	op4
0001B1B2                            	spSustainRt	$14, $0F, $13, $0C
0001B1B2 =00000014                M spsr1	=	op1
0001B1B2 =0000000F                M spsr2	=	op2
0001B1B2 =00000013                M spsr3	=	op3
0001B1B2 =0000000C                M spsr4	=	op4
0001B1B2                            	spSustainLv	$0A, $05, $0A, $06
0001B1B2 =0000000A                M spsl1	=	op1
0001B1B2 =00000005                M spsl2	=	op2
0001B1B2 =0000000A                M spsl3	=	op3
0001B1B2 =00000006                M spsl4	=	op4
0001B1B2                            	spDecayRt	$0C, $0A, $05, $07
0001B1B2 =0000000C                M spdr1	=	op1
0001B1B2 =0000000A                M spdr2	=	op2
0001B1B2 =00000005                M spdr3	=	op3
0001B1B2 =00000007                M spdr4	=	op4
0001B1B2                            	spReleaseRt	$0F, $0F, $0F, $0F
0001B1B2 =0000000F                M sprr1	=	op1
0001B1B2 =0000000F                M sprr2	=	op2
0001B1B2 =0000000F                M sprr3	=	op3
0001B1B2 =0000000F                M sprr4	=	op4
0001B1B2                            	spTotalLv	$16, $11, $11, $00
0001B1B2 =00000016                M sptl1	=	op1
0001B1B2 =00000011                M sptl2	=	op2
0001B1B2 =00000011                M sptl3	=	op3
0001B1B2 =00000000                M sptl4	=	op4
0001B1B2 3B                       M 	dc.b	(spfe<<3)+spal
0001B1B3 =00000080                M sptlmask4	set	$80
0001B1B3 =00000000                M sptlmask2	set	((spal>=5)<<7)
0001B1B3 =00000000                M sptlmask3	set	((spal>=4)<<7)
0001B1B3 =00000000                M sptlmask1	set	((spal=7)<<7)
0001B1B3 0301 3001                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001B1B7 1CDC DC5E                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001B1BB 1413 0F0C                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001B1BF 0C05 0A07                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001B1C3 AFAF 5F6F                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001B1C7 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001B1CB 1611 1180                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001B1CF 4E41 54                  M 	dc.b	'NAT'
0001B1D2                            
0001B1D2                            	; Patch $06
0001B1D2                            	; $3D
0001B1D2                            	; $08, $01, $01, $01,	$1F, $1F, $1F, $1F
0001B1D2                            	; $19, $19, $19, $11,	$05, $11, $00, $0F
0001B1D2                            	; $0F, $7F, $FF, $FF,	$00, $80, $80, $80
0001B1D2                            	spAlgorithm	$05
0001B1D2 =00000007                M spatnum	=	spatnum+1
0001B1D2 =00000005                M spal	=	val
0001B1D2                            	spFeedback	$07
0001B1D2 =00000007                M spfe	=	val
0001B1D2                            	spDetune	$00, $00, $00, $00
0001B1D2 =00000000                M spde1	=	op1
0001B1D2 =00000000                M spde2	=	op2
0001B1D2 =00000000                M spde3	=	op3
0001B1D2 =00000000                M spde4	=	op4
0001B1D2                            	spMultiple	$08, $01, $01, $01
0001B1D2 =00000008                M spmu1	=	op1
0001B1D2 =00000001                M spmu2	=	op2
0001B1D2 =00000001                M spmu3	=	op3
0001B1D2 =00000001                M spmu4	=	op4
0001B1D2                            	spRateScale	$00, $00, $00, $00
0001B1D2 =00000000                M sprs1	=	op1
0001B1D2 =00000000                M sprs2	=	op2
0001B1D2 =00000000                M sprs3	=	op3
0001B1D2 =00000000                M sprs4	=	op4
0001B1D2                            	spAttackRt	$1F, $1F, $1F, $1F
0001B1D2 =0000001F                M spar1	=	op1
0001B1D2 =0000001F                M spar2	=	op2
0001B1D2 =0000001F                M spar3	=	op3
0001B1D2 =0000001F                M spar4	=	op4
0001B1D2                            	spAmpMod	$00, $00, $00, $00
0001B1D2 =00000000                M spam1	=	op1
0001B1D2 =00000000                M spam2	=	op2
0001B1D2 =00000000                M spam3	=	op3
0001B1D2 =00000000                M spam4	=	op4
0001B1D2                            	spSustainRt	$19, $19, $19, $11
0001B1D2 =00000019                M spsr1	=	op1
0001B1D2 =00000019                M spsr2	=	op2
0001B1D2 =00000019                M spsr3	=	op3
0001B1D2 =00000011                M spsr4	=	op4
0001B1D2                            	spSustainLv	$00, $0F, $07, $0F
0001B1D2 =00000000                M spsl1	=	op1
0001B1D2 =0000000F                M spsl2	=	op2
0001B1D2 =00000007                M spsl3	=	op3
0001B1D2 =0000000F                M spsl4	=	op4
0001B1D2                            	spDecayRt	$05, $00, $11, $0F
0001B1D2 =00000005                M spdr1	=	op1
0001B1D2 =00000000                M spdr2	=	op2
0001B1D2 =00000011                M spdr3	=	op3
0001B1D2 =0000000F                M spdr4	=	op4
0001B1D2                            	spReleaseRt	$0F, $0F, $0F, $0F
0001B1D2 =0000000F                M sprr1	=	op1
0001B1D2 =0000000F                M sprr2	=	op2
0001B1D2 =0000000F                M sprr3	=	op3
0001B1D2 =0000000F                M sprr4	=	op4
0001B1D2                            	spTotalLv	$00, $00, $00, $00
0001B1D2 =00000000                M sptl1	=	op1
0001B1D2 =00000000                M sptl2	=	op2
0001B1D2 =00000000                M sptl3	=	op3
0001B1D2 =00000000                M sptl4	=	op4
0001B1D2 3D                       M 	dc.b	(spfe<<3)+spal
0001B1D3 =00000080                M sptlmask4	set	$80
0001B1D3 =FFFFFF80                M sptlmask2	set	((spal>=5)<<7)
0001B1D3 =FFFFFF80                M sptlmask3	set	((spal>=4)<<7)
0001B1D3 =00000000                M sptlmask1	set	((spal=7)<<7)
0001B1D3 0801 0101                M 	dc.b	(spde1<<4)+spmu1,(spde3<<4)+spmu3,(spde2<<4)+spmu2,(spde4<<4)+spmu4
0001B1D7 1F1F 1F1F                M 	dc.b	(sprs1<<6)+spar1,(sprs3<<6)+spar3,(sprs2<<6)+spar2,(sprs4<<6)+spar4
0001B1DB 1919 1911                M 	dc.b	(spam1<<7)+spsr1,(spam3<<7)+spsr3,(spam2<<7)+spsr2,(spam4<<7)+spsr4
0001B1DF 0511 000F                M 	dc.b	spdr1,spdr3,spdr2,spdr4
0001B1E3 0F7F FFFF                M 	dc.b	(spsl1<<4)+sprr1,(spsl3<<4)+sprr3,(spsl2<<4)+sprr2,(spsl4<<4)+sprr4
0001B1E7 0000 0000                M 	dc.b	spss1,spss3,spss2,spss4
0001B1EB 0080 8080                M 	dc.b	sptl1|sptlmask1,sptl3|sptlmask3,sptl2|sptlmask2,sptl4|sptlmask4
0001B1EF 4E41 54                  M 	dc.b	'NAT'
0001B1F2                            
0001B1F2                            SmoothCriminal_FM1:
0001B1F2                            	sVoice		$00
0001B1F2 E800                     M 	dc.b	$e8,$00
0001B1F4                            
0001B1F4                            SmoothCriminal_Jump1:
0001B1F4 8060 80                    	dc.b nRst, $60, nRst
0001B1F7                            
0001B1F7                            SmoothCriminal_Loop1:
0001B1F7                            	sCall		SmoothCriminal_Call1
0001B1F7 F8                       M 	dc.b	$f8
0001B1F8 0000                     M 	dc.w	smoothcriminal_call1-*-1
0001B1FA                            	sLoop		$00, $03, SmoothCriminal_Loop1
0001B1FA F700                     M 	dc.b	$f7,$00
0001B1FC FFFA                     M 	dc.w	smoothcriminal_loop1-*-1
0001B1FE 03                       M 	dc.b	$03
0001B1FF 8006                       	dc.b nRst, $06
0001B201                            	ssMod68k	$0B, $01, $F0, $FF
0001B201 F00B 01F0 FF             M 	dc.b	$f0,$0b,$01,$f0,$ff
0001B206 A306                       	dc.b nBb2, $06
0001B208                            	sModOff
0001B208 EC                       M 	dc.b	$ec
0001B209 A303 A3A1 A3A5 06          	dc.b nBb2, $03, nBb2, nAb2, nBb2, nC3, $06
0001B210                            	ssMod68k	$01, $01, $03, $04
0001B210 F001 0103 04             M 	dc.b	$f0,$01,$01,$03,$04
0001B215 A5                         	dc.b nC3
0001B216                            	sModOff
0001B216 EC                       M 	dc.b	$ec
0001B217 80A3 03A5 A606             	dc.b nRst, nBb2, $03, nC3, nCs3, $06
0001B21D                            	ssMod68k	$01, $01, $03, $04
0001B21D F001 0103 04             M 	dc.b	$f0,$01,$01,$03,$04
0001B222 A6                         	dc.b nCs3
0001B223                            	sModOff
0001B223 EC                       M 	dc.b	$ec
0001B224 80A5 03A6 A401 E7A5        	dc.b nRst, nC3, $03, nCs3, nB2, $01, sHold, nC3
0001B22C 05                         	dc.b $05
0001B22D                            	ssMod68k	$01, $01, $04, $04
0001B22D F001 0104 04             M 	dc.b	$f0,$01,$01,$04,$04
0001B232 A108                       	dc.b nAb2, $08
0001B234                            	sModOff
0001B234 EC                       M 	dc.b	$ec
0001B235 8004 8006                  	dc.b nRst, $04, nRst, $06
0001B239                            
0001B239                            SmoothCriminal_Loop2:
0001B239                            	sCall		SmoothCriminal_Call2
0001B239 F8                       M 	dc.b	$f8
0001B23A 0000                     M 	dc.w	smoothcriminal_call2-*-1
0001B23C                            	sLoop		$00, $03, SmoothCriminal_Loop2
0001B23C F700                     M 	dc.b	$f7,$00
0001B23E FFFA                     M 	dc.w	smoothcriminal_loop2-*-1
0001B240 03                       M 	dc.b	$03
0001B241 A303 A3A3 AA               	dc.b nBb2, $03, nBb2, nBb2, nF3
0001B246                            	ssMod68k	$01, $01, $06, $04
0001B246 F001 0106 04             M 	dc.b	$f0,$01,$01,$06,$04
0001B24B A806                       	dc.b nEb3, $06
0001B24D                            	sModOff
0001B24D EC                       M 	dc.b	$ec
0001B24E A306 800C AA03 AAAA        	dc.b nBb2, $06, nRst, $0C, nF3, $03, nF3, nF3
0001B256 AA                         	dc.b nF3
0001B257                            	ssMod68k	$01, $01, $06, $04
0001B257 F001 0106 04             M 	dc.b	$f0,$01,$01,$06,$04
0001B25C AD06                       	dc.b nAb3, $06
0001B25E                            	sModOff
0001B25E EC                       M 	dc.b	$ec
0001B25F AA03 8009 AA03 AA          	dc.b nF3, $03, nRst, $09, nF3, $03, nF3
0001B266                            	saVol		$FE
0001B266 EDFE                     M 	dc.b	$ed,$fe
0001B268                            	ssMod68k	$01, $01, $06, $04
0001B268 F001 0106 04             M 	dc.b	$f0,$01,$01,$06,$04
0001B26D AD06                       	dc.b nAb3, $06
0001B26F                            	sModOff
0001B26F EC                       M 	dc.b	$ec
0001B270                            	saVol		$02
0001B270 ED02                     M 	dc.b	$ed,$02
0001B272 AA03 80                    	dc.b nF3, $03, nRst
0001B275                            	saVol		$FE
0001B275 EDFE                     M 	dc.b	$ed,$fe
0001B277                            	ssMod68k	$01, $01, $06, $04
0001B277 F001 0106 04             M 	dc.b	$f0,$01,$01,$06,$04
0001B27C AD06                       	dc.b nAb3, $06
0001B27E                            	sModOff
0001B27E EC                       M 	dc.b	$ec
0001B27F                            	saVol		$02
0001B27F ED02                     M 	dc.b	$ed,$02
0001B281 AF03 80                    	dc.b nBb3, $03, nRst
0001B284                            	sPan		spLeft, $00
0001B284 E080                     M 	dc.b	$e0,spleft|$00
0001B286                            	sCall		SmoothCriminal_Call3
0001B286 F8                       M 	dc.b	$f8
0001B287 0000                     M 	dc.w	smoothcriminal_call3-*-1
0001B289 8006                       	dc.b nRst, $06
0001B28B                            
0001B28B                            SmoothCriminal_Loop3:
0001B28B                            	sPan		spCenter, $00
0001B28B E0C0                     M 	dc.b	$e0,spcenter|$00
0001B28D                            	sCall		SmoothCriminal_Call2
0001B28D F8                       M 	dc.b	$f8
0001B28E 0000                     M 	dc.w	smoothcriminal_call2-*-1
0001B290                            	sLoop		$00, $03, SmoothCriminal_Loop3
0001B290 F700                     M 	dc.b	$f7,$00
0001B292 FFF8                     M 	dc.w	smoothcriminal_loop3-*-1
0001B294 03                       M 	dc.b	$03
0001B295                            	sCall		SmoothCriminal_Call5
0001B295 F8                       M 	dc.b	$f8
0001B296 0000                     M 	dc.w	smoothcriminal_call5-*-1
0001B298                            	sJump		SmoothCriminal_Jump1
0001B298 F6                       M 	dc.b	$f6
0001B299 FF5A                     M 	dc.w	smoothcriminal_jump1-*-1
0001B29B                            
0001B29B                            SmoothCriminal_Call6:
0001B29B 8006 A306 A303 A3A1        	dc.b nRst, $06, nBb2, $06, nBb2, $03, nBb2, nAb2
0001B2A3 A3A5 06A5 80A3 03A5        	dc.b nBb2, nC3, $06, nC3, nRst, nBb2, $03, nC3
0001B2AB A606 A680 A503 A6A5        	dc.b nCs3, $06, nCs3, nRst, nC3, $03, nCs3, nC3
0001B2B3 06A1                       	dc.b $06, nAb2
0001B2B5                            	sRet
0001B2B5 F9                       M 	dc.b	$f9
0001B2B6                            
0001B2B6                            SmoothCriminal_Call1:
0001B2B6 8006                       	dc.b nRst, $06
0001B2B8                            	ssMod68k	$0B, $01, $F0, $FF
0001B2B8 F00B 01F0 FF             M 	dc.b	$f0,$0b,$01,$f0,$ff
0001B2BD A306                       	dc.b nBb2, $06
0001B2BF                            	sModOff
0001B2BF EC                       M 	dc.b	$ec
0001B2C0 A303 A3A1 A3A5 06          	dc.b nBb2, $03, nBb2, nAb2, nBb2, nC3, $06
0001B2C7                            	ssMod68k	$01, $01, $03, $04
0001B2C7 F001 0103 04             M 	dc.b	$f0,$01,$01,$03,$04
0001B2CC A5                         	dc.b nC3
0001B2CD                            	sModOff
0001B2CD EC                       M 	dc.b	$ec
0001B2CE 80A3 03A5 A606             	dc.b nRst, nBb2, $03, nC3, nCs3, $06
0001B2D4                            	ssMod68k	$01, $01, $03, $04
0001B2D4 F001 0103 04             M 	dc.b	$f0,$01,$01,$03,$04
0001B2D9 A6                         	dc.b nCs3
0001B2DA                            	sModOff
0001B2DA EC                       M 	dc.b	$ec
0001B2DB 80A5 03A6 A401 E7A5        	dc.b nRst, nC3, $03, nCs3, nB2, $01, sHold, nC3
0001B2E3 05                         	dc.b $05
0001B2E4                            	ssMod68k	$01, $01, $04, $04
0001B2E4 F001 0104 04             M 	dc.b	$f0,$01,$01,$04,$04
0001B2E9 A108                       	dc.b nAb2, $08
0001B2EB                            	sModOff
0001B2EB EC                       M 	dc.b	$ec
0001B2EC 8004 A306                  	dc.b nRst, $04, nBb2, $06
0001B2F0                            	sRet
0001B2F0 F9                       M 	dc.b	$f9
0001B2F1                            
0001B2F1                            SmoothCriminal_Call2:
0001B2F1 A303 A3A3 AA               	dc.b nBb2, $03, nBb2, nBb2, nF3
0001B2F6                            	ssMod68k	$01, $01, $06, $04
0001B2F6 F001 0106 04             M 	dc.b	$f0,$01,$01,$06,$04
0001B2FB A806                       	dc.b nEb3, $06
0001B2FD                            	sModOff
0001B2FD EC                       M 	dc.b	$ec
0001B2FE A306 800C A303 A3A3        	dc.b nBb2, $06, nRst, $0C, nBb2, $03, nBb2, nBb2
0001B306 AA                         	dc.b nF3
0001B307                            	ssMod68k	$01, $01, $06, $04
0001B307 F001 0106 04             M 	dc.b	$f0,$01,$01,$06,$04
0001B30C A806                       	dc.b nEb3, $06
0001B30E                            	sModOff
0001B30E EC                       M 	dc.b	$ec
0001B30F A380 A303 A3A5 0380        	dc.b nBb2, nRst, nBb2, $03, nBb2, nC3, $03, nRst
0001B317 A106 03A3 8006             	dc.b nAb2, $06, $03, nBb2, nRst, $06
0001B31D                            	sRet
0001B31D F9                       M 	dc.b	$f9
0001B31E                            
0001B31E                            SmoothCriminal_Call3:
0001B31E 800C B603 B6B6 B6          	dc.b nRst, $0C, nF4, $03, nF4, nF4, nF4
0001B325                            	ssMod68k	$00, $01, $06, $04
0001B325 F000 0106 04             M 	dc.b	$f0,$00,$01,$06,$04
0001B32A                            	sCall		SmoothCriminal_Call4
0001B32A F8                       M 	dc.b	$f8
0001B32B 0000                     M 	dc.w	smoothcriminal_call4-*-1
0001B32D 8006 B603 03               	dc.b nRst, $06, nF4, $03, $03
0001B332                            	sModOn
0001B332 EB                       M 	dc.b	$eb
0001B333 06                         	dc.b $06
0001B334                            	sModOff
0001B334 EC                       M 	dc.b	$ec
0001B335 0303                       	dc.b $03, $03
0001B337                            	sModOn
0001B337 EB                       M 	dc.b	$eb
0001B338 B406                       	dc.b nEb4, $06
0001B33A                            	sModOff
0001B33A EC                       M 	dc.b	$ec
0001B33B B180 B203 B4B2 0380        	dc.b nC4, nRst, nCs4, $03, nEb4, nCs4, $03, nRst
0001B343                            	sModOn
0001B343 EB                       M 	dc.b	$eb
0001B344 AF06                       	dc.b nBb3, $06
0001B346                            	sModOff
0001B346 EC                       M 	dc.b	$ec
0001B347 80B1 03B2 B106 B1B4        	dc.b nRst, nC4, $03, nCs4, nC4, $06, nC4, nEb4
0001B34F                            	sModOn
0001B34F EB                       M 	dc.b	$eb
0001B350 B608                       	dc.b nF4, $08
0001B352                            	sModOff
0001B352 EC                       M 	dc.b	$ec
0001B353 8004 B603 B6B6 B6          	dc.b nRst, $04, nF4, $03, nF4, nF4, nF4
0001B35A                            	sModOn
0001B35A EB                       M 	dc.b	$eb
0001B35B B606                       	dc.b nF4, $06
0001B35D                            	sCall		SmoothCriminal_Call4
0001B35D F8                       M 	dc.b	$f8
0001B35E 0000                     M 	dc.w	smoothcriminal_call4-*-1
0001B360 8006 B603 0303 0303        	dc.b nRst, $06, nF4, $03, $03, $03, $03, $03
0001B368 03                         	dc.b $03
0001B369                            	sModOn
0001B369 EB                       M 	dc.b	$eb
0001B36A B406                       	dc.b nEb4, $06
0001B36C                            	sModOff
0001B36C EC                       M 	dc.b	$ec
0001B36D B180 B203 B4B2 0380        	dc.b nC4, nRst, nCs4, $03, nEb4, nCs4, $03, nRst
0001B375 AF06 80B2 03B2             	dc.b nBb3, $06, nRst, nCs4, $03, nCs4
0001B37B                            	sModOn
0001B37B EB                       M 	dc.b	$eb
0001B37C B406                       	dc.b nEb4, $06
0001B37E                            	sModOff
0001B37E EC                       M 	dc.b	$ec
0001B37F B109 8003                  	dc.b nC4, $09, nRst, $03
0001B383                            	sRet
0001B383 F9                       M 	dc.b	$f9
0001B384                            
0001B384                            SmoothCriminal_Call4:
0001B384 B406                       	dc.b nEb4, $06
0001B386                            	sModOff
0001B386 EC                       M 	dc.b	$ec
0001B387 B180 B203 B4               	dc.b nC4, nRst, nCs4, $03, nEb4
0001B38C                            	sModOn
0001B38C EB                       M 	dc.b	$eb
0001B38D B206                       	dc.b nCs4, $06
0001B38F                            	sModOff
0001B38F EC                       M 	dc.b	$ec
0001B390 AF80 B203 B2               	dc.b nBb3, nRst, nCs4, $03, nCs4
0001B395                            	sModOn
0001B395 EB                       M 	dc.b	$eb
0001B396 B406                       	dc.b nEb4, $06
0001B398                            	sModOff
0001B398 EC                       M 	dc.b	$ec
0001B399 B109 8003 8006             	dc.b nC4, $09, nRst, $03, nRst, $06
0001B39F                            	sRet
0001B39F F9                       M 	dc.b	$f9
0001B3A0                            
0001B3A0                            SmoothCriminal_Call5:
0001B3A0 A901 E7AA 05               	dc.b nE3, $01, sHold, nF3, $05
0001B3A5                            	saVol		$04
0001B3A5 ED04                     M 	dc.b	$ed,$04
0001B3A7 A506                       	dc.b nC3, $06
0001B3A9                            	saVol		$FC
0001B3A9 EDFC                     M 	dc.b	$ed,$fc
0001B3AB A8                         	dc.b nEb3
0001B3AC                            	ssMod68k	$10, $01, $E0, $FF
0001B3AC F010 01E0 FF             M 	dc.b	$f0,$10,$01,$e0,$ff
0001B3B1 A80A                       	dc.b nEb3, $0A
0001B3B3                            	sModOff
0001B3B3 EC                       M 	dc.b	$ec
0001B3B4 8008 A901 E7AA 05          	dc.b nRst, $08, nE3, $01, sHold, nF3, $05
0001B3BB                            	saVol		$04
0001B3BB ED04                     M 	dc.b	$ed,$04
0001B3BD A506                       	dc.b nC3, $06
0001B3BF                            	saVol		$FC
0001B3BF EDFC                     M 	dc.b	$ed,$fc
0001B3C1 A8                         	dc.b nEb3
0001B3C2                            	ssMod68k	$10, $01, $E0, $FF
0001B3C2 F010 01E0 FF             M 	dc.b	$f0,$10,$01,$e0,$ff
0001B3C7 A80A                       	dc.b nEb3, $0A
0001B3C9                            	sModOff
0001B3C9 EC                       M 	dc.b	$ec
0001B3CA 8002 AA03 AA               	dc.b nRst, $02, nF3, $03, nF3
0001B3CF                            	ssMod68k	$01, $01, $08, $04
0001B3CF F001 0108 04             M 	dc.b	$f0,$01,$01,$08,$04
0001B3D4 A901 E7AA 08               	dc.b nE3, $01, sHold, nF3, $08
0001B3D9                            	sModOff
0001B3D9 EC                       M 	dc.b	$ec
0001B3DA 03A8 03A6 A306             	dc.b $03, nEb3, $03, nCs3, nBb2, $06
0001B3E0                            	sRet
0001B3E0 F9                       M 	dc.b	$f9
0001B3E1                            
0001B3E1                            SmoothCriminal_FM2:
0001B3E1                            	sVoice		$01
0001B3E1 E801                     M 	dc.b	$e8,$01
0001B3E3                            
0001B3E3                            SmoothCriminal_Loop4:
0001B3E3                            	sCall		SmoothCriminal_Call6
0001B3E3 F8                       M 	dc.b	$f8
0001B3E4 FEB6                     M 	dc.w	smoothcriminal_call6-*-1
0001B3E6 80A3                       	dc.b nRst, nBb2
0001B3E8                            	sLoop		$00, $05, SmoothCriminal_Loop4
0001B3E8 F700                     M 	dc.b	$f7,$00
0001B3EA FFF8                     M 	dc.w	smoothcriminal_loop4-*-1
0001B3EC 05                       M 	dc.b	$05
0001B3ED 8006 A306 A303 A3A1        	dc.b nRst, $06, nBb2, $06, nBb2, $03, nBb2, nAb2
0001B3F5 A3A5 06A5 80A3 03A5        	dc.b nBb2, nC3, $06, nC3, nRst, nBb2, $03, nC3
0001B3FD A606 A680 A503 A6A5        	dc.b nCs3, $06, nCs3, nRst, nC3, $03, nCs3, nC3
0001B405 06A1 809F                  	dc.b $06, nAb2, nRst, nFs2
0001B409                            	sCall		SmoothCriminal_Call7
0001B409 F8                       M 	dc.b	$f8
0001B40A 0000                     M 	dc.w	smoothcriminal_call7-*-1
0001B40C A112 9F06 E706 9F06        	dc.b nAb2, $12, nFs2, $06, sHold, $06, nFs2, $06
0001B414 9F0C 9F06 060C 9E9E        	dc.b nFs2, $0C, nFs2, $06, $06, $0C, nF2, nF2
0001B41C 9E06 A0A1 A3               	dc.b nF2, $06, nG2, nAb2, nBb2
0001B421                            	sCall		SmoothCriminal_Call8
0001B421 F8                       M 	dc.b	$f8
0001B422 0000                     M 	dc.w	smoothcriminal_call8-*-1
0001B424 8003 A0A1 06A3             	dc.b nRst, $03, nG2, nAb2, $06, nBb2
0001B42A                            	sCall		SmoothCriminal_Call8
0001B42A F8                       M 	dc.b	$f8
0001B42B 0000                     M 	dc.w	smoothcriminal_call8-*-1
0001B42D A006 A29F                  	dc.b nG2, $06, nA2, nFs2
0001B431                            	sCall		SmoothCriminal_Call7
0001B431 F8                       M 	dc.b	$f8
0001B432 0000                     M 	dc.w	smoothcriminal_call7-*-1
0001B434 A10C 9F                    	dc.b nAb2, $0C, nFs2
0001B437                            	saVol		$FC
0001B437 EDFC                     M 	dc.b	$ed,$fc
0001B439 9E0C 809E 069E 8018        	dc.b nF2, $0C, nRst, nF2, $06, nF2, nRst, $18
0001B441 9E0C 8012 A306             	dc.b nF2, $0C, nRst, $12, nBb2, $06
0001B447                            	saVol		$04
0001B447 ED04                     M 	dc.b	$ed,$04
0001B449                            	sJump		SmoothCriminal_Loop4
0001B449 F6                       M 	dc.b	$f6
0001B44A FF98                     M 	dc.w	smoothcriminal_loop4-*-1
0001B44C                            
0001B44C                            SmoothCriminal_Call8:
0001B44C                            	sCall		SmoothCriminal_Call9
0001B44C F8                       M 	dc.b	$f8
0001B44D 0000                     M 	dc.w	smoothcriminal_call9-*-1
0001B44F A106 A1A1 A3               	dc.b nAb2, $06, nAb2, nAb2, nBb2
0001B454                            	sCall		SmoothCriminal_Call9
0001B454 F8                       M 	dc.b	$f8
0001B455 0000                     M 	dc.w	smoothcriminal_call9-*-1
0001B457 9E06                       	dc.b nF2, $06
0001B459                            	sRet
0001B459 F9                       M 	dc.b	$f9
0001B45A                            
0001B45A                            SmoothCriminal_Call9:
0001B45A 8006 A3A3 A303 A3A1        	dc.b nRst, $06, nBb2, nBb2, nBb2, $03, nBb2, nAb2
0001B462 06A1 0680 A103 A19F        	dc.b $06, nAb2, $06, nRst, nAb2, $03, nAb2, nFs2
0001B46A 069F 0680 9F03 9F          	dc.b $06, nFs2, $06, nRst, nFs2, $03, nFs2
0001B471                            	sRet
0001B471 F9                       M 	dc.b	$f9
0001B472                            
0001B472                            SmoothCriminal_Call7:
0001B472 E706 9F9F 0C9F 06AB        	dc.b sHold, $06, nFs2, nFs2, $0C, nFs2, $06, nFs3
0001B47A 0C9F 0606 AB9F 0CA1        	dc.b $0C, nFs2, $06, $06, nFs3, nFs2, $0C, nAb2
0001B482 129F 06                    	dc.b $12, nFs2, $06
0001B485                            	sLoop		$00, $02, SmoothCriminal_Call7
0001B485 F700                     M 	dc.b	$f7,$00
0001B487 FFEA                     M 	dc.w	smoothcriminal_call7-*-1
0001B489 02                       M 	dc.b	$02
0001B48A E706 9F9F 0C9F 06AB        	dc.b sHold, $06, nFs2, nFs2, $0C, nFs2, $06, nFs3
0001B492 0C9F 0606 AB9F 0C          	dc.b $0C, nFs2, $06, $06, nFs3, nFs2, $0C
0001B499                            	sRet
0001B499 F9                       M 	dc.b	$f9
0001B49A                            
0001B49A                            SmoothCriminal_FM3:
0001B49A                            	saVol		$FC
0001B49A EDFC                     M 	dc.b	$ed,$fc
0001B49C                            	sVoice		$02
0001B49C E802                     M 	dc.b	$e8,$02
0001B49E                            	sPan		spLeft, $00
0001B49E E080                     M 	dc.b	$e0,spleft|$00
0001B4A0                            
0001B4A0                            SmoothCriminal_Loop5:
0001B4A0                            	sCall		SmoothCriminal_Call6
0001B4A0 F8                       M 	dc.b	$f8
0001B4A1 FDF9                     M 	dc.w	smoothcriminal_call6-*-1
0001B4A3 80A3                       	dc.b nRst, nBb2
0001B4A5                            	sLoop		$00, $02, SmoothCriminal_Loop5
0001B4A5 F700                     M 	dc.b	$f7,$00
0001B4A7 FFF8                     M 	dc.w	smoothcriminal_loop5-*-1
0001B4A9 02                       M 	dc.b	$02
0001B4AA                            	saVol		$04
0001B4AA ED04                     M 	dc.b	$ed,$04
0001B4AC                            	sVoice		$03
0001B4AC E803                     M 	dc.b	$e8,$03
0001B4AE                            	sPan		spLeft, $00
0001B4AE E080                     M 	dc.b	$e0,spleft|$00
0001B4B0                            
0001B4B0                            SmoothCriminal_Loop6:
0001B4B0 8018 A506 A580 80A6        	dc.b nRst, $18, nC3, $06, nC3, nRst, nRst, nCs3
0001B4B8 A680 80A5 A580 A3          	dc.b nCs3, nRst, nRst, nC3, nC3, nRst, nBb2
0001B4BF                            	sLoop		$00, $03, SmoothCriminal_Loop6
0001B4BF F700                     M 	dc.b	$f7,$00
0001B4C1 FFEE                     M 	dc.w	smoothcriminal_loop6-*-1
0001B4C3 03                       M 	dc.b	$03
0001B4C4 8018 A506 A580 80A6        	dc.b nRst, $18, nC3, $06, nC3, nRst, nRst, nCs3
0001B4CC A680 80A5 A580             	dc.b nCs3, nRst, nRst, nC3, nC3, nRst
0001B4D2                            	sVoice		$04
0001B4D2 E804                     M 	dc.b	$e8,$04
0001B4D4                            	sPan		spLeft, $00
0001B4D4 E080                     M 	dc.b	$e0,spleft|$00
0001B4D6                            	saVol		$0A
0001B4D6 ED0A                     M 	dc.b	$ed,$0a
0001B4D8                            	ssMod68k	$20, $01, $04, $05
0001B4D8 F020 0104 05             M 	dc.b	$f0,$20,$01,$04,$05
0001B4DD AF                         	dc.b nBb3
0001B4DE                            
0001B4DE                            SmoothCriminal_Loop7:
0001B4DE E748 B10C AF0C             	dc.b sHold, $48, nC4, $0C, nBb3, $0C
0001B4E4                            	sLoop		$00, $03, SmoothCriminal_Loop7
0001B4E4 F700                     M 	dc.b	$f7,$00
0001B4E6 FFF7                     M 	dc.w	smoothcriminal_loop7-*-1
0001B4E8 03                       M 	dc.b	$03
0001B4E9 E730 AE                    	dc.b sHold, $30, nA3
0001B4EC                            	saVol		$F6
0001B4EC EDF6                     M 	dc.b	$ed,$f6
0001B4EE                            	saVol		$02
0001B4EE ED02                     M 	dc.b	$ed,$02
0001B4F0                            	sPan		spCenter, $00
0001B4F0 E0C0                     M 	dc.b	$e0,spcenter|$00
0001B4F2                            	sVoice		$00
0001B4F2 E800                     M 	dc.b	$e8,$00
0001B4F4 800C BE03 BEBE BE          	dc.b nRst, $0C, nCs5, $03, nCs5, nCs5, nCs5
0001B4FB                            	ssMod68k	$01, $01, $06, $04
0001B4FB F001 0106 04             M 	dc.b	$f0,$01,$01,$06,$04
0001B500 BD06                       	dc.b nC5, $06
0001B502                            	sModOff
0001B502 EC                       M 	dc.b	$ec
0001B503 B980 BB03 BD               	dc.b nAb4, nRst, nBb4, $03, nC5
0001B508                            	sModOn
0001B508 EB                       M 	dc.b	$eb
0001B509 BB06                       	dc.b nBb4, $06
0001B50B                            	sModOff
0001B50B EC                       M 	dc.b	$ec
0001B50C B780 BB03 BB               	dc.b nFs4, nRst, nBb4, $03, nBb4
0001B511                            	sModOn
0001B511 EB                       M 	dc.b	$eb
0001B512 BD06                       	dc.b nC5, $06
0001B514                            	sModOff
0001B514 EC                       M 	dc.b	$ec
0001B515 B909 8003 8006 8006        	dc.b nAb4, $09, nRst, $03, nRst, $06, nRst, $06
0001B51D BE03 03                    	dc.b nCs5, $03, $03
0001B520                            	sModOn
0001B520 EB                       M 	dc.b	$eb
0001B521 06                         	dc.b $06
0001B522                            	sModOff
0001B522 EC                       M 	dc.b	$ec
0001B523 0303                       	dc.b $03, $03
0001B525                            	sModOn
0001B525 EB                       M 	dc.b	$eb
0001B526 BD06                       	dc.b nC5, $06
0001B528                            	sModOff
0001B528 EC                       M 	dc.b	$ec
0001B529 B980 BB03 BDBB 0380        	dc.b nAb4, nRst, nBb4, $03, nC5, nBb4, $03, nRst
0001B531                            	sModOn
0001B531 EB                       M 	dc.b	$eb
0001B532 B706                       	dc.b nFs4, $06
0001B534                            	sModOff
0001B534 EC                       M 	dc.b	$ec
0001B535 80B9 03BB                  	dc.b nRst, nAb4, $03, nBb4
0001B539                            	sModOn
0001B539 EB                       M 	dc.b	$eb
0001B53A BA06                       	dc.b nA4, $06
0001B53C                            	sModOff
0001B53C EC                       M 	dc.b	$ec
0001B53D BABD                       	dc.b nA4, nC5
0001B53F                            	sModOn
0001B53F EB                       M 	dc.b	$eb
0001B540 BE08                       	dc.b nCs5, $08
0001B542                            	sModOff
0001B542 EC                       M 	dc.b	$ec
0001B543 8004 BE03 BEBE BE          	dc.b nRst, $04, nCs5, $03, nCs5, nCs5, nCs5
0001B54A                            	sModOn
0001B54A EB                       M 	dc.b	$eb
0001B54B BE06 BD06                  	dc.b nCs5, $06, nC5, $06
0001B54F                            	sModOff
0001B54F EC                       M 	dc.b	$ec
0001B550 B980 BB03 BD               	dc.b nAb4, nRst, nBb4, $03, nC5
0001B555                            	sModOn
0001B555 EB                       M 	dc.b	$eb
0001B556 BB06                       	dc.b nBb4, $06
0001B558                            	sModOff
0001B558 EC                       M 	dc.b	$ec
0001B559 B780 BB03 BB               	dc.b nFs4, nRst, nBb4, $03, nBb4
0001B55E                            	sModOn
0001B55E EB                       M 	dc.b	$eb
0001B55F BD06                       	dc.b nC5, $06
0001B561                            	sModOff
0001B561 EC                       M 	dc.b	$ec
0001B562 B909 8003 8006 8006        	dc.b nAb4, $09, nRst, $03, nRst, $06, nRst, $06
0001B56A BE03 0303 0303 03          	dc.b nCs5, $03, $03, $03, $03, $03, $03
0001B571                            	sModOn
0001B571 EB                       M 	dc.b	$eb
0001B572 BD06                       	dc.b nC5, $06
0001B574                            	sModOff
0001B574 EC                       M 	dc.b	$ec
0001B575 B980 BB03 BDBB 0380        	dc.b nAb4, nRst, nBb4, $03, nC5, nBb4, $03, nRst
0001B57D                            	sModOn
0001B57D EB                       M 	dc.b	$eb
0001B57E B706                       	dc.b nFs4, $06
0001B580                            	sModOff
0001B580 EC                       M 	dc.b	$ec
0001B581 80BB 03BB                  	dc.b nRst, nBb4, $03, nBb4
0001B585                            	sModOn
0001B585 EB                       M 	dc.b	$eb
0001B586 BD06                       	dc.b nC5, $06
0001B588                            	sModOff
0001B588 EC                       M 	dc.b	$ec
0001B589 BA09 8003                  	dc.b nA4, $09, nRst, $03
0001B58D                            	saVol		$FE
0001B58D EDFE                     M 	dc.b	$ed,$fe
0001B58F                            	sPan		spLeft, $00
0001B58F E080                     M 	dc.b	$e0,spleft|$00
0001B591                            	sVoice		$04
0001B591 E804                     M 	dc.b	$e8,$04
0001B593                            	saVol		$0A
0001B593 ED0A                     M 	dc.b	$ed,$0a
0001B595                            	ssMod68k	$20, $01, $04, $05
0001B595 F020 0104 05             M 	dc.b	$f0,$20,$01,$04,$05
0001B59A AF06                       	dc.b nBb3, $06
0001B59C                            
0001B59C                            SmoothCriminal_Loop8:
0001B59C E748 B10C AF0C             	dc.b sHold, $48, nC4, $0C, nBb3, $0C
0001B5A2                            	sLoop		$00, $03, SmoothCriminal_Loop8
0001B5A2 F700                     M 	dc.b	$f7,$00
0001B5A4 FFF7                     M 	dc.w	smoothcriminal_loop8-*-1
0001B5A6 03                       M 	dc.b	$03
0001B5A7                            	saVol		$F6
0001B5A7 EDF6                     M 	dc.b	$ed,$f6
0001B5A9                            	sVoice		$00
0001B5A9 E800                     M 	dc.b	$e8,$00
0001B5AB                            	sCall		SmoothCriminal_Call5
0001B5AB F8                       M 	dc.b	$f8
0001B5AC FDF3                     M 	dc.w	smoothcriminal_call5-*-1
0001B5AE                            	sJump		SmoothCriminal_FM3
0001B5AE F6                       M 	dc.b	$f6
0001B5AF FEEA                     M 	dc.w	smoothcriminal_fm3-*-1
0001B5B1                            
0001B5B1                            SmoothCriminal_FM4:
0001B5B1                            	sVoice		$05
0001B5B1 E805                     M 	dc.b	$e8,$05
0001B5B3                            	sPan		spRight, $00
0001B5B3 E040                     M 	dc.b	$e0,spright|$00
0001B5B5                            	saVol		$FC
0001B5B5 EDFC                     M 	dc.b	$ed,$fc
0001B5B7                            
0001B5B7                            SmoothCriminal_Loop9:
0001B5B7                            	sCall		SmoothCriminal_Call6
0001B5B7 F8                       M 	dc.b	$f8
0001B5B8 FCE2                     M 	dc.w	smoothcriminal_call6-*-1
0001B5BA 80A3                       	dc.b nRst, nBb2
0001B5BC                            	sLoop		$00, $02, SmoothCriminal_Loop9
0001B5BC F700                     M 	dc.b	$f7,$00
0001B5BE FFF8                     M 	dc.w	smoothcriminal_loop9-*-1
0001B5C0 02                       M 	dc.b	$02
0001B5C1                            	saVol		$04
0001B5C1 ED04                     M 	dc.b	$ed,$04
0001B5C3                            
0001B5C3                            SmoothCriminal_Loop10:
0001B5C3                            	sVoice		$03
0001B5C3 E803                     M 	dc.b	$e8,$03
0001B5C5                            	sPan		spRight, $00
0001B5C5 E040                     M 	dc.b	$e0,spright|$00
0001B5C7 8018 A806 A880 80AA        	dc.b nRst, $18, nEb3, $06, nEb3, nRst, nRst, nF3
0001B5CF AA80 80A8 A880 A6          	dc.b nF3, nRst, nRst, nEb3, nEb3, nRst, nCs3
0001B5D6                            	sLoop		$00, $03, SmoothCriminal_Loop10
0001B5D6 F700                     M 	dc.b	$f7,$00
0001B5D8 FFEA                     M 	dc.w	smoothcriminal_loop10-*-1
0001B5DA 03                       M 	dc.b	$03
0001B5DB 8018 A806 A880 80AA        	dc.b nRst, $18, nEb3, $06, nEb3, nRst, nRst, nF3
0001B5E3 AA80 80A8 A880             	dc.b nF3, nRst, nRst, nEb3, nEb3, nRst
0001B5E9                            	sVoice		$04
0001B5E9 E804                     M 	dc.b	$e8,$04
0001B5EB                            	sPan		spCenter, $00
0001B5EB E0C0                     M 	dc.b	$e0,spcenter|$00
0001B5ED                            	saVol		$0A
0001B5ED ED0A                     M 	dc.b	$ed,$0a
0001B5EF                            	ssMod68k	$22, $01, $04, $05
0001B5EF F022 0104 05             M 	dc.b	$f0,$22,$01,$04,$05
0001B5F4 A6                         	dc.b nCs3
0001B5F5                            
0001B5F5                            SmoothCriminal_Loop11:
0001B5F5 E748 A80C A60C             	dc.b sHold, $48, nEb3, $0C, nCs3, $0C
0001B5FB                            	sLoop		$00, $03, SmoothCriminal_Loop11
0001B5FB F700                     M 	dc.b	$f7,$00
0001B5FD FFF7                     M 	dc.w	smoothcriminal_loop11-*-1
0001B5FF 03                       M 	dc.b	$03
0001B600 E730 A5                    	dc.b sHold, $30, nC3
0001B603                            	saVol		$F6
0001B603 EDF6                     M 	dc.b	$ed,$f6
0001B605                            	saVol		$02
0001B605 ED02                     M 	dc.b	$ed,$02
0001B607                            	sVoice		$00
0001B607 E800                     M 	dc.b	$e8,$00
0001B609                            	sPan		spCenter, $00
0001B609 E0C0                     M 	dc.b	$e0,spcenter|$00
0001B60B 800C BB03 BBBB BB          	dc.b nRst, $0C, nBb4, $03, nBb4, nBb4, nBb4
0001B612                            	ssMod68k	$02, $01, $06, $04
0001B612 F002 0106 04             M 	dc.b	$f0,$02,$01,$06,$04
0001B617 B906                       	dc.b nAb4, $06
0001B619                            	sModOff
0001B619 EC                       M 	dc.b	$ec
0001B61A B480 B703 B9               	dc.b nEb4, nRst, nFs4, $03, nAb4
0001B61F                            	sModOn
0001B61F EB                       M 	dc.b	$eb
0001B620 B706                       	dc.b nFs4, $06
0001B622                            	sModOff
0001B622 EC                       M 	dc.b	$ec
0001B623 B280 B703 B7               	dc.b nCs4, nRst, nFs4, $03, nFs4
0001B628                            	sModOn
0001B628 EB                       M 	dc.b	$eb
0001B629 B906                       	dc.b nAb4, $06
0001B62B                            	sModOff
0001B62B EC                       M 	dc.b	$ec
0001B62C B409 8003 8006 8006        	dc.b nEb4, $09, nRst, $03, nRst, $06, nRst, $06
0001B634 BB03 03                    	dc.b nBb4, $03, $03
0001B637                            	sModOn
0001B637 EB                       M 	dc.b	$eb
0001B638 06                         	dc.b $06
0001B639                            	sModOff
0001B639 EC                       M 	dc.b	$ec
0001B63A 0303                       	dc.b $03, $03
0001B63C                            	sModOn
0001B63C EB                       M 	dc.b	$eb
0001B63D B906                       	dc.b nAb4, $06
0001B63F                            	sModOff
0001B63F EC                       M 	dc.b	$ec
0001B640 B480 B703 B9B7 0380        	dc.b nEb4, nRst, nFs4, $03, nAb4, nFs4, $03, nRst
0001B648                            	sModOn
0001B648 EB                       M 	dc.b	$eb
0001B649 B206                       	dc.b nCs4, $06
0001B64B                            	sModOff
0001B64B EC                       M 	dc.b	$ec
0001B64C 80B4 03B7                  	dc.b nRst, nEb4, $03, nFs4
0001B650                            	sModOn
0001B650 EB                       M 	dc.b	$eb
0001B651 B606                       	dc.b nF4, $06
0001B653                            	sModOff
0001B653 EC                       M 	dc.b	$ec
0001B654 B6B9                       	dc.b nF4, nAb4
0001B656                            	sModOn
0001B656 EB                       M 	dc.b	$eb
0001B657 BB08                       	dc.b nBb4, $08
0001B659                            	sModOff
0001B659 EC                       M 	dc.b	$ec
0001B65A 8004 BB03 0303 03          	dc.b nRst, $04, nBb4, $03, $03, $03, $03
0001B661                            	sModOn
0001B661 EB                       M 	dc.b	$eb
0001B662 06                         	dc.b $06
0001B663                            	sModOff
0001B663 EC                       M 	dc.b	$ec
0001B664 B906                       	dc.b nAb4, $06
0001B666                            	sModOff
0001B666 EC                       M 	dc.b	$ec
0001B667 B480 B703 B9               	dc.b nEb4, nRst, nFs4, $03, nAb4
0001B66C                            	sModOn
0001B66C EB                       M 	dc.b	$eb
0001B66D B706                       	dc.b nFs4, $06
0001B66F                            	sModOff
0001B66F EC                       M 	dc.b	$ec
0001B670 B280 B703 B7               	dc.b nCs4, nRst, nFs4, $03, nFs4
0001B675                            	sModOn
0001B675 EB                       M 	dc.b	$eb
0001B676 B906                       	dc.b nAb4, $06
0001B678                            	sModOff
0001B678 EC                       M 	dc.b	$ec
0001B679 B409 8003 8006 8006        	dc.b nEb4, $09, nRst, $03, nRst, $06, nRst, $06
0001B681 BB03 0303 0303 03          	dc.b nBb4, $03, $03, $03, $03, $03, $03
0001B688                            	sModOn
0001B688 EB                       M 	dc.b	$eb
0001B689 B906                       	dc.b nAb4, $06
0001B68B                            	sModOff
0001B68B EC                       M 	dc.b	$ec
0001B68C B480 B703 B9B7 0380        	dc.b nEb4, nRst, nFs4, $03, nAb4, nFs4, $03, nRst
0001B694                            	sModOn
0001B694 EB                       M 	dc.b	$eb
0001B695 B206                       	dc.b nCs4, $06
0001B697                            	sModOff
0001B697 EC                       M 	dc.b	$ec
0001B698 80B7 03B7                  	dc.b nRst, nFs4, $03, nFs4
0001B69C                            	sModOn
0001B69C EB                       M 	dc.b	$eb
0001B69D BA06                       	dc.b nA4, $06
0001B69F                            	sModOff
0001B69F EC                       M 	dc.b	$ec
0001B6A0 B609 8003                  	dc.b nF4, $09, nRst, $03
0001B6A4                            	saVol		$FE
0001B6A4 EDFE                     M 	dc.b	$ed,$fe
0001B6A6                            	sVoice		$04
0001B6A6 E804                     M 	dc.b	$e8,$04
0001B6A8                            	sPan		spCenter, $00
0001B6A8 E0C0                     M 	dc.b	$e0,spcenter|$00
0001B6AA                            	saVol		$0A
0001B6AA ED0A                     M 	dc.b	$ed,$0a
0001B6AC                            	ssMod68k	$22, $01, $04, $05
0001B6AC F022 0104 05             M 	dc.b	$f0,$22,$01,$04,$05
0001B6B1 A606                       	dc.b nCs3, $06
0001B6B3                            
0001B6B3                            SmoothCriminal_Loop12:
0001B6B3 E748 A80C A60C             	dc.b sHold, $48, nEb3, $0C, nCs3, $0C
0001B6B9                            	sLoop		$00, $03, SmoothCriminal_Loop12
0001B6B9 F700                     M 	dc.b	$f7,$00
0001B6BB FFF7                     M 	dc.w	smoothcriminal_loop12-*-1
0001B6BD 03                       M 	dc.b	$03
0001B6BE                            	saVol		$F6
0001B6BE EDF6                     M 	dc.b	$ed,$f6
0001B6C0                            	sVoice		$00
0001B6C0 E800                     M 	dc.b	$e8,$00
0001B6C2                            	ssDetune	$FE
0001B6C2 E1FE                     M 	dc.b	$e1,$fe
0001B6C4                            	sPan		spRight, $00
0001B6C4 E040                     M 	dc.b	$e0,spright|$00
0001B6C6                            	sCall		SmoothCriminal_Call5
0001B6C6 F8                       M 	dc.b	$f8
0001B6C7 FCD8                     M 	dc.w	smoothcriminal_call5-*-1
0001B6C9                            	ssDetune	$00
0001B6C9 E100                     M 	dc.b	$e1,$00
0001B6CB                            	sJump		SmoothCriminal_FM4
0001B6CB F6                       M 	dc.b	$f6
0001B6CC FEE4                     M 	dc.w	smoothcriminal_fm4-*-1
0001B6CE                            
0001B6CE                            SmoothCriminal_FM5:
0001B6CE                            	sVoice		$01
0001B6CE E801                     M 	dc.b	$e8,$01
0001B6D0                            	sCall		SmoothCriminal_Call6
0001B6D0 F8                       M 	dc.b	$f8
0001B6D1 FBC9                     M 	dc.w	smoothcriminal_call6-*-1
0001B6D3 80A3                       	dc.b nRst, nBb2
0001B6D5                            	sLoop		$00, $02, SmoothCriminal_FM5
0001B6D5 F700                     M 	dc.b	$f7,$00
0001B6D7 FFF6                     M 	dc.w	smoothcriminal_fm5-*-1
0001B6D9 02                       M 	dc.b	$02
0001B6DA                            
0001B6DA                            SmoothCriminal_Loop13:
0001B6DA                            	sVoice		$05
0001B6DA E805                     M 	dc.b	$e8,$05
0001B6DC                            	sCall		SmoothCriminal_Call6
0001B6DC F8                       M 	dc.b	$f8
0001B6DD FBBD                     M 	dc.w	smoothcriminal_call6-*-1
0001B6DF 80A3                       	dc.b nRst, nBb2
0001B6E1                            	sLoop		$00, $03, SmoothCriminal_Loop13
0001B6E1 F700                     M 	dc.b	$f7,$00
0001B6E3 FFF6                     M 	dc.w	smoothcriminal_loop13-*-1
0001B6E5 03                       M 	dc.b	$03
0001B6E6 8006 A306 A303 A3A1        	dc.b nRst, $06, nBb2, $06, nBb2, $03, nBb2, nAb2
0001B6EE A3A5 06A5 80A3 03A5        	dc.b nBb2, nC3, $06, nC3, nRst, nBb2, $03, nC3
0001B6F6 A606 A680 A503 A6A5        	dc.b nCs3, $06, nCs3, nRst, nC3, $03, nCs3, nC3
0001B6FE 06A1 80                    	dc.b $06, nAb2, nRst
0001B701                            	sVoice		$04
0001B701 E804                     M 	dc.b	$e8,$04
0001B703                            	sPan		spRight, $00
0001B703 E040                     M 	dc.b	$e0,spright|$00
0001B705                            	saVol		$0A
0001B705 ED0A                     M 	dc.b	$ed,$0a
0001B707                            	ssMod68k	$24, $01, $04, $05
0001B707 F024 0104 05             M 	dc.b	$f0,$24,$01,$04,$05
0001B70C AB                         	dc.b nFs3
0001B70D                            
0001B70D                            SmoothCriminal_Loop14:
0001B70D E748 AD0C AB0C             	dc.b sHold, $48, nAb3, $0C, nFs3, $0C
0001B713                            	sLoop		$00, $03, SmoothCriminal_Loop14
0001B713 F700                     M 	dc.b	$f7,$00
0001B715 FFF7                     M 	dc.w	smoothcriminal_loop14-*-1
0001B717 03                       M 	dc.b	$03
0001B718 E730 AA                    	dc.b sHold, $30, nF3
0001B71B                            	sVoice		$00
0001B71B E800                     M 	dc.b	$e8,$00
0001B71D                            	saVol		$F6
0001B71D EDF6                     M 	dc.b	$ed,$f6
0001B71F                            	sCall		SmoothCriminal_Call3
0001B71F F8                       M 	dc.b	$f8
0001B720 FBFD                     M 	dc.w	smoothcriminal_call3-*-1
0001B722                            	saVol		$0A
0001B722 ED0A                     M 	dc.b	$ed,$0a
0001B724                            	sVoice		$04
0001B724 E804                     M 	dc.b	$e8,$04
0001B726                            	ssMod68k	$24, $01, $04, $05
0001B726 F024 0104 05             M 	dc.b	$f0,$24,$01,$04,$05
0001B72B AB06                       	dc.b nFs3, $06
0001B72D                            
0001B72D                            SmoothCriminal_Loop15:
0001B72D E748 AD0C AB0C             	dc.b sHold, $48, nAb3, $0C, nFs3, $0C
0001B733                            	sLoop		$00, $03, SmoothCriminal_Loop15
0001B733 F700                     M 	dc.b	$f7,$00
0001B735 FFF7                     M 	dc.w	smoothcriminal_loop15-*-1
0001B737 03                       M 	dc.b	$03
0001B738                            	saVol		$F6
0001B738 EDF6                     M 	dc.b	$ed,$f6
0001B73A                            	sVoice		$06
0001B73A E806                     M 	dc.b	$e8,$06
0001B73C                            	saVol		$F8
0001B73C EDF8                     M 	dc.b	$ed,$f8
0001B73E                            	sPan		spCenter, $00
0001B73E E0C0                     M 	dc.b	$e0,spcenter|$00
0001B740 8018 8106 1E18 0606        	dc.b nRst, $18, nC0, $06, $1E, $18, $06, $06
0001B748                            	saVol		$08
0001B748 ED08                     M 	dc.b	$ed,$08
0001B74A                            	sJump		SmoothCriminal_FM5
0001B74A F6                       M 	dc.b	$f6
0001B74B FF82                     M 	dc.w	smoothcriminal_fm5-*-1
0001B74D                            
0001B74D                            SmoothCriminal_PSG1:
0001B74D 8060 80                    	dc.b nRst, $60, nRst
0001B750                            
0001B750                            SmoothCriminal_Loop16:
0001B750                            	ssMod68k	$01, $01, $02, $04
0001B750 F001 0102 04             M 	dc.b	$f0,$01,$01,$02,$04
0001B755 8018 B406 B480 80B6        	dc.b nRst, $18, nEb4, $06, nEb4, nRst, nRst, nF4
0001B75D B680 80B4 B480 B2          	dc.b nF4, nRst, nRst, nEb4, nEb4, nRst, nCs4
0001B764                            	sLoop		$00, $03, SmoothCriminal_Loop16
0001B764 F700                     M 	dc.b	$f7,$00
0001B766 FFE9                     M 	dc.w	smoothcriminal_loop16-*-1
0001B768 03                       M 	dc.b	$03
0001B769 8018 B406 B480 80B6        	dc.b nRst, $18, nEb4, $06, nEb4, nRst, nRst, nF4
0001B771 B680 80B4 B480 AF          	dc.b nF4, nRst, nRst, nEb4, nEb4, nRst, nBb3
0001B778                            
0001B778                            SmoothCriminal_Loop17:
0001B778 E748 B10C AF0C             	dc.b sHold, $48, nC4, $0C, nBb3, $0C
0001B77E                            	sLoop		$00, $03, SmoothCriminal_Loop17
0001B77E F700                     M 	dc.b	$f7,$00
0001B780 FFF7                     M 	dc.w	smoothcriminal_loop17-*-1
0001B782 03                       M 	dc.b	$03
0001B783 E730 AE                    	dc.b sHold, $30, nA3
0001B786                            	ssMod68k	$08, $01, $03, $04
0001B786 F008 0103 04             M 	dc.b	$f0,$08,$01,$03,$04
0001B78B                            	saVol		$FE
0001B78B EDFE                     M 	dc.b	$ed,$fe
0001B78D B218 B1AF B112 B21E        	dc.b nCs4, $18, nC4, nBb3, nC4, $12, nCs4, $1E
0001B795 B118 AFAE 12B2 1EB1        	dc.b nC4, $18, nBb3, nA3, $12, nCs4, $1E, nC4
0001B79D 18AF B112 B21E B118        	dc.b $18, nBb3, nC4, $12, nCs4, $1E, nC4, $18
0001B7A5 AFAE 12                    	dc.b nBb3, nA3, $12
0001B7A8                            	saVol		$02
0001B7A8 ED02                     M 	dc.b	$ed,$02
0001B7AA AF06                       	dc.b nBb3, $06
0001B7AC                            
0001B7AC                            SmoothCriminal_Loop18:
0001B7AC E748 B10C AF0C             	dc.b sHold, $48, nC4, $0C, nBb3, $0C
0001B7B2                            	sLoop		$00, $03, SmoothCriminal_Loop18
0001B7B2 F700                     M 	dc.b	$f7,$00
0001B7B4 FFF7                     M 	dc.w	smoothcriminal_loop18-*-1
0001B7B6 03                       M 	dc.b	$03
0001B7B7 8060                       	dc.b nRst, $60
0001B7B9                            	sJump		SmoothCriminal_PSG1
0001B7B9 F6                       M 	dc.b	$f6
0001B7BA FF92                     M 	dc.w	smoothcriminal_psg1-*-1
0001B7BC                            
0001B7BC                            SmoothCriminal_PSG2:
0001B7BC 8060 80                    	dc.b nRst, $60, nRst
0001B7BF                            
0001B7BF                            SmoothCriminal_Loop19:
0001B7BF                            	ssMod68k	$01, $01, $02, $04
0001B7BF F001 0102 04             M 	dc.b	$f0,$01,$01,$02,$04
0001B7C4 8018 B106 B180 80B2        	dc.b nRst, $18, nC4, $06, nC4, nRst, nRst, nCs4
0001B7CC B280 80B1 B180 A6          	dc.b nCs4, nRst, nRst, nC4, nC4, nRst, nCs3
0001B7D3                            	sLoop		$00, $03, SmoothCriminal_Loop19
0001B7D3 F700                     M 	dc.b	$f7,$00
0001B7D5 FFE9                     M 	dc.w	smoothcriminal_loop19-*-1
0001B7D7 03                       M 	dc.b	$03
0001B7D8 8018 B106 B180 80B2        	dc.b nRst, $18, nC4, $06, nC4, nRst, nRst, nCs4
0001B7E0 B280 80B1 B180 AB          	dc.b nCs4, nRst, nRst, nC4, nC4, nRst, nFs3
0001B7E7                            
0001B7E7                            SmoothCriminal_Loop20:
0001B7E7 E748 AD0C AB0C             	dc.b sHold, $48, nAb3, $0C, nFs3, $0C
0001B7ED                            	sLoop		$00, $03, SmoothCriminal_Loop20
0001B7ED F700                     M 	dc.b	$f7,$00
0001B7EF FFF7                     M 	dc.w	smoothcriminal_loop20-*-1
0001B7F1 03                       M 	dc.b	$03
0001B7F2 E730 AA                    	dc.b sHold, $30, nF3
0001B7F5                            	ssMod68k	$08, $01, $03, $04
0001B7F5 F008 0103 04             M 	dc.b	$f0,$08,$01,$03,$04
0001B7FA AF18 ADAB AD12 AF1E        	dc.b nBb3, $18, nAb3, nFs3, nAb3, $12, nBb3, $1E
0001B802 AD18 ABAA 12AF 1EAD        	dc.b nAb3, $18, nFs3, nF3, $12, nBb3, $1E, nAb3
0001B80A 18AB AD12 AF1E AD18        	dc.b $18, nFs3, nAb3, $12, nBb3, $1E, nAb3, $18
0001B812 ABAA 12                    	dc.b nFs3, nF3, $12
0001B815                            	ssMod68k	$01, $01, $02, $04
0001B815 F001 0102 04             M 	dc.b	$f0,$01,$01,$02,$04
0001B81A AB06                       	dc.b nFs3, $06
0001B81C                            
0001B81C                            SmoothCriminal_Loop21:
0001B81C E748 AD0C AB0C             	dc.b sHold, $48, nAb3, $0C, nFs3, $0C
0001B822                            	sLoop		$00, $03, SmoothCriminal_Loop21
0001B822 F700                     M 	dc.b	$f7,$00
0001B824 FFF7                     M 	dc.w	smoothcriminal_loop21-*-1
0001B826 03                       M 	dc.b	$03
0001B827 8060                       	dc.b nRst, $60
0001B829                            	sJump		SmoothCriminal_PSG2
0001B829 F6                       M 	dc.b	$f6
0001B82A FF91                     M 	dc.w	smoothcriminal_psg2-*-1
0001B82C                            
0001B82C                            SmoothCriminal_PSG3:
0001B82C                            	sNoisePSG	$E7
0001B82C F3E7                     M 	dc.b	$f3,$e7
0001B82E                            	sNoteTimeOut	$02
0001B82E FD02                     M 	dc.b	$fd,$02
0001B830 8006 C6                    	dc.b nRst, $06, nA5
0001B833                            	saVol		$FE
0001B833 EDFE                     M 	dc.b	$ed,$fe
0001B835                            	sNoteTimeOut	$0A
0001B835 FD0A                     M 	dc.b	$fd,$0a
0001B837 06                         	dc.b $06
0001B838                            	saVol		$02
0001B838 ED02                     M 	dc.b	$ed,$02
0001B83A                            	sNoteTimeOut	$02
0001B83A FD02                     M 	dc.b	$fd,$02
0001B83C 06                         	dc.b $06
0001B83D                            
0001B83D                            SmoothCriminal_Loop22:
0001B83D C606 06                    	dc.b nA5, $06, $06
0001B840                            	saVol		$FE
0001B840 EDFE                     M 	dc.b	$ed,$fe
0001B842                            	sNoteTimeOut	$0A
0001B842 FD0A                     M 	dc.b	$fd,$0a
0001B844 06                         	dc.b $06
0001B845                            	saVol		$02
0001B845 ED02                     M 	dc.b	$ed,$02
0001B847                            	sNoteTimeOut	$02
0001B847 FD02                     M 	dc.b	$fd,$02
0001B849 06                         	dc.b $06
0001B84A                            	sLoop		$00, $02, SmoothCriminal_Loop22
0001B84A F700                     M 	dc.b	$f7,$00
0001B84C FFF0                     M 	dc.w	smoothcriminal_loop22-*-1
0001B84E 02                       M 	dc.b	$02
0001B84F C606 06                    	dc.b nA5, $06, $06
0001B852                            	sNoteTimeOut	$0A
0001B852 FD0A                     M 	dc.b	$fd,$0a
0001B854 06                         	dc.b $06
0001B855                            	saVol		$FE
0001B855 EDFE                     M 	dc.b	$ed,$fe
0001B857                            	sNoteTimeOut	$00
0001B857 FD00                     M 	dc.b	$fd,$00
0001B859 06                         	dc.b $06
0001B85A                            	saVol		$02
0001B85A ED02                     M 	dc.b	$ed,$02
0001B85C                            
0001B85C                            SmoothCriminal_Loop24:
0001B85C                            	sCall		SmoothCriminal_Call10
0001B85C F8                       M 	dc.b	$f8
0001B85D 0000                     M 	dc.w	smoothcriminal_call10-*-1
0001B85F                            	sLoop		$01, $04, SmoothCriminal_Loop24
0001B85F F701                     M 	dc.b	$f7,$01
0001B861 FFFA                     M 	dc.w	smoothcriminal_loop24-*-1
0001B863 04                       M 	dc.b	$04
0001B864                            	sCall		SmoothCriminal_Call11
0001B864 F8                       M 	dc.b	$f8
0001B865 0000                     M 	dc.w	smoothcriminal_call11-*-1
0001B867                            
0001B867                            SmoothCriminal_Loop26:
0001B867                            	sCall		SmoothCriminal_Call10
0001B867 F8                       M 	dc.b	$f8
0001B868 0000                     M 	dc.w	smoothcriminal_call10-*-1
0001B86A                            	sLoop		$01, $08, SmoothCriminal_Loop26
0001B86A F701                     M 	dc.b	$f7,$01
0001B86C FFFA                     M 	dc.w	smoothcriminal_loop26-*-1
0001B86E 08                       M 	dc.b	$08
0001B86F                            
0001B86F                            SmoothCriminal_Loop27:
0001B86F                            	sCall		SmoothCriminal_Call10
0001B86F F8                       M 	dc.b	$f8
0001B870 0000                     M 	dc.w	smoothcriminal_call10-*-1
0001B872                            	sLoop		$01, $02, SmoothCriminal_Loop27
0001B872 F701                     M 	dc.b	$f7,$01
0001B874 FFFA                     M 	dc.w	smoothcriminal_loop27-*-1
0001B876 02                       M 	dc.b	$02
0001B877                            	sCall		SmoothCriminal_Call11
0001B877 F8                       M 	dc.b	$f8
0001B878 0000                     M 	dc.w	smoothcriminal_call11-*-1
0001B87A                            	saVol		$02
0001B87A ED02                     M 	dc.b	$ed,$02
0001B87C                            	sNoteTimeOut	$02
0001B87C FD02                     M 	dc.b	$fd,$02
0001B87E 0606                       	dc.b $06, $06
0001B880                            	saVol		$FD
0001B880 EDFD                     M 	dc.b	$ed,$fd
0001B882                            	sNoteTimeOut	$0A
0001B882 FD0A                     M 	dc.b	$fd,$0a
0001B884 06                         	dc.b $06
0001B885                            	saVol		$03
0001B885 ED03                     M 	dc.b	$ed,$03
0001B887                            	sNoteTimeOut	$02
0001B887 FD02                     M 	dc.b	$fd,$02
0001B889 06                         	dc.b $06
0001B88A                            	saVol		$FD
0001B88A EDFD                     M 	dc.b	$ed,$fd
0001B88C                            	sNoteTimeOut	$0A
0001B88C FD0A                     M 	dc.b	$fd,$0a
0001B88E 0606 06                    	dc.b $06, $06, $06
0001B891                            	saVol		$03
0001B891 ED03                     M 	dc.b	$ed,$03
0001B893                            	sNoteTimeOut	$02
0001B893 FD02                     M 	dc.b	$fd,$02
0001B895 0606 06                    	dc.b $06, $06, $06
0001B898                            	saVol		$FD
0001B898 EDFD                     M 	dc.b	$ed,$fd
0001B89A                            	sNoteTimeOut	$0A
0001B89A FD0A                     M 	dc.b	$fd,$0a
0001B89C 06                         	dc.b $06
0001B89D                            	saVol		$03
0001B89D ED03                     M 	dc.b	$ed,$03
0001B89F                            	sNoteTimeOut	$02
0001B89F FD02                     M 	dc.b	$fd,$02
0001B8A1 0606 06                    	dc.b $06, $06, $06
0001B8A4                            	saVol		$FE
0001B8A4 EDFE                     M 	dc.b	$ed,$fe
0001B8A6                            	sNoteTimeOut	$0A
0001B8A6 FD0A                     M 	dc.b	$fd,$0a
0001B8A8 0606                       	dc.b $06, $06
0001B8AA                            	sCall		SmoothCriminal_Call10
0001B8AA F8                       M 	dc.b	$f8
0001B8AB 0000                     M 	dc.w	smoothcriminal_call10-*-1
0001B8AD                            	sJump		SmoothCriminal_Loop24
0001B8AD F6                       M 	dc.b	$f6
0001B8AE FFAD                     M 	dc.w	smoothcriminal_loop24-*-1
0001B8B0                            
0001B8B0                            SmoothCriminal_Call10:
0001B8B0                            	sNoteTimeOut	$02
0001B8B0 FD02                     M 	dc.b	$fd,$02
0001B8B2                            
0001B8B2                            SmoothCriminal_Loop23:
0001B8B2 C606 06                    	dc.b nA5, $06, $06
0001B8B5                            	saVol		$FE
0001B8B5 EDFE                     M 	dc.b	$ed,$fe
0001B8B7                            	sNoteTimeOut	$0A
0001B8B7 FD0A                     M 	dc.b	$fd,$0a
0001B8B9 06                         	dc.b $06
0001B8BA                            	saVol		$02
0001B8BA ED02                     M 	dc.b	$ed,$02
0001B8BC                            	sNoteTimeOut	$02
0001B8BC FD02                     M 	dc.b	$fd,$02
0001B8BE 06                         	dc.b $06
0001B8BF                            	sLoop		$00, $03, SmoothCriminal_Loop23
0001B8BF F700                     M 	dc.b	$f7,$00
0001B8C1 FFF0                     M 	dc.w	smoothcriminal_loop23-*-1
0001B8C3 03                       M 	dc.b	$03
0001B8C4 C606 06                    	dc.b nA5, $06, $06
0001B8C7                            	sNoteTimeOut	$0A
0001B8C7 FD0A                     M 	dc.b	$fd,$0a
0001B8C9 06                         	dc.b $06
0001B8CA                            	saVol		$FE
0001B8CA EDFE                     M 	dc.b	$ed,$fe
0001B8CC                            	sNoteTimeOut	$00
0001B8CC FD00                     M 	dc.b	$fd,$00
0001B8CE 06                         	dc.b $06
0001B8CF                            	saVol		$02
0001B8CF ED02                     M 	dc.b	$ed,$02
0001B8D1                            	sRet
0001B8D1 F9                       M 	dc.b	$f9
0001B8D2                            
0001B8D2                            SmoothCriminal_Call11:
0001B8D2                            	sNoteTimeOut	$02
0001B8D2 FD02                     M 	dc.b	$fd,$02
0001B8D4                            
0001B8D4                            SmoothCriminal_Loop25:
0001B8D4 C606 06                    	dc.b nA5, $06, $06
0001B8D7                            	saVol		$FE
0001B8D7 EDFE                     M 	dc.b	$ed,$fe
0001B8D9                            	sNoteTimeOut	$0A
0001B8D9 FD0A                     M 	dc.b	$fd,$0a
0001B8DB 06                         	dc.b $06
0001B8DC                            	saVol		$02
0001B8DC ED02                     M 	dc.b	$ed,$02
0001B8DE                            	sNoteTimeOut	$02
0001B8DE FD02                     M 	dc.b	$fd,$02
0001B8E0 06                         	dc.b $06
0001B8E1                            	sLoop		$00, $04, SmoothCriminal_Loop25
0001B8E1 F700                     M 	dc.b	$f7,$00
0001B8E3 FFF0                     M 	dc.w	smoothcriminal_loop25-*-1
0001B8E5 04                       M 	dc.b	$04
0001B8E6                            	sRet
0001B8E6 F9                       M 	dc.b	$f9
0001B8E7                            
0001B8E7 =00000081                  d81 = dKick
0001B8E7 =00000083                  d82 = dSnare
0001B8E7 =00000084                  d84 = dClap
0001B8E7 =00000094                  d90 = dKcSnare
0001B8E7 =00000085                  d91 = dHiTom
0001B8E7                            
0001B8E7                            SmoothCriminal_DAC2:
0001B8E7                            	sCall		SmoothCriminal_Call12
0001B8E7 F8                       M 	dc.b	$f8
0001B8E8 0000                     M 	dc.w	smoothcriminal_call12-*-1
0001B8EA                            	sLoop		$00, $05, SmoothCriminal_DAC2
0001B8EA F700                     M 	dc.b	$f7,$00
0001B8EC FFFA                     M 	dc.w	smoothcriminal_dac2-*-1
0001B8EE 05                       M 	dc.b	$05
0001B8EF                            	sCall		SmoothCriminal_Call13
0001B8EF F8                       M 	dc.b	$f8
0001B8F0 0000                     M 	dc.w	smoothcriminal_call13-*-1
0001B8F2                            
0001B8F2                            SmoothCriminal_Loop28:
0001B8F2                            	sCall		SmoothCriminal_Call12
0001B8F2 F8                       M 	dc.b	$f8
0001B8F3 0000                     M 	dc.w	smoothcriminal_call12-*-1
0001B8F5                            	sLoop		$00, $07, SmoothCriminal_Loop28
0001B8F5 F700                     M 	dc.b	$f7,$00
0001B8F7 FFFA                     M 	dc.w	smoothcriminal_loop28-*-1
0001B8F9 07                       M 	dc.b	$07
0001B8FA                            	sCall		SmoothCriminal_Call13
0001B8FA F8                       M 	dc.b	$f8
0001B8FB 0000                     M 	dc.w	smoothcriminal_call13-*-1
0001B8FD                            
0001B8FD                            SmoothCriminal_Loop29:
0001B8FD                            	sCall		SmoothCriminal_Call12
0001B8FD F8                       M 	dc.b	$f8
0001B8FE 0000                     M 	dc.w	smoothcriminal_call12-*-1
0001B900                            	sLoop		$00, $02, SmoothCriminal_Loop29
0001B900 F700                     M 	dc.b	$f7,$00
0001B902 FFFA                     M 	dc.w	smoothcriminal_loop29-*-1
0001B904 02                       M 	dc.b	$02
0001B905                            	sCall		SmoothCriminal_Call13
0001B905 F8                       M 	dc.b	$f8
0001B906 0000                     M 	dc.w	smoothcriminal_call13-*-1
0001B908 8106 8083 8094 9485        	dc.b d81, $06, nRst, d82, nRst, d90, d90, d91
0001B910 8080 8083 8080 8083        	dc.b nRst, nRst, nRst, d82, nRst, nRst, nRst, d82
0001B918 84                         	dc.b d84
0001B919                            	sJump		SmoothCriminal_DAC2
0001B919 F6                       M 	dc.b	$f6
0001B91A FFCC                     M 	dc.w	smoothcriminal_dac2-*-1
0001B91C                            
0001B91C                            SmoothCriminal_Call12:
0001B91C 8006 8185 8181 8183        	dc.b nRst, $06, d81, d91, d81, d81, d81, d82
0001B924 8181 8183 8181 8183        	dc.b d81, d81, d81, d82, d81, d81, d81, d82
0001B92C 84                         	dc.b d84
0001B92D                            	sRet
0001B92D F9                       M 	dc.b	$f9
0001B92E                            
0001B92E                            SmoothCriminal_Call13:
0001B92E 8181 8381                  	dc.b d81, d81, d82, d81
0001B932                            	sLoop		$00, $04, SmoothCriminal_Call13
0001B932 F700                     M 	dc.b	$f7,$00
0001B934 FFF9                     M 	dc.w	smoothcriminal_call13-*-1
0001B936 04                       M 	dc.b	$04
0001B937                            	sRet
0001B937 F9                       M 	dc.b	$f9
0001B938                            
0001B938                            SmoothCriminal_DAC1:
0001B938                            	sStop
0001B938 F5                       M 	dc.b	$f5
0001B939 =00000017                M a	=	a+1
0001B939                            musend
0001B939                            ; ===========================================================================
0001B939                            ; ---------------------------------------------------------------------------
0001B939                            ; Include samples and filters
0001B939                            ; ---------------------------------------------------------------------------
0001B939                            
0001B939                            		align	$8000		; must be aligned to bank...
0001B939                          M 	cnop	0,$8000
00020000                            fLog:		incbin "driver/filters/Logarithmic.dat"	; logarithmic filter (no filter)
00028000                            ;fLinear:	incbin "driver/filters/Linear.dat"	; linear filter (no filter)
00028000                            
00028000                            dacaddr		dcb.b	Z80E_Read*(MaxPitch/$100),$00
00028180                            SWF_Stop:	dcb.b	$8000-(2*Z80E_Read*(MaxPitch/$100)),$80
0002FE80                            SWFR_Stop:	dcb.b	Z80E_Read*(MaxPitch/$100),$00
00030000                            
00030000                            	incSWF	Kick, LowKick, Snare, Clap, Tom, Wooh, WoohLoop
00030000                          M 	rept	narg
00030000                          M swf_kick	incbin	"driver/DAC/incswf/kick.swf"
000312D7                          M swfr_kick	dcb.b	z80e_read*(maxpitch/$100),$00
00031457                          M 	shift
00031457                          M swf_lowkick	incbin	"driver/DAC/incswf/lowkick.swf"
00032762                          M swfr_lowkick	dcb.b	z80e_read*(maxpitch/$100),$00
000328E2                          M 	shift
000328E2                          M swf_snare	incbin	"driver/DAC/incswf/snare.swf"
00033333                          M swfr_snare	dcb.b	z80e_read*(maxpitch/$100),$00
000334B3                          M 	shift
000334B3                          M swf_clap	incbin	"driver/DAC/incswf/clap.swf"
00034EB6                          M swfr_clap	dcb.b	z80e_read*(maxpitch/$100),$00
00035036                          M 	shift
00035036                          M swf_tom	incbin	"driver/DAC/incswf/tom.swf"
000377A4                          M swfr_tom	dcb.b	z80e_read*(maxpitch/$100),$00
00037924                          M 	shift
00037924                          M swf_wooh	incbin	"driver/DAC/incswf/wooh.swf"
0003C5DB                          M swfr_wooh	dcb.b	z80e_read*(maxpitch/$100),$00
0003C75B                          M 	shift
0003C75B                          M swf_woohloop	incbin	"driver/DAC/incswf/woohloop.swf"
0003D265                          M swfr_woohloop	dcb.b	z80e_read*(maxpitch/$100),$00
0003D3E5                          M 	shift
0003D3E5                            	incSWF	OrchHit, ZaxxOOH, ZaxxDIS, ZaxxEYO, ZaxxIT, ZaxxGO
0003D3E5                          M 	rept	narg
0003D3E5                          M swf_orchhit	incbin	"driver/DAC/incswf/orchhit.swf"
0003F7DE                          M swfr_orchhit	dcb.b	z80e_read*(maxpitch/$100),$00
0003F95E                          M 	shift
0003F95E                          M swf_zaxxooh	incbin	"driver/DAC/incswf/zaxxooh.swf"
0004273F                          M swfr_zaxxooh	dcb.b	z80e_read*(maxpitch/$100),$00
000428BF                          M 	shift
000428BF                          M swf_zaxxdis	incbin	"driver/DAC/incswf/zaxxdis.swf"
00045052                          M swfr_zaxxdis	dcb.b	z80e_read*(maxpitch/$100),$00
000451D2                          M 	shift
000451D2                          M swf_zaxxeyo	incbin	"driver/DAC/incswf/zaxxeyo.swf"
0004673C                          M swfr_zaxxeyo	dcb.b	z80e_read*(maxpitch/$100),$00
000468BC                          M 	shift
000468BC                          M swf_zaxxit	incbin	"driver/DAC/incswf/zaxxit.swf"
000487B0                          M swfr_zaxxit	dcb.b	z80e_read*(maxpitch/$100),$00
00048930                          M 	shift
00048930                          M swf_zaxxgo	incbin	"driver/DAC/incswf/zaxxgo.swf"
0004A041                          M swfr_zaxxgo	dcb.b	z80e_read*(maxpitch/$100),$00
0004A1C1                          M 	shift
0004A1C1                            	incSWF	KcTom, KcSnare, KcTamb, Kc87, KcCrash, KcCymbal
0004A1C1                          M 	rept	narg
0004A1C1                          M swf_kctom	incbin	"driver/DAC/incswf/kctom.swf"
0004C4F8                          M swfr_kctom	dcb.b	z80e_read*(maxpitch/$100),$00
0004C678                          M 	shift
0004C678                          M swf_kcsnare	incbin	"driver/DAC/incswf/kcsnare.swf"
0004D83C                          M swfr_kcsnare	dcb.b	z80e_read*(maxpitch/$100),$00
0004D9BC                          M 	shift
0004D9BC                          M swf_kctamb	incbin	"driver/DAC/incswf/kctamb.swf"
0004E989                          M swfr_kctamb	dcb.b	z80e_read*(maxpitch/$100),$00
0004EB09                          M 	shift
0004EB09                          M swf_kc87	incbin	"driver/DAC/incswf/kc87.swf"
0004FD0A                          M swfr_kc87	dcb.b	z80e_read*(maxpitch/$100),$00
0004FE8A                          M 	shift
0004FE8A                          M swf_kccrash	incbin	"driver/DAC/incswf/kccrash.swf"
000567DE                          M swfr_kccrash	dcb.b	z80e_read*(maxpitch/$100),$00
0005695E                          M 	shift
0005695E                          M swf_kccymbal	incbin	"driver/DAC/incswf/kccymbal.swf"
0005A974                          M swfr_kccymbal	dcb.b	z80e_read*(maxpitch/$100),$00
0005AAF4                          M 	shift
0005AAF4                            	incSWF	KaikuL1, KaikuL2, KaikuL3, Kaiku1, Kaiku2, Kaiku3, Kaiku4, Kaiku5
0005AAF4                          M 	rept	narg
0005AAF4                          M swf_kaikul1	incbin	"driver/DAC/incswf/kaikul1.swf"
00063B00                          M swfr_kaikul1	dcb.b	z80e_read*(maxpitch/$100),$00
00063C80                          M 	shift
00063C80                          M swf_kaikul2	incbin	"driver/DAC/incswf/kaikul2.swf"
00067FAD                          M swfr_kaikul2	dcb.b	z80e_read*(maxpitch/$100),$00
0006812D                          M 	shift
0006812D                          M swf_kaikul3	incbin	"driver/DAC/incswf/kaikul3.swf"
0006C45A                          M swfr_kaikul3	dcb.b	z80e_read*(maxpitch/$100),$00
0006C5DA                          M 	shift
0006C5DA                          M swf_kaiku1	incbin	"driver/DAC/incswf/kaiku1.swf"
0006D2F2                          M swfr_kaiku1	dcb.b	z80e_read*(maxpitch/$100),$00
0006D472                          M 	shift
0006D472                          M swf_kaiku2	incbin	"driver/DAC/incswf/kaiku2.swf"
0006E18A                          M swfr_kaiku2	dcb.b	z80e_read*(maxpitch/$100),$00
0006E30A                          M 	shift
0006E30A                          M swf_kaiku3	incbin	"driver/DAC/incswf/kaiku3.swf"
0006F036                          M swfr_kaiku3	dcb.b	z80e_read*(maxpitch/$100),$00
0006F1B6                          M 	shift
0006F1B6                          M swf_kaiku4	incbin	"driver/DAC/incswf/kaiku4.swf"
0006FEE2                          M swfr_kaiku4	dcb.b	z80e_read*(maxpitch/$100),$00
00070062                          M 	shift
00070062                          M swf_kaiku5	incbin	"driver/DAC/incswf/kaiku5.swf"
00070D7A                          M swfr_kaiku5	dcb.b	z80e_read*(maxpitch/$100),$00
00070EFA                          M 	shift
00070EFA                            	incSWF	Meow, Lazer, Sarobasso
00070EFA                          M 	rept	narg
00070EFA                          M swf_meow	incbin	"driver/DAC/incswf/meow.swf"
00073470                          M swfr_meow	dcb.b	z80e_read*(maxpitch/$100),$00
000735F0                          M 	shift
000735F0                          M swf_lazer	incbin	"driver/DAC/incswf/lazer.swf"
000740B4                          M swfr_lazer	dcb.b	z80e_read*(maxpitch/$100),$00
00074234                          M 	shift
00074234                          M swf_sarobasso	incbin	"driver/DAC/incswf/sarobasso.swf"
000749D3                          M swfr_sarobasso	dcb.b	z80e_read*(maxpitch/$100),$00
00074B53                          M 	shift
00074B53                            	opt ae+				; enable automatic evens
00074B53                            	list				; continue source listing
00074B53                            ; ===========================================================================
00074B53                            	opt ae-
00074B53                            
00074B53                            DualPCM:	z80prog 0
00074B53                          M 	pusho
00074B53                          M 	opt	ae-
00074B53                          M 	opt	an+
00000000                            		include "driver/code/z80.asm"
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DUAL-PCM - by MarkeyJester
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00000018                  Z80E_Read =	00018h
00000000 =000000DD                  x =		0DDh
00000000 =000000FD                  y =		0FDh
00000000                            
00000000                            ldin		macro	TYPE, DEST, SOURCE
00000000                            		dc.b	\TYPE				; 04	; load to/from index register
00000000                            		ld	\DEST,\SOURCE			; ??	; ''
00000000                            		endm
00000000                            
00000000                            deci		macro	TYPE, REG
00000000                            		dc.b	\TYPE				; 04	; decrement register
00000000                            		dec	\REG				; 04	; ''
00000000                            		endm
00000000                            
00000000                            inci		macro	TYPE, REG
00000000                            		dc.b	\TYPE				; 04	; increment register
00000000                            		inc	\REG				; 04	; ''
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            M_Read		macro
00000000                            		ldi					; 16	; copy from window to buffer, and increment register
00000000                            		zadd	a,b				; 04	; add dividend
00000000                            		adc	hl,sp				; 15	; add quotient
00000000                            		endm					; Total: 35
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            M_CapPCM	macro
00000000                            		jp	po, .ov\@			; 10	; if the sample hasn't overflown the 7F/80 boundary, branch
00000000                            		sbc	a,a				; 04	; erase sample, and subtract the carry to get either FF or 00, depending on overflow direction
00000000                            		xor	07Fh				; 07	; reverse FF/00 (xor 80 below helps)
00000000                            .ov\@		xor	080h				; 07	; convert to unsigned
00000000                            		endm					; Total: 17/28
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            M_Flush01	macro
00000000                            		ld	e,(hl)				; 07	; load byte from OUT buffer 1 to volume pointer
00000000                            		ld	a,(de)				; 07	; copy to a
00000000                            		zset	001h,h				; 08	; move forwards to OUT buffer 2
00000000                            		inc	d				; 04	; move forwards to volume pointer 2
00000000                            		ld	e,(hl)				; 07	; load byte from OUT buffer 2 to volume pointer
00000000                            		ex	de,hl				; 04	; swap for hl powers
00000000                            		zadd	a,(hl)				; 07	; add volume 2 to volume 1
00000000                            		ex	de,hl				; 04	; swap back
00000000                            		M_CapPCM					; cap the sample overflow
00000000                            		ld	(bc),a				; 07	; save to the YM2612
00000000                            		inc	l				; 04	; advance OUT buffers
00000000                            		endm					; Total: 59
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            M_Flush02	macro
00000000                            		ld	e,(hl)				; 07	; load byte from OUT buffer 2 to volume pointer
00000000                            		ld	a,(de)				; 07	; copy to a
00000000                            		res	001h,h				; 08	; move back to OUT buffer 1
00000000                            		dec	d				; 04	; move back to volume pointer 1
00000000                            		ld	e,(hl)				; 07	; load byte from OUT buffer 1 to volume pointer
00000000                            		ex	de,hl				; 04	; swap for hl powers
00000000                            		zadd	a,(hl)				; 07	; add volume 1 to volume 2
00000000                            		ex	de,hl				; 04	; swap back
00000000                            		M_CapPCM					; cap the sample overflow
00000000                            		ld	(bc),a				; 07	; save to the YM2612
00000000                            		inc	l				; 04	; advance OUT buffers
00000000                            		endm					; Total: 59
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            M_Revert01	macro
00000000                            		res	001h,h				; 08	; move back to OUT buffer 1
00000000                            		dec	d				; 04	; move back to volume pointer 1
00000000                            		dec	l				; 04	; move OUT buffers back
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            M_Revert02	macro
00000000                            		zset	001h,h				; 08	; move forwards to OUT buffer 2
00000000                            		inc	d				; 04	; move forwards to volume pointer 2
00000000                            		dec	l				; 04	; move OUT buffers back
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            M_Wrap		macro
00000000                            		dec	l				; 04	; check l...
00000000                            		inc	l				; 04	; ''
00000000                            		M_WrapCondition
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            M_WrapCondition	macro
00000000                            		jp	nz, .c\@			; 10	; if it's not 0, branch
00000000                            		inc	h				; 04	; advance OUT buffers
00000000                            		bit	004h,h				; 08	; have the OUT buffer addresses reached 1000 (end of buffer) yet?
00000000                            		jp	z, .c\@				; 10	; if not, branch
00000000                            		ld	hl,PCM_Buffer2			; 10	; reset OUT buffers
00000000                            .c\@
00000000                            		endm
00000000                            
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Start of Z80 ROM
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            Z80_Start:
0000000B                            
0000000C                            
0000000C                            	; The space from "Start" until the maximum pitch amount, is the space
0000000C                            	; where data could potentially be pushed into, thanks to the sp.
0000000C                            
0000000C                            	; The sp will likely be from roughly FFF3 - 000C for the quotient of
0000000C                            	; the pitch.  Now, FFF3 - FFFF will be fine, since that points to the
0000000C                            	; 68k window, which will be pointing to 68k ROM, so nothing will happen.
0000000C                            	; But the address from 0000 - 000C points to the beginning of ROM, so
0000000C                            	; this place must be free from use outside of V-blank.
0000000C                            
0000000C                            Z80_Stack:
0000000C                            
0000000C                            ; ===========================================================================
0000000C                            ; ---------------------------------------------------------------------------
0000000C                            ; PCM 1 Resetting
0000000C                            ; ---------------------------------------------------------------------------
00000010                            ; ---------------------------------------------------------------------------
00000010                            
00000010                            BreakLate:
00000019                            
00000019                            ; ===========================================================================
00000019                            ; ---------------------------------------------------------------------------
00000019                            ; PCM 1 Resetting
00000019                            ; ---------------------------------------------------------------------------
00000028                            ; ---------------------------------------------------------------------------
00000028                            
00000028                            PCM1_ResetJmp:
0000002B                            
0000002B                            ; ===========================================================================
0000002B                            ; ---------------------------------------------------------------------------
0000002B                            ; PCM 2 Resetting
0000002B                            ; ---------------------------------------------------------------------------
00000030                            ; ---------------------------------------------------------------------------
00000030                            
00000030                            PCM2_ResetJmp:
00000033                            
00000033                            ; ===========================================================================
00000033                            ; ---------------------------------------------------------------------------
00000033                            ; Breaking out for V-blank
00000033                            ; ---------------------------------------------------------------------------
00000038                            ; ---------------------------------------------------------------------------
00000038                            
00000038                            BreakVBlank:
0000003C 2F                         		cpl					; 04	; change buffer
00000040                            
00000040                            BVB_Check:
00000046                            
00000046                            ; ---------------------------------------------------------------------------
00000046                            ; Breaking out for V-blank, during non-read
00000046                            ; ---------------------------------------------------------------------------
00000046                            
00000046                            BreakPrep:
00000061                            	;	ei					; 04	; enable interrupts
00000061 ED4D                       		reti					; 14	; return
00000063                            
00000063                            ; ===========================================================================
00000063                            ; ---------------------------------------------------------------------------
00000063                            ; Breaking out for V-blank, during read of window or bank register
00000063                            ; ---------------------------------------------------------------------------
00000063                            
00000063                            BreakDMA:
00000066                            
00000066                            	; --- Finding out which registers we're dealing with ---
00000066                            
00000074 1F                         BDMA_NoExchange:	rra					; 04	; get buffer we're currently reading from
00000083 D9                         BDMA_NoFixFlush:	exx					; 04	; swap to the "read" set of exx registers
00000084                            BDMA_ReadSet:
00000084                            
00000084                            ; ---------------------------------------------------------------------------
00000084                            ; Flush remaining data
00000084                            ; ---------------------------------------------------------------------------
00000084                            
00000084                            BreakBank:
00000084 D9                         			exx					; 04	; switch registers
00000086 D9                         			exx					; 04	; switch registers
00000087 ED44                       		zneg	a				; 08	; reverse position
00000090                            
00000090                            BDMA_NoMax:
0000009A                            
0000009A                            BDMA_FlushLoop:
0000009E                            
0000009E                            BDMA_Flush02:
0000009E D9                         			exx					; 04	; switch registers
000000B2 D9                         			exx					; 04	; switch registers
000000B7                            
000000B7                            BDMA_Flush01:
000000B7 D9                         			exx					; 04	; switch registers
000000CB D9                         			exx					; 04	; switch registers
000000D0                            
000000D0                            ; ---------------------------------------------------------------------------
000000D0                            ; Wrapping OUT buffers
000000D0                            ; ---------------------------------------------------------------------------
000000D0                            
000000D0 D9                         			exx					; 04	; switch registers
000000DF D9                         			exx					; 04	; switch back
000000E0                            
000000E0                            ; ---------------------------------------------------------------------------
000000E0                            ; Restore interrupt instructions
000000E0                            ; ---------------------------------------------------------------------------
000000E0                            
00000107                            
00000107                            BDMA_NoRestore:
00000107                            
00000107                            ; ---------------------------------------------------------------------------
00000107                            ; YM2612 flushing
00000107                            ; ---------------------------------------------------------------------------
00000107                            
0000010A                            
00000116                            
00000116                            YMF_Buff1:
0000011F D9                         			exx					; 04	; switch registers back
00000120                            
00000120                            YM_Flush:
00000123                            
00000123                            YMF_NextByte:
00000136 D9                         			exx					; 04	; switch registers
00000149 D9                         			exx					; 04	; switch registers
0000015D D9                         			exx					; 04	; switch registers
00000170 D9                         			exx					; 04	; switch registers
00000176                            
00000176                            	; --- Advance/Wrap OUT buffers ---
00000176                            
00000189                            
00000189                            YMF_Finish02:
00000192                            
00000192                            YMF_Finish01:
0000019B                            
0000019B                            ; ---------------------------------------------------------------------------
0000019B                            ; Waiting for v-blank to finish
0000019B                            ; ---------------------------------------------------------------------------
0000019B                            
0000019B                            PCM_Flush_exx:
0000019B D9                         			exx
0000019C                            
0000019C                            PCM_Flush:
0000019F                            
0000019F                            PCM_NextByte:
000001B2 D9                         			exx					; 04	; switch registers
000001B7                            
000001B7                            
000001B7 D9                         			exx					; 04	; switch registers
000001CB D9                         			exx					; 04	; switch registers
000001CC                            
000001D0                            
000001D0 D9                         			exx					; 04	; switch registers
000001D6                            
000001D6                            	; --- Advance/Wrap OUT buffers ---
000001D6                            
000001E4                            
000001E9 D9                         		exx					; 04	; switch registers down again...
000001EA                            
000001F6                            
000001F6                            YMF_SetBuff1:
000001F8                            
00000202                            
00000202                            VB_PCM1_VolOK:
0000020C                            
0000020C                            VB_PCM2_VolOK:
0000020C                            
0000020C 37                         		scf					; 04	; set carry flag
0000020D                            
00000222                            
00000222                            PCM_VolChangeNo:
00000222                            
00000222                            
0000022D                            
0000022D                            ; ===========================================================================
0000022D                            ; ---------------------------------------------------------------------------
0000022D                            ; Setup/Init
0000022D                            ; ---------------------------------------------------------------------------
0000022D                            
0000022D                            Z80_Init:
00000230                            
00000230                            	; --- YM2612 DAC Setup ---
00000230                            
0000023F                            
0000023F                            	; --- Setting up channels to be mute ---
0000023F                            
00000251                            
0000025A EDB0                       			ldir					; 21 16	; copy mute sample data over...
00000261 EDB0                       			ldir					; 21 16	; copy mute sample data over...
00000268 EDB0                       			ldir					; 21 16	; copy mute sample data over...
0000026F EDB0                       			ldir					; 21 16	; copy mute sample data over...
00000271                            
00000271                            	; --- Setting up PCM 1 switch ---
00000271                            
0000027A                            
0000027A                            	; --- Setting up PCM 2 switch ---
0000027A                            
00000283                            
00000283                            	; --- Final register setup ---
00000283                            
0000028B                            
00000290                            
00000290 D9                         			exx					; 04	; switch registers
00000291                            
00000291                            ; ===========================================================================
00000291                            ; ---------------------------------------------------------------------------
00000291                            ; The catch up loop
00000291                            ; ---------------------------------------------------------------------------
00000291                            
00000291                            CatchUp:
00000291 D9                         			exx					; 04	; switch registers
00000292                            
00000292                            CatchUp_Exx:
000002A5 D9                         			exx					; 04	; switch registers
000002A6                            
000002A6                            Z80_Int2:	;ei
000002A6 00                         		znop					; 04
000002A7                            
000002A7                            ; ---------------------------------------------------------------------------
000002A7                            ; PCM 1
000002A7                            ; ---------------------------------------------------------------------------
000002A7                            
000002A7                            PCM1_MuteRet:
000002AC 00                         Int1_nop:	znop					; 04	; CANNOT CHANGE "ld  (hl),h" since it's altered by Z80 elsewhere
000002C8 D9                         			exx					; 04	; switch registers
000002DC D9                         			exx					; 04	; switch registers
000002E4                            
000002E4                            PCM1_PrepRet:
000002E4                            
000002F2                            
000002FC EDA0                       PCM1_PreInst03:	ldi					; 16	; copy from window to buffer, and increment register
000002FE D9                         			exx					; 04	; switch registers
00000313 D9                         			exx					; 04	; switch registers
0000032C D9                         			exx					; 04	; switch registers
00000341 D9                         			exx					; 04	; switch registers
00000357 EDA0                       PCM1_PreInst0C:	ldi					; 16	; copy from window to buffer, and increment register
00000359 D9                         			exx					; 04	; switch registers
0000036E D9                         			exx					; 04	; switch registers
00000387 D9                         			exx					; 04	; switch registers
0000039C D9                         			exx					; 04	; switch registers
000003B2 EDA0                       PCM1_PreInst15:	ldi					; 16	; copy from window to buffer, and increment register
000003B4 D9                         			exx					; 04	; switch registers
000003C9 D9                         			exx					; 04	; switch registers
000003E6 D9                         			exx					; 04	; switch registers
000003FB D9                         			exx					; 04	; switch registers
00000403                            
00000403                            ; ---------------------------------------------------------------------------
00000403                            ; PCM 2
00000403                            ; ---------------------------------------------------------------------------
00000403                            
00000403                            PCM2_MuteRet:
00000408 00                         Int2_nop:	znop					; 04	; CANNOT CHANGE "ld  (hl),h" since it's altered by Z80 elsewhere
0000041A D9                         			exx					; 04	; switch registers
0000042E D9                         			exx					; 04	; switch registers
00000440                            
00000440                            PCM2_PrepRet:
00000440                            
0000044E                            
00000453 D9                         			exx					; 04	; switch registers
00000468 D9                         			exx					; 04	; switch registers
0000047E EDA0                       PCM2_PreInst06:	ldi					; 16	; copy from window to buffer, and increment register
00000480 D9                         			exx					; 04	; switch registers
00000495 D9                         			exx					; 04	; switch registers
000004AE D9                         			exx					; 04	; switch registers
000004C3 D9                         			exx					; 04	; switch registers
000004D9 EDA0                       PCM2_PreInst0F:	ldi					; 16	; copy from window to buffer, and increment register
000004DB D9                         			exx					; 04	; switch registers
000004F0 D9                         			exx					; 04	; switch registers
00000509 D9                         			exx					; 04	; switch registers
0000051E D9                         			exx					; 04	; switch registers
00000534 EDA0                       PCM2_PreInst18:	ldi					; 16	; copy from window to buffer, and increment register
00000536 D9                         			exx					; 04	; switch registers
0000054B D9                         			exx					; 04	; switch registers
0000055F                            
00000570                            
00000570                            ; ---------------------------------------------------------------------------
00000570                            ; Wrapping OUT buffers
00000570                            ; ---------------------------------------------------------------------------
00000570                            
00000570 D9                         			exx					; 04	; switch registers
00000590 D9                         			exx					; 04	; switch back
00000591                            
00000591                            ; ---------------------------------------------------------------------------
00000591                            ; Wrap IN buffers
00000591                            ; ---------------------------------------------------------------------------
00000591                            
000005A3                            
000005A3                            PCM_BuffNoReset:
000005A3                            
000005A3                            ; ---------------------------------------------------------------------------
000005A3                            ; Rebank...
000005A3                            ; ---------------------------------------------------------------------------
000005A3                            
000005A3 37                         		scf					; 04	; set carry flag
000005BA 37                         		scf					; 04	; set carry flag
000005BB                            
000005BB                            PCM1_IgnoreBank:
000005D1 37                         		scf					; 04	; set carry flag
000005D2                            
000005D2                            PCM2_IgnoreBank:
000005D2                            
000005D2                            ; ---------------------------------------------------------------------------
000005D2                            ; Pitch control
000005D2                            ; ---------------------------------------------------------------------------
000005D2                            
000005DA                            
00000602 37                         		scf					; 04	; set carry flag
00000603                            
00000603                            PCM1_IgnorePitch:
00000603                            
0000060B                            
00000633 37                         		scf					; 04	; set carry flag
00000634                            
00000634                            PCM2_IgnorePitch:
00000634                            
00000634                            ; ---------------------------------------------------------------------------
00000634                            ; Updating Volume
00000634                            ; ---------------------------------------------------------------------------
00000634                            
0000064B                            	;	scf					; 04	; don't think it's necessary here...
0000064B                            
0000064E                            PCM_VolumeRet:
0000064E                            
0000064E                            
0000064E                            ; ---------------------------------------------------------------------------
0000064E                            ; New samples...
0000064E                            ; ---------------------------------------------------------------------------
0000064E                            
00000654                            
00000654                            ; ---------------------------------------------------------------------------
00000654                            ; Checking for "Flush" mode
00000654                            ; ---------------------------------------------------------------------------
00000654                            
00000654                            PCM_NoUpdate:
00000654 D9                         		exx					; 04	; switch registers
00000656 1F                         			rra					; 04	; get upper bit only into carry
00000658 1F                         			rra					; 04	; shift address down with carry
00000659 D9                         		exx					; 04	; switch registers
0000066A                            
0000066A                            CU_ValidDist:
0000066F                            
0000066F                            ; ---------------------------------------------------------------------------
0000066F                            ; New sample playback
0000066F                            ; ---------------------------------------------------------------------------
0000066F                            
0000066F                            CU_Flush:
0000066F                            
0000066F                            ; ---------------------------------------------------------------------------
0000066F                            ; Main "Flush" loop
0000066F                            ; ---------------------------------------------------------------------------
0000066F                            
0000066F D9                         			exx					; 04	; switch registers back
00000673                            
00000673                            FL_NextByte:
00000686 D9                         			exx					; 04	; switch registers
0000068C D9                         			exx					; 04	; switch registers
000006A0 D9                         			exx					; 04	; switch registers
000006A5 D9                         			exx					; 04	; switch registers
000006A6                            
000006AB                            
000006AB                            	; --- Advance/Wrap OUT buffers ---
000006AB                            
000006BC                            
000006BC                            ; ===========================================================================
000006BC                            ; ---------------------------------------------------------------------------
000006BC                            ; When PCM sample 1 has reached an end marker & needs to loop back
000006BC                            ; ---------------------------------------------------------------------------
000006BC                            
000006BC                            PCM1_Mute:
000006CE                            
000006CE                            PCM1_Normal:
000006D4                            
000006D4                            PCM1_Reverse:
000006E4 D9                         			exx					; 04	; switch registers
000006E9 D9                         			exx					; 04	; switch registers
000006ED                            
000006ED                            ; ===========================================================================
000006ED                            ; ---------------------------------------------------------------------------
000006ED                            ; When PCM sample 1 address has reached the end of a window, just to play the last bit
000006ED                            ; ---------------------------------------------------------------------------
000006ED                            
000006ED                            PCM1_PrepReset:
000006FC                            
000006FC                            PCM1_PrepCount:
00000715 D9                         			exx					; 04	; switch registers
00000729 D9                         			exx					; 04	; switch registers
00000731                            
00000731                            ; ===========================================================================
00000731                            ; ---------------------------------------------------------------------------
00000731                            ; When PCM sample 1 address has gone outside the window, and needs to reset
00000731                            ; ---------------------------------------------------------------------------
00000731                            
00000731                            PCM1_Reset:
0000074B                            
00000755                            
00000758                            
0000075A                            
0000075F                            
0000076B                            
00000771 0F                         		rrca					; 04
00000773 0F                         		rrca					; 04
00000775 0F                         		rrca					; 04
00000777 0F                         		rrca					; 04
00000779 0F                         		rrca					; 04
0000077B 0F                         		rrca					; 04
0000077D 0F                         		rrca					; 04
00000780                            
00000782                            
00000787                            
00000797                            
0000079A                            
0000079A                            ; ===========================================================================
0000079A                            ; ---------------------------------------------------------------------------
0000079A                            ; 68K SET - routine to load a new sample 1
0000079A                            ; ---------------------------------------------------------------------------
0000079A                            
0000079A                            PCM1_NewSample:
000007AA                            
000007AA                            PCM1_NewNormal:
000007B0                            
000007B0                            PCM1_NewReverse:
000007C0                            
000007C5 37                         		scf					; 04	; set C flag (for "JP NC" instruction)
000007C7                            
000007C7                            ; ===========================================================================
000007C7                            ; ---------------------------------------------------------------------------
000007C7                            ; When PCM sample 2 has reached an end marker & needs to loop back
000007C7                            ; ---------------------------------------------------------------------------
000007C7                            
000007C7                            PCM2_Mute:
000007D9                            
000007D9                            PCM2_Normal:
000007DF                            
000007DF                            PCM2_Reverse:
000007EF D9                         			exx					; 04	; switch registers
000007F4 D9                         			exx					; 04	; switch registers
000007F8                            
000007F8                            ; ===========================================================================
000007F8                            ; ---------------------------------------------------------------------------
000007F8                            ; When PCM sample 2 address has reached the end of a window, just to play the last bit
000007F8                            ; ---------------------------------------------------------------------------
000007F8                            
000007F8                            PCM2_PrepReset:
00000807                            
00000807                            PCM2_PrepCount:
00000827                            
00000827                            ; ===========================================================================
00000827                            ; ---------------------------------------------------------------------------
00000827                            ; When PCM sample 2 address has gone outside the window, and needs to reset
00000827                            ; ---------------------------------------------------------------------------
00000827                            
00000827                            PCM2_Reset:
00000841                            
0000084B                            
0000084E                            
00000850                            
00000855                            
00000861                            
00000867 0F                         		rrca					; 04
00000869 0F                         		rrca					; 04
0000086B 0F                         		rrca					; 04
0000086D 0F                         		rrca					; 04
0000086F 0F                         		rrca					; 04
00000871 0F                         		rrca					; 04
00000873 0F                         		rrca					; 04
00000876                            
00000878                            
0000087D                            
0000088D                            
00000890                            
00000890                            ; ===========================================================================
00000890                            ; ---------------------------------------------------------------------------
00000890                            ; 68K SET - routine to load a new sample 2
00000890                            ; ---------------------------------------------------------------------------
00000890                            
00000890                            PCM2_NewSample:
000008A0                            
000008A0                            PCM2_NewNormal:
000008A6                            
000008A6                            PCM2_NewReverse:
000008B6                            
000008BB 37                         		scf					; 04	; set C flag (for "JP NC" instruction)
000008BD                            
000008BD                            ; ===========================================================================
000008BD                            ; ---------------------------------------------------------------------------
000008BD                            ; PCM volume Lists
000008BD                            ; ---------------------------------------------------------------------------
00000A00                            ; ---------------------------------------------------------------------------
00000A00                            
00000A00 0081 8283 8485 8687 8889+  PCM_Volume1:	db	000h,081h,082h,083h,084h,085h,086h,087h,088h,089h,08Ah,08Bh,08Ch,08Dh,08Eh,08Fh
00000A10 9091 9293 9495 9697 9899+  		db	090h,091h,092h,093h,094h,095h,096h,097h,098h,099h,09Ah,09Bh,09Ch,09Dh,09Eh,09Fh
00000A20 A0A1 A2A3 A4A5 A6A7 A8A9+  		db	0A0h,0A1h,0A2h,0A3h,0A4h,0A5h,0A6h,0A7h,0A8h,0A9h,0AAh,0ABh,0ACh,0ADh,0AEh,0AFh
00000A30 B0B1 B2B3 B4B5 B6B7 B8B9+  		db	0B0h,0B1h,0B2h,0B3h,0B4h,0B5h,0B6h,0B7h,0B8h,0B9h,0BAh,0BBh,0BCh,0BDh,0BEh,0BFh
00000A40 C0C1 C2C3 C4C5 C6C7 C8C9+  		db	0C0h,0C1h,0C2h,0C3h,0C4h,0C5h,0C6h,0C7h,0C8h,0C9h,0CAh,0CBh,0CCh,0CDh,0CEh,0CFh
00000A50 D0D1 D2D3 D4D5 D6D7 D8D9+  		db	0D0h,0D1h,0D2h,0D3h,0D4h,0D5h,0D6h,0D7h,0D8h,0D9h,0DAh,0DBh,0DCh,0DDh,0DEh,0DFh
00000A60 E0E1 E2E3 E4E5 E6E7 E8E9+  		db	0E0h,0E1h,0E2h,0E3h,0E4h,0E5h,0E6h,0E7h,0E8h,0E9h,0EAh,0EBh,0ECh,0EDh,0EEh,0EFh
00000A70 F0F1 F2F3 F4F5 F6F7 F8F9+  		db	0F0h,0F1h,0F2h,0F3h,0F4h,0F5h,0F6h,0F7h,0F8h,0F9h,0FAh,0FBh,0FCh,0FDh,0FEh,0FFh
00000A80 0001 0203 0405 0607 0809+  		db	000h,001h,002h,003h,004h,005h,006h,007h,008h,009h,00Ah,00Bh,00Ch,00Dh,00Eh,00Fh
00000A90 1011 1213 1415 1617 1819+  		db	010h,011h,012h,013h,014h,015h,016h,017h,018h,019h,01Ah,01Bh,01Ch,01Dh,01Eh,01Fh
00000AA0 2021 2223 2425 2627 2829+  		db	020h,021h,022h,023h,024h,025h,026h,027h,028h,029h,02Ah,02Bh,02Ch,02Dh,02Eh,02Fh
00000AB0 3031 3233 3435 3637 3839+  		db	030h,031h,032h,033h,034h,035h,036h,037h,038h,039h,03Ah,03Bh,03Ch,03Dh,03Eh,03Fh
00000AC0 4041 4243 4445 4647 4849+  		db	040h,041h,042h,043h,044h,045h,046h,047h,048h,049h,04Ah,04Bh,04Ch,04Dh,04Eh,04Fh
00000AD0 5051 5253 5455 5657 5859+  		db	050h,051h,052h,053h,054h,055h,056h,057h,058h,059h,05Ah,05Bh,05Ch,05Dh,05Eh,05Fh
00000AE0 6061 6263 6465 6667 6869+  		db	060h,061h,062h,063h,064h,065h,066h,067h,068h,069h,06Ah,06Bh,06Ch,06Dh,06Eh,06Fh
00000AF0 7071 7273 7475 7677 7879+  		db	070h,071h,072h,073h,074h,075h,076h,077h,078h,079h,07Ah,07Bh,07Ch,07Dh,07Eh,07Fh
00000B00                            
00000B00 0081 8283 8485 8687 8889+  PCM_Volume2:	db	000h,081h,082h,083h,084h,085h,086h,087h,088h,089h,08Ah,08Bh,08Ch,08Dh,08Eh,08Fh
00000B10 9091 9293 9495 9697 9899+  		db	090h,091h,092h,093h,094h,095h,096h,097h,098h,099h,09Ah,09Bh,09Ch,09Dh,09Eh,09Fh
00000B20 A0A1 A2A3 A4A5 A6A7 A8A9+  		db	0A0h,0A1h,0A2h,0A3h,0A4h,0A5h,0A6h,0A7h,0A8h,0A9h,0AAh,0ABh,0ACh,0ADh,0AEh,0AFh
00000B30 B0B1 B2B3 B4B5 B6B7 B8B9+  		db	0B0h,0B1h,0B2h,0B3h,0B4h,0B5h,0B6h,0B7h,0B8h,0B9h,0BAh,0BBh,0BCh,0BDh,0BEh,0BFh
00000B40 C0C1 C2C3 C4C5 C6C7 C8C9+  		db	0C0h,0C1h,0C2h,0C3h,0C4h,0C5h,0C6h,0C7h,0C8h,0C9h,0CAh,0CBh,0CCh,0CDh,0CEh,0CFh
00000B50 D0D1 D2D3 D4D5 D6D7 D8D9+  		db	0D0h,0D1h,0D2h,0D3h,0D4h,0D5h,0D6h,0D7h,0D8h,0D9h,0DAh,0DBh,0DCh,0DDh,0DEh,0DFh
00000B60 E0E1 E2E3 E4E5 E6E7 E8E9+  		db	0E0h,0E1h,0E2h,0E3h,0E4h,0E5h,0E6h,0E7h,0E8h,0E9h,0EAh,0EBh,0ECh,0EDh,0EEh,0EFh
00000B70 F0F1 F2F3 F4F5 F6F7 F8F9+  		db	0F0h,0F1h,0F2h,0F3h,0F4h,0F5h,0F6h,0F7h,0F8h,0F9h,0FAh,0FBh,0FCh,0FDh,0FEh,0FFh
00000B80 0001 0203 0405 0607 0809+  		db	000h,001h,002h,003h,004h,005h,006h,007h,008h,009h,00Ah,00Bh,00Ch,00Dh,00Eh,00Fh
00000B90 1011 1213 1415 1617 1819+  		db	010h,011h,012h,013h,014h,015h,016h,017h,018h,019h,01Ah,01Bh,01Ch,01Dh,01Eh,01Fh
00000BA0 2021 2223 2425 2627 2829+  		db	020h,021h,022h,023h,024h,025h,026h,027h,028h,029h,02Ah,02Bh,02Ch,02Dh,02Eh,02Fh
00000BB0 3031 3233 3435 3637 3839+  		db	030h,031h,032h,033h,034h,035h,036h,037h,038h,039h,03Ah,03Bh,03Ch,03Dh,03Eh,03Fh
00000BC0 4041 4243 4445 4647 4849+  		db	040h,041h,042h,043h,044h,045h,046h,047h,048h,049h,04Ah,04Bh,04Ch,04Dh,04Eh,04Fh
00000BD0 5051 5253 5455 5657 5859+  		db	050h,051h,052h,053h,054h,055h,056h,057h,058h,059h,05Ah,05Bh,05Ch,05Dh,05Eh,05Fh
00000BE0 6061 6263 6465 6667 6869+  		db	060h,061h,062h,063h,064h,065h,066h,067h,068h,069h,06Ah,06Bh,06Ch,06Dh,06Eh,06Fh
00000BF0 7071 7273 7475 7677 7879+  		db	070h,071h,072h,073h,074h,075h,076h,077h,078h,079h,07Ah,07Bh,07Ch,07Dh,07Eh,07Fh
00000C00                            
00000C00                            ; ===========================================================================
00000C00                            ; ---------------------------------------------------------------------------
00000C00                            ; Bank interrupt preparation list
00000C00                            ; ---------------------------------------------------------------------------
00000C00                            ; ---------------------------------------------------------------------------
00000C00                            
00000C00 F202                       PCM1_PrepTable:	dw	PCM1_PreInst01
00000C02 F702                       		dw	PCM1_PreInst02
00000C04 FC02                       		dw	PCM1_PreInst03
00000C06 1803                       		dw	PCM1_PreInst04
00000C08 1D03                       		dw	PCM1_PreInst05
00000C0A 2203                       		dw	PCM1_PreInst06
00000C0C 2703                       		dw	PCM1_PreInst07
00000C0E 4303                       		dw	PCM1_PreInst08
00000C10 4803                       		dw	PCM1_PreInst09
00000C12 4D03                       		dw	PCM1_PreInst0A
00000C14 5203                       		dw	PCM1_PreInst0B
00000C16 5703                       		dw	PCM1_PreInst0C
00000C18 7303                       		dw	PCM1_PreInst0D
00000C1A 7803                       		dw	PCM1_PreInst0E
00000C1C 7D03                       		dw	PCM1_PreInst0F
00000C1E 8203                       		dw	PCM1_PreInst10
00000C20 9E03                       		dw	PCM1_PreInst11
00000C22 A303                       		dw	PCM1_PreInst12
00000C24 A803                       		dw	PCM1_PreInst13
00000C26 AD03                       		dw	PCM1_PreInst14
00000C28 B203                       		dw	PCM1_PreInst15
00000C2A CE03                       		dw	PCM1_PreInst16
00000C2C D303                       		dw	PCM1_PreInst17
00000C2E D803                       		dw	PCM1_PreInst18
00000C30 4E04                       PCM2_PrepTable:	dw	PCM2_PreInst01
00000C32 6A04                       		dw	PCM2_PreInst02
00000C34 6F04                       		dw	PCM2_PreInst03
00000C36 7404                       		dw	PCM2_PreInst04
00000C38 7904                       		dw	PCM2_PreInst05
00000C3A 7E04                       		dw	PCM2_PreInst06
00000C3C 9A04                       		dw	PCM2_PreInst07
00000C3E 9F04                       		dw	PCM2_PreInst08
00000C40 A404                       		dw	PCM2_PreInst09
00000C42 A904                       		dw	PCM2_PreInst0A
00000C44 C504                       		dw	PCM2_PreInst0B
00000C46 CA04                       		dw	PCM2_PreInst0C
00000C48 CF04                       		dw	PCM2_PreInst0D
00000C4A D404                       		dw	PCM2_PreInst0E
00000C4C D904                       		dw	PCM2_PreInst0F
00000C4E F504                       		dw	PCM2_PreInst10
00000C50 FA04                       		dw	PCM2_PreInst11
00000C52 FF04                       		dw	PCM2_PreInst12
00000C54 0405                       		dw	PCM2_PreInst13
00000C56 2005                       		dw	PCM2_PreInst14
00000C58 2505                       		dw	PCM2_PreInst15
00000C5A 2A05                       		dw	PCM2_PreInst16
00000C5C 2F05                       		dw	PCM2_PreInst17
00000C5E 3405                       		dw	PCM2_PreInst18
00000C60                            
00000C60                            ; ===========================================================================
00000C60                            ; ---------------------------------------------------------------------------
00000C60                            ; Specific variable data...
00000C60                            ; ---------------------------------------------------------------------------
00000C60                            
00000C60                            	; --- Current bank address for PCM channels ---
00000C60                            
00000C60 00                         PCM1_BankCur:	db	000h					; The current bank address of PCM 1
00000C61 00                         PCM2_BankCur:	db	000h					; The current bank address of PCM 2
00000C62                            
00000C62                            	; --- "Mute Sample" pointer into 68k memory ---
00000C62                            
00000C62 0000                       MuteSample:	dw	00000h					; sample window address
00000C64 00                         MuteBank:	db	000h					; sample bank address
00000C65 0000                       MuteSample_Rev:	dw	00000h					; sample window address
00000C67 00                         MuteBank_Rev:	db	000h					; sample bank address
00000C68                            
00000C68                            	; --- YM2612 Pointers ---
00000C68                            
00000C68 00                         YM_Buffer:	db	000h					; 00 = Z80 Buffer 1 | 68k Buffer 2 ... FF = Z80 Buffer 2 | 68k Buffer 1
00000C69                            
00000C69                            ; ===========================================================================
00000C69                            ; ---------------------------------------------------------------------------
00000C69                            ; Sample requested by 68k
00000C69                            ; ---------------------------------------------------------------------------
00000C69                            
00000C69                            	; --- PCM 1 start sample ---
00000C69                            
00000C69 0000                       PCM1_Sample:		dw	00000h					; PCM 1 requested sample
00000C6B 00                         PCM1_Bank:		db	000h					; PCM 1 requested bank
00000C6C 0000                       PCM1_Sample_Rev:	dw	00000h					; PCM 1 requested sample (reverse position)
00000C6E 00                         PCM1_Bank_Rev:		db	000h					; PCM 1 requested bank (reverse position)
00000C6F                            
00000C6F                            	; --- PCM 1 next sample ---
00000C6F                            
00000C6F 0000                       PCM1_SampleNext:	dw	00000h					; PCM 1 requested sample
00000C71 00                         PCM1_BankNext:		db	000h					; PCM 1 requested bank
00000C72 0000                       PCM1_SampleNext_Rev:	dw	00000h					; PCM 1 requested sample (reverse position)
00000C74 00                         PCM1_BankNext_Rev:	db	000h					; PCM 1 requested bank (reverse position)
00000C75                            
00000C75                            	; --- PCM 2 start sample ---
00000C75                            
00000C75 0000                       PCM2_Sample:		dw	00000h					; PCM 2 requested sample
00000C77 00                         PCM2_Bank:		db	000h					; PCM 2 requested bank
00000C78 0000                       PCM2_Sample_Rev:	dw	00000h					; PCM 2 requested sample (reverse position)
00000C7A 00                         PCM2_Bank_Rev:		db	000h					; PCM 2 requested bank (reverse position)
00000C7B                            
00000C7B                            	; --- PCM 2 next sample ---
00000C7B                            
00000C7B 0000                       PCM2_SampleNext:	dw	00000h					; PCM 2 requested sample
00000C7D 00                         PCM2_BankNext:		db	000h					; PCM 2 requested bank
00000C7E 0000                       PCM2_SampleNext_Rev:	dw	00000h					; PCM 2 requested sample (reverse position)
00000C80 00                         PCM2_BankNext_Rev:	db	000h					; PCM 2 requested bank (reverse position)
00000C81                            
00000C81                            ; ===========================================================================
00000C81                            ; ---------------------------------------------------------------------------
00000C81                            ; PCM buffer (1000h = start of cue, Make sure both buffers end in a multiple of 100)
00000C81                            ; ---------------------------------------------------------------------------
00000C81                            
00000CB0                            PCM_Buffer1:	rept	00150h
00000CB0                            		db	080h
00000CB0 8080 8080 8080 8080 8080+  		endr
00000E00                            
00000EB0                            PCM_Buffer2:	rept	00150h
00000EB0                            		db	080h
00000EB0 8080 8080 8080 8080 8080+  		endr
00001000                            
00001000                            ; ===========================================================================
00001000                            ; ---------------------------------------------------------------------------
00001000                            ; The YM2612 operator writing lists (68k writes here, z80 must flush off)
00001000                            ; ---------------------------------------------------------------------------
00001000                            
00001000                            YM_Buffer1:	rept	00400h
00001000                            		db	0FFh
00001000 FFFF FFFF FFFF FFFF FFFF+  		endr
00001400                            
00001400                            YM_Buffer2:	rept	00400h
00001400                            		db	0FFh
00001400 FFFF FFFF FFFF FFFF FFFF+  		endr
00001800                            
00001800                            ; ===========================================================================
00001800                            ; ---------------------------------------------------------------------------
00001800                            ; Overflow calculation multiplication tables
00001800                            ; ---------------------------------------------------------------------------
00001800                            
00001800                            PCM_OverflwCalc:
00001800                            
00001800                            		; --- Lower byte ---
00001800                            
00001800 0018 3048 6078 90A8 C0D8+  		db	000h,018h,030h,048h,060h,078h,090h,0A8h,0C0h,0D8h,0F0h,008h,020h,038h,050h,068h
00001810 8098 B0C8 E0F8 1028 4058+  		db	080h,098h,0B0h,0C8h,0E0h,0F8h,010h,028h,040h,058h,070h,088h,0A0h,0B8h,0D0h,0E8h
00001820 0018 3048 6078 90A8 C0D8+  		db	000h,018h,030h,048h,060h,078h,090h,0A8h,0C0h,0D8h,0F0h,008h,020h,038h,050h,068h
00001830 8098 B0C8 E0F8 1028 4058+  		db	080h,098h,0B0h,0C8h,0E0h,0F8h,010h,028h,040h,058h,070h,088h,0A0h,0B8h,0D0h,0E8h
00001840 0018 3048 6078 90A8 C0D8+  		db	000h,018h,030h,048h,060h,078h,090h,0A8h,0C0h,0D8h,0F0h,008h,020h,038h,050h,068h
00001850 8098 B0C8 E0F8 1028 4058+  		db	080h,098h,0B0h,0C8h,0E0h,0F8h,010h,028h,040h,058h,070h,088h,0A0h,0B8h,0D0h,0E8h
00001860 0018 3048 6078 90A8 C0D8+  		db	000h,018h,030h,048h,060h,078h,090h,0A8h,0C0h,0D8h,0F0h,008h,020h,038h,050h,068h
00001870 8098 B0C8 E0F8 1028 4058+  		db	080h,098h,0B0h,0C8h,0E0h,0F8h,010h,028h,040h,058h,070h,088h,0A0h,0B8h,0D0h,0E8h
00001880 0018 3048 6078 90A8 C0D8+  		db	000h,018h,030h,048h,060h,078h,090h,0A8h,0C0h,0D8h,0F0h,008h,020h,038h,050h,068h
00001890 8098 B0C8 E0F8 1028 4058+  		db	080h,098h,0B0h,0C8h,0E0h,0F8h,010h,028h,040h,058h,070h,088h,0A0h,0B8h,0D0h,0E8h
000018A0 0018 3048 6078 90A8 C0D8+  		db	000h,018h,030h,048h,060h,078h,090h,0A8h,0C0h,0D8h,0F0h,008h,020h,038h,050h,068h
000018B0 8098 B0C8 E0F8 1028 4058+  		db	080h,098h,0B0h,0C8h,0E0h,0F8h,010h,028h,040h,058h,070h,088h,0A0h,0B8h,0D0h,0E8h
000018C0 0018 3048 6078 90A8 C0D8+  		db	000h,018h,030h,048h,060h,078h,090h,0A8h,0C0h,0D8h,0F0h,008h,020h,038h,050h,068h
000018D0 8098 B0C8 E0F8 1028 4058+  		db	080h,098h,0B0h,0C8h,0E0h,0F8h,010h,028h,040h,058h,070h,088h,0A0h,0B8h,0D0h,0E8h
000018E0 0018 3048 6078 90A8 C0D8+  		db	000h,018h,030h,048h,060h,078h,090h,0A8h,0C0h,0D8h,0F0h,008h,020h,038h,050h,068h
000018F0 8098 B0C8 E0F8 1028 4058+  		db	080h,098h,0B0h,0C8h,0E0h,0F8h,010h,028h,040h,058h,070h,088h,0A0h,0B8h,0D0h,0E8h
00001900                            
00001900                            		; --- Upper byte ---
00001900                            
00001900 0000 0000 0000 0000 0000+  		db	000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,001h,001h,001h,001h,001h
00001910 0101 0101 0101 0202 0202+  		db	001h,001h,001h,001h,001h,001h,002h,002h,002h,002h,002h,002h,002h,002h,002h,002h
00001920 0303 0303 0303 0303 0303+  		db	003h,003h,003h,003h,003h,003h,003h,003h,003h,003h,003h,004h,004h,004h,004h,004h
00001930 0404 0404 0404 0505 0505+  		db	004h,004h,004h,004h,004h,004h,005h,005h,005h,005h,005h,005h,005h,005h,005h,005h
00001940 0606 0606 0606 0606 0606+  		db	006h,006h,006h,006h,006h,006h,006h,006h,006h,006h,006h,007h,007h,007h,007h,007h
00001950 0707 0707 0707 0808 0808+  		db	007h,007h,007h,007h,007h,007h,008h,008h,008h,008h,008h,008h,008h,008h,008h,008h
00001960 0909 0909 0909 0909 0909+  		db	009h,009h,009h,009h,009h,009h,009h,009h,009h,009h,009h,00Ah,00Ah,00Ah,00Ah,00Ah
00001970 0A0A 0A0A 0A0A 0B0B 0B0B+  		db	00Ah,00Ah,00Ah,00Ah,00Ah,00Ah,00Bh,00Bh,00Bh,00Bh,00Bh,00Bh,00Bh,00Bh,00Bh,00Bh
00001980 0C0C 0C0C 0C0C 0C0C 0C0C+  		db	00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Dh,00Dh,00Dh,00Dh,00Dh
00001990 0D0D 0D0D 0D0D 0E0E 0E0E+  		db	00Dh,00Dh,00Dh,00Dh,00Dh,00Dh,00Eh,00Eh,00Eh,00Eh,00Eh,00Eh,00Eh,00Eh,00Eh,00Eh
000019A0 0F0F 0F0F 0F0F 0F0F 0F0F+  		db	00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,010h,010h,010h,010h,010h
000019B0 1010 1010 1010 1111 1111+  		db	010h,010h,010h,010h,010h,010h,011h,011h,011h,011h,011h,011h,011h,011h,011h,011h
000019C0 1212 1212 1212 1212 1212+  		db	012h,012h,012h,012h,012h,012h,012h,012h,012h,012h,012h,013h,013h,013h,013h,013h
000019D0 1313 1313 1313 1414 1414+  		db	013h,013h,013h,013h,013h,013h,014h,014h,014h,014h,014h,014h,014h,014h,014h,014h
000019E0 1515 1515 1515 1515 1515+  		db	015h,015h,015h,015h,015h,015h,015h,015h,015h,015h,015h,016h,016h,016h,016h,016h
000019F0 1616 1616 1616 1717 1717+  		db	016h,016h,016h,016h,016h,016h,017h,017h,017h,017h,017h,017h,017h,017h,017h,017h
00001A00                            
00001A00                            ; ===========================================================================
00001A00                            ; ---------------------------------------------------------------------------
00001A00                            ; Subroutine to change a channel's volume table
00001A00                            ; ---------------------------------------------------------------------------
00001A00                            
00001A00                            PCM_VolumeControl:
00001A06                            
00001A1B                            
00001A1B                            PCM1_NoVolume:
00001A1B                            
00001A30                            
00001A30                            PCM2_NoVolume:
00001A31 37                         		scf					; 04	; set carry flag
00001A35                            
00001A35                            ; ---------------------------------------------------------------------------
00001A35                            ; The volume changing itself
00001A35                            ; ---------------------------------------------------------------------------
00001A35                            
00001A35                            SwitchVolume:
00001A35                            
00001A35                            ; ---------------------------------------------------------------------------
00001A35                            ; Software version of volume table (This is slower to process but will save
00001A35                            ; 8000 bytes of ROM space).  It'll also cause chopping in the sample playback
00001A35                            ; ---------------------------------------------------------------------------
00001A35                            
00001A35                            ;		ld	b,a				; 04	; store volume
00001A35                            ;		zneg					; 08	; convert volume to 00 - 80 (mute - loud)
00001A35                            ;		zadd	a,080h				; 07	; ''
00001A35                            ;		zadd	a,a				; 04	; shift MSB into carry
00001A35                            ;		ld	(SV_Fraction+001h),a		; 13	; store fraction
00001A35                            ;		sbc	a,a				; 04	; get only the carry (for quotient)
00001A35                            ;		zneg					; 08	; ''
00001A35                            ;		ld	c,a				; 04	; store quotient in c
00001A35                            ;		ld	hl,00000h			; 10	; reset current fraction/dividend
00001A35                            ;		ld	a,b				; 04	; reload volume
00001A35                            ;		zadd	a,080h				; 07	; rotate starting volume
00001A35                            ;SV_Fraction:	ld	b,000h				; 07	; set fraction/dividend
00001A35                            ;
00001A35                            ;SV_SetNormal:
00001A35                            ;		ld	(de),a				; 07	; save to table
00001A35                            ;		zadd	hl,bc 				; 11	; add fraction/dividend
00001A35                            ;		adc	a,c				; 04	; add carry to quotient
00001A35                            ;		inc	e				; 04	; advance table
00001A35                            ;		jp	nz,SV_SetNormal			; 10	; repeat until the table is finished (should reach 100)
00001A35                            ;
00001A35                            ;SV_Return:	jp	00000h				; 10	; return
00001A35                            
00001A35                            ; ---------------------------------------------------------------------------
00001A35                            
00001A46                            
00001A46                            	; --- Non-flush version ---
00001A46                            
00001A55                            
00001A55                            SV_NoMute:
00001A5A                            
00001A5A                            SV_LoadVolume:
00001A5A                            		rept	008h
00001A5A                            		ldi					; 16	; copy volume bytes over
00001A5A EDA0 EDA0 EDA0 EDA0 EDA0+  		endr
00001A6E                            
00001A6E                            	; --- Flush version ---
00001A6E                            
00001A6E                            SV_Flush:
00001A79 D9                         			exx					; 04	; switch registers
00001A8D D9                         			exx					; 04	; switch registers
00001A91                            
00001A91                            SVF_NoMute:
00001A96                            
00001A96                            SVF_LoadVolume:
00001A96 D9                         			exx					; 04	; switch registers
00001AAA D9                         			exx					; 04	; switch registers
00001AAB                            
00001AAB                            SVF_StartVolume:
00001AAB                            		rept	008h
00001AAB                            		ldi					; 16	; copy volume bytes over
00001AAB EDA0 EDA0 EDA0 EDA0 EDA0+  		endr
00001ABB D9                         			exx					; 04	; switch registers
00001ACF D9                         			exx					; 04	; switch registers
00001AD0                            		rept	008h
00001AD0                            		ldi					; 16	; copy volume bytes over
00001AD0 EDA0 EDA0 EDA0 EDA0 EDA0+  		endr
00001AE2 D9                         			exx					; 04	; switch registers
00001AF1 D9                         			exx					; 04	; switch registers
00001AFC                            
00001AFC                            ; ===========================================================================
00001AFC                            ; ---------------------------------------------------------------------------
00001AFC                            ; Switching a channel's bank address
00001AFC                            ; ---------------------------------------------------------------------------
00001AFC                            ;		ld	hl,PCM1_BankCur			; 10	; address of bank ID
00001AFC                            ;		ld	de,PCM1_Switch			; 10	; load PCM switch list to edit
00001AFC                            ;		ld	a,(PCM1_PitchQuo+001h)		; 13	; load pitch quotient
00001AFC                            ;		call	SwitchBank			; 17	; change the bank address
00001AFC                            ; ---------------------------------------------------------------------------
00001AFC                            ;		ld	a,(PCM1_BankCur)		; 13	; load bank ID
00001AFC                            ;		ld	de,PCM1_Switch			; 10	; load PCM switch list to edit
00001AFC                            ;		call	SetBank				; 17	; set bank address
00001AFC                            ; ---------------------------------------------------------------------------
00001AFC                            
00001AFC                            SwitchBank:
00001B03                            
00001B03                            SetBank:
00001B06                            	rept	008h
00001B06                            		xor	a				; 04	; clear a
00001B06                            		rrc	l				; 08	; shift bit into carry
00001B06                            		adc	a,h				; 04	; set instruction bits (with carry register bit)
00001B06                            		ld	(de),a				; 07	; write instruction
00001B06                            		inc	e	; WARNING (see comment)	; 04	; advance to next instruction (ONLY WORKS IF THE INSTRUCTIONS DON'T CROSS A 100 BYTE BOUNDARY, please align)
00001B37                            
00001B37                            ; ===========================================================================
00001B37                            ; ---------------------------------------------------------------------------
00001B37                            ; Warning stuff
00001B37                            ; ---------------------------------------------------------------------------
00001B37                            
00001B37                            
00001B37                            
00001B37                            ; ===========================================================================
00001B37                            ; ===========================================================================
0007668A =00000000                M z80prg	=	0
0007668A                          M 	mexit
0007668A                            
0007668A                            ; ===========================================================================
0007668A                            	opt ae+
0007668A                            		include	"ErrorDebugger/ErrorHandler.asm"
0007668A                            
0007668A                            ; ===============================================================
0007668A                            ; ---------------------------------------------------------------
0007668A                            ; Error handling and debugging modules
0007668A                            ; 2016-2017, Vladikcomper
0007668A                            ; ---------------------------------------------------------------
0007668A                            ; Error handler functions and calls
0007668A                            ; ---------------------------------------------------------------
0007668A                            
0007668A                            ; ---------------------------------------------------------------
0007668A                            ; Error handler control flags
0007668A                            ; ---------------------------------------------------------------
0007668A                            
0007668A                            ; Screen appearence flags
0007668A =00000001                  _eh_address_error	equ	$01		; use for address and bus errors only (tells error handler to display additional "Address" field)
0007668A =00000002                  _eh_show_sr_usp		equ	$02		; displays SR and USP registers content on error screen
0007668A                            
0007668A                            ; Advanced execution flags
0007668A                            ; WARNING! For experts only, DO NOT USES them unless you know what you're doing
0007668A =00000020                  _eh_return			equ	$20
0007668A =00000040                  _eh_enter_console	equ	$40
0007668A =00000080                  _eh_align_offset	equ	$80
0007668A                            
0007668A                            ; ---------------------------------------------------------------
0007668A                            ; Errors vector table
0007668A                            ; ---------------------------------------------------------------
0007668A                            
0007668A                            ; Default screen configuration
0007668A =00000000                  _eh_default			equ	0 ;_eh_show_sr_usp
0007668A                            
0007668A                            ; ---------------------------------------------------------------
0007668A                            BusError:
0007668A                            	__ErrorMessage "BUS ERROR", _eh_default|_eh_address_error
0007668A                          M 	__fstring_generateargumentscode	"BUS ERROR"
0007668A =00000000                M 	__pos:	set instr("BUS ERROR",'%<')
0007668A =00000000                M 	__stack:set	0
0007668A =00000000                M 	__sp:	set 0
0007668A                          M 	while	(__pos)
0007668A                          M 	rept	__stack
0007668A 4EB9 0000 0000           M 	jsr	errorhandler
00076690                          M 	__fstring_generatedecodedstring	"BUS ERROR"
00076690 =00000001                M 	__lpos:	set 1
00076690 =00000000                M 	__pos:	set instr("BUS ERROR",'%<')
00076690                          M 	while	(__pos)
00076690                          M 	__substr:	substr __lpos,,"BUS ERROR"
00076690 4255 5320 4552 524F 52   M 	dc.b	"BUS ERROR"
00076699 00                       M 	dc.b	0
0007669A 01                       M 	dc.b	_eh_default|_eh_address_error+0
0007669C 00                       M 	even
0007669C                            
0007669C                            AddressError:
0007669C                            	__ErrorMessage "ADDRESS ERROR", _eh_default|_eh_address_error
0007669C                          M 	__fstring_generateargumentscode	"ADDRESS ERROR"
0007669C =00000000                M 	__pos:	set instr("ADDRESS ERROR",'%<')
0007669C =00000000                M 	__stack:set	0
0007669C =00000000                M 	__sp:	set 0
0007669C                          M 	while	(__pos)
0007669C                          M 	rept	__stack
0007669C 4EB9 0000 0000           M 	jsr	errorhandler
000766A2                          M 	__fstring_generatedecodedstring	"ADDRESS ERROR"
000766A2 =00000001                M 	__lpos:	set 1
000766A2 =00000000                M 	__pos:	set instr("ADDRESS ERROR",'%<')
000766A2                          M 	while	(__pos)
000766A2                          M 	__substr:	substr __lpos,,"ADDRESS ERROR"
000766A2 4144 4452 4553 5320 4552+M 	dc.b	"ADDRESS ERROR"
000766AF 00                       M 	dc.b	0
000766B0 01                       M 	dc.b	_eh_default|_eh_address_error+0
000766B2 00                       M 	even
000766B2                            
000766B2                            IllegalInstr:
000766B2                            	__ErrorMessage "ILLEGAL INSTRUCTION", _eh_default
000766B2                          M 	__fstring_generateargumentscode	"ILLEGAL INSTRUCTION"
000766B2 =00000000                M 	__pos:	set instr("ILLEGAL INSTRUCTION",'%<')
000766B2 =00000000                M 	__stack:set	0
000766B2 =00000000                M 	__sp:	set 0
000766B2                          M 	while	(__pos)
000766B2                          M 	rept	__stack
000766B2 4EB9 0000 0000           M 	jsr	errorhandler
000766B8                          M 	__fstring_generatedecodedstring	"ILLEGAL INSTRUCTION"
000766B8 =00000001                M 	__lpos:	set 1
000766B8 =00000000                M 	__pos:	set instr("ILLEGAL INSTRUCTION",'%<')
000766B8                          M 	while	(__pos)
000766B8                          M 	__substr:	substr __lpos,,"ILLEGAL INSTRUCTION"
000766B8 494C 4C45 4741 4C20 494E+M 	dc.b	"ILLEGAL INSTRUCTION"
000766CB 00                       M 	dc.b	0
000766CC 00                       M 	dc.b	_eh_default+0
000766CE 00                       M 	even
000766CE                            
000766CE                            ZeroDivide:
000766CE                            	__ErrorMessage "ZERO DIVIDE", _eh_default
000766CE                          M 	__fstring_generateargumentscode	"ZERO DIVIDE"
000766CE =00000000                M 	__pos:	set instr("ZERO DIVIDE",'%<')
000766CE =00000000                M 	__stack:set	0
000766CE =00000000                M 	__sp:	set 0
000766CE                          M 	while	(__pos)
000766CE                          M 	rept	__stack
000766CE 4EB9 0000 0000           M 	jsr	errorhandler
000766D4                          M 	__fstring_generatedecodedstring	"ZERO DIVIDE"
000766D4 =00000001                M 	__lpos:	set 1
000766D4 =00000000                M 	__pos:	set instr("ZERO DIVIDE",'%<')
000766D4                          M 	while	(__pos)
000766D4                          M 	__substr:	substr __lpos,,"ZERO DIVIDE"
000766D4 5A45 524F 2044 4956 4944+M 	dc.b	"ZERO DIVIDE"
000766DF 00                       M 	dc.b	0
000766E0 00                       M 	dc.b	_eh_default+0
000766E2 00                       M 	even
000766E2                            
000766E2                            ChkInstr:
000766E2                            	__ErrorMessage "CHK INSTRUCTION", _eh_default
000766E2                          M 	__fstring_generateargumentscode	"CHK INSTRUCTION"
000766E2 =00000000                M 	__pos:	set instr("CHK INSTRUCTION",'%<')
000766E2 =00000000                M 	__stack:set	0
000766E2 =00000000                M 	__sp:	set 0
000766E2                          M 	while	(__pos)
000766E2                          M 	rept	__stack
000766E2 4EB9 0000 0000           M 	jsr	errorhandler
000766E8                          M 	__fstring_generatedecodedstring	"CHK INSTRUCTION"
000766E8 =00000001                M 	__lpos:	set 1
000766E8 =00000000                M 	__pos:	set instr("CHK INSTRUCTION",'%<')
000766E8                          M 	while	(__pos)
000766E8                          M 	__substr:	substr __lpos,,"CHK INSTRUCTION"
000766E8 4348 4B20 494E 5354 5255+M 	dc.b	"CHK INSTRUCTION"
000766F7 00                       M 	dc.b	0
000766F8 00                       M 	dc.b	_eh_default+0
000766FA 00                       M 	even
000766FA                            
000766FA                            TrapvInstr:
000766FA                            	__ErrorMessage "TRAPV INSTRUCTION", _eh_default
000766FA                          M 	__fstring_generateargumentscode	"TRAPV INSTRUCTION"
000766FA =00000000                M 	__pos:	set instr("TRAPV INSTRUCTION",'%<')
000766FA =00000000                M 	__stack:set	0
000766FA =00000000                M 	__sp:	set 0
000766FA                          M 	while	(__pos)
000766FA                          M 	rept	__stack
000766FA 4EB9 0000 0000           M 	jsr	errorhandler
00076700                          M 	__fstring_generatedecodedstring	"TRAPV INSTRUCTION"
00076700 =00000001                M 	__lpos:	set 1
00076700 =00000000                M 	__pos:	set instr("TRAPV INSTRUCTION",'%<')
00076700                          M 	while	(__pos)
00076700                          M 	__substr:	substr __lpos,,"TRAPV INSTRUCTION"
00076700 5452 4150 5620 494E 5354+M 	dc.b	"TRAPV INSTRUCTION"
00076711 00                       M 	dc.b	0
00076712 00                       M 	dc.b	_eh_default+0
00076714 00                       M 	even
00076714                            
00076714                            PrivilegeViol:
00076714                            	__ErrorMessage "PRIVILEGE VIOLATION", _eh_default
00076714                          M 	__fstring_generateargumentscode	"PRIVILEGE VIOLATION"
00076714 =00000000                M 	__pos:	set instr("PRIVILEGE VIOLATION",'%<')
00076714 =00000000                M 	__stack:set	0
00076714 =00000000                M 	__sp:	set 0
00076714                          M 	while	(__pos)
00076714                          M 	rept	__stack
00076714 4EB9 0000 0000           M 	jsr	errorhandler
0007671A                          M 	__fstring_generatedecodedstring	"PRIVILEGE VIOLATION"
0007671A =00000001                M 	__lpos:	set 1
0007671A =00000000                M 	__pos:	set instr("PRIVILEGE VIOLATION",'%<')
0007671A                          M 	while	(__pos)
0007671A                          M 	__substr:	substr __lpos,,"PRIVILEGE VIOLATION"
0007671A 5052 4956 494C 4547 4520+M 	dc.b	"PRIVILEGE VIOLATION"
0007672D 00                       M 	dc.b	0
0007672E 00                       M 	dc.b	_eh_default+0
00076730 00                       M 	even
00076730                            
00076730                            Trace:
00076730                            	__ErrorMessage "TRACE", _eh_default
00076730                          M 	__fstring_generateargumentscode	"TRACE"
00076730 =00000000                M 	__pos:	set instr("TRACE",'%<')
00076730 =00000000                M 	__stack:set	0
00076730 =00000000                M 	__sp:	set 0
00076730                          M 	while	(__pos)
00076730                          M 	rept	__stack
00076730 4EB9 0000 0000           M 	jsr	errorhandler
00076736                          M 	__fstring_generatedecodedstring	"TRACE"
00076736 =00000001                M 	__lpos:	set 1
00076736 =00000000                M 	__pos:	set instr("TRACE",'%<')
00076736                          M 	while	(__pos)
00076736                          M 	__substr:	substr __lpos,,"TRACE"
00076736 5452 4143 45             M 	dc.b	"TRACE"
0007673B 00                       M 	dc.b	0
0007673C 00                       M 	dc.b	_eh_default+0
0007673E 00                       M 	even
0007673E                            
0007673E                            Line1010Emu:
0007673E                            	__ErrorMessage "LINE 1010 EMULATOR", _eh_default
0007673E                          M 	__fstring_generateargumentscode	"LINE 1010 EMULATOR"
0007673E =00000000                M 	__pos:	set instr("LINE 1010 EMULATOR",'%<')
0007673E =00000000                M 	__stack:set	0
0007673E =00000000                M 	__sp:	set 0
0007673E                          M 	while	(__pos)
0007673E                          M 	rept	__stack
0007673E 4EB9 0000 0000           M 	jsr	errorhandler
00076744                          M 	__fstring_generatedecodedstring	"LINE 1010 EMULATOR"
00076744 =00000001                M 	__lpos:	set 1
00076744 =00000000                M 	__pos:	set instr("LINE 1010 EMULATOR",'%<')
00076744                          M 	while	(__pos)
00076744                          M 	__substr:	substr __lpos,,"LINE 1010 EMULATOR"
00076744 4C49 4E45 2031 3031 3020+M 	dc.b	"LINE 1010 EMULATOR"
00076756 00                       M 	dc.b	0
00076757 00                       M 	dc.b	_eh_default+0
00076758                          M 	even
00076758                            
00076758                            Line1111Emu:
00076758                            	__ErrorMessage "LINE 1111 EMULATOR", _eh_default
00076758                          M 	__fstring_generateargumentscode	"LINE 1111 EMULATOR"
00076758 =00000000                M 	__pos:	set instr("LINE 1111 EMULATOR",'%<')
00076758 =00000000                M 	__stack:set	0
00076758 =00000000                M 	__sp:	set 0
00076758                          M 	while	(__pos)
00076758                          M 	rept	__stack
00076758 4EB9 0000 0000           M 	jsr	errorhandler
0007675E                          M 	__fstring_generatedecodedstring	"LINE 1111 EMULATOR"
0007675E =00000001                M 	__lpos:	set 1
0007675E =00000000                M 	__pos:	set instr("LINE 1111 EMULATOR",'%<')
0007675E                          M 	while	(__pos)
0007675E                          M 	__substr:	substr __lpos,,"LINE 1111 EMULATOR"
0007675E 4C49 4E45 2031 3131 3120+M 	dc.b	"LINE 1111 EMULATOR"
00076770 00                       M 	dc.b	0
00076771 00                       M 	dc.b	_eh_default+0
00076772                          M 	even
00076772                            
00076772                            ErrorExcept:
00076772                            	__ErrorMessage "ERROR EXCEPTION", _eh_default
00076772                          M 	__fstring_generateargumentscode	"ERROR EXCEPTION"
00076772 =00000000                M 	__pos:	set instr("ERROR EXCEPTION",'%<')
00076772 =00000000                M 	__stack:set	0
00076772 =00000000                M 	__sp:	set 0
00076772                          M 	while	(__pos)
00076772                          M 	rept	__stack
00076772 4EB9 0000 0000           M 	jsr	errorhandler
00076778                          M 	__fstring_generatedecodedstring	"ERROR EXCEPTION"
00076778 =00000001                M 	__lpos:	set 1
00076778 =00000000                M 	__pos:	set instr("ERROR EXCEPTION",'%<')
00076778                          M 	while	(__pos)
00076778                          M 	__substr:	substr __lpos,,"ERROR EXCEPTION"
00076778 4552 524F 5220 4558 4345+M 	dc.b	"ERROR EXCEPTION"
00076787 00                       M 	dc.b	0
00076788 00                       M 	dc.b	_eh_default+0
0007678A 00                       M 	even
0007678A                            
0007678A                            ErrorTrap:
0007678A                            	__ErrorMessage "ERROR TRAP", _eh_default
0007678A                          M 	__fstring_generateargumentscode	"ERROR TRAP"
0007678A =00000000                M 	__pos:	set instr("ERROR TRAP",'%<')
0007678A =00000000                M 	__stack:set	0
0007678A =00000000                M 	__sp:	set 0
0007678A                          M 	while	(__pos)
0007678A                          M 	rept	__stack
0007678A 4EB9 0000 0000           M 	jsr	errorhandler
00076790                          M 	__fstring_generatedecodedstring	"ERROR TRAP"
00076790 =00000001                M 	__lpos:	set 1
00076790 =00000000                M 	__pos:	set instr("ERROR TRAP",'%<')
00076790                          M 	while	(__pos)
00076790                          M 	__substr:	substr __lpos,,"ERROR TRAP"
00076790 4552 524F 5220 5452 4150 M 	dc.b	"ERROR TRAP"
0007679A 00                       M 	dc.b	0
0007679B 00                       M 	dc.b	_eh_default+0
0007679C                          M 	even
0007679C                            
0007679C                            
0007679C                            
0007679C                            ; ---------------------------------------------------------------
0007679C                            ; Import error handler global functions
0007679C                            ; ---------------------------------------------------------------
0007679C                            
0007679C                            ErrorHandler.__global__error_initconsole equ ErrorHandler+$146
0007679C                            ErrorHandler.__global__errorhandler_setupvdp equ ErrorHandler+$234
0007679C                            ErrorHandler.__global__console_loadpalette equ ErrorHandler+$A1C
0007679C                            ErrorHandler.__global__console_setposasxy_stack equ ErrorHandler+$A58
0007679C                            ErrorHandler.__global__console_setposasxy equ ErrorHandler+$A5E
0007679C                            ErrorHandler.__global__console_getposasxy equ ErrorHandler+$A8A
0007679C                            ErrorHandler.__global__console_startnewline equ ErrorHandler+$AAC
0007679C                            ErrorHandler.__global__console_setbasepattern equ ErrorHandler+$AD4
0007679C                            ErrorHandler.__global__console_setwidth equ ErrorHandler+$AE8
0007679C                            ErrorHandler.__global__console_writeline_withpattern equ ErrorHandler+$AFE
0007679C                            ErrorHandler.__global__console_writeline equ ErrorHandler+$B00
0007679C                            ErrorHandler.__global__console_write equ ErrorHandler+$B04
0007679C                            ErrorHandler.__global__console_writeline_formatted equ ErrorHandler+$BB0
0007679C                            ErrorHandler.__global__console_write_formatted equ ErrorHandler+$BB4
0007679C                            
0007679C                            
0007679C                            ; ---------------------------------------------------------------
0007679C                            ; Error handler external functions (compiled only when used)
0007679C                            ; ---------------------------------------------------------------
0007679C                            
0007679C                            
0007679C                            
0007679C                            ErrorHandler.__extern__console_only:
0007679C 46FC 2700 4FEF FFF2 48E7+  	dc.l	$46FC2700, $4FEFFFF2, $48E7FFFE, $47EF003C
000767AC 4EBA 0000                  	jsr		ErrorHandler.__global__errorhandler_setupvdp(pc)
000767B0 4EBA 0000                  	jsr		ErrorHandler.__global__error_initconsole(pc)
000767B4 4CDF 7FFF 487A 0008 2F2F+  	dc.l	$4CDF7FFF, $487A0008, $2F2F0012, $4E7560FE
000767C4                            
000767C4                            
000767C4                            ; ---------------------------------------------------------------
000767C4                            ; Include error handler binary module
000767C4                            ; ---------------------------------------------------------------
000767C4                            
000767C4                            ErrorHandler:
000767C4                            	incbin	"ErrorDebugger/ErrorHandler.bin"
000773C4                            
000773C4                            ; ---------------------------------------------------------------
000773C4                            ; WARNING!
000773C4                            ;	DO NOT put any data from now on! DO NOT use ROM padding!
000773C4                            ;	Symbol data should be appended here after ROM is compiled
000773C4                            ;	by ConvSym utility, otherwise debugger modules won't be able
000773C4                            ;	to resolve symbol names.
000773C4                            ; ---------------------------------------------------------------
